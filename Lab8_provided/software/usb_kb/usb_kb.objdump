
usb_kb.elf:     file format elf32-littlenios2
usb_kb.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x040001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x00011cec memsz 0x00011cec flags r-x
    LOAD off    0x00012d0c vaddr 0x04011d0c paddr 0x040137f8 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x000152e4 vaddr 0x040152e4 paddr 0x040152e4 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04000000  04000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000110d8  040001bc  040001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000a78  04011294  04011294  00012294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  04011d0c  040137f8  00012d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  040152e4  040152e4  000152e4  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  000147f8  2**0
                  CONTENTS
  7 .sdram        00000000  04015444  04015444  000147f8  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000147f8  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000d28  00000000  00000000  00014820  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00023637  00000000  00000000  00015548  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00008f1d  00000000  00000000  00038b7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b105  00000000  00000000  00041a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000022c4  00000000  00000000  0004cba4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003328  00000000  00000000  0004ee68  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00016d4c  00000000  00000000  00052190  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  00068edc  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001370  00000000  00000000  00068f20  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0006d5c7  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0006d5ca  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0006d5d6  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0006d5d7  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0006d5d8  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0006d5dc  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0006d5e0  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0006d5e4  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0006d5ef  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0006d5fa  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  0006d605  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000002f  00000000  00000000  0006d610  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
040001bc l    d  .text	00000000 .text
04011294 l    d  .rodata	00000000 .rodata
04011d0c l    d  .rwdata	00000000 .rwdata
040152e4 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
04015444 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../usb_kb_bsp//obj/HAL/src/crt0.o
040001f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
04000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 main.c
040152e4 l     O .bss	00000002 ctl_reg.3317
040152e6 l     O .bss	00000002 no_device.3318
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
04011a52 l     O .rodata	00000010 zeroes.4181
04011a62 l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
04004500 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
040060a8 l     F .text	00000008 __fp_lock
040060b0 l     F .text	00000008 __fp_unlock
040060c4 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
04011d0c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
04012150 l     O .rwdata	00000020 lc_ctype_charset
04012130 l     O .rwdata	00000020 lc_message_charset
04012170 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
04011a94 l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
040095f4 l     F .text	000000fc __sprint_r.part.0
04011bc8 l     O .rodata	00000010 blanks.4125
04011bb8 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0400c0f8 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0400ea48 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0400eb70 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0400eb9c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0400eca4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0400eda0 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0400ee84 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0400f068 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
040137e8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0400f31c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0400f46c l     F .text	00000038 alt_dev_reg
04012758 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0400f748 l     F .text	00000204 altera_avalon_jtag_uart_irq
0400f94c l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
04010220 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
040106b8 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
04010810 l     F .text	00000050 alt_get_errno
04010860 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
04008c34 g     F .text	00000074 _mprec_log10
04008d20 g     F .text	0000008c __any_on
0400b020 g     F .text	00000054 _isatty_r
04011aa0 g     O .rodata	00000028 __mprec_tinytens
0400efb0 g     F .text	00000078 alt_main
0400214c g     F .text	000000b8 _puts_r
04015344 g     O .bss	00000100 alt_irq
0400b074 g     F .text	0000005c _lseek_r
040137f8 g       *ABS*	00000000 __flash_rwdata_start
0400d468 g     F .text	00000084 .hidden __eqdf2
04015444 g       *ABS*	00000000 __alt_heap_start
04002110 g     F .text	0000003c printf
0400b29c g     F .text	0000009c _wcrtomb_r
040094ec g     F .text	0000005c __sseek
0400640c g     F .text	00000010 __sinit
0400b12c g     F .text	00000154 __swbuf_r
04006e84 g     F .text	0000007c _setlocale_r
04006264 g     F .text	00000078 __sfmoreglue
0400f048 g     F .text	00000020 __malloc_unlock
04001fe8 g     F .text	00000080 UsbGetRetryCnt
04007ae4 g     F .text	0000015c memmove
040001f8 g     F .text	00000050 IO_init
040063f4 g     F .text	00000018 _cleanup
04007d64 g     F .text	000000a8 _Balloc
0400d4ec g     F .text	000000e0 .hidden __gtdf2
00000000  w      *UND*	00000000 __errno
04000000 g     F .entry	0000000c __reset
04000020 g       *ABS*	00000000 __flash_exceptions_start
0400afc8 g     F .text	00000058 _fstat_r
04015300 g     O .bss	00000004 errno
04009468 g     F .text	00000008 __seofread
04015308 g     O .bss	00000004 alt_argv
0401b7b8 g       *ABS*	00000000 _gp
0400f2ec g     F .text	00000030 usleep
040125d8 g     O .rwdata	00000180 alt_fd_list
04010c70 g     F .text	00000090 alt_find_dev
040079ac g     F .text	00000138 memcpy
040060b8 g     F .text	0000000c _cleanup_r
0400e870 g     F .text	000000d0 .hidden __floatsidf
04010798 g     F .text	00000078 alt_io_redirect
0400d5cc g     F .text	000000e0 .hidden __ltdf2
04011294 g       *ABS*	00000000 __DTOR_END__
04002204 g     F .text	00000014 puts
0400934c g     F .text	00000074 __fpclassifyd
04008b90 g     F .text	000000a4 __ratio
0400ab2c g     F .text	00000024 __vfiprintf_internal
0400fb48 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
040020e4 g     F .text	0000002c _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0400c214 g     F .text	00000008 .hidden __udivsi3
0400ecf4 g     F .text	000000ac isatty
04011af0 g     O .rodata	000000c8 __mprec_tens
04006f00 g     F .text	0000000c __locale_charset
040152fc g     O .bss	00000004 __malloc_top_pad
04001688 g     F .text	00000264 UsbGetConfigDesc2
040137c0 g     O .rwdata	00000004 __mb_cur_max
04006f30 g     F .text	0000000c _localeconv_r
0400818c g     F .text	0000003c __i2b
04006870 g     F .text	000004a4 __sfvwrite_r
040093c0 g     F .text	00000054 _sbrk_r
0400b0d0 g     F .text	0000005c _read_r
040137e0 g     O .rwdata	00000004 alt_max_fd
0400acd8 g     F .text	00000100 _fclose_r
04006078 g     F .text	00000030 fflush
040152f8 g     O .bss	00000004 __malloc_max_sbrked_mem
0400c24c g     F .text	0000089c .hidden __adddf3
04008938 g     F .text	0000011c __b2d
0400badc g     F .text	0000061c .hidden __umoddi3
0400eed4 g     F .text	000000dc lseek
040137b8 g     O .rwdata	00000004 _global_impure_ptr
04008dac g     F .text	000005a0 _realloc_r
04015444 g       *ABS*	00000000 __bss_end
040105c8 g     F .text	000000f0 alt_iic_isr_register
04010b4c g     F .text	00000104 alt_tick
0400b49c g     F .text	00000640 .hidden __udivdi3
0400adec g     F .text	00000184 _fputwc_r
04011ac8 g     O .rodata	00000028 __mprec_bigtens
04007f70 g     F .text	00000104 __s2b
0400e940 g     F .text	000000a4 .hidden __floatunsidf
040086e0 g     F .text	00000060 __mcmp
040010e8 g     F .text	000000fc UsbSetAddress
0400642c g     F .text	00000018 __fp_lock_all
0401057c g     F .text	0000004c alt_ic_irq_enabled
04010ab4 g     F .text	00000098 alt_alarm_stop
04015310 g     O .bss	00000004 alt_irq_active
040000ec g     F .exceptions	000000d0 alt_irq_handler
040125b0 g     O .rwdata	00000028 alt_dev_null
04010204 g     F .text	0000001c alt_dcache_flush_all
04008074 g     F .text	00000068 __hi0bits
04000274 g     F .text	00000028 IO_read
0400e7e8 g     F .text	00000088 .hidden __fixdfsi
040137f8 g       *ABS*	00000000 __ram_rwdata_end
040137d8 g     O .rwdata	00000008 alt_dev_list
0400f36c g     F .text	00000100 write
04011d0c g       *ABS*	00000000 __ram_rodata_end
0400ebec g     F .text	000000b8 fstat
0400d5cc g     F .text	000000e0 .hidden __ledf2
04002068 g     F .text	0000007c UsbPrintMem
04008458 g     F .text	00000140 __pow5mult
04009708 g     F .text	00001424 ___vfiprintf_internal_r
040152f0 g     O .bss	00000004 __nlocale_changed
0400c21c g     F .text	00000008 .hidden __umodsi3
04015444 g       *ABS*	00000000 end
0400f684 g     F .text	000000c4 altera_avalon_jtag_uart_init
04011294 g       *ABS*	00000000 __CTOR_LIST__
06000000 g       *ABS*	00000000 __alt_stack_pointer
0400e9e4 g     F .text	00000064 .hidden __clzsi2
0400fd54 g     F .text	00000218 altera_avalon_jtag_uart_write
0400641c g     F .text	00000004 __sfp_lock_acquire
040078c4 g     F .text	000000e8 memchr
040022b0 g     F .text	000020fc ___vfprintf_internal_r
040019e8 g     F .text	000000fc UsbClassRequest
04006580 g     F .text	000002f0 _free_r
04006f0c g     F .text	00000010 __locale_mb_cur_max
040110c4 g     F .text	00000194 __call_exitprocs
040152ec g     O .bss	00000004 __mlocale_changed
040137c4 g     O .rwdata	00000004 __malloc_sbrk_base
040001bc g     F .text	0000003c _start
04015314 g     O .bss	00000004 _alt_tick_rate
04008598 g     F .text	00000148 __lshift
04015318 g     O .bss	00000004 _alt_nticks
0400f0b8 g     F .text	00000104 read
0400f4d8 g     F .text	00000048 alt_sys_init
04010fb0 g     F .text	00000114 __register_exitproc
040081c8 g     F .text	00000290 __multiply
0400f9f4 g     F .text	00000068 altera_avalon_jtag_uart_close
0400c224 g     F .text	00000028 .hidden __mulsi3
04011d0c g       *ABS*	00000000 __ram_rwdata_start
04011294 g       *ABS*	00000000 __ram_rodata_start
0401531c g     O .bss	00000028 __malloc_current_mallinfo
04008a54 g     F .text	0000013c __d2b
040011e4 g     F .text	00000144 UsbGetDeviceDesc1
0400f520 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
04010e14 g     F .text	000000d4 alt_get_fd
040100ac g     F .text	00000158 alt_busy_sleep
0400abac g     F .text	00000054 _close_r
04010f34 g     F .text	0000007c memcmp
0400f5e0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
04015444 g       *ABS*	00000000 __alt_stack_base
0400f630 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
040043d0 g     F .text	00000130 __swsetup_r
0400cae8 g     F .text	00000980 .hidden __divdf3
040062dc g     F .text	00000118 __sfp
04008ca8 g     F .text	00000078 __copybits
040121a8 g     O .rwdata	00000408 __malloc_av_
04006428 g     F .text	00000004 __sinit_lock_release
0400d6ac g     F .text	0000086c .hidden __muldf3
04009414 g     F .text	00000054 __sread
04001f64 g     F .text	00000084 UsbWaitTDListDone
04010d00 g     F .text	00000114 alt_find_file
04010270 g     F .text	000000a4 alt_dev_llist_insert
0400f028 g     F .text	00000020 __malloc_lock
0400f23c g     F .text	000000b0 sbrk
04005e50 g     F .text	00000228 _fflush_r
0400ac00 g     F .text	000000d8 _calloc_r
040152e4 g       *ABS*	00000000 __bss_start
04007c40 g     F .text	00000124 memset
0400029c g     F .text	00000d4c main
0401530c g     O .bss	00000004 alt_envp
040152f4 g     O .bss	00000004 __malloc_max_total_mem
0400f580 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
040018ec g     F .text	000000fc UsbSetConfig
0400b280 g     F .text	0000001c __swbuf
04009548 g     F .text	00000008 __sclose
06000000 g       *ABS*	00000000 __alt_heap_limit
0400add8 g     F .text	00000014 fclose
04004728 g     F .text	00001728 _dtoa_r
0400711c g     F .text	000007a8 _malloc_r
0400b410 g     F .text	00000030 __ascii_wctomb
040137e4 g     O .rwdata	00000004 alt_errno
04006d14 g     F .text	000000b8 _fwalk
0400c164 g     F .text	00000054 .hidden __divsi3
0400645c g     F .text	00000124 _malloc_trim_r
04001ae4 g     F .text	00000144 UsbGetHidDesc
04011294 g       *ABS*	00000000 __CTOR_END__
04009550 g     F .text	000000a4 strcmp
04011294 g       *ABS*	00000000 __flash_rodata_start
04011294 g       *ABS*	00000000 __DTOR_LIST__
0400d468 g     F .text	00000084 .hidden __nedf2
04001014 g     F .text	00000024 UsbRead
0400f4a4 g     F .text	00000034 alt_irq_init
0400f1bc g     F .text	00000080 alt_release_fd
04011bd8 g     O .rodata	00000100 .hidden __clz_tab
040152e8 g     O .bss	00000004 _PathLocale
04010ee8 g     F .text	00000014 atexit
0400ab50 g     F .text	0000005c _write_r
04006f3c g     F .text	0000001c setlocale
040137bc g     O .rwdata	00000004 _impure_ptr
04015304 g     O .bss	00000004 alt_argc
04010370 g     F .text	0000005c _do_dtors
04006f28 g     F .text	00000008 __locale_cjk_lang
04000020 g       .exceptions	00000000 alt_irq_entry
040088d8 g     F .text	00000060 __ulp
04006444 g     F .text	00000018 __fp_unlock_all
040137d0 g     O .rwdata	00000008 alt_fs_list
04001c28 g     F .text	0000033c UsbGetReportDesc
04000020 g       *ABS*	00000000 __ram_exceptions_start
04006f58 g     F .text	0000000c localeconv
040103e8 g     F .text	00000050 alt_ic_isr_register
040137f8 g       *ABS*	00000000 _edata
04015444 g       *ABS*	00000000 _end
04000fe8 g     F .text	0000002c UsbWrite
040001bc g       *ABS*	00000000 __ram_exceptions_end
0400fa5c g     F .text	000000ec altera_avalon_jtag_uart_ioctl
040104d8 g     F .text	000000a4 alt_ic_irq_disable
04009470 g     F .text	0000007c __swrite
040137c8 g     O .rwdata	00000004 __malloc_trim_threshold
04010c50 g     F .text	00000020 altera_nios2_qsys_irq_init
04006f1c g     F .text	0000000c __locale_msgcharset
04010efc g     F .text	00000038 exit
04006dcc g     F .text	000000b8 _fwalk_reent
04008740 g     F .text	00000198 __mdiff
0400c1b8 g     F .text	0000005c .hidden __modsi3
06000000 g       *ABS*	00000000 __alt_data_end
04000020 g     F .exceptions	00000000 alt_exception
04006420 g     F .text	00000004 __sfp_lock_release
04000000 g       *ABS*	00000000 __alt_mem_sdram
04000248 g     F .text	0000002c IO_write
04011258 g     F .text	0000003c _exit
0400ff6c g     F .text	00000140 alt_alarm_start
04006f64 g     F .text	000001b8 __smakebuf_r
04002218 g     F .text	00000098 strlen
04010954 g     F .text	00000160 open
0400d4ec g     F .text	000000e0 .hidden __gedf2
040137cc g     O .rwdata	00000004 __wctomb
040096f0 g     F .text	00000018 __sprint_r
040103cc g     F .text	0000001c alt_icache_flush_all
040137ec g     O .rwdata	00000004 alt_priority_mask
04010438 g     F .text	000000a0 alt_ic_irq_enable
040043ac g     F .text	00000024 __vfprintf_internal
0400b440 g     F .text	0000005c _wctomb_r
0400df18 g     F .text	000008d0 .hidden __subdf3
040080dc g     F .text	000000b0 __lo0bits
040014fc g     F .text	0000018c UsbGetConfigDesc1
040137f0 g     O .rwdata	00000008 alt_alarm_list
04010314 g     F .text	0000005c _do_ctors
04001038 g     F .text	000000b0 UsbSoftReset
0400b338 g     F .text	000000d8 wcrtomb
0400ea98 g     F .text	000000d8 close
04001328 g     F .text	000001d4 UsbGetDeviceDesc2
0400ee04 g     F .text	00000080 alt_load
0400af70 g     F .text	00000058 fputwc
00000000  w      *UND*	00000000 free
04006424 g     F .text	00000004 __sinit_lock_acquire
04007e34 g     F .text	0000013c __multadd
04007e0c g     F .text	00000028 _Bfree



Disassembly of section .entry:

04000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4000000:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 4000004:	08406f14 	ori	at,at,444
    jmp r1
 4000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

04000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000ec0 	call	40000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000306 	br	4000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 400008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)

04000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 4000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 4000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 400009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000e8:	ef80083a 	eret

040000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000ec:	defff904 	addi	sp,sp,-28
 40000f0:	dfc00615 	stw	ra,24(sp)
 40000f4:	df000515 	stw	fp,20(sp)
 40000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 40000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000100:	0005313a 	rdctl	r2,ipending
 4000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 400010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4000114:	00800044 	movi	r2,1
 4000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 400011c:	e0fffb17 	ldw	r3,-20(fp)
 4000120:	e0bffc17 	ldw	r2,-16(fp)
 4000124:	1884703a 	and	r2,r3,r2
 4000128:	10001426 	beq	r2,zero,400017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 400012c:	00810074 	movhi	r2,1025
 4000130:	1094d104 	addi	r2,r2,21316
 4000134:	e0fffd17 	ldw	r3,-12(fp)
 4000138:	180690fa 	slli	r3,r3,3
 400013c:	10c5883a 	add	r2,r2,r3
 4000140:	10c00017 	ldw	r3,0(r2)
 4000144:	00810074 	movhi	r2,1025
 4000148:	1094d104 	addi	r2,r2,21316
 400014c:	e13ffd17 	ldw	r4,-12(fp)
 4000150:	200890fa 	slli	r4,r4,3
 4000154:	1105883a 	add	r2,r2,r4
 4000158:	10800104 	addi	r2,r2,4
 400015c:	10800017 	ldw	r2,0(r2)
 4000160:	1009883a 	mov	r4,r2
 4000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 400016c:	0005313a 	rdctl	r2,ipending
 4000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4000174:	e0bfff17 	ldw	r2,-4(fp)
 4000178:	00000706 	br	4000198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 400017c:	e0bffc17 	ldw	r2,-16(fp)
 4000180:	1085883a 	add	r2,r2,r2
 4000184:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4000188:	e0bffd17 	ldw	r2,-12(fp)
 400018c:	10800044 	addi	r2,r2,1
 4000190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 4000194:	003fe106 	br	400011c <__alt_data_end+0xfe00011c>

    active = alt_irq_pending ();
 4000198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 400019c:	e0bffb17 	ldw	r2,-20(fp)
 40001a0:	103fdb1e 	bne	r2,zero,4000110 <__alt_data_end+0xfe000110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40001a4:	0001883a 	nop
}
 40001a8:	e037883a 	mov	sp,fp
 40001ac:	dfc00117 	ldw	ra,4(sp)
 40001b0:	df000017 	ldw	fp,0(sp)
 40001b4:	dec00204 	addi	sp,sp,8
 40001b8:	f800283a 	ret

Disassembly of section .text:

040001bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 40001bc:	06c18034 	movhi	sp,1536
    ori sp, sp, %lo(__alt_stack_pointer)
 40001c0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 40001c4:	06810074 	movhi	gp,1025
    ori gp, gp, %lo(_gp)
 40001c8:	d6adee14 	ori	gp,gp,47032
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 40001cc:	00810074 	movhi	r2,1025
    ori r2, r2, %lo(__bss_start)
 40001d0:	1094b914 	ori	r2,r2,21220

    movhi r3, %hi(__bss_end)
 40001d4:	00c10074 	movhi	r3,1025
    ori r3, r3, %lo(__bss_end)
 40001d8:	18d51114 	ori	r3,r3,21572

    beq r2, r3, 1f
 40001dc:	10c00326 	beq	r2,r3,40001ec <_start+0x30>

0:
    stw zero, (r2)
 40001e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 40001e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 40001e8:	10fffd36 	bltu	r2,r3,40001e0 <__alt_data_end+0xfe0001e0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 40001ec:	400ee040 	call	400ee04 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 40001f0:	400efb00 	call	400efb0 <alt_main>

040001f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 40001f4:	003fff06 	br	40001f4 <__alt_data_end+0xfe0001f4>

040001f8 <IO_init>:
#define otg_hpi_cs			(volatile char*)	OTG_HPI_CS_BASE //FOR SOME REASON CS BASE BEHAVES WEIRDLY MIGHT HAVE TO SET MANUALLY
#define otg_hpi_w			(volatile char*)	OTG_HPI_W_BASE


void IO_init(void)
{
 40001f8:	deffff04 	addi	sp,sp,-4
 40001fc:	df000015 	stw	fp,0(sp)
 4000200:	d839883a 	mov	fp,sp
	*otg_hpi_cs = 1;
 4000204:	00880404 	movi	r2,8208
 4000208:	00c00044 	movi	r3,1
 400020c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
 4000210:	00881004 	movi	r2,8256
 4000214:	00c00044 	movi	r3,1
 4000218:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
 400021c:	00880c04 	movi	r2,8240
 4000220:	00c00044 	movi	r3,1
 4000224:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
 4000228:	00881c04 	movi	r2,8304
 400022c:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
 4000230:	00881404 	movi	r2,8272
 4000234:	10000015 	stw	zero,0(r2)
}
 4000238:	e037883a 	mov	sp,fp
 400023c:	df000017 	ldw	fp,0(sp)
 4000240:	dec00104 	addi	sp,sp,4
 4000244:	f800283a 	ret

04000248 <IO_write>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
 4000248:	defffd04 	addi	sp,sp,-12
 400024c:	df000215 	stw	fp,8(sp)
 4000250:	df000204 	addi	fp,sp,8
 4000254:	2007883a 	mov	r3,r4
 4000258:	2805883a 	mov	r2,r5
 400025c:	e0fffe05 	stb	r3,-8(fp)
 4000260:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
}
 4000264:	e037883a 	mov	sp,fp
 4000268:	df000017 	ldw	fp,0(sp)
 400026c:	dec00104 	addi	sp,sp,4
 4000270:	f800283a 	ret

04000274 <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
 4000274:	defffd04 	addi	sp,sp,-12
 4000278:	df000215 	stw	fp,8(sp)
 400027c:	df000204 	addi	fp,sp,8
 4000280:	2005883a 	mov	r2,r4
 4000284:	e0bfff05 	stb	r2,-4(fp)
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	//printf("%x\n",temp);
	return temp;
 4000288:	e0bffe0b 	ldhu	r2,-8(fp)
}
 400028c:	e037883a 	mov	sp,fp
 4000290:	df000017 	ldw	fp,0(sp)
 4000294:	dec00104 	addi	sp,sp,4
 4000298:	f800283a 	ret

0400029c <main>:
//
//                                Main function
//
//----------------------------------------------------------------------------------------//
int main(void)
{
 400029c:	defff904 	addi	sp,sp,-28
 40002a0:	dfc00615 	stw	ra,24(sp)
 40002a4:	df000515 	stw	fp,20(sp)
 40002a8:	df000504 	addi	fp,sp,20
	IO_init();
 40002ac:	40001f80 	call	40001f8 <IO_init>

	alt_u16 intStat;
	alt_u16 usb_ctl_val;
	static alt_u16 ctl_reg = 0;
	static alt_u16 no_device = 0;
	alt_u16 fs_device = 0;
 40002b0:	e03ffc0d 	sth	zero,-16(fp)
	int keycode = 0;
 40002b4:	e03ffd15 	stw	zero,-12(fp)
	alt_u8 toggle = 0;
 40002b8:	e03ffb85 	stb	zero,-18(fp)
	alt_u8 data_size;
	alt_u8 hot_plug_count;
	alt_u16 code;

	printf("USB keyboard setup...\n\n");
 40002bc:	01010074 	movhi	r4,1025
 40002c0:	2104a504 	addi	r4,r4,4756
 40002c4:	40022040 	call	4002204 <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
 40002c8:	40010380 	call	4001038 <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
 40002cc:	01005104 	movi	r4,324
 40002d0:	000b883a 	mov	r5,zero
 40002d4:	4000fe80 	call	4000fe8 <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
 40002d8:	01302414 	movui	r4,49296
 40002dc:	017fffd4 	movui	r5,65535
 40002e0:	4000fe80 	call	4000fe8 <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
 40002e4:	01006d04 	movi	r4,436
 40002e8:	01409604 	movi	r5,600
 40002ec:	4000fe80 	call	4000fe8 <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
 40002f0:	00811004 	movi	r2,1088
 40002f4:	e0bffb0d 	sth	r2,-20(fp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
 40002f8:	e0bffb0b 	ldhu	r2,-20(fp)
 40002fc:	01005084 	movi	r4,322
 4000300:	100b883a 	mov	r5,r2
 4000304:	4000fe80 	call	4000fe8 <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
 4000308:	00808404 	movi	r2,528
 400030c:	e0bffe0d 	sth	r2,-8(fp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
 4000310:	e0bffe0b 	ldhu	r2,-8(fp)
 4000314:	01302314 	movui	r4,49292
 4000318:	100b883a 	mov	r5,r2
 400031c:	4000fe80 	call	4000fe8 <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
 4000320:	01007104 	movi	r4,452
 4000324:	000b883a 	mov	r5,zero
 4000328:	4000fe80 	call	4000fe8 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
 400032c:	01007184 	movi	r4,454
 4000330:	000b883a 	mov	r5,zero
 4000334:	4000fe80 	call	4000fe8 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
 4000338:	01007204 	movi	r4,456
 400033c:	000b883a 	mov	r5,zero
 4000340:	4000fe80 	call	4000fe8 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
 4000344:	01007284 	movi	r4,458
 4000348:	000b883a 	mov	r5,zero
 400034c:	4000fe80 	call	4000fe8 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
 4000350:	01007304 	movi	r4,460
 4000354:	000b883a 	mov	r5,zero
 4000358:	4000fe80 	call	4000fe8 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
 400035c:	01007384 	movi	r4,462
 4000360:	000b883a 	mov	r5,zero
 4000364:	4000fe80 	call	4000fe8 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
 4000368:	01007404 	movi	r4,464
 400036c:	000b883a 	mov	r5,zero
 4000370:	4000fe80 	call	4000fe8 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
 4000374:	01007484 	movi	r4,466
 4000378:	000b883a 	mov	r5,zero
 400037c:	4000fe80 	call	4000fe8 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
 4000380:	01007504 	movi	r4,468
 4000384:	000b883a 	mov	r5,zero
 4000388:	4000fe80 	call	4000fe8 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
 400038c:	01007584 	movi	r4,470
 4000390:	000b883a 	mov	r5,zero
 4000394:	4000fe80 	call	4000fe8 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
 4000398:	01007604 	movi	r4,472
 400039c:	000b883a 	mov	r5,zero
 40003a0:	4000fe80 	call	4000fe8 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
 40003a4:	01007684 	movi	r4,474
 40003a8:	000b883a 	mov	r5,zero
 40003ac:	4000fe80 	call	4000fe8 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
 40003b0:	01007704 	movi	r4,476
 40003b4:	000b883a 	mov	r5,zero
 40003b8:	4000fe80 	call	4000fe8 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
 40003bc:	01007784 	movi	r4,478
 40003c0:	000b883a 	mov	r5,zero
 40003c4:	4000fe80 	call	4000fe8 <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
 40003c8:	01007084 	movi	r4,450
 40003cc:	01401c84 	movi	r5,114
 40003d0:	4000fe80 	call	4000fe8 <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
 40003d4:	01000044 	movi	r4,1
 40003d8:	01738054 	movui	r5,52737
 40003dc:	40002480 	call	4000248 <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
 40003e0:	0001883a 	nop
 40003e4:	010000c4 	movi	r4,3
 40003e8:	40002740 	call	4000274 <IO_read>
 40003ec:	10bfffcc 	andi	r2,r2,65535
 40003f0:	103ffc26 	beq	r2,zero,40003e4 <__alt_data_end+0xfe0003e4>
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
 40003f4:	0001883a 	nop
 40003f8:	01000044 	movi	r4,1
 40003fc:	40002740 	call	4000274 <IO_read>
 4000400:	10bfffcc 	andi	r2,r2,65535
 4000404:	1083fb58 	cmpnei	r2,r2,4077
 4000408:	10000826 	beq	r2,zero,400042c <main+0x190>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
 400040c:	01000044 	movi	r4,1
 4000410:	40002740 	call	4000274 <IO_read>
 4000414:	10bfffcc 	andi	r2,r2,65535
 4000418:	01010074 	movhi	r4,1025
 400041c:	2104ab04 	addi	r4,r4,4780
 4000420:	100b883a 	mov	r5,r2
 4000424:	40021100 	call	4002110 <printf>
		goto USB_HOT_PLUG;
 4000428:	003fa706 	br	40002c8 <__alt_data_end+0xfe0002c8>
	}
	// STEP 1b end

	printf("STEP 1 Complete");
 400042c:	01010074 	movhi	r4,1025
 4000430:	2104b404 	addi	r4,r4,4816
 4000434:	40021100 	call	4002110 <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
 4000438:	01007084 	movi	r4,450
 400043c:	01401d04 	movi	r5,116
 4000440:	4000fe80 	call	4000fe8 <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
 4000444:	01007104 	movi	r4,452
 4000448:	01400f04 	movi	r5,60
 400044c:	4000fe80 	call	4000fe8 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
 4000450:	01007184 	movi	r4,454
 4000454:	000b883a 	mov	r5,zero
 4000458:	4000fe80 	call	4000fe8 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
 400045c:	01007204 	movi	r4,456
 4000460:	000b883a 	mov	r5,zero
 4000464:	4000fe80 	call	4000fe8 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
 4000468:	01007284 	movi	r4,458
 400046c:	000b883a 	mov	r5,zero
 4000470:	4000fe80 	call	4000fe8 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
 4000474:	01007304 	movi	r4,460
 4000478:	000b883a 	mov	r5,zero
 400047c:	4000fe80 	call	4000fe8 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
 4000480:	01007384 	movi	r4,462
 4000484:	000b883a 	mov	r5,zero
 4000488:	4000fe80 	call	4000fe8 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
 400048c:	01007404 	movi	r4,464
 4000490:	000b883a 	mov	r5,zero
 4000494:	4000fe80 	call	4000fe8 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
 4000498:	01007484 	movi	r4,466
 400049c:	000b883a 	mov	r5,zero
 40004a0:	4000fe80 	call	4000fe8 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
 40004a4:	01007504 	movi	r4,468
 40004a8:	000b883a 	mov	r5,zero
 40004ac:	4000fe80 	call	4000fe8 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
 40004b0:	01007584 	movi	r4,470
 40004b4:	000b883a 	mov	r5,zero
 40004b8:	4000fe80 	call	4000fe8 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
 40004bc:	01007604 	movi	r4,472
 40004c0:	000b883a 	mov	r5,zero
 40004c4:	4000fe80 	call	4000fe8 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
 40004c8:	01007684 	movi	r4,474
 40004cc:	000b883a 	mov	r5,zero
 40004d0:	4000fe80 	call	4000fe8 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
 40004d4:	01007704 	movi	r4,476
 40004d8:	000b883a 	mov	r5,zero
 40004dc:	4000fe80 	call	4000fe8 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
 40004e0:	01007784 	movi	r4,478
 40004e4:	000b883a 	mov	r5,zero
 40004e8:	4000fe80 	call	4000fe8 <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
 40004ec:	01000044 	movi	r4,1
 40004f0:	01738054 	movui	r5,52737
 40004f4:	40002480 	call	4000248 <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
 40004f8:	0001883a 	nop
 40004fc:	01000044 	movi	r4,1
 4000500:	40002740 	call	4000274 <IO_read>
 4000504:	10bfffcc 	andi	r2,r2,65535
 4000508:	1083fb58 	cmpnei	r2,r2,4077
 400050c:	10000826 	beq	r2,zero,4000530 <main+0x294>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
 4000510:	01000044 	movi	r4,1
 4000514:	40002740 	call	4000274 <IO_read>
 4000518:	10bfffcc 	andi	r2,r2,65535
 400051c:	01010074 	movhi	r4,1025
 4000520:	2104ab04 	addi	r4,r4,4780
 4000524:	100b883a 	mov	r5,r2
 4000528:	40021100 	call	4002110 <printf>
		goto USB_HOT_PLUG;
 400052c:	003f6606 	br	40002c8 <__alt_data_end+0xfe0002c8>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
 4000530:	00b02284 	movi	r2,-16246
 4000534:	d0a6cb0d 	sth	r2,-25812(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
 4000538:	008c0004 	movi	r2,12288
 400053c:	d0a6cb8d 	sth	r2,-25810(gp)
	fs_device = A_DP_STAT;
 4000540:	00880004 	movi	r2,8192
 4000544:	e0bffc0d 	sth	r2,-16(fp)
	usb_ctl_val = UsbRead(ctl_reg);
 4000548:	d0a6cb0b 	ldhu	r2,-25812(gp)
 400054c:	10bfffcc 	andi	r2,r2,65535
 4000550:	1009883a 	mov	r4,r2
 4000554:	40010140 	call	4001014 <UsbRead>
 4000558:	e0bffb0d 	sth	r2,-20(fp)

	if (!(usb_ctl_val & no_device))
 400055c:	d0a6cb8b 	ldhu	r2,-25810(gp)
 4000560:	e0fffb0b 	ldhu	r3,-20(fp)
 4000564:	1884703a 	and	r2,r3,r2
 4000568:	10bfffcc 	andi	r2,r2,65535
 400056c:	1000341e 	bne	r2,zero,4000640 <main+0x3a4>
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
 4000570:	e03ffbc5 	stb	zero,-17(fp)
 4000574:	00001006 	br	40005b8 <main+0x31c>
		{
			usleep(5*1000);
 4000578:	0104e204 	movi	r4,5000
 400057c:	400f2ec0 	call	400f2ec <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
 4000580:	d0a6cb0b 	ldhu	r2,-25812(gp)
 4000584:	10bfffcc 	andi	r2,r2,65535
 4000588:	1009883a 	mov	r4,r2
 400058c:	40010140 	call	4001014 <UsbRead>
 4000590:	e0bffb0d 	sth	r2,-20(fp)
			if(usb_ctl_val & no_device) break;
 4000594:	d0a6cb8b 	ldhu	r2,-25810(gp)
 4000598:	e0fffb0b 	ldhu	r3,-20(fp)
 400059c:	1884703a 	and	r2,r3,r2
 40005a0:	10bfffcc 	andi	r2,r2,65535
 40005a4:	10000126 	beq	r2,zero,40005ac <main+0x310>
 40005a8:	00000606 	br	40005c4 <main+0x328>
	fs_device = A_DP_STAT;
	usb_ctl_val = UsbRead(ctl_reg);

	if (!(usb_ctl_val & no_device))
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
 40005ac:	e0bffbc3 	ldbu	r2,-17(fp)
 40005b0:	10800044 	addi	r2,r2,1
 40005b4:	e0bffbc5 	stb	r2,-17(fp)
 40005b8:	e0bffbc3 	ldbu	r2,-17(fp)
 40005bc:	10800170 	cmpltui	r2,r2,5
 40005c0:	103fed1e 	bne	r2,zero,4000578 <__alt_data_end+0xfe000578>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
		}
		if(!(usb_ctl_val & no_device))
 40005c4:	d0a6cb8b 	ldhu	r2,-25810(gp)
 40005c8:	e0fffb0b 	ldhu	r3,-20(fp)
 40005cc:	1884703a 	and	r2,r3,r2
 40005d0:	10bfffcc 	andi	r2,r2,65535
 40005d4:	1000261e 	bne	r2,zero,4000670 <main+0x3d4>
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
 40005d8:	01010074 	movhi	r4,1025
 40005dc:	2104b804 	addi	r4,r4,4832
 40005e0:	40022040 	call	4002204 <puts>
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
 40005e4:	01010074 	movhi	r4,1025
 40005e8:	2104c204 	addi	r4,r4,4872
 40005ec:	40022040 	call	4002204 <puts>
			while (!(usb_ctl_val & no_device))
 40005f0:	00000d06 	br	4000628 <main+0x38c>
			{
				usb_ctl_val = UsbRead(ctl_reg);
 40005f4:	d0a6cb0b 	ldhu	r2,-25812(gp)
 40005f8:	10bfffcc 	andi	r2,r2,65535
 40005fc:	1009883a 	mov	r4,r2
 4000600:	40010140 	call	4001014 <UsbRead>
 4000604:	e0bffb0d 	sth	r2,-20(fp)
				if(usb_ctl_val & no_device)
 4000608:	d0a6cb8b 	ldhu	r2,-25810(gp)
 400060c:	e0fffb0b 	ldhu	r3,-20(fp)
 4000610:	1884703a 	and	r2,r3,r2
 4000614:	10bfffcc 	andi	r2,r2,65535
 4000618:	10000126 	beq	r2,zero,4000620 <main+0x384>
					goto USB_HOT_PLUG;
 400061c:	003f2a06 	br	40002c8 <__alt_data_end+0xfe0002c8>

				usleep(2000);
 4000620:	0101f404 	movi	r4,2000
 4000624:	400f2ec0 	call	400f2ec <usleep>
		}
		if(!(usb_ctl_val & no_device))
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
			while (!(usb_ctl_val & no_device))
 4000628:	d0a6cb8b 	ldhu	r2,-25810(gp)
 400062c:	e0fffb0b 	ldhu	r3,-20(fp)
 4000630:	1884703a 	and	r2,r3,r2
 4000634:	10bfffcc 	andi	r2,r2,65535
 4000638:	103fee26 	beq	r2,zero,40005f4 <__alt_data_end+0xfe0005f4>
 400063c:	00000c06 	br	4000670 <main+0x3d4>
		}
	}
	else
	{
		/* check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
 4000640:	e0fffb0b 	ldhu	r3,-20(fp)
 4000644:	e0bffc0b 	ldhu	r2,-16(fp)
 4000648:	1884703a 	and	r2,r3,r2
 400064c:	10bfffcc 	andi	r2,r2,65535
 4000650:	10000426 	beq	r2,zero,4000664 <main+0x3c8>
		{
			printf("[INFO]: full speed device\n");
 4000654:	01010074 	movhi	r4,1025
 4000658:	2104ce04 	addi	r4,r4,4920
 400065c:	40022040 	call	4002204 <puts>
 4000660:	00000306 	br	4000670 <main+0x3d4>
		}
		else
		{
			printf("[INFO]: low speed device\n");
 4000664:	01010074 	movhi	r4,1025
 4000668:	2104d504 	addi	r4,r4,4948
 400066c:	40022040 	call	4002204 <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
 4000670:	40010e80 	call	40010e8 <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 4000674:	00000306 	br	4000684 <main+0x3e8>
	{
		UsbSetAddress();
 4000678:	40010e80 	call	40010e8 <UsbSetAddress>
		usleep(10*1000);
 400067c:	0109c404 	movi	r4,10000
 4000680:	400f2ec0 	call	400f2ec <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 4000684:	010000c4 	movi	r4,3
 4000688:	40002740 	call	4000274 <IO_read>
 400068c:	10bfffcc 	andi	r2,r2,65535
 4000690:	1080040c 	andi	r2,r2,16
 4000694:	103ff826 	beq	r2,zero,4000678 <__alt_data_end+0xfe000678>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 4000698:	4001f640 	call	4001f64 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
 400069c:	01000084 	movi	r4,2
 40006a0:	01414184 	movi	r5,1286
 40006a4:	40002480 	call	4000248 <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
 40006a8:	0009883a 	mov	r4,zero
 40006ac:	40002740 	call	4000274 <IO_read>
 40006b0:	10bfffcc 	andi	r2,r2,65535
 40006b4:	01010074 	movhi	r4,1025
 40006b8:	2104dc04 	addi	r4,r4,4976
 40006bc:	100b883a 	mov	r5,r2
 40006c0:	40021100 	call	4002110 <printf>

	IO_write(HPI_ADDR,0x0508); // n
 40006c4:	01000084 	movi	r4,2
 40006c8:	01414204 	movi	r5,1288
 40006cc:	40002480 	call	4000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 40006d0:	0009883a 	mov	r4,zero
 40006d4:	40002740 	call	4000274 <IO_read>
 40006d8:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
 40006dc:	e0bffb0b 	ldhu	r2,-20(fp)
 40006e0:	01010074 	movhi	r4,1025
 40006e4:	2104e704 	addi	r4,r4,5020
 40006e8:	100b883a 	mov	r5,r2
 40006ec:	40021100 	call	4002110 <printf>
	while (usb_ctl_val != 0x03) // retries occurred
 40006f0:	e0bffb0b 	ldhu	r2,-20(fp)
 40006f4:	108000e0 	cmpeqi	r2,r2,3
 40006f8:	1000031e 	bne	r2,zero,4000708 <main+0x46c>
	{
		usb_ctl_val = UsbGetRetryCnt();
 40006fc:	4001fe80 	call	4001fe8 <UsbGetRetryCnt>
 4000700:	e0bffb0d 	sth	r2,-20(fp)

		goto USB_HOT_PLUG;
 4000704:	003ef006 	br	40002c8 <__alt_data_end+0xfe0002c8>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
 4000708:	01010074 	movhi	r4,1025
 400070c:	2104f304 	addi	r4,r4,5068
 4000710:	40022040 	call	4002204 <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
 4000714:	40011e40 	call	40011e4 <UsbGetDeviceDesc1>

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 4000718:	00000306 	br	4000728 <main+0x48c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
 400071c:	40011e40 	call	40011e4 <UsbGetDeviceDesc1>
		usleep(10*1000);
 4000720:	0109c404 	movi	r4,10000
 4000724:	400f2ec0 	call	400f2ec <usleep>
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 4000728:	010000c4 	movi	r4,3
 400072c:	40002740 	call	4000274 <IO_read>
 4000730:	10bfffcc 	andi	r2,r2,65535
 4000734:	1080040c 	andi	r2,r2,16
 4000738:	103ff826 	beq	r2,zero,400071c <__alt_data_end+0xfe00071c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 400073c:	4001f640 	call	4001f64 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 4000740:	01000084 	movi	r4,2
 4000744:	01414184 	movi	r5,1286
 4000748:	40002480 	call	4000248 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
 400074c:	0009883a 	mov	r4,zero
 4000750:	40002740 	call	4000274 <IO_read>
 4000754:	10bfffcc 	andi	r2,r2,65535
 4000758:	01010074 	movhi	r4,1025
 400075c:	21050204 	addi	r4,r4,5128
 4000760:	100b883a 	mov	r5,r2
 4000764:	40021100 	call	4002110 <printf>

	IO_write(HPI_ADDR,0x0508);
 4000768:	01000084 	movi	r4,2
 400076c:	01414204 	movi	r5,1288
 4000770:	40002480 	call	4000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 4000774:	0009883a 	mov	r4,zero
 4000778:	40002740 	call	4000274 <IO_read>
 400077c:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
 4000780:	e0bffb0b 	ldhu	r2,-20(fp)
 4000784:	01010074 	movhi	r4,1025
 4000788:	21050d04 	addi	r4,r4,5172
 400078c:	100b883a 	mov	r5,r2
 4000790:	40021100 	call	4002110 <printf>
	while (usb_ctl_val != 0x03)
 4000794:	00000206 	br	40007a0 <main+0x504>
	{
		usb_ctl_val = UsbGetRetryCnt();
 4000798:	4001fe80 	call	4001fe8 <UsbGetRetryCnt>
 400079c:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 40007a0:	e0bffb0b 	ldhu	r2,-20(fp)
 40007a4:	108000d8 	cmpnei	r2,r2,3
 40007a8:	103ffb1e 	bne	r2,zero,4000798 <__alt_data_end+0xfe000798>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
 40007ac:	01010074 	movhi	r4,1025
 40007b0:	21051904 	addi	r4,r4,5220
 40007b4:	40022040 	call	4002204 <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
 40007b8:	40013280 	call	4001328 <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 40007bc:	00000306 	br	40007cc <main+0x530>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
 40007c0:	40013280 	call	4001328 <UsbGetDeviceDesc2>
		usleep(10*1000);
 40007c4:	0109c404 	movi	r4,10000
 40007c8:	400f2ec0 	call	400f2ec <usleep>
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 40007cc:	010000c4 	movi	r4,3
 40007d0:	40002740 	call	4000274 <IO_read>
 40007d4:	10bfffcc 	andi	r2,r2,65535
 40007d8:	1080040c 	andi	r2,r2,16
 40007dc:	103ff826 	beq	r2,zero,40007c0 <__alt_data_end+0xfe0007c0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 40007e0:	4001f640 	call	4001f64 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 40007e4:	01000084 	movi	r4,2
 40007e8:	01414184 	movi	r5,1286
 40007ec:	40002480 	call	4000248 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
 40007f0:	0009883a 	mov	r4,zero
 40007f4:	40002740 	call	4000274 <IO_read>
 40007f8:	10bfffcc 	andi	r2,r2,65535
 40007fc:	01010074 	movhi	r4,1025
 4000800:	21050204 	addi	r4,r4,5128
 4000804:	100b883a 	mov	r5,r2
 4000808:	40021100 	call	4002110 <printf>

	IO_write(HPI_ADDR,0x0508);
 400080c:	01000084 	movi	r4,2
 4000810:	01414204 	movi	r5,1288
 4000814:	40002480 	call	4000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 4000818:	0009883a 	mov	r4,zero
 400081c:	40002740 	call	4000274 <IO_read>
 4000820:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
 4000824:	e0bffb0b 	ldhu	r2,-20(fp)
 4000828:	01010074 	movhi	r4,1025
 400082c:	21050d04 	addi	r4,r4,5172
 4000830:	100b883a 	mov	r5,r2
 4000834:	40021100 	call	4002110 <printf>
	while (usb_ctl_val != 0x03)
 4000838:	00000206 	br	4000844 <main+0x5a8>
	{
		usb_ctl_val = UsbGetRetryCnt();
 400083c:	4001fe80 	call	4001fe8 <UsbGetRetryCnt>
 4000840:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 4000844:	e0bffb0b 	ldhu	r2,-20(fp)
 4000848:	108000d8 	cmpnei	r2,r2,3
 400084c:	103ffb1e 	bne	r2,zero,400083c <__alt_data_end+0xfe00083c>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
 4000850:	01010074 	movhi	r4,1025
 4000854:	21052d04 	addi	r4,r4,5300
 4000858:	40022040 	call	4002204 <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
 400085c:	40014fc0 	call	40014fc <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 4000860:	00000306 	br	4000870 <main+0x5d4>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
 4000864:	40014fc0 	call	40014fc <UsbGetConfigDesc1>
		usleep(10*1000);
 4000868:	0109c404 	movi	r4,10000
 400086c:	400f2ec0 	call	400f2ec <usleep>
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 4000870:	010000c4 	movi	r4,3
 4000874:	40002740 	call	4000274 <IO_read>
 4000878:	10bfffcc 	andi	r2,r2,65535
 400087c:	1080040c 	andi	r2,r2,16
 4000880:	103ff826 	beq	r2,zero,4000864 <__alt_data_end+0xfe000864>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 4000884:	4001f640 	call	4001f64 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 4000888:	01000084 	movi	r4,2
 400088c:	01414184 	movi	r5,1286
 4000890:	40002480 	call	4000248 <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
 4000894:	0009883a 	mov	r4,zero
 4000898:	40002740 	call	4000274 <IO_read>
 400089c:	10bfffcc 	andi	r2,r2,65535
 40008a0:	01010074 	movhi	r4,1025
 40008a4:	21053f04 	addi	r4,r4,5372
 40008a8:	100b883a 	mov	r5,r2
 40008ac:	40021100 	call	4002110 <printf>

	IO_write(HPI_ADDR,0x0508);
 40008b0:	01000084 	movi	r4,2
 40008b4:	01414204 	movi	r5,1288
 40008b8:	40002480 	call	4000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 40008bc:	0009883a 	mov	r4,zero
 40008c0:	40002740 	call	4000274 <IO_read>
 40008c4:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
 40008c8:	e0bffb0b 	ldhu	r2,-20(fp)
 40008cc:	01010074 	movhi	r4,1025
 40008d0:	21054a04 	addi	r4,r4,5416
 40008d4:	100b883a 	mov	r5,r2
 40008d8:	40021100 	call	4002110 <printf>
	while (usb_ctl_val != 0x03)
 40008dc:	00000206 	br	40008e8 <main+0x64c>
	{
		usb_ctl_val = UsbGetRetryCnt();
 40008e0:	4001fe80 	call	4001fe8 <UsbGetRetryCnt>
 40008e4:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 40008e8:	e0bffb0b 	ldhu	r2,-20(fp)
 40008ec:	108000d8 	cmpnei	r2,r2,3
 40008f0:	103ffb1e 	bne	r2,zero,40008e0 <__alt_data_end+0xfe0008e0>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
 40008f4:	01010074 	movhi	r4,1025
 40008f8:	21055604 	addi	r4,r4,5464
 40008fc:	40022040 	call	4002204 <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
 4000900:	40016880 	call	4001688 <UsbGetConfigDesc2>

	usleep(100*1000);
 4000904:	010000b4 	movhi	r4,2
 4000908:	2121a804 	addi	r4,r4,-31072
 400090c:	400f2ec0 	call	400f2ec <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 4000910:	00000306 	br	4000920 <main+0x684>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
 4000914:	40016880 	call	4001688 <UsbGetConfigDesc2>
		usleep(10*1000);
 4000918:	0109c404 	movi	r4,10000
 400091c:	400f2ec0 	call	400f2ec <usleep>
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2

	usleep(100*1000);
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 4000920:	010000c4 	movi	r4,3
 4000924:	40002740 	call	4000274 <IO_read>
 4000928:	10bfffcc 	andi	r2,r2,65535
 400092c:	1080040c 	andi	r2,r2,16
 4000930:	103ff826 	beq	r2,zero,4000914 <__alt_data_end+0xfe000914>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 4000934:	4001f640 	call	4001f64 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 4000938:	01000084 	movi	r4,2
 400093c:	01414184 	movi	r5,1286
 4000940:	40002480 	call	4000248 <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
 4000944:	0009883a 	mov	r4,zero
 4000948:	40002740 	call	4000274 <IO_read>
 400094c:	10bfffcc 	andi	r2,r2,65535
 4000950:	01010074 	movhi	r4,1025
 4000954:	21056904 	addi	r4,r4,5540
 4000958:	100b883a 	mov	r5,r2
 400095c:	40021100 	call	4002110 <printf>

	IO_write(HPI_ADDR,0x0508);
 4000960:	01000084 	movi	r4,2
 4000964:	01414204 	movi	r5,1288
 4000968:	40002480 	call	4000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 400096c:	0009883a 	mov	r4,zero
 4000970:	40002740 	call	4000274 <IO_read>
 4000974:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
 4000978:	e0bffb0b 	ldhu	r2,-20(fp)
 400097c:	01010074 	movhi	r4,1025
 4000980:	21057404 	addi	r4,r4,5584
 4000984:	100b883a 	mov	r5,r2
 4000988:	40021100 	call	4002110 <printf>
	while (usb_ctl_val != 0x03)
 400098c:	00000206 	br	4000998 <main+0x6fc>
	{
		usb_ctl_val = UsbGetRetryCnt();
 4000990:	4001fe80 	call	4001fe8 <UsbGetRetryCnt>
 4000994:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 4000998:	e0bffb0b 	ldhu	r2,-20(fp)
 400099c:	108000d8 	cmpnei	r2,r2,3
 40009a0:	103ffb1e 	bne	r2,zero,4000990 <__alt_data_end+0xfe000990>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
 40009a4:	01010074 	movhi	r4,1025
 40009a8:	21058004 	addi	r4,r4,5632
 40009ac:	40022040 	call	4002204 <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
 40009b0:	01000084 	movi	r4,2
 40009b4:	01415b04 	movi	r5,1388
 40009b8:	40002480 	call	4000248 <IO_write>
	code = IO_read(HPI_DATA);
 40009bc:	0009883a 	mov	r4,zero
 40009c0:	40002740 	call	4000274 <IO_read>
 40009c4:	e0bffe8d 	sth	r2,-6(fp)
	code = code & 0x003;
 40009c8:	e0bffe8b 	ldhu	r2,-6(fp)
 40009cc:	108000cc 	andi	r2,r2,3
 40009d0:	e0bffe8d 	sth	r2,-6(fp)
	printf("\ncode = %x\n", code);
 40009d4:	e0bffe8b 	ldhu	r2,-6(fp)
 40009d8:	01010074 	movhi	r4,1025
 40009dc:	21059304 	addi	r4,r4,5708
 40009e0:	100b883a 	mov	r5,r2
 40009e4:	40021100 	call	4002110 <printf>

	if (code == 0x01)
 40009e8:	e0bffe8b 	ldhu	r2,-6(fp)
 40009ec:	10800058 	cmpnei	r2,r2,1
 40009f0:	1000041e 	bne	r2,zero,4000a04 <main+0x768>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
 40009f4:	01010074 	movhi	r4,1025
 40009f8:	21059604 	addi	r4,r4,5720
 40009fc:	40022040 	call	4002204 <puts>
 4000a00:	00000306 	br	4000a10 <main+0x774>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
 4000a04:	01010074 	movhi	r4,1025
 4000a08:	2105a504 	addi	r4,r4,5780
 4000a0c:	40022040 	call	4002204 <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
 4000a10:	01000084 	movi	r4,2
 4000a14:	01415d84 	movi	r5,1398
 4000a18:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x073F);
 4000a1c:	0009883a 	mov	r4,zero
 4000a20:	0141cfc4 	movi	r5,1855
 4000a24:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x8105);
 4000a28:	0009883a 	mov	r4,zero
 4000a2c:	01604154 	movui	r5,33029
 4000a30:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0003);
 4000a34:	0009883a 	mov	r4,zero
 4000a38:	014000c4 	movi	r5,3
 4000a3c:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0008);
 4000a40:	0009883a 	mov	r4,zero
 4000a44:	01400204 	movi	r5,8
 4000a48:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0xAC0A);
 4000a4c:	0009883a 	mov	r4,zero
 4000a50:	016b0294 	movui	r5,44042
 4000a54:	40002480 	call	4000248 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
 4000a58:	01006c04 	movi	r4,432
 4000a5c:	01415d84 	movi	r5,1398
 4000a60:	4000fe80 	call	4000fe8 <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
 4000a64:	01000084 	movi	r4,2
 4000a68:	01415f04 	movi	r5,1404
 4000a6c:	40002480 	call	4000248 <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
 4000a70:	0009883a 	mov	r4,zero
 4000a74:	40002740 	call	4000274 <IO_read>
 4000a78:	e0bfff05 	stb	r2,-4(fp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
 4000a7c:	e0bfff03 	ldbu	r2,-4(fp)
 4000a80:	01010074 	movhi	r4,1025
 4000a84:	2105ae04 	addi	r4,r4,5816
 4000a88:	100b883a 	mov	r5,r2
 4000a8c:	40021100 	call	4002110 <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
 4000a90:	40018ec0 	call	40018ec <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 4000a94:	00000306 	br	4000aa4 <main+0x808>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
 4000a98:	40018ec0 	call	40018ec <UsbSetConfig>
		usleep(10*1000);
 4000a9c:	0109c404 	movi	r4,10000
 4000aa0:	400f2ec0 	call	400f2ec <usleep>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 4000aa4:	010000c4 	movi	r4,3
 4000aa8:	40002740 	call	4000274 <IO_read>
 4000aac:	10bfffcc 	andi	r2,r2,65535
 4000ab0:	1080040c 	andi	r2,r2,16
 4000ab4:	103ff826 	beq	r2,zero,4000a98 <__alt_data_end+0xfe000a98>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 4000ab8:	4001f640 	call	4001f64 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 4000abc:	01000084 	movi	r4,2
 4000ac0:	01414184 	movi	r5,1286
 4000ac4:	40002480 	call	4000248 <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
 4000ac8:	0009883a 	mov	r4,zero
 4000acc:	40002740 	call	4000274 <IO_read>
 4000ad0:	10bfffcc 	andi	r2,r2,65535
 4000ad4:	01010074 	movhi	r4,1025
 4000ad8:	2105b804 	addi	r4,r4,5856
 4000adc:	100b883a 	mov	r5,r2
 4000ae0:	40021100 	call	4002110 <printf>

	IO_write(HPI_ADDR,0x0508);
 4000ae4:	01000084 	movi	r4,2
 4000ae8:	01414204 	movi	r5,1288
 4000aec:	40002480 	call	4000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 4000af0:	0009883a 	mov	r4,zero
 4000af4:	40002740 	call	4000274 <IO_read>
 4000af8:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
 4000afc:	e0bffb0b 	ldhu	r2,-20(fp)
 4000b00:	01010074 	movhi	r4,1025
 4000b04:	2105c304 	addi	r4,r4,5900
 4000b08:	100b883a 	mov	r5,r2
 4000b0c:	40021100 	call	4002110 <printf>
	while (usb_ctl_val != 0x03)
 4000b10:	00000206 	br	4000b1c <main+0x880>
	{
		usb_ctl_val = UsbGetRetryCnt();
 4000b14:	4001fe80 	call	4001fe8 <UsbGetRetryCnt>
 4000b18:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 4000b1c:	e0bffb0b 	ldhu	r2,-20(fp)
 4000b20:	108000d8 	cmpnei	r2,r2,3
 4000b24:	103ffb1e 	bne	r2,zero,4000b14 <__alt_data_end+0xfe000b14>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
 4000b28:	01010074 	movhi	r4,1025
 4000b2c:	2105cf04 	addi	r4,r4,5948
 4000b30:	40022040 	call	4002204 <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
 4000b34:	40019e80 	call	40019e8 <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 4000b38:	00000306 	br	4000b48 <main+0x8ac>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
 4000b3c:	40019e80 	call	40019e8 <UsbClassRequest>
		usleep(10*1000);
 4000b40:	0109c404 	movi	r4,10000
 4000b44:	400f2ec0 	call	400f2ec <usleep>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 4000b48:	010000c4 	movi	r4,3
 4000b4c:	40002740 	call	4000274 <IO_read>
 4000b50:	10bfffcc 	andi	r2,r2,65535
 4000b54:	1080040c 	andi	r2,r2,16
 4000b58:	103ff826 	beq	r2,zero,4000b3c <__alt_data_end+0xfe000b3c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 4000b5c:	4001f640 	call	4001f64 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 4000b60:	01000084 	movi	r4,2
 4000b64:	01414184 	movi	r5,1286
 4000b68:	40002480 	call	4000248 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
 4000b6c:	0009883a 	mov	r4,zero
 4000b70:	40002740 	call	4000274 <IO_read>
 4000b74:	10bfffcc 	andi	r2,r2,65535
 4000b78:	01010074 	movhi	r4,1025
 4000b7c:	2105e104 	addi	r4,r4,6020
 4000b80:	100b883a 	mov	r5,r2
 4000b84:	40021100 	call	4002110 <printf>

	IO_write(HPI_ADDR,0x0508);
 4000b88:	01000084 	movi	r4,2
 4000b8c:	01414204 	movi	r5,1288
 4000b90:	40002480 	call	4000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 4000b94:	0009883a 	mov	r4,zero
 4000b98:	40002740 	call	4000274 <IO_read>
 4000b9c:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
 4000ba0:	e0bffb0b 	ldhu	r2,-20(fp)
 4000ba4:	01010074 	movhi	r4,1025
 4000ba8:	2105ec04 	addi	r4,r4,6064
 4000bac:	100b883a 	mov	r5,r2
 4000bb0:	40021100 	call	4002110 <printf>
	while (usb_ctl_val != 0x03)
 4000bb4:	00000206 	br	4000bc0 <main+0x924>
	{
		usb_ctl_val = UsbGetRetryCnt();
 4000bb8:	4001fe80 	call	4001fe8 <UsbGetRetryCnt>
 4000bbc:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 4000bc0:	e0bffb0b 	ldhu	r2,-20(fp)
 4000bc4:	108000d8 	cmpnei	r2,r2,3
 4000bc8:	103ffb1e 	bne	r2,zero,4000bb8 <__alt_data_end+0xfe000bb8>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
 4000bcc:	01010074 	movhi	r4,1025
 4000bd0:	2105f804 	addi	r4,r4,6112
 4000bd4:	40022040 	call	4002204 <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
 4000bd8:	4001ae40 	call	4001ae4 <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 4000bdc:	00000306 	br	4000bec <main+0x950>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
 4000be0:	4001ae40 	call	4001ae4 <UsbGetHidDesc>
		usleep(10*1000);
 4000be4:	0109c404 	movi	r4,10000
 4000be8:	400f2ec0 	call	400f2ec <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 4000bec:	010000c4 	movi	r4,3
 4000bf0:	40002740 	call	4000274 <IO_read>
 4000bf4:	10bfffcc 	andi	r2,r2,65535
 4000bf8:	1080040c 	andi	r2,r2,16
 4000bfc:	103ff826 	beq	r2,zero,4000be0 <__alt_data_end+0xfe000be0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 4000c00:	4001f640 	call	4001f64 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 4000c04:	01000084 	movi	r4,2
 4000c08:	01414184 	movi	r5,1286
 4000c0c:	40002480 	call	4000248 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
 4000c10:	0009883a 	mov	r4,zero
 4000c14:	40002740 	call	4000274 <IO_read>
 4000c18:	10bfffcc 	andi	r2,r2,65535
 4000c1c:	01010074 	movhi	r4,1025
 4000c20:	2105e104 	addi	r4,r4,6020
 4000c24:	100b883a 	mov	r5,r2
 4000c28:	40021100 	call	4002110 <printf>

	IO_write(HPI_ADDR,0x0508);
 4000c2c:	01000084 	movi	r4,2
 4000c30:	01414204 	movi	r5,1288
 4000c34:	40002480 	call	4000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 4000c38:	0009883a 	mov	r4,zero
 4000c3c:	40002740 	call	4000274 <IO_read>
 4000c40:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
 4000c44:	e0bffb0b 	ldhu	r2,-20(fp)
 4000c48:	01010074 	movhi	r4,1025
 4000c4c:	2105ec04 	addi	r4,r4,6064
 4000c50:	100b883a 	mov	r5,r2
 4000c54:	40021100 	call	4002110 <printf>
	while (usb_ctl_val != 0x03)
 4000c58:	00000206 	br	4000c64 <main+0x9c8>
	{
		usb_ctl_val = UsbGetRetryCnt();
 4000c5c:	4001fe80 	call	4001fe8 <UsbGetRetryCnt>
 4000c60:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 4000c64:	e0bffb0b 	ldhu	r2,-20(fp)
 4000c68:	108000d8 	cmpnei	r2,r2,3
 4000c6c:	103ffb1e 	bne	r2,zero,4000c5c <__alt_data_end+0xfe000c5c>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
 4000c70:	01010074 	movhi	r4,1025
 4000c74:	21060a04 	addi	r4,r4,6184
 4000c78:	40022040 	call	4002204 <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
 4000c7c:	4001c280 	call	4001c28 <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 4000c80:	00000306 	br	4000c90 <main+0x9f4>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
 4000c84:	4001c280 	call	4001c28 <UsbGetReportDesc>
		usleep(10*1000);
 4000c88:	0109c404 	movi	r4,10000
 4000c8c:	400f2ec0 	call	400f2ec <usleep>
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 4000c90:	010000c4 	movi	r4,3
 4000c94:	40002740 	call	4000274 <IO_read>
 4000c98:	10bfffcc 	andi	r2,r2,65535
 4000c9c:	1080040c 	andi	r2,r2,16
 4000ca0:	103ff826 	beq	r2,zero,4000c84 <__alt_data_end+0xfe000c84>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 4000ca4:	4001f640 	call	4001f64 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 4000ca8:	01000084 	movi	r4,2
 4000cac:	01414184 	movi	r5,1286
 4000cb0:	40002480 	call	4000248 <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
 4000cb4:	0009883a 	mov	r4,zero
 4000cb8:	40002740 	call	4000274 <IO_read>
 4000cbc:	10bfffcc 	andi	r2,r2,65535
 4000cc0:	01010074 	movhi	r4,1025
 4000cc4:	21061e04 	addi	r4,r4,6264
 4000cc8:	100b883a 	mov	r5,r2
 4000ccc:	40021100 	call	4002110 <printf>

	IO_write(HPI_ADDR,0x0508);
 4000cd0:	01000084 	movi	r4,2
 4000cd4:	01414204 	movi	r5,1288
 4000cd8:	40002480 	call	4000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 4000cdc:	0009883a 	mov	r4,zero
 4000ce0:	40002740 	call	4000274 <IO_read>
 4000ce4:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
 4000ce8:	e0bffb0b 	ldhu	r2,-20(fp)
 4000cec:	01010074 	movhi	r4,1025
 4000cf0:	21062a04 	addi	r4,r4,6312
 4000cf4:	100b883a 	mov	r5,r2
 4000cf8:	40021100 	call	4002110 <printf>
	while (usb_ctl_val != 0x03)
 4000cfc:	00000206 	br	4000d08 <main+0xa6c>
	{
		usb_ctl_val = UsbGetRetryCnt();
 4000d00:	4001fe80 	call	4001fe8 <UsbGetRetryCnt>
 4000d04:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 4000d08:	e0bffb0b 	ldhu	r2,-20(fp)
 4000d0c:	108000d8 	cmpnei	r2,r2,3
 4000d10:	103ffb1e 	bne	r2,zero,4000d00 <__alt_data_end+0xfe000d00>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
 4000d14:	01010074 	movhi	r4,1025
 4000d18:	21063604 	addi	r4,r4,6360
 4000d1c:	40022040 	call	4002204 <puts>



	//-----------------------------------get keycode value------------------------------------------------//
	usleep(10000);
 4000d20:	0109c404 	movi	r4,10000
 4000d24:	400f2ec0 	call	400f2ec <usleep>
	while(1)
	{
		toggle++;
 4000d28:	e0bffb83 	ldbu	r2,-18(fp)
 4000d2c:	10800044 	addi	r2,r2,1
 4000d30:	e0bffb85 	stb	r2,-18(fp)
		IO_write(HPI_ADDR,0x0500); //the start address
 4000d34:	01000084 	movi	r4,2
 4000d38:	01414004 	movi	r5,1280
 4000d3c:	40002480 	call	4000248 <IO_write>
		//data phase IN-1
		IO_write(HPI_DATA,0x051c); //500
 4000d40:	0009883a 	mov	r4,zero
 4000d44:	01414704 	movi	r5,1308
 4000d48:	40002480 	call	4000248 <IO_write>

		IO_write(HPI_DATA,0x000f & data_size);//2 data length
 4000d4c:	e0bfff03 	ldbu	r2,-4(fp)
 4000d50:	108003cc 	andi	r2,r2,15
 4000d54:	0009883a 	mov	r4,zero
 4000d58:	100b883a 	mov	r5,r2
 4000d5c:	40002480 	call	4000248 <IO_write>

		IO_write(HPI_DATA,0x0291);//4 //endpoint 1
 4000d60:	0009883a 	mov	r4,zero
 4000d64:	0140a444 	movi	r5,657
 4000d68:	40002480 	call	4000248 <IO_write>
		if(toggle%2)
 4000d6c:	e0bffb83 	ldbu	r2,-18(fp)
 4000d70:	1080004c 	andi	r2,r2,1
 4000d74:	10803fcc 	andi	r2,r2,255
 4000d78:	10000426 	beq	r2,zero,4000d8c <main+0xaf0>
		{
			IO_write(HPI_DATA,0x0001);//6 //data 1
 4000d7c:	0009883a 	mov	r4,zero
 4000d80:	01400044 	movi	r5,1
 4000d84:	40002480 	call	4000248 <IO_write>
 4000d88:	00000306 	br	4000d98 <main+0xafc>
		}
		else
		{
			IO_write(HPI_DATA,0x0041);//6 //data 1
 4000d8c:	0009883a 	mov	r4,zero
 4000d90:	01401044 	movi	r5,65
 4000d94:	40002480 	call	4000248 <IO_write>
		}
		IO_write(HPI_DATA,0x0013);//8
 4000d98:	0009883a 	mov	r4,zero
 4000d9c:	014004c4 	movi	r5,19
 4000da0:	40002480 	call	4000248 <IO_write>
		IO_write(HPI_DATA,0x0000);//a
 4000da4:	0009883a 	mov	r4,zero
 4000da8:	000b883a 	mov	r5,zero
 4000dac:	40002480 	call	4000248 <IO_write>
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 4000db0:	01006c04 	movi	r4,432
 4000db4:	01414004 	movi	r5,1280
 4000db8:	4000fe80 	call	4000fe8 <UsbWrite>
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 4000dbc:	00002406 	br	4000e50 <main+0xbb4>
		{
			IO_write(HPI_ADDR,0x0500); //the start address
 4000dc0:	01000084 	movi	r4,2
 4000dc4:	01414004 	movi	r5,1280
 4000dc8:	40002480 	call	4000248 <IO_write>
			//data phase IN-1
			IO_write(HPI_DATA,0x051c); //500
 4000dcc:	0009883a 	mov	r4,zero
 4000dd0:	01414704 	movi	r5,1308
 4000dd4:	40002480 	call	4000248 <IO_write>

			IO_write(HPI_DATA,0x000f & data_size);//2 data length
 4000dd8:	e0bfff03 	ldbu	r2,-4(fp)
 4000ddc:	108003cc 	andi	r2,r2,15
 4000de0:	0009883a 	mov	r4,zero
 4000de4:	100b883a 	mov	r5,r2
 4000de8:	40002480 	call	4000248 <IO_write>

			IO_write(HPI_DATA,0x0291);//4 //endpoint 1
 4000dec:	0009883a 	mov	r4,zero
 4000df0:	0140a444 	movi	r5,657
 4000df4:	40002480 	call	4000248 <IO_write>
			if(toggle%2)
 4000df8:	e0bffb83 	ldbu	r2,-18(fp)
 4000dfc:	1080004c 	andi	r2,r2,1
 4000e00:	10803fcc 	andi	r2,r2,255
 4000e04:	10000426 	beq	r2,zero,4000e18 <main+0xb7c>
			{
				IO_write(HPI_DATA,0x0001);//6 //data 1
 4000e08:	0009883a 	mov	r4,zero
 4000e0c:	01400044 	movi	r5,1
 4000e10:	40002480 	call	4000248 <IO_write>
 4000e14:	00000306 	br	4000e24 <main+0xb88>
			}
			else
			{
				IO_write(HPI_DATA,0x0041);//6 //data 1
 4000e18:	0009883a 	mov	r4,zero
 4000e1c:	01401044 	movi	r5,65
 4000e20:	40002480 	call	4000248 <IO_write>
			}
			IO_write(HPI_DATA,0x0013);//8
 4000e24:	0009883a 	mov	r4,zero
 4000e28:	014004c4 	movi	r5,19
 4000e2c:	40002480 	call	4000248 <IO_write>
			IO_write(HPI_DATA,0x0000);//
 4000e30:	0009883a 	mov	r4,zero
 4000e34:	000b883a 	mov	r5,zero
 4000e38:	40002480 	call	4000248 <IO_write>
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 4000e3c:	01006c04 	movi	r4,432
 4000e40:	01414004 	movi	r5,1280
 4000e44:	4000fe80 	call	4000fe8 <UsbWrite>
			usleep(10*1000);
 4000e48:	0109c404 	movi	r4,10000
 4000e4c:	400f2ec0 	call	400f2ec <usleep>
		}
		IO_write(HPI_DATA,0x0013);//8
		IO_write(HPI_DATA,0x0000);//a
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 4000e50:	010000c4 	movi	r4,3
 4000e54:	40002740 	call	4000274 <IO_read>
 4000e58:	10bfffcc 	andi	r2,r2,65535
 4000e5c:	1080040c 	andi	r2,r2,16
 4000e60:	103fd726 	beq	r2,zero,4000dc0 <__alt_data_end+0xfe000dc0>
			usleep(10*1000);
		}//end while



		usb_ctl_val = UsbWaitTDListDone();
 4000e64:	4001f640 	call	4001f64 <UsbWaitTDListDone>
 4000e68:	e0bffb0d 	sth	r2,-20(fp)

		// packet starts from 0x051c, reading third byte
		// TASK: Write the address to read from the memory for byte 3 of the report descriptor to HPI_ADDR.
		IO_write(HPI_ADDR,0x051e); //the start address
 4000e6c:	01000084 	movi	r4,2
 4000e70:	01414784 	movi	r5,1310
 4000e74:	40002480 	call	4000248 <IO_write>
		keycode = IO_read(HPI_DATA);
 4000e78:	0009883a 	mov	r4,zero
 4000e7c:	40002740 	call	4000274 <IO_read>
 4000e80:	10bfffcc 	andi	r2,r2,65535
 4000e84:	e0bffd15 	stw	r2,-12(fp)
		printf("\nfirst two keycode values are %04x\n",keycode);
 4000e88:	01010074 	movhi	r4,1025
 4000e8c:	21064a04 	addi	r4,r4,6440
 4000e90:	e17ffd17 	ldw	r5,-12(fp)
 4000e94:	40021100 	call	4002110 <printf>
		IOWR(KEYCODE_BASE, 0, keycode & 0xff);
 4000e98:	e0bffd17 	ldw	r2,-12(fp)
 4000e9c:	10c03fcc 	andi	r3,r2,255
 4000ea0:	00880804 	movi	r2,8224
 4000ea4:	10c00035 	stwio	r3,0(r2)


		usleep(200);//usleep(5000);
 4000ea8:	01003204 	movi	r4,200
 4000eac:	400f2ec0 	call	400f2ec <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
 4000eb0:	d0a6cb0b 	ldhu	r2,-25812(gp)
 4000eb4:	10bfffcc 	andi	r2,r2,65535
 4000eb8:	1009883a 	mov	r4,r2
 4000ebc:	40010140 	call	4001014 <UsbRead>
 4000ec0:	e0bffb0d 	sth	r2,-20(fp)

		if(!(usb_ctl_val & no_device))
 4000ec4:	d0a6cb8b 	ldhu	r2,-25810(gp)
 4000ec8:	e0fffb0b 	ldhu	r3,-20(fp)
 4000ecc:	1884703a 	and	r2,r3,r2
 4000ed0:	10bfffcc 	andi	r2,r2,65535
 4000ed4:	1000201e 	bne	r2,zero,4000f58 <main+0xcbc>
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
 4000ed8:	e03ffbc5 	stb	zero,-17(fp)
 4000edc:	00001006 	br	4000f20 <main+0xc84>
			{
				usleep(5*1000);
 4000ee0:	0104e204 	movi	r4,5000
 4000ee4:	400f2ec0 	call	400f2ec <usleep>
				usb_ctl_val = UsbRead(ctl_reg);
 4000ee8:	d0a6cb0b 	ldhu	r2,-25812(gp)
 4000eec:	10bfffcc 	andi	r2,r2,65535
 4000ef0:	1009883a 	mov	r4,r2
 4000ef4:	40010140 	call	4001014 <UsbRead>
 4000ef8:	e0bffb0d 	sth	r2,-20(fp)
				if(usb_ctl_val & no_device) break;
 4000efc:	d0a6cb8b 	ldhu	r2,-25810(gp)
 4000f00:	e0fffb0b 	ldhu	r3,-20(fp)
 4000f04:	1884703a 	and	r2,r3,r2
 4000f08:	10bfffcc 	andi	r2,r2,65535
 4000f0c:	10000126 	beq	r2,zero,4000f14 <main+0xc78>
 4000f10:	00000606 	br	4000f2c <main+0xc90>
		usb_ctl_val = UsbRead(ctl_reg);

		if(!(usb_ctl_val & no_device))
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
 4000f14:	e0bffbc3 	ldbu	r2,-17(fp)
 4000f18:	10800044 	addi	r2,r2,1
 4000f1c:	e0bffbc5 	stb	r2,-17(fp)
 4000f20:	e0bffbc3 	ldbu	r2,-17(fp)
 4000f24:	108001f0 	cmpltui	r2,r2,7
 4000f28:	103fed1e 	bne	r2,zero,4000ee0 <__alt_data_end+0xfe000ee0>
			{
				usleep(5*1000);
				usb_ctl_val = UsbRead(ctl_reg);
				if(usb_ctl_val & no_device) break;
			}
			if(!(usb_ctl_val & no_device))
 4000f2c:	d0a6cb8b 	ldhu	r2,-25810(gp)
 4000f30:	e0fffb0b 	ldhu	r3,-20(fp)
 4000f34:	1884703a 	and	r2,r3,r2
 4000f38:	10bfffcc 	andi	r2,r2,65535
 4000f3c:	1000061e 	bne	r2,zero,4000f58 <main+0xcbc>
			{
				printf("\n[INFO]: the keyboard has been removed!!! \n");
 4000f40:	01010074 	movhi	r4,1025
 4000f44:	21065304 	addi	r4,r4,6476
 4000f48:	40022040 	call	4002204 <puts>
				printf("[INFO]: please insert again!!! \n");
 4000f4c:	01010074 	movhi	r4,1025
 4000f50:	21065e04 	addi	r4,r4,6520
 4000f54:	40022040 	call	4002204 <puts>
			}
		}

		while (!(usb_ctl_val & no_device))
 4000f58:	00001d06 	br	4000fd0 <main+0xd34>
		{

			usb_ctl_val = UsbRead(ctl_reg);
 4000f5c:	d0a6cb0b 	ldhu	r2,-25812(gp)
 4000f60:	10bfffcc 	andi	r2,r2,65535
 4000f64:	1009883a 	mov	r4,r2
 4000f68:	40010140 	call	4001014 <UsbRead>
 4000f6c:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
 4000f70:	0104e204 	movi	r4,5000
 4000f74:	400f2ec0 	call	400f2ec <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
 4000f78:	d0a6cb0b 	ldhu	r2,-25812(gp)
 4000f7c:	10bfffcc 	andi	r2,r2,65535
 4000f80:	1009883a 	mov	r4,r2
 4000f84:	40010140 	call	4001014 <UsbRead>
 4000f88:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
 4000f8c:	0104e204 	movi	r4,5000
 4000f90:	400f2ec0 	call	400f2ec <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
 4000f94:	d0a6cb0b 	ldhu	r2,-25812(gp)
 4000f98:	10bfffcc 	andi	r2,r2,65535
 4000f9c:	1009883a 	mov	r4,r2
 4000fa0:	40010140 	call	4001014 <UsbRead>
 4000fa4:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
 4000fa8:	0104e204 	movi	r4,5000
 4000fac:	400f2ec0 	call	400f2ec <usleep>

			if(usb_ctl_val & no_device)
 4000fb0:	d0a6cb8b 	ldhu	r2,-25810(gp)
 4000fb4:	e0fffb0b 	ldhu	r3,-20(fp)
 4000fb8:	1884703a 	and	r2,r3,r2
 4000fbc:	10bfffcc 	andi	r2,r2,65535
 4000fc0:	10000126 	beq	r2,zero,4000fc8 <main+0xd2c>
				goto USB_HOT_PLUG;
 4000fc4:	003cc006 	br	40002c8 <__alt_data_end+0xfe0002c8>

			usleep(200);
 4000fc8:	01003204 	movi	r4,200
 4000fcc:	400f2ec0 	call	400f2ec <usleep>
				printf("\n[INFO]: the keyboard has been removed!!! \n");
				printf("[INFO]: please insert again!!! \n");
			}
		}

		while (!(usb_ctl_val & no_device))
 4000fd0:	d0a6cb8b 	ldhu	r2,-25810(gp)
 4000fd4:	e0fffb0b 	ldhu	r3,-20(fp)
 4000fd8:	1884703a 	and	r2,r3,r2
 4000fdc:	10bfffcc 	andi	r2,r2,65535
 4000fe0:	103fde26 	beq	r2,zero,4000f5c <__alt_data_end+0xfe000f5c>
				goto USB_HOT_PLUG;

			usleep(200);
		}

	}//end while
 4000fe4:	003f5006 	br	4000d28 <__alt_data_end+0xfe000d28>

04000fe8 <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
 4000fe8:	defffd04 	addi	sp,sp,-12
 4000fec:	df000215 	stw	fp,8(sp)
 4000ff0:	df000204 	addi	fp,sp,8
 4000ff4:	2007883a 	mov	r3,r4
 4000ff8:	2805883a 	mov	r2,r5
 4000ffc:	e0fffe0d 	sth	r3,-8(fp)
 4001000:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
}
 4001004:	e037883a 	mov	sp,fp
 4001008:	df000017 	ldw	fp,0(sp)
 400100c:	dec00104 	addi	sp,sp,4
 4001010:	f800283a 	ret

04001014 <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
 4001014:	defffe04 	addi	sp,sp,-8
 4001018:	df000115 	stw	fp,4(sp)
 400101c:	df000104 	addi	fp,sp,4
 4001020:	2005883a 	mov	r2,r4
 4001024:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
}
 4001028:	e037883a 	mov	sp,fp
 400102c:	df000017 	ldw	fp,0(sp)
 4001030:	dec00104 	addi	sp,sp,4
 4001034:	f800283a 	ret

04001038 <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
 4001038:	defffe04 	addi	sp,sp,-8
 400103c:	dfc00115 	stw	ra,4(sp)
 4001040:	df000015 	stw	fp,0(sp)
 4001044:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
 4001048:	01000044 	movi	r4,1
 400104c:	017e9414 	movui	r5,64080
 4001050:	40002480 	call	4000248 <IO_write>
	usleep(100000);
 4001054:	010000b4 	movhi	r4,2
 4001058:	2121a804 	addi	r4,r4,-31072
 400105c:	400f2ec0 	call	400f2ec <usleep>
	printf("[USB INIT]:reset finished!\n");
 4001060:	01010074 	movhi	r4,1025
 4001064:	21066604 	addi	r4,r4,6552
 4001068:	40022040 	call	4002204 <puts>

	usleep(500000);
 400106c:	01000234 	movhi	r4,8
 4001070:	21284804 	addi	r4,r4,-24288
 4001074:	400f2ec0 	call	400f2ec <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
 4001078:	01010074 	movhi	r4,1025
 400107c:	21066d04 	addi	r4,r4,6580
 4001080:	40022040 	call	4002204 <puts>
	IO_read(HPI_MAILBOX);
 4001084:	01000044 	movi	r4,1
 4001088:	40002740 	call	4000274 <IO_read>
	IO_read(HPI_STATUS);
 400108c:	010000c4 	movi	r4,3
 4001090:	40002740 	call	4000274 <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
 4001094:	01005104 	movi	r4,324
 4001098:	40010140 	call	4001014 <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
 400109c:	01005104 	movi	r4,324
 40010a0:	000b883a 	mov	r5,zero
 40010a4:	4000fe80 	call	4000fe8 <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
 40010a8:	01005204 	movi	r4,328
 40010ac:	40010140 	call	4001014 <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
 40010b0:	01005204 	movi	r4,328
 40010b4:	000b883a 	mov	r5,zero
 40010b8:	4000fe80 	call	4000fe8 <UsbWrite>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
 40010bc:	01302414 	movui	r4,49296
 40010c0:	017fffd4 	movui	r5,65535
 40010c4:	4000fe80 	call	4000fe8 <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
 40010c8:	01302c14 	movui	r4,49328
 40010cc:	017fffd4 	movui	r5,65535
 40010d0:	4000fe80 	call	4000fe8 <UsbWrite>
}
 40010d4:	e037883a 	mov	sp,fp
 40010d8:	dfc00117 	ldw	ra,4(sp)
 40010dc:	df000017 	ldw	fp,0(sp)
 40010e0:	dec00204 	addi	sp,sp,8
 40010e4:	f800283a 	ret

040010e8 <UsbSetAddress>:


void UsbSetAddress()
{
 40010e8:	defffe04 	addi	sp,sp,-8
 40010ec:	dfc00115 	stw	ra,4(sp)
 40010f0:	df000015 	stw	fp,0(sp)
 40010f4:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 40010f8:	01000084 	movi	r4,2
 40010fc:	01414004 	movi	r5,1280
 4001100:	40002480 	call	4000248 <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
 4001104:	0009883a 	mov	r4,zero
 4001108:	01414304 	movi	r5,1292
 400110c:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 4001110:	0009883a 	mov	r4,zero
 4001114:	01400204 	movi	r5,8
 4001118:	40002480 	call	4000248 <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
 400111c:	0009883a 	mov	r4,zero
 4001120:	01403404 	movi	r5,208
 4001124:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
 4001128:	0009883a 	mov	r4,zero
 400112c:	01400044 	movi	r5,1
 4001130:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
 4001134:	0009883a 	mov	r4,zero
 4001138:	014004c4 	movi	r5,19
 400113c:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
 4001140:	0009883a 	mov	r4,zero
 4001144:	01414504 	movi	r5,1300
 4001148:	40002480 	call	4000248 <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
 400114c:	0009883a 	mov	r4,zero
 4001150:	01414004 	movi	r5,1280
 4001154:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0002);
 4001158:	0009883a 	mov	r4,zero
 400115c:	01400084 	movi	r5,2
 4001160:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
 4001164:	0009883a 	mov	r4,zero
 4001168:	000b883a 	mov	r5,zero
 400116c:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
 4001170:	0009883a 	mov	r4,zero
 4001174:	000b883a 	mov	r5,zero
 4001178:	40002480 	call	4000248 <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
 400117c:	0009883a 	mov	r4,zero
 4001180:	000b883a 	mov	r5,zero
 4001184:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//
 4001188:	0009883a 	mov	r4,zero
 400118c:	000b883a 	mov	r5,zero
 4001190:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0090);//
 4001194:	0009883a 	mov	r4,zero
 4001198:	01402404 	movi	r5,144
 400119c:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0041);
 40011a0:	0009883a 	mov	r4,zero
 40011a4:	01401044 	movi	r5,65
 40011a8:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
 40011ac:	0009883a 	mov	r4,zero
 40011b0:	014004c4 	movi	r5,19
 40011b4:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
 40011b8:	0009883a 	mov	r4,zero
 40011bc:	000b883a 	mov	r5,zero
 40011c0:	40002480 	call	4000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 40011c4:	01006c04 	movi	r4,432
 40011c8:	01414004 	movi	r5,1280
 40011cc:	4000fe80 	call	4000fe8 <UsbWrite>
}
 40011d0:	e037883a 	mov	sp,fp
 40011d4:	dfc00117 	ldw	ra,4(sp)
 40011d8:	df000017 	ldw	fp,0(sp)
 40011dc:	dec00204 	addi	sp,sp,8
 40011e0:	f800283a 	ret

040011e4 <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
 40011e4:	defffe04 	addi	sp,sp,-8
 40011e8:	dfc00115 	stw	ra,4(sp)
 40011ec:	df000015 	stw	fp,0(sp)
 40011f0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 40011f4:	01000084 	movi	r4,2
 40011f8:	01414004 	movi	r5,1280
 40011fc:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
 4001200:	0009883a 	mov	r4,zero
 4001204:	01414304 	movi	r5,1292
 4001208:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 400120c:	0009883a 	mov	r4,zero
 4001210:	01400204 	movi	r5,8
 4001214:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
 4001218:	0009883a 	mov	r4,zero
 400121c:	0140b404 	movi	r5,720
 4001220:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
 4001224:	0009883a 	mov	r4,zero
 4001228:	01400044 	movi	r5,1
 400122c:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
 4001230:	0009883a 	mov	r4,zero
 4001234:	014004c4 	movi	r5,19
 4001238:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
 400123c:	0009883a 	mov	r4,zero
 4001240:	01414504 	movi	r5,1300
 4001244:	40002480 	call	4000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
 4001248:	0009883a 	mov	r4,zero
 400124c:	0141a004 	movi	r5,1664
 4001250:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
 4001254:	0009883a 	mov	r4,zero
 4001258:	01404004 	movi	r5,256
 400125c:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
 4001260:	0009883a 	mov	r4,zero
 4001264:	000b883a 	mov	r5,zero
 4001268:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0008);
 400126c:	0009883a 	mov	r4,zero
 4001270:	01400204 	movi	r5,8
 4001274:	40002480 	call	4000248 <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
 4001278:	0009883a 	mov	r4,zero
 400127c:	01414b04 	movi	r5,1324
 4001280:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//
 4001284:	0009883a 	mov	r4,zero
 4001288:	01400204 	movi	r5,8
 400128c:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//
 4001290:	0009883a 	mov	r4,zero
 4001294:	0140a404 	movi	r5,656
 4001298:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0041);
 400129c:	0009883a 	mov	r4,zero
 40012a0:	01401044 	movi	r5,65
 40012a4:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
 40012a8:	0009883a 	mov	r4,zero
 40012ac:	014004c4 	movi	r5,19
 40012b0:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0520);
 40012b4:	0009883a 	mov	r4,zero
 40012b8:	01414804 	movi	r5,1312
 40012bc:	40002480 	call	4000248 <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
 40012c0:	0009883a 	mov	r4,zero
 40012c4:	000b883a 	mov	r5,zero
 40012c8:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
 40012cc:	0009883a 	mov	r4,zero
 40012d0:	000b883a 	mov	r5,zero
 40012d4:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
 40012d8:	0009883a 	mov	r4,zero
 40012dc:	01408404 	movi	r5,528
 40012e0:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0041);
 40012e4:	0009883a 	mov	r4,zero
 40012e8:	01401044 	movi	r5,65
 40012ec:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
 40012f0:	0009883a 	mov	r4,zero
 40012f4:	014004c4 	movi	r5,19
 40012f8:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
 40012fc:	0009883a 	mov	r4,zero
 4001300:	000b883a 	mov	r5,zero
 4001304:	40002480 	call	4000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 4001308:	01006c04 	movi	r4,432
 400130c:	01414004 	movi	r5,1280
 4001310:	4000fe80 	call	4000fe8 <UsbWrite>
}
 4001314:	e037883a 	mov	sp,fp
 4001318:	dfc00117 	ldw	ra,4(sp)
 400131c:	df000017 	ldw	fp,0(sp)
 4001320:	dec00204 	addi	sp,sp,8
 4001324:	f800283a 	ret

04001328 <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
 4001328:	defffe04 	addi	sp,sp,-8
 400132c:	dfc00115 	stw	ra,4(sp)
 4001330:	df000015 	stw	fp,0(sp)
 4001334:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 4001338:	01000084 	movi	r4,2
 400133c:	01414004 	movi	r5,1280
 4001340:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
 4001344:	0009883a 	mov	r4,zero
 4001348:	01414304 	movi	r5,1292
 400134c:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 4001350:	0009883a 	mov	r4,zero
 4001354:	01400204 	movi	r5,8
 4001358:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
 400135c:	0009883a 	mov	r4,zero
 4001360:	0140b404 	movi	r5,720
 4001364:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
 4001368:	0009883a 	mov	r4,zero
 400136c:	01400044 	movi	r5,1
 4001370:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
 4001374:	0009883a 	mov	r4,zero
 4001378:	014004c4 	movi	r5,19
 400137c:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
 4001380:	0009883a 	mov	r4,zero
 4001384:	01414504 	movi	r5,1300
 4001388:	40002480 	call	4000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
 400138c:	0009883a 	mov	r4,zero
 4001390:	0141a004 	movi	r5,1664
 4001394:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
 4001398:	0009883a 	mov	r4,zero
 400139c:	01404004 	movi	r5,256
 40013a0:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
 40013a4:	0009883a 	mov	r4,zero
 40013a8:	000b883a 	mov	r5,zero
 40013ac:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0012);//2
 40013b0:	0009883a 	mov	r4,zero
 40013b4:	01400484 	movi	r5,18
 40013b8:	40002480 	call	4000248 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
 40013bc:	0009883a 	mov	r4,zero
 40013c0:	01415104 	movi	r5,1348
 40013c4:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
 40013c8:	0009883a 	mov	r4,zero
 40013cc:	01400204 	movi	r5,8
 40013d0:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 40013d4:	0009883a 	mov	r4,zero
 40013d8:	0140a404 	movi	r5,656
 40013dc:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
 40013e0:	0009883a 	mov	r4,zero
 40013e4:	01401044 	movi	r5,65
 40013e8:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 40013ec:	0009883a 	mov	r4,zero
 40013f0:	014004c4 	movi	r5,19
 40013f4:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
 40013f8:	0009883a 	mov	r4,zero
 40013fc:	01414804 	movi	r5,1312
 4001400:	40002480 	call	4000248 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
 4001404:	0009883a 	mov	r4,zero
 4001408:	01415304 	movi	r5,1356
 400140c:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
 4001410:	0009883a 	mov	r4,zero
 4001414:	01400204 	movi	r5,8
 4001418:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
 400141c:	0009883a 	mov	r4,zero
 4001420:	0140a404 	movi	r5,656
 4001424:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//6
 4001428:	0009883a 	mov	r4,zero
 400142c:	01400044 	movi	r5,1
 4001430:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
 4001434:	0009883a 	mov	r4,zero
 4001438:	014004c4 	movi	r5,19
 400143c:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
 4001440:	0009883a 	mov	r4,zero
 4001444:	01414b04 	movi	r5,1324
 4001448:	40002480 	call	4000248 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
 400144c:	0009883a 	mov	r4,zero
 4001450:	01415504 	movi	r5,1364
 4001454:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0002);//e
 4001458:	0009883a 	mov	r4,zero
 400145c:	01400084 	movi	r5,2
 4001460:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
 4001464:	0009883a 	mov	r4,zero
 4001468:	0140a404 	movi	r5,656
 400146c:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
 4001470:	0009883a 	mov	r4,zero
 4001474:	01401044 	movi	r5,65
 4001478:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
 400147c:	0009883a 	mov	r4,zero
 4001480:	014004c4 	movi	r5,19
 4001484:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
 4001488:	0009883a 	mov	r4,zero
 400148c:	01414e04 	movi	r5,1336
 4001490:	40002480 	call	4000248 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
 4001494:	0009883a 	mov	r4,zero
 4001498:	000b883a 	mov	r5,zero
 400149c:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
 40014a0:	0009883a 	mov	r4,zero
 40014a4:	000b883a 	mov	r5,zero
 40014a8:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0210);//c
 40014ac:	0009883a 	mov	r4,zero
 40014b0:	01408404 	movi	r5,528
 40014b4:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//e
 40014b8:	0009883a 	mov	r4,zero
 40014bc:	01401044 	movi	r5,65
 40014c0:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
 40014c4:	0009883a 	mov	r4,zero
 40014c8:	014004c4 	movi	r5,19
 40014cc:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
 40014d0:	0009883a 	mov	r4,zero
 40014d4:	000b883a 	mov	r5,zero
 40014d8:	40002480 	call	4000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 40014dc:	01006c04 	movi	r4,432
 40014e0:	01414004 	movi	r5,1280
 40014e4:	4000fe80 	call	4000fe8 <UsbWrite>
}
 40014e8:	e037883a 	mov	sp,fp
 40014ec:	dfc00117 	ldw	ra,4(sp)
 40014f0:	df000017 	ldw	fp,0(sp)
 40014f4:	dec00204 	addi	sp,sp,8
 40014f8:	f800283a 	ret

040014fc <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
 40014fc:	defffe04 	addi	sp,sp,-8
 4001500:	dfc00115 	stw	ra,4(sp)
 4001504:	df000015 	stw	fp,0(sp)
 4001508:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 400150c:	01000084 	movi	r4,2
 4001510:	01414004 	movi	r5,1280
 4001514:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
 4001518:	0009883a 	mov	r4,zero
 400151c:	01414304 	movi	r5,1292
 4001520:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 4001524:	0009883a 	mov	r4,zero
 4001528:	01400204 	movi	r5,8
 400152c:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
 4001530:	0009883a 	mov	r4,zero
 4001534:	0140b404 	movi	r5,720
 4001538:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
 400153c:	0009883a 	mov	r4,zero
 4001540:	01400044 	movi	r5,1
 4001544:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
 4001548:	0009883a 	mov	r4,zero
 400154c:	014004c4 	movi	r5,19
 4001550:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
 4001554:	0009883a 	mov	r4,zero
 4001558:	01414504 	movi	r5,1300
 400155c:	40002480 	call	4000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
 4001560:	0009883a 	mov	r4,zero
 4001564:	0141a004 	movi	r5,1664
 4001568:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
 400156c:	0009883a 	mov	r4,zero
 4001570:	01408004 	movi	r5,512
 4001574:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
 4001578:	0009883a 	mov	r4,zero
 400157c:	000b883a 	mov	r5,zero
 4001580:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0009);//2
 4001584:	0009883a 	mov	r4,zero
 4001588:	01400244 	movi	r5,9
 400158c:	40002480 	call	4000248 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
 4001590:	0009883a 	mov	r4,zero
 4001594:	01415104 	movi	r5,1348
 4001598:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
 400159c:	0009883a 	mov	r4,zero
 40015a0:	01400204 	movi	r5,8
 40015a4:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 40015a8:	0009883a 	mov	r4,zero
 40015ac:	0140a404 	movi	r5,656
 40015b0:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
 40015b4:	0009883a 	mov	r4,zero
 40015b8:	01401044 	movi	r5,65
 40015bc:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 40015c0:	0009883a 	mov	r4,zero
 40015c4:	014004c4 	movi	r5,19
 40015c8:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
 40015cc:	0009883a 	mov	r4,zero
 40015d0:	01414804 	movi	r5,1312
 40015d4:	40002480 	call	4000248 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
 40015d8:	0009883a 	mov	r4,zero
 40015dc:	01415304 	movi	r5,1356
 40015e0:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//2
 40015e4:	0009883a 	mov	r4,zero
 40015e8:	01400044 	movi	r5,1
 40015ec:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
 40015f0:	0009883a 	mov	r4,zero
 40015f4:	0140a404 	movi	r5,656
 40015f8:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
 40015fc:	0009883a 	mov	r4,zero
 4001600:	01400044 	movi	r5,1
 4001604:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
 4001608:	0009883a 	mov	r4,zero
 400160c:	014004c4 	movi	r5,19
 4001610:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
 4001614:	0009883a 	mov	r4,zero
 4001618:	01414b04 	movi	r5,1324
 400161c:	40002480 	call	4000248 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
 4001620:	0009883a 	mov	r4,zero
 4001624:	000b883a 	mov	r5,zero
 4001628:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
 400162c:	0009883a 	mov	r4,zero
 4001630:	000b883a 	mov	r5,zero
 4001634:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
 4001638:	0009883a 	mov	r4,zero
 400163c:	01408404 	movi	r5,528
 4001640:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
 4001644:	0009883a 	mov	r4,zero
 4001648:	01401044 	movi	r5,65
 400164c:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
 4001650:	0009883a 	mov	r4,zero
 4001654:	014004c4 	movi	r5,19
 4001658:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
 400165c:	0009883a 	mov	r4,zero
 4001660:	000b883a 	mov	r5,zero
 4001664:	40002480 	call	4000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 4001668:	01006c04 	movi	r4,432
 400166c:	01414004 	movi	r5,1280
 4001670:	4000fe80 	call	4000fe8 <UsbWrite>
}
 4001674:	e037883a 	mov	sp,fp
 4001678:	dfc00117 	ldw	ra,4(sp)
 400167c:	df000017 	ldw	fp,0(sp)
 4001680:	dec00204 	addi	sp,sp,8
 4001684:	f800283a 	ret

04001688 <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
 4001688:	defffe04 	addi	sp,sp,-8
 400168c:	dfc00115 	stw	ra,4(sp)
 4001690:	df000015 	stw	fp,0(sp)
 4001694:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 4001698:	01000084 	movi	r4,2
 400169c:	01414004 	movi	r5,1280
 40016a0:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
 40016a4:	0009883a 	mov	r4,zero
 40016a8:	01414304 	movi	r5,1292
 40016ac:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 40016b0:	0009883a 	mov	r4,zero
 40016b4:	01400204 	movi	r5,8
 40016b8:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
 40016bc:	0009883a 	mov	r4,zero
 40016c0:	0140b404 	movi	r5,720
 40016c4:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
 40016c8:	0009883a 	mov	r4,zero
 40016cc:	01400044 	movi	r5,1
 40016d0:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
 40016d4:	0009883a 	mov	r4,zero
 40016d8:	014004c4 	movi	r5,19
 40016dc:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
 40016e0:	0009883a 	mov	r4,zero
 40016e4:	01414504 	movi	r5,1300
 40016e8:	40002480 	call	4000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
 40016ec:	0009883a 	mov	r4,zero
 40016f0:	0141a004 	movi	r5,1664
 40016f4:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
 40016f8:	0009883a 	mov	r4,zero
 40016fc:	01408004 	movi	r5,512
 4001700:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
 4001704:	0009883a 	mov	r4,zero
 4001708:	000b883a 	mov	r5,zero
 400170c:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
 4001710:	0009883a 	mov	r4,zero
 4001714:	01403fc4 	movi	r5,255
 4001718:	40002480 	call	4000248 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
 400171c:	0009883a 	mov	r4,zero
 4001720:	01415704 	movi	r5,1372
 4001724:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
 4001728:	0009883a 	mov	r4,zero
 400172c:	01400204 	movi	r5,8
 4001730:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 4001734:	0009883a 	mov	r4,zero
 4001738:	0140a404 	movi	r5,656
 400173c:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
 4001740:	0009883a 	mov	r4,zero
 4001744:	01401044 	movi	r5,65
 4001748:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 400174c:	0009883a 	mov	r4,zero
 4001750:	014004c4 	movi	r5,19
 4001754:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
 4001758:	0009883a 	mov	r4,zero
 400175c:	01414804 	movi	r5,1312
 4001760:	40002480 	call	4000248 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
 4001764:	0009883a 	mov	r4,zero
 4001768:	01415904 	movi	r5,1380
 400176c:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
 4001770:	0009883a 	mov	r4,zero
 4001774:	01400204 	movi	r5,8
 4001778:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
 400177c:	0009883a 	mov	r4,zero
 4001780:	0140a404 	movi	r5,656
 4001784:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
 4001788:	0009883a 	mov	r4,zero
 400178c:	01400044 	movi	r5,1
 4001790:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
 4001794:	0009883a 	mov	r4,zero
 4001798:	014004c4 	movi	r5,19
 400179c:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
 40017a0:	0009883a 	mov	r4,zero
 40017a4:	01414b04 	movi	r5,1324
 40017a8:	40002480 	call	4000248 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
 40017ac:	0009883a 	mov	r4,zero
 40017b0:	01415b04 	movi	r5,1388
 40017b4:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
 40017b8:	0009883a 	mov	r4,zero
 40017bc:	01400204 	movi	r5,8
 40017c0:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
 40017c4:	0009883a 	mov	r4,zero
 40017c8:	0140a404 	movi	r5,656
 40017cc:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
 40017d0:	0009883a 	mov	r4,zero
 40017d4:	01401044 	movi	r5,65
 40017d8:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
 40017dc:	0009883a 	mov	r4,zero
 40017e0:	014004c4 	movi	r5,19
 40017e4:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
 40017e8:	0009883a 	mov	r4,zero
 40017ec:	01414e04 	movi	r5,1336
 40017f0:	40002480 	call	4000248 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
 40017f4:	0009883a 	mov	r4,zero
 40017f8:	01415d04 	movi	r5,1396
 40017fc:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
 4001800:	0009883a 	mov	r4,zero
 4001804:	01400204 	movi	r5,8
 4001808:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
 400180c:	0009883a 	mov	r4,zero
 4001810:	0140a404 	movi	r5,656
 4001814:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
 4001818:	0009883a 	mov	r4,zero
 400181c:	01400044 	movi	r5,1
 4001820:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
 4001824:	0009883a 	mov	r4,zero
 4001828:	014004c4 	movi	r5,19
 400182c:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
 4001830:	0009883a 	mov	r4,zero
 4001834:	01415104 	movi	r5,1348
 4001838:	40002480 	call	4000248 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
 400183c:	0009883a 	mov	r4,zero
 4001840:	01415f04 	movi	r5,1404
 4001844:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0002);//6
 4001848:	0009883a 	mov	r4,zero
 400184c:	01400084 	movi	r5,2
 4001850:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 4001854:	0009883a 	mov	r4,zero
 4001858:	0140a404 	movi	r5,656
 400185c:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
 4001860:	0009883a 	mov	r4,zero
 4001864:	01401044 	movi	r5,65
 4001868:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 400186c:	0009883a 	mov	r4,zero
 4001870:	014004c4 	movi	r5,19
 4001874:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
 4001878:	0009883a 	mov	r4,zero
 400187c:	01415404 	movi	r5,1360
 4001880:	40002480 	call	4000248 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
 4001884:	0009883a 	mov	r4,zero
 4001888:	000b883a 	mov	r5,zero
 400188c:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
 4001890:	0009883a 	mov	r4,zero
 4001894:	000b883a 	mov	r5,zero
 4001898:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0210);//4
 400189c:	0009883a 	mov	r4,zero
 40018a0:	01408404 	movi	r5,528
 40018a4:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//6
 40018a8:	0009883a 	mov	r4,zero
 40018ac:	01401044 	movi	r5,65
 40018b0:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
 40018b4:	0009883a 	mov	r4,zero
 40018b8:	014004c4 	movi	r5,19
 40018bc:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
 40018c0:	0009883a 	mov	r4,zero
 40018c4:	000b883a 	mov	r5,zero
 40018c8:	40002480 	call	4000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 40018cc:	01006c04 	movi	r4,432
 40018d0:	01414004 	movi	r5,1280
 40018d4:	4000fe80 	call	4000fe8 <UsbWrite>
}
 40018d8:	e037883a 	mov	sp,fp
 40018dc:	dfc00117 	ldw	ra,4(sp)
 40018e0:	df000017 	ldw	fp,0(sp)
 40018e4:	dec00204 	addi	sp,sp,8
 40018e8:	f800283a 	ret

040018ec <UsbSetConfig>:

void UsbSetConfig()
{
 40018ec:	defffe04 	addi	sp,sp,-8
 40018f0:	dfc00115 	stw	ra,4(sp)
 40018f4:	df000015 	stw	fp,0(sp)
 40018f8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 40018fc:	01000084 	movi	r4,2
 4001900:	01414004 	movi	r5,1280
 4001904:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
 4001908:	0009883a 	mov	r4,zero
 400190c:	01414304 	movi	r5,1292
 4001910:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 4001914:	0009883a 	mov	r4,zero
 4001918:	01400204 	movi	r5,8
 400191c:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
 4001920:	0009883a 	mov	r4,zero
 4001924:	0140b404 	movi	r5,720
 4001928:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
 400192c:	0009883a 	mov	r4,zero
 4001930:	01400044 	movi	r5,1
 4001934:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
 4001938:	0009883a 	mov	r4,zero
 400193c:	014004c4 	movi	r5,19
 4001940:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
 4001944:	0009883a 	mov	r4,zero
 4001948:	01414504 	movi	r5,1300
 400194c:	40002480 	call	4000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
 4001950:	0009883a 	mov	r4,zero
 4001954:	01424004 	movi	r5,2304
 4001958:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
 400195c:	0009883a 	mov	r4,zero
 4001960:	01400044 	movi	r5,1
 4001964:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
 4001968:	0009883a 	mov	r4,zero
 400196c:	000b883a 	mov	r5,zero
 4001970:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
 4001974:	0009883a 	mov	r4,zero
 4001978:	000b883a 	mov	r5,zero
 400197c:	40002480 	call	4000248 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
 4001980:	0009883a 	mov	r4,zero
 4001984:	000b883a 	mov	r5,zero
 4001988:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
 400198c:	0009883a 	mov	r4,zero
 4001990:	000b883a 	mov	r5,zero
 4001994:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
 4001998:	0009883a 	mov	r4,zero
 400199c:	0140a404 	movi	r5,656
 40019a0:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
 40019a4:	0009883a 	mov	r4,zero
 40019a8:	01401044 	movi	r5,65
 40019ac:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
 40019b0:	0009883a 	mov	r4,zero
 40019b4:	014004c4 	movi	r5,19
 40019b8:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
 40019bc:	0009883a 	mov	r4,zero
 40019c0:	000b883a 	mov	r5,zero
 40019c4:	40002480 	call	4000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 40019c8:	01006c04 	movi	r4,432
 40019cc:	01414004 	movi	r5,1280
 40019d0:	4000fe80 	call	4000fe8 <UsbWrite>

}
 40019d4:	e037883a 	mov	sp,fp
 40019d8:	dfc00117 	ldw	ra,4(sp)
 40019dc:	df000017 	ldw	fp,0(sp)
 40019e0:	dec00204 	addi	sp,sp,8
 40019e4:	f800283a 	ret

040019e8 <UsbClassRequest>:

void UsbClassRequest()
{
 40019e8:	defffe04 	addi	sp,sp,-8
 40019ec:	dfc00115 	stw	ra,4(sp)
 40019f0:	df000015 	stw	fp,0(sp)
 40019f4:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 40019f8:	01000084 	movi	r4,2
 40019fc:	01414004 	movi	r5,1280
 4001a00:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
 4001a04:	0009883a 	mov	r4,zero
 4001a08:	01414304 	movi	r5,1292
 4001a0c:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 4001a10:	0009883a 	mov	r4,zero
 4001a14:	01400204 	movi	r5,8
 4001a18:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
 4001a1c:	0009883a 	mov	r4,zero
 4001a20:	0140b404 	movi	r5,720
 4001a24:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
 4001a28:	0009883a 	mov	r4,zero
 4001a2c:	01400044 	movi	r5,1
 4001a30:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
 4001a34:	0009883a 	mov	r4,zero
 4001a38:	014004c4 	movi	r5,19
 4001a3c:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
 4001a40:	0009883a 	mov	r4,zero
 4001a44:	01414504 	movi	r5,1300
 4001a48:	40002480 	call	4000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
 4001a4c:	0009883a 	mov	r4,zero
 4001a50:	01428844 	movi	r5,2593
 4001a54:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
 4001a58:	0009883a 	mov	r4,zero
 4001a5c:	000b883a 	mov	r5,zero
 4001a60:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
 4001a64:	0009883a 	mov	r4,zero
 4001a68:	000b883a 	mov	r5,zero
 4001a6c:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
 4001a70:	0009883a 	mov	r4,zero
 4001a74:	000b883a 	mov	r5,zero
 4001a78:	40002480 	call	4000248 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
 4001a7c:	0009883a 	mov	r4,zero
 4001a80:	000b883a 	mov	r5,zero
 4001a84:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
 4001a88:	0009883a 	mov	r4,zero
 4001a8c:	000b883a 	mov	r5,zero
 4001a90:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
 4001a94:	0009883a 	mov	r4,zero
 4001a98:	0140a404 	movi	r5,656
 4001a9c:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
 4001aa0:	0009883a 	mov	r4,zero
 4001aa4:	01401044 	movi	r5,65
 4001aa8:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
 4001aac:	0009883a 	mov	r4,zero
 4001ab0:	014004c4 	movi	r5,19
 4001ab4:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
 4001ab8:	0009883a 	mov	r4,zero
 4001abc:	000b883a 	mov	r5,zero
 4001ac0:	40002480 	call	4000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 4001ac4:	01006c04 	movi	r4,432
 4001ac8:	01414004 	movi	r5,1280
 4001acc:	4000fe80 	call	4000fe8 <UsbWrite>
}
 4001ad0:	e037883a 	mov	sp,fp
 4001ad4:	dfc00117 	ldw	ra,4(sp)
 4001ad8:	df000017 	ldw	fp,0(sp)
 4001adc:	dec00204 	addi	sp,sp,8
 4001ae0:	f800283a 	ret

04001ae4 <UsbGetHidDesc>:


void UsbGetHidDesc()
{
 4001ae4:	defffe04 	addi	sp,sp,-8
 4001ae8:	dfc00115 	stw	ra,4(sp)
 4001aec:	df000015 	stw	fp,0(sp)
 4001af0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 4001af4:	01000084 	movi	r4,2
 4001af8:	01414004 	movi	r5,1280
 4001afc:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
 4001b00:	0009883a 	mov	r4,zero
 4001b04:	01414304 	movi	r5,1292
 4001b08:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 4001b0c:	0009883a 	mov	r4,zero
 4001b10:	01400204 	movi	r5,8
 4001b14:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
 4001b18:	0009883a 	mov	r4,zero
 4001b1c:	0140b404 	movi	r5,720
 4001b20:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
 4001b24:	0009883a 	mov	r4,zero
 4001b28:	01400044 	movi	r5,1
 4001b2c:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
 4001b30:	0009883a 	mov	r4,zero
 4001b34:	014004c4 	movi	r5,19
 4001b38:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
 4001b3c:	0009883a 	mov	r4,zero
 4001b40:	01414504 	movi	r5,1300
 4001b44:	40002480 	call	4000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
 4001b48:	0009883a 	mov	r4,zero
 4001b4c:	0141a044 	movi	r5,1665
 4001b50:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
 4001b54:	0009883a 	mov	r4,zero
 4001b58:	01484004 	movi	r5,8448
 4001b5c:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
 4001b60:	0009883a 	mov	r4,zero
 4001b64:	000b883a 	mov	r5,zero
 4001b68:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
 4001b6c:	0009883a 	mov	r4,zero
 4001b70:	01401ec4 	movi	r5,123
 4001b74:	40002480 	call	4000248 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
 4001b78:	0009883a 	mov	r4,zero
 4001b7c:	01415104 	movi	r5,1348
 4001b80:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
 4001b84:	0009883a 	mov	r4,zero
 4001b88:	01400204 	movi	r5,8
 4001b8c:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 4001b90:	0009883a 	mov	r4,zero
 4001b94:	0140a404 	movi	r5,656
 4001b98:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
 4001b9c:	0009883a 	mov	r4,zero
 4001ba0:	01401044 	movi	r5,65
 4001ba4:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 4001ba8:	0009883a 	mov	r4,zero
 4001bac:	014004c4 	movi	r5,19
 4001bb0:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
 4001bb4:	0009883a 	mov	r4,zero
 4001bb8:	01414804 	movi	r5,1312
 4001bbc:	40002480 	call	4000248 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
 4001bc0:	0009883a 	mov	r4,zero
 4001bc4:	000b883a 	mov	r5,zero
 4001bc8:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
 4001bcc:	0009883a 	mov	r4,zero
 4001bd0:	000b883a 	mov	r5,zero
 4001bd4:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
 4001bd8:	0009883a 	mov	r4,zero
 4001bdc:	01408404 	movi	r5,528
 4001be0:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
 4001be4:	0009883a 	mov	r4,zero
 4001be8:	01401044 	movi	r5,65
 4001bec:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
 4001bf0:	0009883a 	mov	r4,zero
 4001bf4:	014004c4 	movi	r5,19
 4001bf8:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
 4001bfc:	0009883a 	mov	r4,zero
 4001c00:	000b883a 	mov	r5,zero
 4001c04:	40002480 	call	4000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 4001c08:	01006c04 	movi	r4,432
 4001c0c:	01414004 	movi	r5,1280
 4001c10:	4000fe80 	call	4000fe8 <UsbWrite>

}
 4001c14:	e037883a 	mov	sp,fp
 4001c18:	dfc00117 	ldw	ra,4(sp)
 4001c1c:	df000017 	ldw	fp,0(sp)
 4001c20:	dec00204 	addi	sp,sp,8
 4001c24:	f800283a 	ret

04001c28 <UsbGetReportDesc>:


void UsbGetReportDesc()
{
 4001c28:	defffe04 	addi	sp,sp,-8
 4001c2c:	dfc00115 	stw	ra,4(sp)
 4001c30:	df000015 	stw	fp,0(sp)
 4001c34:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 4001c38:	01000084 	movi	r4,2
 4001c3c:	01414004 	movi	r5,1280
 4001c40:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
 4001c44:	0009883a 	mov	r4,zero
 4001c48:	01414304 	movi	r5,1292
 4001c4c:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 4001c50:	0009883a 	mov	r4,zero
 4001c54:	01400204 	movi	r5,8
 4001c58:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
 4001c5c:	0009883a 	mov	r4,zero
 4001c60:	0140b404 	movi	r5,720
 4001c64:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
 4001c68:	0009883a 	mov	r4,zero
 4001c6c:	01400044 	movi	r5,1
 4001c70:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
 4001c74:	0009883a 	mov	r4,zero
 4001c78:	014004c4 	movi	r5,19
 4001c7c:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
 4001c80:	0009883a 	mov	r4,zero
 4001c84:	01414504 	movi	r5,1300
 4001c88:	40002480 	call	4000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
 4001c8c:	0009883a 	mov	r4,zero
 4001c90:	0141a044 	movi	r5,1665
 4001c94:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
 4001c98:	0009883a 	mov	r4,zero
 4001c9c:	01488004 	movi	r5,8704
 4001ca0:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
 4001ca4:	0009883a 	mov	r4,zero
 4001ca8:	000b883a 	mov	r5,zero
 4001cac:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
 4001cb0:	0009883a 	mov	r4,zero
 4001cb4:	01401ec4 	movi	r5,123
 4001cb8:	40002480 	call	4000248 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
 4001cbc:	0009883a 	mov	r4,zero
 4001cc0:	01416004 	movi	r5,1408
 4001cc4:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
 4001cc8:	0009883a 	mov	r4,zero
 4001ccc:	01400204 	movi	r5,8
 4001cd0:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 4001cd4:	0009883a 	mov	r4,zero
 4001cd8:	0140a404 	movi	r5,656
 4001cdc:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
 4001ce0:	0009883a 	mov	r4,zero
 4001ce4:	01401044 	movi	r5,65
 4001ce8:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 4001cec:	0009883a 	mov	r4,zero
 4001cf0:	014004c4 	movi	r5,19
 4001cf4:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
 4001cf8:	0009883a 	mov	r4,zero
 4001cfc:	01414804 	movi	r5,1312
 4001d00:	40002480 	call	4000248 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
 4001d04:	0009883a 	mov	r4,zero
 4001d08:	01416204 	movi	r5,1416
 4001d0c:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
 4001d10:	0009883a 	mov	r4,zero
 4001d14:	01400204 	movi	r5,8
 4001d18:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
 4001d1c:	0009883a 	mov	r4,zero
 4001d20:	0140a404 	movi	r5,656
 4001d24:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
 4001d28:	0009883a 	mov	r4,zero
 4001d2c:	01400044 	movi	r5,1
 4001d30:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
 4001d34:	0009883a 	mov	r4,zero
 4001d38:	014004c4 	movi	r5,19
 4001d3c:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
 4001d40:	0009883a 	mov	r4,zero
 4001d44:	01414b04 	movi	r5,1324
 4001d48:	40002480 	call	4000248 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
 4001d4c:	0009883a 	mov	r4,zero
 4001d50:	01416404 	movi	r5,1424
 4001d54:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
 4001d58:	0009883a 	mov	r4,zero
 4001d5c:	01400204 	movi	r5,8
 4001d60:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
 4001d64:	0009883a 	mov	r4,zero
 4001d68:	0140a404 	movi	r5,656
 4001d6c:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
 4001d70:	0009883a 	mov	r4,zero
 4001d74:	01401044 	movi	r5,65
 4001d78:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
 4001d7c:	0009883a 	mov	r4,zero
 4001d80:	014004c4 	movi	r5,19
 4001d84:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
 4001d88:	0009883a 	mov	r4,zero
 4001d8c:	01414e04 	movi	r5,1336
 4001d90:	40002480 	call	4000248 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
 4001d94:	0009883a 	mov	r4,zero
 4001d98:	01416604 	movi	r5,1432
 4001d9c:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
 4001da0:	0009883a 	mov	r4,zero
 4001da4:	01400204 	movi	r5,8
 4001da8:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
 4001dac:	0009883a 	mov	r4,zero
 4001db0:	0140a404 	movi	r5,656
 4001db4:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
 4001db8:	0009883a 	mov	r4,zero
 4001dbc:	01400044 	movi	r5,1
 4001dc0:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
 4001dc4:	0009883a 	mov	r4,zero
 4001dc8:	014004c4 	movi	r5,19
 4001dcc:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
 4001dd0:	0009883a 	mov	r4,zero
 4001dd4:	01415104 	movi	r5,1348
 4001dd8:	40002480 	call	4000248 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
 4001ddc:	0009883a 	mov	r4,zero
 4001de0:	01416804 	movi	r5,1440
 4001de4:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
 4001de8:	0009883a 	mov	r4,zero
 4001dec:	01400204 	movi	r5,8
 4001df0:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 4001df4:	0009883a 	mov	r4,zero
 4001df8:	0140a404 	movi	r5,656
 4001dfc:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
 4001e00:	0009883a 	mov	r4,zero
 4001e04:	01401044 	movi	r5,65
 4001e08:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 4001e0c:	0009883a 	mov	r4,zero
 4001e10:	014004c4 	movi	r5,19
 4001e14:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
 4001e18:	0009883a 	mov	r4,zero
 4001e1c:	01415404 	movi	r5,1360
 4001e20:	40002480 	call	4000248 <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
 4001e24:	0009883a 	mov	r4,zero
 4001e28:	01416a04 	movi	r5,1448
 4001e2c:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
 4001e30:	0009883a 	mov	r4,zero
 4001e34:	01400204 	movi	r5,8
 4001e38:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
 4001e3c:	0009883a 	mov	r4,zero
 4001e40:	0140a404 	movi	r5,656
 4001e44:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
 4001e48:	0009883a 	mov	r4,zero
 4001e4c:	01400044 	movi	r5,1
 4001e50:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
 4001e54:	0009883a 	mov	r4,zero
 4001e58:	014004c4 	movi	r5,19
 4001e5c:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x055c);//a
 4001e60:	0009883a 	mov	r4,zero
 4001e64:	01415704 	movi	r5,1372
 4001e68:	40002480 	call	4000248 <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
 4001e6c:	0009883a 	mov	r4,zero
 4001e70:	01416c04 	movi	r5,1456
 4001e74:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
 4001e78:	0009883a 	mov	r4,zero
 4001e7c:	01400204 	movi	r5,8
 4001e80:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//560
 4001e84:	0009883a 	mov	r4,zero
 4001e88:	0140a404 	movi	r5,656
 4001e8c:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
 4001e90:	0009883a 	mov	r4,zero
 4001e94:	01401044 	movi	r5,65
 4001e98:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
 4001e9c:	0009883a 	mov	r4,zero
 4001ea0:	014004c4 	movi	r5,19
 4001ea4:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0568);//6
 4001ea8:	0009883a 	mov	r4,zero
 4001eac:	01415a04 	movi	r5,1384
 4001eb0:	40002480 	call	4000248 <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
 4001eb4:	0009883a 	mov	r4,zero
 4001eb8:	01416e04 	movi	r5,1464
 4001ebc:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0003);//a
 4001ec0:	0009883a 	mov	r4,zero
 4001ec4:	014000c4 	movi	r5,3
 4001ec8:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
 4001ecc:	0009883a 	mov	r4,zero
 4001ed0:	0140a404 	movi	r5,656
 4001ed4:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
 4001ed8:	0009883a 	mov	r4,zero
 4001edc:	01400044 	movi	r5,1
 4001ee0:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//570
 4001ee4:	0009883a 	mov	r4,zero
 4001ee8:	014004c4 	movi	r5,19
 4001eec:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0574);//2
 4001ef0:	0009883a 	mov	r4,zero
 4001ef4:	01415d04 	movi	r5,1396
 4001ef8:	40002480 	call	4000248 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
 4001efc:	0009883a 	mov	r4,zero
 4001f00:	000b883a 	mov	r5,zero
 4001f04:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
 4001f08:	0009883a 	mov	r4,zero
 4001f0c:	000b883a 	mov	r5,zero
 4001f10:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0210);//8
 4001f14:	0009883a 	mov	r4,zero
 4001f18:	01408404 	movi	r5,528
 4001f1c:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
 4001f20:	0009883a 	mov	r4,zero
 4001f24:	01401044 	movi	r5,65
 4001f28:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 4001f2c:	0009883a 	mov	r4,zero
 4001f30:	014004c4 	movi	r5,19
 4001f34:	40002480 	call	4000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
 4001f38:	0009883a 	mov	r4,zero
 4001f3c:	000b883a 	mov	r5,zero
 4001f40:	40002480 	call	4000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 4001f44:	01006c04 	movi	r4,432
 4001f48:	01414004 	movi	r5,1280
 4001f4c:	4000fe80 	call	4000fe8 <UsbWrite>

}
 4001f50:	e037883a 	mov	sp,fp
 4001f54:	dfc00117 	ldw	ra,4(sp)
 4001f58:	df000017 	ldw	fp,0(sp)
 4001f5c:	dec00204 	addi	sp,sp,8
 4001f60:	f800283a 	ret

04001f64 <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
 4001f64:	defffd04 	addi	sp,sp,-12
 4001f68:	dfc00215 	stw	ra,8(sp)
 4001f6c:	df000115 	stw	fp,4(sp)
 4001f70:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
 4001f74:	01005104 	movi	r4,324
 4001f78:	40010140 	call	4001014 <UsbRead>
 4001f7c:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
 4001f80:	01005104 	movi	r4,324
 4001f84:	000b883a 	mov	r5,zero
 4001f88:	4000fe80 	call	4000fe8 <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
 4001f8c:	00000d06 	br	4001fc4 <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
 4001f90:	e0bfff0b 	ldhu	r2,-4(fp)
 4001f94:	10000526 	beq	r2,zero,4001fac <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
 4001f98:	e0bfff0b 	ldhu	r2,-4(fp)
 4001f9c:	01010074 	movhi	r4,1025
 4001fa0:	21067604 	addi	r4,r4,6616
 4001fa4:	100b883a 	mov	r5,r2
 4001fa8:	40021100 	call	4002110 <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
 4001fac:	01005104 	movi	r4,324
 4001fb0:	40010140 	call	4001014 <UsbRead>
 4001fb4:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
 4001fb8:	01005104 	movi	r4,324
 4001fbc:	000b883a 	mov	r5,zero
 4001fc0:	4000fe80 	call	4000fe8 <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
 4001fc4:	e0bfff0b 	ldhu	r2,-4(fp)
 4001fc8:	10840018 	cmpnei	r2,r2,4096
 4001fcc:	103ff01e 	bne	r2,zero,4001f90 <__alt_data_end+0xfe001f90>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
 4001fd0:	e0bfff0b 	ldhu	r2,-4(fp)
}
 4001fd4:	e037883a 	mov	sp,fp
 4001fd8:	dfc00117 	ldw	ra,4(sp)
 4001fdc:	df000017 	ldw	fp,0(sp)
 4001fe0:	dec00204 	addi	sp,sp,8
 4001fe4:	f800283a 	ret

04001fe8 <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
 4001fe8:	defffd04 	addi	sp,sp,-12
 4001fec:	dfc00215 	stw	ra,8(sp)
 4001ff0:	df000115 	stw	fp,4(sp)
 4001ff4:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
 4001ff8:	010000c4 	movi	r4,3
 4001ffc:	40002740 	call	4000274 <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
 4002000:	01005104 	movi	r4,324
 4002004:	40010140 	call	4001014 <UsbRead>
 4002008:	10bfffcc 	andi	r2,r2,65535
 400200c:	10840018 	cmpnei	r2,r2,4096
 4002010:	1000091e 	bne	r2,zero,4002038 <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
 4002014:	01005104 	movi	r4,324
 4002018:	000b883a 	mov	r5,zero
 400201c:	4000fe80 	call	4000fe8 <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 4002020:	0001883a 	nop
 4002024:	010000c4 	movi	r4,3
 4002028:	40002740 	call	4000274 <IO_read>
 400202c:	10bfffcc 	andi	r2,r2,65535
 4002030:	1080040c 	andi	r2,r2,16
 4002034:	103ffb26 	beq	r2,zero,4002024 <__alt_data_end+0xfe002024>
		{
		}
	}
	//usleep(1000);
	IO_write(HPI_ADDR,0x0508);
 4002038:	01000084 	movi	r4,2
 400203c:	01414204 	movi	r5,1288
 4002040:	40002480 	call	4000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 4002044:	0009883a 	mov	r4,zero
 4002048:	40002740 	call	4000274 <IO_read>
 400204c:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
 4002050:	e0bfff0b 	ldhu	r2,-4(fp)
}
 4002054:	e037883a 	mov	sp,fp
 4002058:	dfc00117 	ldw	ra,4(sp)
 400205c:	df000017 	ldw	fp,0(sp)
 4002060:	dec00204 	addi	sp,sp,8
 4002064:	f800283a 	ret

04002068 <UsbPrintMem>:


void UsbPrintMem()
{
 4002068:	defffc04 	addi	sp,sp,-16
 400206c:	dfc00315 	stw	ra,12(sp)
 4002070:	df000215 	stw	fp,8(sp)
 4002074:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
 4002078:	01000084 	movi	r4,2
 400207c:	01414004 	movi	r5,1280
 4002080:	40002480 	call	4000248 <IO_write>
	for (i = 0; i <= 200; i += 2)
 4002084:	e03ffe15 	stw	zero,-8(fp)
 4002088:	00000e06 	br	40020c4 <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
 400208c:	0009883a 	mov	r4,zero
 4002090:	40002740 	call	4000274 <IO_read>
 4002094:	10bfffcc 	andi	r2,r2,65535
 4002098:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
 400209c:	e0bffe17 	ldw	r2,-8(fp)
 40020a0:	10814004 	addi	r2,r2,1280
 40020a4:	01010074 	movhi	r4,1025
 40020a8:	21067e04 	addi	r4,r4,6648
 40020ac:	100b883a 	mov	r5,r2
 40020b0:	e1bfff17 	ldw	r6,-4(fp)
 40020b4:	40021100 	call	4002110 <printf>

void UsbPrintMem()
{
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
 40020b8:	e0bffe17 	ldw	r2,-8(fp)
 40020bc:	10800084 	addi	r2,r2,2
 40020c0:	e0bffe15 	stw	r2,-8(fp)
 40020c4:	e0bffe17 	ldw	r2,-8(fp)
 40020c8:	10803250 	cmplti	r2,r2,201
 40020cc:	103fef1e 	bne	r2,zero,400208c <__alt_data_end+0xfe00208c>
	{
		code = IO_read(HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
 40020d0:	e037883a 	mov	sp,fp
 40020d4:	dfc00117 	ldw	ra,4(sp)
 40020d8:	df000017 	ldw	fp,0(sp)
 40020dc:	dec00204 	addi	sp,sp,8
 40020e0:	f800283a 	ret

040020e4 <_printf_r>:
 40020e4:	defffd04 	addi	sp,sp,-12
 40020e8:	dfc00015 	stw	ra,0(sp)
 40020ec:	d9800115 	stw	r6,4(sp)
 40020f0:	d9c00215 	stw	r7,8(sp)
 40020f4:	280d883a 	mov	r6,r5
 40020f8:	21400217 	ldw	r5,8(r4)
 40020fc:	d9c00104 	addi	r7,sp,4
 4002100:	40022b00 	call	40022b0 <___vfprintf_internal_r>
 4002104:	dfc00017 	ldw	ra,0(sp)
 4002108:	dec00304 	addi	sp,sp,12
 400210c:	f800283a 	ret

04002110 <printf>:
 4002110:	defffc04 	addi	sp,sp,-16
 4002114:	dfc00015 	stw	ra,0(sp)
 4002118:	d9400115 	stw	r5,4(sp)
 400211c:	d9800215 	stw	r6,8(sp)
 4002120:	d9c00315 	stw	r7,12(sp)
 4002124:	00810074 	movhi	r2,1025
 4002128:	108def04 	addi	r2,r2,14268
 400212c:	10800017 	ldw	r2,0(r2)
 4002130:	200b883a 	mov	r5,r4
 4002134:	d9800104 	addi	r6,sp,4
 4002138:	11000217 	ldw	r4,8(r2)
 400213c:	40043ac0 	call	40043ac <__vfprintf_internal>
 4002140:	dfc00017 	ldw	ra,0(sp)
 4002144:	dec00404 	addi	sp,sp,16
 4002148:	f800283a 	ret

0400214c <_puts_r>:
 400214c:	defff604 	addi	sp,sp,-40
 4002150:	dc000715 	stw	r16,28(sp)
 4002154:	2021883a 	mov	r16,r4
 4002158:	2809883a 	mov	r4,r5
 400215c:	dc400815 	stw	r17,32(sp)
 4002160:	dfc00915 	stw	ra,36(sp)
 4002164:	2823883a 	mov	r17,r5
 4002168:	40022180 	call	4002218 <strlen>
 400216c:	00c10074 	movhi	r3,1025
 4002170:	18cdef04 	addi	r3,r3,14268
 4002174:	18c00017 	ldw	r3,0(r3)
 4002178:	11000044 	addi	r4,r2,1
 400217c:	d8800115 	stw	r2,4(sp)
 4002180:	18c00217 	ldw	r3,8(r3)
 4002184:	01410074 	movhi	r5,1025
 4002188:	29468304 	addi	r5,r5,6668
 400218c:	1880030b 	ldhu	r2,12(r3)
 4002190:	d9400215 	stw	r5,8(sp)
 4002194:	d9000615 	stw	r4,24(sp)
 4002198:	01400044 	movi	r5,1
 400219c:	01000084 	movi	r4,2
 40021a0:	d9000515 	stw	r4,20(sp)
 40021a4:	dc400015 	stw	r17,0(sp)
 40021a8:	d9400315 	stw	r5,12(sp)
 40021ac:	dec00415 	stw	sp,16(sp)
 40021b0:	1108000c 	andi	r4,r2,8192
 40021b4:	2000061e 	bne	r4,zero,40021d0 <_puts_r+0x84>
 40021b8:	19401917 	ldw	r5,100(r3)
 40021bc:	0137ffc4 	movi	r4,-8193
 40021c0:	10880014 	ori	r2,r2,8192
 40021c4:	2908703a 	and	r4,r5,r4
 40021c8:	1880030d 	sth	r2,12(r3)
 40021cc:	19001915 	stw	r4,100(r3)
 40021d0:	81400217 	ldw	r5,8(r16)
 40021d4:	8009883a 	mov	r4,r16
 40021d8:	d9800404 	addi	r6,sp,16
 40021dc:	40068700 	call	4006870 <__sfvwrite_r>
 40021e0:	1000061e 	bne	r2,zero,40021fc <_puts_r+0xb0>
 40021e4:	00800284 	movi	r2,10
 40021e8:	dfc00917 	ldw	ra,36(sp)
 40021ec:	dc400817 	ldw	r17,32(sp)
 40021f0:	dc000717 	ldw	r16,28(sp)
 40021f4:	dec00a04 	addi	sp,sp,40
 40021f8:	f800283a 	ret
 40021fc:	00bfffc4 	movi	r2,-1
 4002200:	003ff906 	br	40021e8 <__alt_data_end+0xfe0021e8>

04002204 <puts>:
 4002204:	00810074 	movhi	r2,1025
 4002208:	108def04 	addi	r2,r2,14268
 400220c:	200b883a 	mov	r5,r4
 4002210:	11000017 	ldw	r4,0(r2)
 4002214:	400214c1 	jmpi	400214c <_puts_r>

04002218 <strlen>:
 4002218:	208000cc 	andi	r2,r4,3
 400221c:	10002026 	beq	r2,zero,40022a0 <strlen+0x88>
 4002220:	20800007 	ldb	r2,0(r4)
 4002224:	10002026 	beq	r2,zero,40022a8 <strlen+0x90>
 4002228:	2005883a 	mov	r2,r4
 400222c:	00000206 	br	4002238 <strlen+0x20>
 4002230:	10c00007 	ldb	r3,0(r2)
 4002234:	18001826 	beq	r3,zero,4002298 <strlen+0x80>
 4002238:	10800044 	addi	r2,r2,1
 400223c:	10c000cc 	andi	r3,r2,3
 4002240:	183ffb1e 	bne	r3,zero,4002230 <__alt_data_end+0xfe002230>
 4002244:	10c00017 	ldw	r3,0(r2)
 4002248:	01ffbff4 	movhi	r7,65279
 400224c:	39ffbfc4 	addi	r7,r7,-257
 4002250:	00ca303a 	nor	r5,zero,r3
 4002254:	01a02074 	movhi	r6,32897
 4002258:	19c7883a 	add	r3,r3,r7
 400225c:	31a02004 	addi	r6,r6,-32640
 4002260:	1946703a 	and	r3,r3,r5
 4002264:	1986703a 	and	r3,r3,r6
 4002268:	1800091e 	bne	r3,zero,4002290 <strlen+0x78>
 400226c:	10800104 	addi	r2,r2,4
 4002270:	10c00017 	ldw	r3,0(r2)
 4002274:	19cb883a 	add	r5,r3,r7
 4002278:	00c6303a 	nor	r3,zero,r3
 400227c:	28c6703a 	and	r3,r5,r3
 4002280:	1986703a 	and	r3,r3,r6
 4002284:	183ff926 	beq	r3,zero,400226c <__alt_data_end+0xfe00226c>
 4002288:	00000106 	br	4002290 <strlen+0x78>
 400228c:	10800044 	addi	r2,r2,1
 4002290:	10c00007 	ldb	r3,0(r2)
 4002294:	183ffd1e 	bne	r3,zero,400228c <__alt_data_end+0xfe00228c>
 4002298:	1105c83a 	sub	r2,r2,r4
 400229c:	f800283a 	ret
 40022a0:	2005883a 	mov	r2,r4
 40022a4:	003fe706 	br	4002244 <__alt_data_end+0xfe002244>
 40022a8:	0005883a 	mov	r2,zero
 40022ac:	f800283a 	ret

040022b0 <___vfprintf_internal_r>:
 40022b0:	defeb604 	addi	sp,sp,-1320
 40022b4:	dfc14915 	stw	ra,1316(sp)
 40022b8:	ddc14715 	stw	r23,1308(sp)
 40022bc:	dd814615 	stw	r22,1304(sp)
 40022c0:	202f883a 	mov	r23,r4
 40022c4:	282d883a 	mov	r22,r5
 40022c8:	d9812a15 	stw	r6,1192(sp)
 40022cc:	d9c12d15 	stw	r7,1204(sp)
 40022d0:	df014815 	stw	fp,1312(sp)
 40022d4:	dd414515 	stw	r21,1300(sp)
 40022d8:	dd014415 	stw	r20,1296(sp)
 40022dc:	dcc14315 	stw	r19,1292(sp)
 40022e0:	dc814215 	stw	r18,1288(sp)
 40022e4:	dc414115 	stw	r17,1284(sp)
 40022e8:	dc014015 	stw	r16,1280(sp)
 40022ec:	4006f300 	call	4006f30 <_localeconv_r>
 40022f0:	10800017 	ldw	r2,0(r2)
 40022f4:	1009883a 	mov	r4,r2
 40022f8:	d8813515 	stw	r2,1236(sp)
 40022fc:	40022180 	call	4002218 <strlen>
 4002300:	d8813815 	stw	r2,1248(sp)
 4002304:	b8000226 	beq	r23,zero,4002310 <___vfprintf_internal_r+0x60>
 4002308:	b8800e17 	ldw	r2,56(r23)
 400230c:	10010526 	beq	r2,zero,4002724 <___vfprintf_internal_r+0x474>
 4002310:	b0c0030b 	ldhu	r3,12(r22)
 4002314:	1908000c 	andi	r4,r3,8192
 4002318:	1805883a 	mov	r2,r3
 400231c:	2000071e 	bne	r4,zero,400233c <___vfprintf_internal_r+0x8c>
 4002320:	b1001917 	ldw	r4,100(r22)
 4002324:	18880014 	ori	r2,r3,8192
 4002328:	00f7ffc4 	movi	r3,-8193
 400232c:	20c8703a 	and	r4,r4,r3
 4002330:	b080030d 	sth	r2,12(r22)
 4002334:	1007883a 	mov	r3,r2
 4002338:	b1001915 	stw	r4,100(r22)
 400233c:	1100020c 	andi	r4,r2,8
 4002340:	2000a826 	beq	r4,zero,40025e4 <___vfprintf_internal_r+0x334>
 4002344:	b1000417 	ldw	r4,16(r22)
 4002348:	2000a626 	beq	r4,zero,40025e4 <___vfprintf_internal_r+0x334>
 400234c:	1080068c 	andi	r2,r2,26
 4002350:	01000284 	movi	r4,10
 4002354:	1100ac26 	beq	r2,r4,4002608 <___vfprintf_internal_r+0x358>
 4002358:	d8c10e04 	addi	r3,sp,1080
 400235c:	d9010dc4 	addi	r4,sp,1079
 4002360:	d9400404 	addi	r5,sp,16
 4002364:	05010074 	movhi	r20,1025
 4002368:	1905c83a 	sub	r2,r3,r4
 400236c:	a5069484 	addi	r20,r20,6738
 4002370:	d8c12815 	stw	r3,1184(sp)
 4002374:	d9012915 	stw	r4,1188(sp)
 4002378:	d9411e15 	stw	r5,1144(sp)
 400237c:	d8012015 	stw	zero,1152(sp)
 4002380:	d8011f15 	stw	zero,1148(sp)
 4002384:	d8013315 	stw	zero,1228(sp)
 4002388:	d8013715 	stw	zero,1244(sp)
 400238c:	d8013915 	stw	zero,1252(sp)
 4002390:	d8013b15 	stw	zero,1260(sp)
 4002394:	d8013a15 	stw	zero,1256(sp)
 4002398:	d8012f15 	stw	zero,1212(sp)
 400239c:	2811883a 	mov	r8,r5
 40023a0:	d8813c15 	stw	r2,1264(sp)
 40023a4:	d8c12a17 	ldw	r3,1192(sp)
 40023a8:	18800007 	ldb	r2,0(r3)
 40023ac:	10021326 	beq	r2,zero,4002bfc <___vfprintf_internal_r+0x94c>
 40023b0:	00c00944 	movi	r3,37
 40023b4:	dc012a17 	ldw	r16,1192(sp)
 40023b8:	10c0021e 	bne	r2,r3,40023c4 <___vfprintf_internal_r+0x114>
 40023bc:	00001606 	br	4002418 <___vfprintf_internal_r+0x168>
 40023c0:	10c08526 	beq	r2,r3,40025d8 <___vfprintf_internal_r+0x328>
 40023c4:	84000044 	addi	r16,r16,1
 40023c8:	80800007 	ldb	r2,0(r16)
 40023cc:	103ffc1e 	bne	r2,zero,40023c0 <__alt_data_end+0xfe0023c0>
 40023d0:	d9012a17 	ldw	r4,1192(sp)
 40023d4:	8123c83a 	sub	r17,r16,r4
 40023d8:	88000f26 	beq	r17,zero,4002418 <___vfprintf_internal_r+0x168>
 40023dc:	d8812a17 	ldw	r2,1192(sp)
 40023e0:	d8c12017 	ldw	r3,1152(sp)
 40023e4:	44400115 	stw	r17,4(r8)
 40023e8:	40800015 	stw	r2,0(r8)
 40023ec:	d8811f17 	ldw	r2,1148(sp)
 40023f0:	1c47883a 	add	r3,r3,r17
 40023f4:	d8c12015 	stw	r3,1152(sp)
 40023f8:	10800044 	addi	r2,r2,1
 40023fc:	d8811f15 	stw	r2,1148(sp)
 4002400:	00c001c4 	movi	r3,7
 4002404:	1880b516 	blt	r3,r2,40026dc <___vfprintf_internal_r+0x42c>
 4002408:	42000204 	addi	r8,r8,8
 400240c:	d8c12f17 	ldw	r3,1212(sp)
 4002410:	1c47883a 	add	r3,r3,r17
 4002414:	d8c12f15 	stw	r3,1212(sp)
 4002418:	80800007 	ldb	r2,0(r16)
 400241c:	1000b626 	beq	r2,zero,40026f8 <___vfprintf_internal_r+0x448>
 4002420:	80800044 	addi	r2,r16,1
 4002424:	84000047 	ldb	r16,1(r16)
 4002428:	0027883a 	mov	r19,zero
 400242c:	0039883a 	mov	fp,zero
 4002430:	dcc12b05 	stb	r19,1196(sp)
 4002434:	d8012785 	stb	zero,1182(sp)
 4002438:	027fffc4 	movi	r9,-1
 400243c:	d8012e15 	stw	zero,1208(sp)
 4002440:	04401604 	movi	r17,88
 4002444:	04800244 	movi	r18,9
 4002448:	da012a15 	stw	r8,1192(sp)
 400244c:	e027883a 	mov	r19,fp
 4002450:	17000044 	addi	fp,r2,1
 4002454:	80bff804 	addi	r2,r16,-32
 4002458:	88831236 	bltu	r17,r2,40030a4 <___vfprintf_internal_r+0xdf4>
 400245c:	100490ba 	slli	r2,r2,2
 4002460:	01010034 	movhi	r4,1024
 4002464:	21091d04 	addi	r4,r4,9332
 4002468:	1105883a 	add	r2,r2,r4
 400246c:	10800017 	ldw	r2,0(r2)
 4002470:	1000683a 	jmp	r2
 4002474:	04002fc0 	call	4002fc <__alt_mem_onchip_memory2_0+0x4002fc>
 4002478:	040030a4 	muli	r16,zero,194
 400247c:	040030a4 	muli	r16,zero,194
 4002480:	04002fdc 	xori	r16,zero,191
 4002484:	040030a4 	muli	r16,zero,194
 4002488:	040030a4 	muli	r16,zero,194
 400248c:	040030a4 	muli	r16,zero,194
 4002490:	040030a4 	muli	r16,zero,194
 4002494:	040030a4 	muli	r16,zero,194
 4002498:	040030a4 	muli	r16,zero,194
 400249c:	04002fec 	andhi	r16,zero,191
 40024a0:	04003014 	movui	r16,192
 40024a4:	040030a4 	muli	r16,zero,194
 40024a8:	04002730 	cmpltui	r16,zero,156
 40024ac:	04002740 	call	400274 <__alt_mem_onchip_memory2_0+0x400274>
 40024b0:	040030a4 	muli	r16,zero,194
 40024b4:	04002790 	cmplti	r16,zero,158
 40024b8:	040027a0 	cmpeqi	r16,zero,158
 40024bc:	040027a0 	cmpeqi	r16,zero,158
 40024c0:	040027a0 	cmpeqi	r16,zero,158
 40024c4:	040027a0 	cmpeqi	r16,zero,158
 40024c8:	040027a0 	cmpeqi	r16,zero,158
 40024cc:	040027a0 	cmpeqi	r16,zero,158
 40024d0:	040027a0 	cmpeqi	r16,zero,158
 40024d4:	040027a0 	cmpeqi	r16,zero,158
 40024d8:	040027a0 	cmpeqi	r16,zero,158
 40024dc:	040030a4 	muli	r16,zero,194
 40024e0:	040030a4 	muli	r16,zero,194
 40024e4:	040030a4 	muli	r16,zero,194
 40024e8:	040030a4 	muli	r16,zero,194
 40024ec:	040030a4 	muli	r16,zero,194
 40024f0:	040030a4 	muli	r16,zero,194
 40024f4:	040030a4 	muli	r16,zero,194
 40024f8:	040030a4 	muli	r16,zero,194
 40024fc:	040030a4 	muli	r16,zero,194
 4002500:	040030a4 	muli	r16,zero,194
 4002504:	040027e4 	muli	r16,zero,159
 4002508:	04002c04 	movi	r16,176
 400250c:	040030a4 	muli	r16,zero,194
 4002510:	04002c04 	movi	r16,176
 4002514:	040030a4 	muli	r16,zero,194
 4002518:	040030a4 	muli	r16,zero,194
 400251c:	040030a4 	muli	r16,zero,194
 4002520:	040030a4 	muli	r16,zero,194
 4002524:	04002cac 	andhi	r16,zero,178
 4002528:	040030a4 	muli	r16,zero,194
 400252c:	040030a4 	muli	r16,zero,194
 4002530:	04002cbc 	xorhi	r16,zero,178
 4002534:	040030a4 	muli	r16,zero,194
 4002538:	040030a4 	muli	r16,zero,194
 400253c:	040030a4 	muli	r16,zero,194
 4002540:	040030a4 	muli	r16,zero,194
 4002544:	040030a4 	muli	r16,zero,194
 4002548:	04002d00 	call	4002d0 <__alt_mem_onchip_memory2_0+0x4002d0>
 400254c:	040030a4 	muli	r16,zero,194
 4002550:	040030a4 	muli	r16,zero,194
 4002554:	04002d38 	rdprs	r16,zero,180
 4002558:	040030a4 	muli	r16,zero,194
 400255c:	040030a4 	muli	r16,zero,194
 4002560:	040030a4 	muli	r16,zero,194
 4002564:	040030a4 	muli	r16,zero,194
 4002568:	040030a4 	muli	r16,zero,194
 400256c:	040030a4 	muli	r16,zero,194
 4002570:	040030a4 	muli	r16,zero,194
 4002574:	040030a4 	muli	r16,zero,194
 4002578:	040030a4 	muli	r16,zero,194
 400257c:	040030a4 	muli	r16,zero,194
 4002580:	04002f74 	movhi	r16,189
 4002584:	04002f20 	cmpeqi	r16,zero,188
 4002588:	04002c04 	movi	r16,176
 400258c:	04002c04 	movi	r16,176
 4002590:	04002c04 	movi	r16,176
 4002594:	04002f64 	muli	r16,zero,189
 4002598:	04002f20 	cmpeqi	r16,zero,188
 400259c:	040030a4 	muli	r16,zero,194
 40025a0:	040030a4 	muli	r16,zero,194
 40025a4:	04002e3c 	xorhi	r16,zero,184
 40025a8:	040030a4 	muli	r16,zero,194
 40025ac:	04002e54 	movui	r16,185
 40025b0:	04002e94 	movui	r16,186
 40025b4:	04002ed4 	movui	r16,187
 40025b8:	04002da0 	cmpeqi	r16,zero,182
 40025bc:	040030a4 	muli	r16,zero,194
 40025c0:	04003028 	cmpgeui	r16,zero,192
 40025c4:	040030a4 	muli	r16,zero,194
 40025c8:	04002db0 	cmpltui	r16,zero,182
 40025cc:	040030a4 	muli	r16,zero,194
 40025d0:	040030a4 	muli	r16,zero,194
 40025d4:	04002df0 	cmpltui	r16,zero,183
 40025d8:	d9412a17 	ldw	r5,1192(sp)
 40025dc:	8163c83a 	sub	r17,r16,r5
 40025e0:	003f7d06 	br	40023d8 <__alt_data_end+0xfe0023d8>
 40025e4:	b809883a 	mov	r4,r23
 40025e8:	b00b883a 	mov	r5,r22
 40025ec:	40043d00 	call	40043d0 <__swsetup_r>
 40025f0:	10002d1e 	bne	r2,zero,40026a8 <___vfprintf_internal_r+0x3f8>
 40025f4:	b0c0030b 	ldhu	r3,12(r22)
 40025f8:	01000284 	movi	r4,10
 40025fc:	1805883a 	mov	r2,r3
 4002600:	1080068c 	andi	r2,r2,26
 4002604:	113f541e 	bne	r2,r4,4002358 <__alt_data_end+0xfe002358>
 4002608:	b080038b 	ldhu	r2,14(r22)
 400260c:	113fffcc 	andi	r4,r2,65535
 4002610:	2120001c 	xori	r4,r4,32768
 4002614:	21200004 	addi	r4,r4,-32768
 4002618:	203f4f16 	blt	r4,zero,4002358 <__alt_data_end+0xfe002358>
 400261c:	b2c01917 	ldw	r11,100(r22)
 4002620:	b2800717 	ldw	r10,28(r22)
 4002624:	b2400917 	ldw	r9,36(r22)
 4002628:	d9812a17 	ldw	r6,1192(sp)
 400262c:	d9c12d17 	ldw	r7,1204(sp)
 4002630:	02010004 	movi	r8,1024
 4002634:	18ffff4c 	andi	r3,r3,65533
 4002638:	d881078d 	sth	r2,1054(sp)
 400263c:	b809883a 	mov	r4,r23
 4002640:	d8800404 	addi	r2,sp,16
 4002644:	d9410404 	addi	r5,sp,1040
 4002648:	d8c1070d 	sth	r3,1052(sp)
 400264c:	dac11d15 	stw	r11,1140(sp)
 4002650:	da810b15 	stw	r10,1068(sp)
 4002654:	da410d15 	stw	r9,1076(sp)
 4002658:	d8810415 	stw	r2,1040(sp)
 400265c:	d8810815 	stw	r2,1056(sp)
 4002660:	da010615 	stw	r8,1048(sp)
 4002664:	da010915 	stw	r8,1060(sp)
 4002668:	d8010a15 	stw	zero,1064(sp)
 400266c:	40022b00 	call	40022b0 <___vfprintf_internal_r>
 4002670:	1021883a 	mov	r16,r2
 4002674:	10000416 	blt	r2,zero,4002688 <___vfprintf_internal_r+0x3d8>
 4002678:	b809883a 	mov	r4,r23
 400267c:	d9410404 	addi	r5,sp,1040
 4002680:	4005e500 	call	4005e50 <_fflush_r>
 4002684:	1007301e 	bne	r2,zero,4004348 <___vfprintf_internal_r+0x2098>
 4002688:	d881070b 	ldhu	r2,1052(sp)
 400268c:	1080100c 	andi	r2,r2,64
 4002690:	10000326 	beq	r2,zero,40026a0 <___vfprintf_internal_r+0x3f0>
 4002694:	b080030b 	ldhu	r2,12(r22)
 4002698:	10801014 	ori	r2,r2,64
 400269c:	b080030d 	sth	r2,12(r22)
 40026a0:	8005883a 	mov	r2,r16
 40026a4:	00000106 	br	40026ac <___vfprintf_internal_r+0x3fc>
 40026a8:	00bfffc4 	movi	r2,-1
 40026ac:	dfc14917 	ldw	ra,1316(sp)
 40026b0:	df014817 	ldw	fp,1312(sp)
 40026b4:	ddc14717 	ldw	r23,1308(sp)
 40026b8:	dd814617 	ldw	r22,1304(sp)
 40026bc:	dd414517 	ldw	r21,1300(sp)
 40026c0:	dd014417 	ldw	r20,1296(sp)
 40026c4:	dcc14317 	ldw	r19,1292(sp)
 40026c8:	dc814217 	ldw	r18,1288(sp)
 40026cc:	dc414117 	ldw	r17,1284(sp)
 40026d0:	dc014017 	ldw	r16,1280(sp)
 40026d4:	dec14a04 	addi	sp,sp,1320
 40026d8:	f800283a 	ret
 40026dc:	b809883a 	mov	r4,r23
 40026e0:	b00b883a 	mov	r5,r22
 40026e4:	d9811e04 	addi	r6,sp,1144
 40026e8:	40096f00 	call	40096f0 <__sprint_r>
 40026ec:	1000081e 	bne	r2,zero,4002710 <___vfprintf_internal_r+0x460>
 40026f0:	da000404 	addi	r8,sp,16
 40026f4:	003f4506 	br	400240c <__alt_data_end+0xfe00240c>
 40026f8:	d8812017 	ldw	r2,1152(sp)
 40026fc:	10000426 	beq	r2,zero,4002710 <___vfprintf_internal_r+0x460>
 4002700:	b809883a 	mov	r4,r23
 4002704:	b00b883a 	mov	r5,r22
 4002708:	d9811e04 	addi	r6,sp,1144
 400270c:	40096f00 	call	40096f0 <__sprint_r>
 4002710:	b080030b 	ldhu	r2,12(r22)
 4002714:	1080100c 	andi	r2,r2,64
 4002718:	103fe31e 	bne	r2,zero,40026a8 <__alt_data_end+0xfe0026a8>
 400271c:	d8812f17 	ldw	r2,1212(sp)
 4002720:	003fe206 	br	40026ac <__alt_data_end+0xfe0026ac>
 4002724:	b809883a 	mov	r4,r23
 4002728:	400640c0 	call	400640c <__sinit>
 400272c:	003ef806 	br	4002310 <__alt_data_end+0xfe002310>
 4002730:	e005883a 	mov	r2,fp
 4002734:	9cc00114 	ori	r19,r19,4
 4002738:	e4000007 	ldb	r16,0(fp)
 400273c:	003f4406 	br	4002450 <__alt_data_end+0xfe002450>
 4002740:	e4000007 	ldb	r16,0(fp)
 4002744:	01000a84 	movi	r4,42
 4002748:	e0800044 	addi	r2,fp,1
 400274c:	8106f626 	beq	r16,r4,4004328 <___vfprintf_internal_r+0x2078>
 4002750:	857ff404 	addi	r21,r16,-48
 4002754:	1039883a 	mov	fp,r2
 4002758:	0013883a 	mov	r9,zero
 400275c:	957f3d36 	bltu	r18,r21,4002454 <__alt_data_end+0xfe002454>
 4002760:	0009883a 	mov	r4,zero
 4002764:	01400284 	movi	r5,10
 4002768:	400c2240 	call	400c224 <__mulsi3>
 400276c:	e4000007 	ldb	r16,0(fp)
 4002770:	a889883a 	add	r4,r21,r2
 4002774:	e7000044 	addi	fp,fp,1
 4002778:	857ff404 	addi	r21,r16,-48
 400277c:	957ff92e 	bgeu	r18,r21,4002764 <__alt_data_end+0xfe002764>
 4002780:	2013883a 	mov	r9,r4
 4002784:	203f330e 	bge	r4,zero,4002454 <__alt_data_end+0xfe002454>
 4002788:	027fffc4 	movi	r9,-1
 400278c:	003f3106 	br	4002454 <__alt_data_end+0xfe002454>
 4002790:	9cc02014 	ori	r19,r19,128
 4002794:	e005883a 	mov	r2,fp
 4002798:	e4000007 	ldb	r16,0(fp)
 400279c:	003f2c06 	br	4002450 <__alt_data_end+0xfe002450>
 40027a0:	857ff404 	addi	r21,r16,-48
 40027a4:	d8012e15 	stw	zero,1208(sp)
 40027a8:	e021883a 	mov	r16,fp
 40027ac:	0009883a 	mov	r4,zero
 40027b0:	da412c15 	stw	r9,1200(sp)
 40027b4:	01400284 	movi	r5,10
 40027b8:	400c2240 	call	400c224 <__mulsi3>
 40027bc:	81400007 	ldb	r5,0(r16)
 40027c0:	1549883a 	add	r4,r2,r21
 40027c4:	e7000044 	addi	fp,fp,1
 40027c8:	2d7ff404 	addi	r21,r5,-48
 40027cc:	e021883a 	mov	r16,fp
 40027d0:	957ff82e 	bgeu	r18,r21,40027b4 <__alt_data_end+0xfe0027b4>
 40027d4:	2821883a 	mov	r16,r5
 40027d8:	d9012e15 	stw	r4,1208(sp)
 40027dc:	da412c17 	ldw	r9,1200(sp)
 40027e0:	003f1c06 	br	4002454 <__alt_data_end+0xfe002454>
 40027e4:	da012a17 	ldw	r8,1192(sp)
 40027e8:	df012a15 	stw	fp,1192(sp)
 40027ec:	9839883a 	mov	fp,r19
 40027f0:	dcc12b03 	ldbu	r19,1196(sp)
 40027f4:	e7000414 	ori	fp,fp,16
 40027f8:	e080080c 	andi	r2,fp,32
 40027fc:	dcc12785 	stb	r19,1182(sp)
 4002800:	d8c12d17 	ldw	r3,1204(sp)
 4002804:	1001ce26 	beq	r2,zero,4002f40 <___vfprintf_internal_r+0xc90>
 4002808:	d9012d17 	ldw	r4,1204(sp)
 400280c:	18800117 	ldw	r2,4(r3)
 4002810:	1c800017 	ldw	r18,0(r3)
 4002814:	21000204 	addi	r4,r4,8
 4002818:	d9012d15 	stw	r4,1204(sp)
 400281c:	102b883a 	mov	r21,r2
 4002820:	10044916 	blt	r2,zero,4003948 <___vfprintf_internal_r+0x1698>
 4002824:	dcc12783 	ldbu	r19,1182(sp)
 4002828:	da413215 	stw	r9,1224(sp)
 400282c:	00800044 	movi	r2,1
 4002830:	9546b03a 	or	r3,r18,r21
 4002834:	48000216 	blt	r9,zero,4002840 <___vfprintf_internal_r+0x590>
 4002838:	013fdfc4 	movi	r4,-129
 400283c:	e138703a 	and	fp,fp,r4
 4002840:	1802251e 	bne	r3,zero,40030d8 <___vfprintf_internal_r+0xe28>
 4002844:	48031726 	beq	r9,zero,40034a4 <___vfprintf_internal_r+0x11f4>
 4002848:	10803fcc 	andi	r2,r2,255
 400284c:	00c00044 	movi	r3,1
 4002850:	10c24526 	beq	r2,r3,4003168 <___vfprintf_internal_r+0xeb8>
 4002854:	00c00084 	movi	r3,2
 4002858:	10c33426 	beq	r2,r3,400352c <___vfprintf_internal_r+0x127c>
 400285c:	d8c10e04 	addi	r3,sp,1080
 4002860:	9008d0fa 	srli	r4,r18,3
 4002864:	a80a977a 	slli	r5,r21,29
 4002868:	a82ad0fa 	srli	r21,r21,3
 400286c:	948001cc 	andi	r18,r18,7
 4002870:	90800c04 	addi	r2,r18,48
 4002874:	18ffffc4 	addi	r3,r3,-1
 4002878:	2924b03a 	or	r18,r5,r4
 400287c:	18800005 	stb	r2,0(r3)
 4002880:	9548b03a 	or	r4,r18,r21
 4002884:	203ff61e 	bne	r4,zero,4002860 <__alt_data_end+0xfe002860>
 4002888:	e100004c 	andi	r4,fp,1
 400288c:	d8c13115 	stw	r3,1220(sp)
 4002890:	20039a1e 	bne	r4,zero,40036fc <___vfprintf_internal_r+0x144c>
 4002894:	d8812817 	ldw	r2,1184(sp)
 4002898:	10e3c83a 	sub	r17,r2,r3
 400289c:	8805883a 	mov	r2,r17
 40028a0:	8a40010e 	bge	r17,r9,40028a8 <___vfprintf_internal_r+0x5f8>
 40028a4:	4805883a 	mov	r2,r9
 40028a8:	d8812b15 	stw	r2,1196(sp)
 40028ac:	d8013415 	stw	zero,1232(sp)
 40028b0:	98803fcc 	andi	r2,r19,255
 40028b4:	1080201c 	xori	r2,r2,128
 40028b8:	10bfe004 	addi	r2,r2,-128
 40028bc:	10000326 	beq	r2,zero,40028cc <___vfprintf_internal_r+0x61c>
 40028c0:	d8c12b17 	ldw	r3,1196(sp)
 40028c4:	18c00044 	addi	r3,r3,1
 40028c8:	d8c12b15 	stw	r3,1196(sp)
 40028cc:	e0c0008c 	andi	r3,fp,2
 40028d0:	d8c12c15 	stw	r3,1200(sp)
 40028d4:	18000326 	beq	r3,zero,40028e4 <___vfprintf_internal_r+0x634>
 40028d8:	d8c12b17 	ldw	r3,1196(sp)
 40028dc:	18c00084 	addi	r3,r3,2
 40028e0:	d8c12b15 	stw	r3,1196(sp)
 40028e4:	e0c0210c 	andi	r3,fp,132
 40028e8:	d8c13015 	stw	r3,1216(sp)
 40028ec:	1801f81e 	bne	r3,zero,40030d0 <___vfprintf_internal_r+0xe20>
 40028f0:	d9012e17 	ldw	r4,1208(sp)
 40028f4:	d8c12b17 	ldw	r3,1196(sp)
 40028f8:	20ebc83a 	sub	r21,r4,r3
 40028fc:	0541f40e 	bge	zero,r21,40030d0 <___vfprintf_internal_r+0xe20>
 4002900:	02400404 	movi	r9,16
 4002904:	d8c12017 	ldw	r3,1152(sp)
 4002908:	d8811f17 	ldw	r2,1148(sp)
 400290c:	4d45750e 	bge	r9,r21,4003ee4 <___vfprintf_internal_r+0x1c34>
 4002910:	01410074 	movhi	r5,1025
 4002914:	29469884 	addi	r5,r5,6754
 4002918:	d9413615 	stw	r5,1240(sp)
 400291c:	4827883a 	mov	r19,r9
 4002920:	048001c4 	movi	r18,7
 4002924:	00000306 	br	4002934 <___vfprintf_internal_r+0x684>
 4002928:	ad7ffc04 	addi	r21,r21,-16
 400292c:	42000204 	addi	r8,r8,8
 4002930:	9d40130e 	bge	r19,r21,4002980 <___vfprintf_internal_r+0x6d0>
 4002934:	01010074 	movhi	r4,1025
 4002938:	18c00404 	addi	r3,r3,16
 400293c:	10800044 	addi	r2,r2,1
 4002940:	21069884 	addi	r4,r4,6754
 4002944:	41000015 	stw	r4,0(r8)
 4002948:	44c00115 	stw	r19,4(r8)
 400294c:	d8c12015 	stw	r3,1152(sp)
 4002950:	d8811f15 	stw	r2,1148(sp)
 4002954:	90bff40e 	bge	r18,r2,4002928 <__alt_data_end+0xfe002928>
 4002958:	b809883a 	mov	r4,r23
 400295c:	b00b883a 	mov	r5,r22
 4002960:	d9811e04 	addi	r6,sp,1144
 4002964:	40096f00 	call	40096f0 <__sprint_r>
 4002968:	103f691e 	bne	r2,zero,4002710 <__alt_data_end+0xfe002710>
 400296c:	ad7ffc04 	addi	r21,r21,-16
 4002970:	d8c12017 	ldw	r3,1152(sp)
 4002974:	d8811f17 	ldw	r2,1148(sp)
 4002978:	da000404 	addi	r8,sp,16
 400297c:	9d7fed16 	blt	r19,r21,4002934 <__alt_data_end+0xfe002934>
 4002980:	d9413617 	ldw	r5,1240(sp)
 4002984:	a8c7883a 	add	r3,r21,r3
 4002988:	10800044 	addi	r2,r2,1
 400298c:	41400015 	stw	r5,0(r8)
 4002990:	45400115 	stw	r21,4(r8)
 4002994:	d8c12015 	stw	r3,1152(sp)
 4002998:	d8811f15 	stw	r2,1148(sp)
 400299c:	010001c4 	movi	r4,7
 40029a0:	20832b16 	blt	r4,r2,4003650 <___vfprintf_internal_r+0x13a0>
 40029a4:	d8812787 	ldb	r2,1182(sp)
 40029a8:	42000204 	addi	r8,r8,8
 40029ac:	10000c26 	beq	r2,zero,40029e0 <___vfprintf_internal_r+0x730>
 40029b0:	d8811f17 	ldw	r2,1148(sp)
 40029b4:	d9012784 	addi	r4,sp,1182
 40029b8:	18c00044 	addi	r3,r3,1
 40029bc:	10800044 	addi	r2,r2,1
 40029c0:	41000015 	stw	r4,0(r8)
 40029c4:	01000044 	movi	r4,1
 40029c8:	41000115 	stw	r4,4(r8)
 40029cc:	d8c12015 	stw	r3,1152(sp)
 40029d0:	d8811f15 	stw	r2,1148(sp)
 40029d4:	010001c4 	movi	r4,7
 40029d8:	2082c416 	blt	r4,r2,40034ec <___vfprintf_internal_r+0x123c>
 40029dc:	42000204 	addi	r8,r8,8
 40029e0:	d8812c17 	ldw	r2,1200(sp)
 40029e4:	10000c26 	beq	r2,zero,4002a18 <___vfprintf_internal_r+0x768>
 40029e8:	d8811f17 	ldw	r2,1148(sp)
 40029ec:	d9012704 	addi	r4,sp,1180
 40029f0:	18c00084 	addi	r3,r3,2
 40029f4:	10800044 	addi	r2,r2,1
 40029f8:	41000015 	stw	r4,0(r8)
 40029fc:	01000084 	movi	r4,2
 4002a00:	41000115 	stw	r4,4(r8)
 4002a04:	d8c12015 	stw	r3,1152(sp)
 4002a08:	d8811f15 	stw	r2,1148(sp)
 4002a0c:	010001c4 	movi	r4,7
 4002a10:	2082be16 	blt	r4,r2,400350c <___vfprintf_internal_r+0x125c>
 4002a14:	42000204 	addi	r8,r8,8
 4002a18:	d9013017 	ldw	r4,1216(sp)
 4002a1c:	00802004 	movi	r2,128
 4002a20:	20822026 	beq	r4,r2,40032a4 <___vfprintf_internal_r+0xff4>
 4002a24:	d9413217 	ldw	r5,1224(sp)
 4002a28:	2c67c83a 	sub	r19,r5,r17
 4002a2c:	04c0260e 	bge	zero,r19,4002ac8 <___vfprintf_internal_r+0x818>
 4002a30:	05400404 	movi	r21,16
 4002a34:	d8811f17 	ldw	r2,1148(sp)
 4002a38:	acc4720e 	bge	r21,r19,4003c04 <___vfprintf_internal_r+0x1954>
 4002a3c:	01410074 	movhi	r5,1025
 4002a40:	29469484 	addi	r5,r5,6738
 4002a44:	d9412c15 	stw	r5,1200(sp)
 4002a48:	048001c4 	movi	r18,7
 4002a4c:	00000306 	br	4002a5c <___vfprintf_internal_r+0x7ac>
 4002a50:	9cfffc04 	addi	r19,r19,-16
 4002a54:	42000204 	addi	r8,r8,8
 4002a58:	acc0110e 	bge	r21,r19,4002aa0 <___vfprintf_internal_r+0x7f0>
 4002a5c:	18c00404 	addi	r3,r3,16
 4002a60:	10800044 	addi	r2,r2,1
 4002a64:	45000015 	stw	r20,0(r8)
 4002a68:	45400115 	stw	r21,4(r8)
 4002a6c:	d8c12015 	stw	r3,1152(sp)
 4002a70:	d8811f15 	stw	r2,1148(sp)
 4002a74:	90bff60e 	bge	r18,r2,4002a50 <__alt_data_end+0xfe002a50>
 4002a78:	b809883a 	mov	r4,r23
 4002a7c:	b00b883a 	mov	r5,r22
 4002a80:	d9811e04 	addi	r6,sp,1144
 4002a84:	40096f00 	call	40096f0 <__sprint_r>
 4002a88:	103f211e 	bne	r2,zero,4002710 <__alt_data_end+0xfe002710>
 4002a8c:	9cfffc04 	addi	r19,r19,-16
 4002a90:	d8c12017 	ldw	r3,1152(sp)
 4002a94:	d8811f17 	ldw	r2,1148(sp)
 4002a98:	da000404 	addi	r8,sp,16
 4002a9c:	acffef16 	blt	r21,r19,4002a5c <__alt_data_end+0xfe002a5c>
 4002aa0:	d9012c17 	ldw	r4,1200(sp)
 4002aa4:	1cc7883a 	add	r3,r3,r19
 4002aa8:	10800044 	addi	r2,r2,1
 4002aac:	41000015 	stw	r4,0(r8)
 4002ab0:	44c00115 	stw	r19,4(r8)
 4002ab4:	d8c12015 	stw	r3,1152(sp)
 4002ab8:	d8811f15 	stw	r2,1148(sp)
 4002abc:	010001c4 	movi	r4,7
 4002ac0:	20828216 	blt	r4,r2,40034cc <___vfprintf_internal_r+0x121c>
 4002ac4:	42000204 	addi	r8,r8,8
 4002ac8:	e080400c 	andi	r2,fp,256
 4002acc:	1001ac1e 	bne	r2,zero,4003180 <___vfprintf_internal_r+0xed0>
 4002ad0:	d8811f17 	ldw	r2,1148(sp)
 4002ad4:	d9413117 	ldw	r5,1220(sp)
 4002ad8:	1c47883a 	add	r3,r3,r17
 4002adc:	10800044 	addi	r2,r2,1
 4002ae0:	41400015 	stw	r5,0(r8)
 4002ae4:	44400115 	stw	r17,4(r8)
 4002ae8:	d8c12015 	stw	r3,1152(sp)
 4002aec:	d8811f15 	stw	r2,1148(sp)
 4002af0:	010001c4 	movi	r4,7
 4002af4:	20825d16 	blt	r4,r2,400346c <___vfprintf_internal_r+0x11bc>
 4002af8:	42000204 	addi	r8,r8,8
 4002afc:	e080010c 	andi	r2,fp,4
 4002b00:	10003126 	beq	r2,zero,4002bc8 <___vfprintf_internal_r+0x918>
 4002b04:	d8812e17 	ldw	r2,1208(sp)
 4002b08:	d9012b17 	ldw	r4,1196(sp)
 4002b0c:	1121c83a 	sub	r16,r2,r4
 4002b10:	04002d0e 	bge	zero,r16,4002bc8 <___vfprintf_internal_r+0x918>
 4002b14:	04400404 	movi	r17,16
 4002b18:	d8811f17 	ldw	r2,1148(sp)
 4002b1c:	8c05340e 	bge	r17,r16,4003ff0 <___vfprintf_internal_r+0x1d40>
 4002b20:	01010074 	movhi	r4,1025
 4002b24:	21069884 	addi	r4,r4,6754
 4002b28:	d9013615 	stw	r4,1240(sp)
 4002b2c:	048001c4 	movi	r18,7
 4002b30:	00000306 	br	4002b40 <___vfprintf_internal_r+0x890>
 4002b34:	843ffc04 	addi	r16,r16,-16
 4002b38:	42000204 	addi	r8,r8,8
 4002b3c:	8c00130e 	bge	r17,r16,4002b8c <___vfprintf_internal_r+0x8dc>
 4002b40:	01410074 	movhi	r5,1025
 4002b44:	18c00404 	addi	r3,r3,16
 4002b48:	10800044 	addi	r2,r2,1
 4002b4c:	29469884 	addi	r5,r5,6754
 4002b50:	41400015 	stw	r5,0(r8)
 4002b54:	44400115 	stw	r17,4(r8)
 4002b58:	d8c12015 	stw	r3,1152(sp)
 4002b5c:	d8811f15 	stw	r2,1148(sp)
 4002b60:	90bff40e 	bge	r18,r2,4002b34 <__alt_data_end+0xfe002b34>
 4002b64:	b809883a 	mov	r4,r23
 4002b68:	b00b883a 	mov	r5,r22
 4002b6c:	d9811e04 	addi	r6,sp,1144
 4002b70:	40096f00 	call	40096f0 <__sprint_r>
 4002b74:	103ee61e 	bne	r2,zero,4002710 <__alt_data_end+0xfe002710>
 4002b78:	843ffc04 	addi	r16,r16,-16
 4002b7c:	d8c12017 	ldw	r3,1152(sp)
 4002b80:	d8811f17 	ldw	r2,1148(sp)
 4002b84:	da000404 	addi	r8,sp,16
 4002b88:	8c3fed16 	blt	r17,r16,4002b40 <__alt_data_end+0xfe002b40>
 4002b8c:	d9013617 	ldw	r4,1240(sp)
 4002b90:	1c07883a 	add	r3,r3,r16
 4002b94:	10800044 	addi	r2,r2,1
 4002b98:	41000015 	stw	r4,0(r8)
 4002b9c:	44000115 	stw	r16,4(r8)
 4002ba0:	d8c12015 	stw	r3,1152(sp)
 4002ba4:	d8811f15 	stw	r2,1148(sp)
 4002ba8:	010001c4 	movi	r4,7
 4002bac:	2080060e 	bge	r4,r2,4002bc8 <___vfprintf_internal_r+0x918>
 4002bb0:	b809883a 	mov	r4,r23
 4002bb4:	b00b883a 	mov	r5,r22
 4002bb8:	d9811e04 	addi	r6,sp,1144
 4002bbc:	40096f00 	call	40096f0 <__sprint_r>
 4002bc0:	103ed31e 	bne	r2,zero,4002710 <__alt_data_end+0xfe002710>
 4002bc4:	d8c12017 	ldw	r3,1152(sp)
 4002bc8:	df012b17 	ldw	fp,1196(sp)
 4002bcc:	d9412e17 	ldw	r5,1208(sp)
 4002bd0:	e140010e 	bge	fp,r5,4002bd8 <___vfprintf_internal_r+0x928>
 4002bd4:	2839883a 	mov	fp,r5
 4002bd8:	d8812f17 	ldw	r2,1212(sp)
 4002bdc:	1705883a 	add	r2,r2,fp
 4002be0:	d8812f15 	stw	r2,1212(sp)
 4002be4:	1802291e 	bne	r3,zero,400348c <___vfprintf_internal_r+0x11dc>
 4002be8:	d8c12a17 	ldw	r3,1192(sp)
 4002bec:	d8011f15 	stw	zero,1148(sp)
 4002bf0:	da000404 	addi	r8,sp,16
 4002bf4:	18800007 	ldb	r2,0(r3)
 4002bf8:	103ded1e 	bne	r2,zero,40023b0 <__alt_data_end+0xfe0023b0>
 4002bfc:	dc012a17 	ldw	r16,1192(sp)
 4002c00:	003e0506 	br	4002418 <__alt_data_end+0xfe002418>
 4002c04:	d9012d17 	ldw	r4,1204(sp)
 4002c08:	d9412d17 	ldw	r5,1204(sp)
 4002c0c:	da012a17 	ldw	r8,1192(sp)
 4002c10:	21000017 	ldw	r4,0(r4)
 4002c14:	29400117 	ldw	r5,4(r5)
 4002c18:	df012a15 	stw	fp,1192(sp)
 4002c1c:	9839883a 	mov	fp,r19
 4002c20:	dcc12b03 	ldbu	r19,1196(sp)
 4002c24:	d9013715 	stw	r4,1244(sp)
 4002c28:	d9413915 	stw	r5,1252(sp)
 4002c2c:	da013f15 	stw	r8,1276(sp)
 4002c30:	da413e15 	stw	r9,1272(sp)
 4002c34:	dcc12785 	stb	r19,1182(sp)
 4002c38:	400934c0 	call	400934c <__fpclassifyd>
 4002c3c:	d8c12d17 	ldw	r3,1204(sp)
 4002c40:	04400044 	movi	r17,1
 4002c44:	da013f17 	ldw	r8,1276(sp)
 4002c48:	1c800204 	addi	r18,r3,8
 4002c4c:	da413e17 	ldw	r9,1272(sp)
 4002c50:	d9013717 	ldw	r4,1244(sp)
 4002c54:	d9413917 	ldw	r5,1252(sp)
 4002c58:	1443451e 	bne	r2,r17,4003970 <___vfprintf_internal_r+0x16c0>
 4002c5c:	000d883a 	mov	r6,zero
 4002c60:	000f883a 	mov	r7,zero
 4002c64:	400d5cc0 	call	400d5cc <__ledf2>
 4002c68:	da013f17 	ldw	r8,1276(sp)
 4002c6c:	1004fe16 	blt	r2,zero,4004068 <___vfprintf_internal_r+0x1db8>
 4002c70:	dcc12783 	ldbu	r19,1182(sp)
 4002c74:	008011c4 	movi	r2,71
 4002c78:	14045d0e 	bge	r2,r16,4003df0 <___vfprintf_internal_r+0x1b40>
 4002c7c:	01410074 	movhi	r5,1025
 4002c80:	29468504 	addi	r5,r5,6676
 4002c84:	d9413115 	stw	r5,1220(sp)
 4002c88:	00c000c4 	movi	r3,3
 4002c8c:	00bfdfc4 	movi	r2,-129
 4002c90:	d8c12b15 	stw	r3,1196(sp)
 4002c94:	e0b8703a 	and	fp,fp,r2
 4002c98:	dc812d15 	stw	r18,1204(sp)
 4002c9c:	1823883a 	mov	r17,r3
 4002ca0:	d8013215 	stw	zero,1224(sp)
 4002ca4:	d8013415 	stw	zero,1232(sp)
 4002ca8:	003f0106 	br	40028b0 <__alt_data_end+0xfe0028b0>
 4002cac:	9cc00214 	ori	r19,r19,8
 4002cb0:	e005883a 	mov	r2,fp
 4002cb4:	e4000007 	ldb	r16,0(fp)
 4002cb8:	003de506 	br	4002450 <__alt_data_end+0xfe002450>
 4002cbc:	da012a17 	ldw	r8,1192(sp)
 4002cc0:	df012a15 	stw	fp,1192(sp)
 4002cc4:	9f000414 	ori	fp,r19,16
 4002cc8:	e0c0080c 	andi	r3,fp,32
 4002ccc:	d8812d17 	ldw	r2,1204(sp)
 4002cd0:	18007626 	beq	r3,zero,4002eac <___vfprintf_internal_r+0xbfc>
 4002cd4:	d9412d17 	ldw	r5,1204(sp)
 4002cd8:	14800017 	ldw	r18,0(r2)
 4002cdc:	15400117 	ldw	r21,4(r2)
 4002ce0:	29400204 	addi	r5,r5,8
 4002ce4:	d9412d15 	stw	r5,1204(sp)
 4002ce8:	0005883a 	mov	r2,zero
 4002cec:	9546b03a 	or	r3,r18,r21
 4002cf0:	d8012785 	stb	zero,1182(sp)
 4002cf4:	da413215 	stw	r9,1224(sp)
 4002cf8:	0027883a 	mov	r19,zero
 4002cfc:	003ecd06 	br	4002834 <__alt_data_end+0xfe002834>
 4002d00:	da012a17 	ldw	r8,1192(sp)
 4002d04:	df012a15 	stw	fp,1192(sp)
 4002d08:	9f000414 	ori	fp,r19,16
 4002d0c:	e0c0080c 	andi	r3,fp,32
 4002d10:	d8812d17 	ldw	r2,1204(sp)
 4002d14:	18002c26 	beq	r3,zero,4002dc8 <___vfprintf_internal_r+0xb18>
 4002d18:	d9012d17 	ldw	r4,1204(sp)
 4002d1c:	14800017 	ldw	r18,0(r2)
 4002d20:	15400117 	ldw	r21,4(r2)
 4002d24:	21000204 	addi	r4,r4,8
 4002d28:	d9012d15 	stw	r4,1204(sp)
 4002d2c:	00800044 	movi	r2,1
 4002d30:	9546b03a 	or	r3,r18,r21
 4002d34:	003fee06 	br	4002cf0 <__alt_data_end+0xfe002cf0>
 4002d38:	da012a17 	ldw	r8,1192(sp)
 4002d3c:	df012a15 	stw	fp,1192(sp)
 4002d40:	9839883a 	mov	fp,r19
 4002d44:	dcc12b03 	ldbu	r19,1196(sp)
 4002d48:	01410074 	movhi	r5,1025
 4002d4c:	29468804 	addi	r5,r5,6688
 4002d50:	dcc12785 	stb	r19,1182(sp)
 4002d54:	d9413b15 	stw	r5,1260(sp)
 4002d58:	e0c0080c 	andi	r3,fp,32
 4002d5c:	d8812d17 	ldw	r2,1204(sp)
 4002d60:	18002e26 	beq	r3,zero,4002e1c <___vfprintf_internal_r+0xb6c>
 4002d64:	d9412d17 	ldw	r5,1204(sp)
 4002d68:	14800017 	ldw	r18,0(r2)
 4002d6c:	15400117 	ldw	r21,4(r2)
 4002d70:	29400204 	addi	r5,r5,8
 4002d74:	d9412d15 	stw	r5,1204(sp)
 4002d78:	e080004c 	andi	r2,fp,1
 4002d7c:	10025c26 	beq	r2,zero,40036f0 <___vfprintf_internal_r+0x1440>
 4002d80:	9546b03a 	or	r3,r18,r21
 4002d84:	18038f26 	beq	r3,zero,4003bc4 <___vfprintf_internal_r+0x1914>
 4002d88:	00800c04 	movi	r2,48
 4002d8c:	d8812705 	stb	r2,1180(sp)
 4002d90:	dc012745 	stb	r16,1181(sp)
 4002d94:	e7000094 	ori	fp,fp,2
 4002d98:	00800084 	movi	r2,2
 4002d9c:	003fd406 	br	4002cf0 <__alt_data_end+0xfe002cf0>
 4002da0:	9cc00814 	ori	r19,r19,32
 4002da4:	e005883a 	mov	r2,fp
 4002da8:	e4000007 	ldb	r16,0(fp)
 4002dac:	003da806 	br	4002450 <__alt_data_end+0xfe002450>
 4002db0:	da012a17 	ldw	r8,1192(sp)
 4002db4:	df012a15 	stw	fp,1192(sp)
 4002db8:	9839883a 	mov	fp,r19
 4002dbc:	e0c0080c 	andi	r3,fp,32
 4002dc0:	d8812d17 	ldw	r2,1204(sp)
 4002dc4:	183fd41e 	bne	r3,zero,4002d18 <__alt_data_end+0xfe002d18>
 4002dc8:	e0c0040c 	andi	r3,fp,16
 4002dcc:	18035f26 	beq	r3,zero,4003b4c <___vfprintf_internal_r+0x189c>
 4002dd0:	d9412d17 	ldw	r5,1204(sp)
 4002dd4:	14800017 	ldw	r18,0(r2)
 4002dd8:	002b883a 	mov	r21,zero
 4002ddc:	29400104 	addi	r5,r5,4
 4002de0:	d9412d15 	stw	r5,1204(sp)
 4002de4:	00800044 	movi	r2,1
 4002de8:	9007883a 	mov	r3,r18
 4002dec:	003fc006 	br	4002cf0 <__alt_data_end+0xfe002cf0>
 4002df0:	da012a17 	ldw	r8,1192(sp)
 4002df4:	df012a15 	stw	fp,1192(sp)
 4002df8:	9839883a 	mov	fp,r19
 4002dfc:	dcc12b03 	ldbu	r19,1196(sp)
 4002e00:	01010074 	movhi	r4,1025
 4002e04:	21068d04 	addi	r4,r4,6708
 4002e08:	d9013b15 	stw	r4,1260(sp)
 4002e0c:	dcc12785 	stb	r19,1182(sp)
 4002e10:	e0c0080c 	andi	r3,fp,32
 4002e14:	d8812d17 	ldw	r2,1204(sp)
 4002e18:	183fd21e 	bne	r3,zero,4002d64 <__alt_data_end+0xfe002d64>
 4002e1c:	e0c0040c 	andi	r3,fp,16
 4002e20:	18035426 	beq	r3,zero,4003b74 <___vfprintf_internal_r+0x18c4>
 4002e24:	d8c12d17 	ldw	r3,1204(sp)
 4002e28:	14800017 	ldw	r18,0(r2)
 4002e2c:	002b883a 	mov	r21,zero
 4002e30:	18c00104 	addi	r3,r3,4
 4002e34:	d8c12d15 	stw	r3,1204(sp)
 4002e38:	003fcf06 	br	4002d78 <__alt_data_end+0xfe002d78>
 4002e3c:	e4000007 	ldb	r16,0(fp)
 4002e40:	00801b04 	movi	r2,108
 4002e44:	8083f726 	beq	r16,r2,4003e24 <___vfprintf_internal_r+0x1b74>
 4002e48:	9cc00414 	ori	r19,r19,16
 4002e4c:	e005883a 	mov	r2,fp
 4002e50:	003d7f06 	br	4002450 <__alt_data_end+0xfe002450>
 4002e54:	da012a17 	ldw	r8,1192(sp)
 4002e58:	df012a15 	stw	fp,1192(sp)
 4002e5c:	9839883a 	mov	fp,r19
 4002e60:	dcc12b03 	ldbu	r19,1196(sp)
 4002e64:	e080080c 	andi	r2,fp,32
 4002e68:	dcc12785 	stb	r19,1182(sp)
 4002e6c:	10032226 	beq	r2,zero,4003af8 <___vfprintf_internal_r+0x1848>
 4002e70:	d9412d17 	ldw	r5,1204(sp)
 4002e74:	d9012f17 	ldw	r4,1212(sp)
 4002e78:	28800017 	ldw	r2,0(r5)
 4002e7c:	2007d7fa 	srai	r3,r4,31
 4002e80:	29400104 	addi	r5,r5,4
 4002e84:	d9412d15 	stw	r5,1204(sp)
 4002e88:	11000015 	stw	r4,0(r2)
 4002e8c:	10c00115 	stw	r3,4(r2)
 4002e90:	003d4406 	br	40023a4 <__alt_data_end+0xfe0023a4>
 4002e94:	da012a17 	ldw	r8,1192(sp)
 4002e98:	df012a15 	stw	fp,1192(sp)
 4002e9c:	9839883a 	mov	fp,r19
 4002ea0:	e0c0080c 	andi	r3,fp,32
 4002ea4:	d8812d17 	ldw	r2,1204(sp)
 4002ea8:	183f8a1e 	bne	r3,zero,4002cd4 <__alt_data_end+0xfe002cd4>
 4002eac:	e0c0040c 	andi	r3,fp,16
 4002eb0:	18031c26 	beq	r3,zero,4003b24 <___vfprintf_internal_r+0x1874>
 4002eb4:	14800017 	ldw	r18,0(r2)
 4002eb8:	d8812d17 	ldw	r2,1204(sp)
 4002ebc:	002b883a 	mov	r21,zero
 4002ec0:	9007883a 	mov	r3,r18
 4002ec4:	10800104 	addi	r2,r2,4
 4002ec8:	d8812d15 	stw	r2,1204(sp)
 4002ecc:	0005883a 	mov	r2,zero
 4002ed0:	003f8706 	br	4002cf0 <__alt_data_end+0xfe002cf0>
 4002ed4:	d9412d17 	ldw	r5,1204(sp)
 4002ed8:	00800c04 	movi	r2,48
 4002edc:	d8812705 	stb	r2,1180(sp)
 4002ee0:	2c800017 	ldw	r18,0(r5)
 4002ee4:	00801e04 	movi	r2,120
 4002ee8:	d8812745 	stb	r2,1181(sp)
 4002eec:	00810074 	movhi	r2,1025
 4002ef0:	10868d04 	addi	r2,r2,6708
 4002ef4:	29400104 	addi	r5,r5,4
 4002ef8:	da012a17 	ldw	r8,1192(sp)
 4002efc:	d8813b15 	stw	r2,1260(sp)
 4002f00:	df012a15 	stw	fp,1192(sp)
 4002f04:	002b883a 	mov	r21,zero
 4002f08:	9f000094 	ori	fp,r19,2
 4002f0c:	d9412d15 	stw	r5,1204(sp)
 4002f10:	00800084 	movi	r2,2
 4002f14:	04001e04 	movi	r16,120
 4002f18:	9007883a 	mov	r3,r18
 4002f1c:	003f7406 	br	4002cf0 <__alt_data_end+0xfe002cf0>
 4002f20:	da012a17 	ldw	r8,1192(sp)
 4002f24:	df012a15 	stw	fp,1192(sp)
 4002f28:	9839883a 	mov	fp,r19
 4002f2c:	dcc12b03 	ldbu	r19,1196(sp)
 4002f30:	e080080c 	andi	r2,fp,32
 4002f34:	d8c12d17 	ldw	r3,1204(sp)
 4002f38:	dcc12785 	stb	r19,1182(sp)
 4002f3c:	103e321e 	bne	r2,zero,4002808 <__alt_data_end+0xfe002808>
 4002f40:	e080040c 	andi	r2,fp,16
 4002f44:	10031326 	beq	r2,zero,4003b94 <___vfprintf_internal_r+0x18e4>
 4002f48:	1c800017 	ldw	r18,0(r3)
 4002f4c:	d9412d17 	ldw	r5,1204(sp)
 4002f50:	902bd7fa 	srai	r21,r18,31
 4002f54:	29400104 	addi	r5,r5,4
 4002f58:	d9412d15 	stw	r5,1204(sp)
 4002f5c:	a805883a 	mov	r2,r21
 4002f60:	003e2f06 	br	4002820 <__alt_data_end+0xfe002820>
 4002f64:	9cc01014 	ori	r19,r19,64
 4002f68:	e005883a 	mov	r2,fp
 4002f6c:	e4000007 	ldb	r16,0(fp)
 4002f70:	003d3706 	br	4002450 <__alt_data_end+0xfe002450>
 4002f74:	d8c12d17 	ldw	r3,1204(sp)
 4002f78:	d9012d17 	ldw	r4,1204(sp)
 4002f7c:	da012a17 	ldw	r8,1192(sp)
 4002f80:	18800017 	ldw	r2,0(r3)
 4002f84:	21000104 	addi	r4,r4,4
 4002f88:	00c00044 	movi	r3,1
 4002f8c:	df012a15 	stw	fp,1192(sp)
 4002f90:	d8c12b15 	stw	r3,1196(sp)
 4002f94:	9839883a 	mov	fp,r19
 4002f98:	d8012785 	stb	zero,1182(sp)
 4002f9c:	d8810405 	stb	r2,1040(sp)
 4002fa0:	d9012d15 	stw	r4,1204(sp)
 4002fa4:	1823883a 	mov	r17,r3
 4002fa8:	d8c10404 	addi	r3,sp,1040
 4002fac:	d8013215 	stw	zero,1224(sp)
 4002fb0:	d8013415 	stw	zero,1232(sp)
 4002fb4:	d8c13115 	stw	r3,1220(sp)
 4002fb8:	0005883a 	mov	r2,zero
 4002fbc:	003e4306 	br	40028cc <__alt_data_end+0xfe0028cc>
 4002fc0:	d8812b07 	ldb	r2,1196(sp)
 4002fc4:	1002fc1e 	bne	r2,zero,4003bb8 <___vfprintf_internal_r+0x1908>
 4002fc8:	00c00804 	movi	r3,32
 4002fcc:	d8c12b05 	stb	r3,1196(sp)
 4002fd0:	e005883a 	mov	r2,fp
 4002fd4:	e4000007 	ldb	r16,0(fp)
 4002fd8:	003d1d06 	br	4002450 <__alt_data_end+0xfe002450>
 4002fdc:	9cc00054 	ori	r19,r19,1
 4002fe0:	e005883a 	mov	r2,fp
 4002fe4:	e4000007 	ldb	r16,0(fp)
 4002fe8:	003d1906 	br	4002450 <__alt_data_end+0xfe002450>
 4002fec:	d9012d17 	ldw	r4,1204(sp)
 4002ff0:	d9412d17 	ldw	r5,1204(sp)
 4002ff4:	21000017 	ldw	r4,0(r4)
 4002ff8:	28c00104 	addi	r3,r5,4
 4002ffc:	d9012e15 	stw	r4,1208(sp)
 4003000:	20038c16 	blt	r4,zero,4003e34 <___vfprintf_internal_r+0x1b84>
 4003004:	d8c12d15 	stw	r3,1204(sp)
 4003008:	e005883a 	mov	r2,fp
 400300c:	e4000007 	ldb	r16,0(fp)
 4003010:	003d0f06 	br	4002450 <__alt_data_end+0xfe002450>
 4003014:	00c00ac4 	movi	r3,43
 4003018:	d8c12b05 	stb	r3,1196(sp)
 400301c:	e005883a 	mov	r2,fp
 4003020:	e4000007 	ldb	r16,0(fp)
 4003024:	003d0a06 	br	4002450 <__alt_data_end+0xfe002450>
 4003028:	d8c12d17 	ldw	r3,1204(sp)
 400302c:	d9012d17 	ldw	r4,1204(sp)
 4003030:	da012a17 	ldw	r8,1192(sp)
 4003034:	18c00017 	ldw	r3,0(r3)
 4003038:	df012a15 	stw	fp,1192(sp)
 400303c:	d8012785 	stb	zero,1182(sp)
 4003040:	d8c13115 	stw	r3,1220(sp)
 4003044:	9839883a 	mov	fp,r19
 4003048:	24800104 	addi	r18,r4,4
 400304c:	1803f726 	beq	r3,zero,400402c <___vfprintf_internal_r+0x1d7c>
 4003050:	d9013117 	ldw	r4,1220(sp)
 4003054:	48038916 	blt	r9,zero,4003e7c <___vfprintf_internal_r+0x1bcc>
 4003058:	480d883a 	mov	r6,r9
 400305c:	000b883a 	mov	r5,zero
 4003060:	da013f15 	stw	r8,1276(sp)
 4003064:	da413e15 	stw	r9,1272(sp)
 4003068:	40078c40 	call	40078c4 <memchr>
 400306c:	da013f17 	ldw	r8,1276(sp)
 4003070:	da413e17 	ldw	r9,1272(sp)
 4003074:	10045926 	beq	r2,zero,40041dc <___vfprintf_internal_r+0x1f2c>
 4003078:	d8c13117 	ldw	r3,1220(sp)
 400307c:	10e3c83a 	sub	r17,r2,r3
 4003080:	4c433516 	blt	r9,r17,4003d58 <___vfprintf_internal_r+0x1aa8>
 4003084:	8805883a 	mov	r2,r17
 4003088:	88038116 	blt	r17,zero,4003e90 <___vfprintf_internal_r+0x1be0>
 400308c:	dcc12783 	ldbu	r19,1182(sp)
 4003090:	d8812b15 	stw	r2,1196(sp)
 4003094:	dc812d15 	stw	r18,1204(sp)
 4003098:	d8013215 	stw	zero,1224(sp)
 400309c:	d8013415 	stw	zero,1232(sp)
 40030a0:	003e0306 	br	40028b0 <__alt_data_end+0xfe0028b0>
 40030a4:	da012a17 	ldw	r8,1192(sp)
 40030a8:	df012a15 	stw	fp,1192(sp)
 40030ac:	9839883a 	mov	fp,r19
 40030b0:	dcc12b03 	ldbu	r19,1196(sp)
 40030b4:	dcc12785 	stb	r19,1182(sp)
 40030b8:	803d8f26 	beq	r16,zero,40026f8 <__alt_data_end+0xfe0026f8>
 40030bc:	00c00044 	movi	r3,1
 40030c0:	d8c12b15 	stw	r3,1196(sp)
 40030c4:	dc010405 	stb	r16,1040(sp)
 40030c8:	d8012785 	stb	zero,1182(sp)
 40030cc:	003fb506 	br	4002fa4 <__alt_data_end+0xfe002fa4>
 40030d0:	d8c12017 	ldw	r3,1152(sp)
 40030d4:	003e3506 	br	40029ac <__alt_data_end+0xfe0029ac>
 40030d8:	10803fcc 	andi	r2,r2,255
 40030dc:	00c00044 	movi	r3,1
 40030e0:	10fddc1e 	bne	r2,r3,4002854 <__alt_data_end+0xfe002854>
 40030e4:	a800021e 	bne	r21,zero,40030f0 <___vfprintf_internal_r+0xe40>
 40030e8:	00800244 	movi	r2,9
 40030ec:	14801e2e 	bgeu	r2,r18,4003168 <___vfprintf_internal_r+0xeb8>
 40030f0:	dc012b15 	stw	r16,1196(sp)
 40030f4:	dc410e04 	addi	r17,sp,1080
 40030f8:	9021883a 	mov	r16,r18
 40030fc:	da012c15 	stw	r8,1200(sp)
 4003100:	a825883a 	mov	r18,r21
 4003104:	482b883a 	mov	r21,r9
 4003108:	8009883a 	mov	r4,r16
 400310c:	900b883a 	mov	r5,r18
 4003110:	01800284 	movi	r6,10
 4003114:	000f883a 	mov	r7,zero
 4003118:	400badc0 	call	400badc <__umoddi3>
 400311c:	10800c04 	addi	r2,r2,48
 4003120:	8c7fffc4 	addi	r17,r17,-1
 4003124:	8009883a 	mov	r4,r16
 4003128:	900b883a 	mov	r5,r18
 400312c:	01800284 	movi	r6,10
 4003130:	000f883a 	mov	r7,zero
 4003134:	88800005 	stb	r2,0(r17)
 4003138:	400b49c0 	call	400b49c <__udivdi3>
 400313c:	1021883a 	mov	r16,r2
 4003140:	10c4b03a 	or	r2,r2,r3
 4003144:	1825883a 	mov	r18,r3
 4003148:	103fef1e 	bne	r2,zero,4003108 <__alt_data_end+0xfe003108>
 400314c:	d9012817 	ldw	r4,1184(sp)
 4003150:	dc413115 	stw	r17,1220(sp)
 4003154:	dc012b17 	ldw	r16,1196(sp)
 4003158:	da012c17 	ldw	r8,1200(sp)
 400315c:	a813883a 	mov	r9,r21
 4003160:	2463c83a 	sub	r17,r4,r17
 4003164:	003dcd06 	br	400289c <__alt_data_end+0xfe00289c>
 4003168:	94800c04 	addi	r18,r18,48
 400316c:	d8c10dc4 	addi	r3,sp,1079
 4003170:	dc810dc5 	stb	r18,1079(sp)
 4003174:	dc413c17 	ldw	r17,1264(sp)
 4003178:	d8c13115 	stw	r3,1220(sp)
 400317c:	003dc706 	br	400289c <__alt_data_end+0xfe00289c>
 4003180:	00801944 	movi	r2,101
 4003184:	1400720e 	bge	r2,r16,4003350 <___vfprintf_internal_r+0x10a0>
 4003188:	d9013717 	ldw	r4,1244(sp)
 400318c:	d9413917 	ldw	r5,1252(sp)
 4003190:	000d883a 	mov	r6,zero
 4003194:	000f883a 	mov	r7,zero
 4003198:	d8c13d15 	stw	r3,1268(sp)
 400319c:	da013f15 	stw	r8,1276(sp)
 40031a0:	400d4680 	call	400d468 <__eqdf2>
 40031a4:	d8c13d17 	ldw	r3,1268(sp)
 40031a8:	da013f17 	ldw	r8,1276(sp)
 40031ac:	1000f41e 	bne	r2,zero,4003580 <___vfprintf_internal_r+0x12d0>
 40031b0:	d8811f17 	ldw	r2,1148(sp)
 40031b4:	01010074 	movhi	r4,1025
 40031b8:	21069404 	addi	r4,r4,6736
 40031bc:	18c00044 	addi	r3,r3,1
 40031c0:	10800044 	addi	r2,r2,1
 40031c4:	41000015 	stw	r4,0(r8)
 40031c8:	01000044 	movi	r4,1
 40031cc:	41000115 	stw	r4,4(r8)
 40031d0:	d8c12015 	stw	r3,1152(sp)
 40031d4:	d8811f15 	stw	r2,1148(sp)
 40031d8:	010001c4 	movi	r4,7
 40031dc:	20828d16 	blt	r4,r2,4003c14 <___vfprintf_internal_r+0x1964>
 40031e0:	42000204 	addi	r8,r8,8
 40031e4:	d8812617 	ldw	r2,1176(sp)
 40031e8:	d9413317 	ldw	r5,1228(sp)
 40031ec:	11400216 	blt	r2,r5,40031f8 <___vfprintf_internal_r+0xf48>
 40031f0:	e080004c 	andi	r2,fp,1
 40031f4:	103e4126 	beq	r2,zero,4002afc <__alt_data_end+0xfe002afc>
 40031f8:	d8813817 	ldw	r2,1248(sp)
 40031fc:	d9013517 	ldw	r4,1236(sp)
 4003200:	d9413817 	ldw	r5,1248(sp)
 4003204:	1887883a 	add	r3,r3,r2
 4003208:	d8811f17 	ldw	r2,1148(sp)
 400320c:	41000015 	stw	r4,0(r8)
 4003210:	41400115 	stw	r5,4(r8)
 4003214:	10800044 	addi	r2,r2,1
 4003218:	d8c12015 	stw	r3,1152(sp)
 400321c:	d8811f15 	stw	r2,1148(sp)
 4003220:	010001c4 	movi	r4,7
 4003224:	20830916 	blt	r4,r2,4003e4c <___vfprintf_internal_r+0x1b9c>
 4003228:	42000204 	addi	r8,r8,8
 400322c:	d8813317 	ldw	r2,1228(sp)
 4003230:	143fffc4 	addi	r16,r2,-1
 4003234:	043e310e 	bge	zero,r16,4002afc <__alt_data_end+0xfe002afc>
 4003238:	04400404 	movi	r17,16
 400323c:	d8811f17 	ldw	r2,1148(sp)
 4003240:	8c007e0e 	bge	r17,r16,400343c <___vfprintf_internal_r+0x118c>
 4003244:	01410074 	movhi	r5,1025
 4003248:	29469484 	addi	r5,r5,6738
 400324c:	d9412c15 	stw	r5,1200(sp)
 4003250:	04c001c4 	movi	r19,7
 4003254:	00000306 	br	4003264 <___vfprintf_internal_r+0xfb4>
 4003258:	42000204 	addi	r8,r8,8
 400325c:	843ffc04 	addi	r16,r16,-16
 4003260:	8c00790e 	bge	r17,r16,4003448 <___vfprintf_internal_r+0x1198>
 4003264:	18c00404 	addi	r3,r3,16
 4003268:	10800044 	addi	r2,r2,1
 400326c:	45000015 	stw	r20,0(r8)
 4003270:	44400115 	stw	r17,4(r8)
 4003274:	d8c12015 	stw	r3,1152(sp)
 4003278:	d8811f15 	stw	r2,1148(sp)
 400327c:	98bff60e 	bge	r19,r2,4003258 <__alt_data_end+0xfe003258>
 4003280:	b809883a 	mov	r4,r23
 4003284:	b00b883a 	mov	r5,r22
 4003288:	d9811e04 	addi	r6,sp,1144
 400328c:	40096f00 	call	40096f0 <__sprint_r>
 4003290:	103d1f1e 	bne	r2,zero,4002710 <__alt_data_end+0xfe002710>
 4003294:	d8c12017 	ldw	r3,1152(sp)
 4003298:	d8811f17 	ldw	r2,1148(sp)
 400329c:	da000404 	addi	r8,sp,16
 40032a0:	003fee06 	br	400325c <__alt_data_end+0xfe00325c>
 40032a4:	d9412e17 	ldw	r5,1208(sp)
 40032a8:	d8812b17 	ldw	r2,1196(sp)
 40032ac:	28a7c83a 	sub	r19,r5,r2
 40032b0:	04fddc0e 	bge	zero,r19,4002a24 <__alt_data_end+0xfe002a24>
 40032b4:	05400404 	movi	r21,16
 40032b8:	d8811f17 	ldw	r2,1148(sp)
 40032bc:	acc3870e 	bge	r21,r19,40040dc <___vfprintf_internal_r+0x1e2c>
 40032c0:	01410074 	movhi	r5,1025
 40032c4:	29469484 	addi	r5,r5,6738
 40032c8:	d9412c15 	stw	r5,1200(sp)
 40032cc:	048001c4 	movi	r18,7
 40032d0:	00000306 	br	40032e0 <___vfprintf_internal_r+0x1030>
 40032d4:	9cfffc04 	addi	r19,r19,-16
 40032d8:	42000204 	addi	r8,r8,8
 40032dc:	acc0110e 	bge	r21,r19,4003324 <___vfprintf_internal_r+0x1074>
 40032e0:	18c00404 	addi	r3,r3,16
 40032e4:	10800044 	addi	r2,r2,1
 40032e8:	45000015 	stw	r20,0(r8)
 40032ec:	45400115 	stw	r21,4(r8)
 40032f0:	d8c12015 	stw	r3,1152(sp)
 40032f4:	d8811f15 	stw	r2,1148(sp)
 40032f8:	90bff60e 	bge	r18,r2,40032d4 <__alt_data_end+0xfe0032d4>
 40032fc:	b809883a 	mov	r4,r23
 4003300:	b00b883a 	mov	r5,r22
 4003304:	d9811e04 	addi	r6,sp,1144
 4003308:	40096f00 	call	40096f0 <__sprint_r>
 400330c:	103d001e 	bne	r2,zero,4002710 <__alt_data_end+0xfe002710>
 4003310:	9cfffc04 	addi	r19,r19,-16
 4003314:	d8c12017 	ldw	r3,1152(sp)
 4003318:	d8811f17 	ldw	r2,1148(sp)
 400331c:	da000404 	addi	r8,sp,16
 4003320:	acffef16 	blt	r21,r19,40032e0 <__alt_data_end+0xfe0032e0>
 4003324:	d9012c17 	ldw	r4,1200(sp)
 4003328:	1cc7883a 	add	r3,r3,r19
 400332c:	10800044 	addi	r2,r2,1
 4003330:	41000015 	stw	r4,0(r8)
 4003334:	44c00115 	stw	r19,4(r8)
 4003338:	d8c12015 	stw	r3,1152(sp)
 400333c:	d8811f15 	stw	r2,1148(sp)
 4003340:	010001c4 	movi	r4,7
 4003344:	20817816 	blt	r4,r2,4003928 <___vfprintf_internal_r+0x1678>
 4003348:	42000204 	addi	r8,r8,8
 400334c:	003db506 	br	4002a24 <__alt_data_end+0xfe002a24>
 4003350:	d9413317 	ldw	r5,1228(sp)
 4003354:	00800044 	movi	r2,1
 4003358:	18c00044 	addi	r3,r3,1
 400335c:	11413e0e 	bge	r2,r5,4003858 <___vfprintf_internal_r+0x15a8>
 4003360:	dc011f17 	ldw	r16,1148(sp)
 4003364:	d8813117 	ldw	r2,1220(sp)
 4003368:	d8c12015 	stw	r3,1152(sp)
 400336c:	84000044 	addi	r16,r16,1
 4003370:	40800015 	stw	r2,0(r8)
 4003374:	00800044 	movi	r2,1
 4003378:	40800115 	stw	r2,4(r8)
 400337c:	dc011f15 	stw	r16,1148(sp)
 4003380:	008001c4 	movi	r2,7
 4003384:	14015616 	blt	r2,r16,40038e0 <___vfprintf_internal_r+0x1630>
 4003388:	42000204 	addi	r8,r8,8
 400338c:	d9013817 	ldw	r4,1248(sp)
 4003390:	d9413517 	ldw	r5,1236(sp)
 4003394:	84000044 	addi	r16,r16,1
 4003398:	1907883a 	add	r3,r3,r4
 400339c:	41400015 	stw	r5,0(r8)
 40033a0:	41000115 	stw	r4,4(r8)
 40033a4:	d8c12015 	stw	r3,1152(sp)
 40033a8:	dc011f15 	stw	r16,1148(sp)
 40033ac:	008001c4 	movi	r2,7
 40033b0:	14015416 	blt	r2,r16,4003904 <___vfprintf_internal_r+0x1654>
 40033b4:	44400204 	addi	r17,r8,8
 40033b8:	d9013717 	ldw	r4,1244(sp)
 40033bc:	d9413917 	ldw	r5,1252(sp)
 40033c0:	000d883a 	mov	r6,zero
 40033c4:	000f883a 	mov	r7,zero
 40033c8:	d8c13d15 	stw	r3,1268(sp)
 40033cc:	400d4680 	call	400d468 <__eqdf2>
 40033d0:	d8c13d17 	ldw	r3,1268(sp)
 40033d4:	1000a726 	beq	r2,zero,4003674 <___vfprintf_internal_r+0x13c4>
 40033d8:	d9013317 	ldw	r4,1228(sp)
 40033dc:	d9413117 	ldw	r5,1220(sp)
 40033e0:	84000044 	addi	r16,r16,1
 40033e4:	20bfffc4 	addi	r2,r4,-1
 40033e8:	1887883a 	add	r3,r3,r2
 40033ec:	29000044 	addi	r4,r5,1
 40033f0:	88800115 	stw	r2,4(r17)
 40033f4:	89000015 	stw	r4,0(r17)
 40033f8:	d8c12015 	stw	r3,1152(sp)
 40033fc:	dc011f15 	stw	r16,1148(sp)
 4003400:	008001c4 	movi	r2,7
 4003404:	14012d16 	blt	r2,r16,40038bc <___vfprintf_internal_r+0x160c>
 4003408:	8c400204 	addi	r17,r17,8
 400340c:	d9413a17 	ldw	r5,1256(sp)
 4003410:	dcc122c4 	addi	r19,sp,1163
 4003414:	84000044 	addi	r16,r16,1
 4003418:	28c7883a 	add	r3,r5,r3
 400341c:	8cc00015 	stw	r19,0(r17)
 4003420:	89400115 	stw	r5,4(r17)
 4003424:	d8c12015 	stw	r3,1152(sp)
 4003428:	dc011f15 	stw	r16,1148(sp)
 400342c:	008001c4 	movi	r2,7
 4003430:	14000e16 	blt	r2,r16,400346c <___vfprintf_internal_r+0x11bc>
 4003434:	8a000204 	addi	r8,r17,8
 4003438:	003db006 	br	4002afc <__alt_data_end+0xfe002afc>
 400343c:	01010074 	movhi	r4,1025
 4003440:	21069484 	addi	r4,r4,6738
 4003444:	d9012c15 	stw	r4,1200(sp)
 4003448:	d9012c17 	ldw	r4,1200(sp)
 400344c:	1c07883a 	add	r3,r3,r16
 4003450:	44000115 	stw	r16,4(r8)
 4003454:	41000015 	stw	r4,0(r8)
 4003458:	10800044 	addi	r2,r2,1
 400345c:	d8c12015 	stw	r3,1152(sp)
 4003460:	d8811f15 	stw	r2,1148(sp)
 4003464:	010001c4 	movi	r4,7
 4003468:	20bda30e 	bge	r4,r2,4002af8 <__alt_data_end+0xfe002af8>
 400346c:	b809883a 	mov	r4,r23
 4003470:	b00b883a 	mov	r5,r22
 4003474:	d9811e04 	addi	r6,sp,1144
 4003478:	40096f00 	call	40096f0 <__sprint_r>
 400347c:	103ca41e 	bne	r2,zero,4002710 <__alt_data_end+0xfe002710>
 4003480:	d8c12017 	ldw	r3,1152(sp)
 4003484:	da000404 	addi	r8,sp,16
 4003488:	003d9c06 	br	4002afc <__alt_data_end+0xfe002afc>
 400348c:	b809883a 	mov	r4,r23
 4003490:	b00b883a 	mov	r5,r22
 4003494:	d9811e04 	addi	r6,sp,1144
 4003498:	40096f00 	call	40096f0 <__sprint_r>
 400349c:	103dd226 	beq	r2,zero,4002be8 <__alt_data_end+0xfe002be8>
 40034a0:	003c9b06 	br	4002710 <__alt_data_end+0xfe002710>
 40034a4:	10803fcc 	andi	r2,r2,255
 40034a8:	1000311e 	bne	r2,zero,4003570 <___vfprintf_internal_r+0x12c0>
 40034ac:	e080004c 	andi	r2,fp,1
 40034b0:	10002f26 	beq	r2,zero,4003570 <___vfprintf_internal_r+0x12c0>
 40034b4:	00800c04 	movi	r2,48
 40034b8:	d8c10dc4 	addi	r3,sp,1079
 40034bc:	d8810dc5 	stb	r2,1079(sp)
 40034c0:	dc413c17 	ldw	r17,1264(sp)
 40034c4:	d8c13115 	stw	r3,1220(sp)
 40034c8:	003cf406 	br	400289c <__alt_data_end+0xfe00289c>
 40034cc:	b809883a 	mov	r4,r23
 40034d0:	b00b883a 	mov	r5,r22
 40034d4:	d9811e04 	addi	r6,sp,1144
 40034d8:	40096f00 	call	40096f0 <__sprint_r>
 40034dc:	103c8c1e 	bne	r2,zero,4002710 <__alt_data_end+0xfe002710>
 40034e0:	d8c12017 	ldw	r3,1152(sp)
 40034e4:	da000404 	addi	r8,sp,16
 40034e8:	003d7706 	br	4002ac8 <__alt_data_end+0xfe002ac8>
 40034ec:	b809883a 	mov	r4,r23
 40034f0:	b00b883a 	mov	r5,r22
 40034f4:	d9811e04 	addi	r6,sp,1144
 40034f8:	40096f00 	call	40096f0 <__sprint_r>
 40034fc:	103c841e 	bne	r2,zero,4002710 <__alt_data_end+0xfe002710>
 4003500:	d8c12017 	ldw	r3,1152(sp)
 4003504:	da000404 	addi	r8,sp,16
 4003508:	003d3506 	br	40029e0 <__alt_data_end+0xfe0029e0>
 400350c:	b809883a 	mov	r4,r23
 4003510:	b00b883a 	mov	r5,r22
 4003514:	d9811e04 	addi	r6,sp,1144
 4003518:	40096f00 	call	40096f0 <__sprint_r>
 400351c:	103c7c1e 	bne	r2,zero,4002710 <__alt_data_end+0xfe002710>
 4003520:	d8c12017 	ldw	r3,1152(sp)
 4003524:	da000404 	addi	r8,sp,16
 4003528:	003d3b06 	br	4002a18 <__alt_data_end+0xfe002a18>
 400352c:	d9413b17 	ldw	r5,1260(sp)
 4003530:	d8c10e04 	addi	r3,sp,1080
 4003534:	908003cc 	andi	r2,r18,15
 4003538:	a808973a 	slli	r4,r21,28
 400353c:	2885883a 	add	r2,r5,r2
 4003540:	9024d13a 	srli	r18,r18,4
 4003544:	10800003 	ldbu	r2,0(r2)
 4003548:	a82ad13a 	srli	r21,r21,4
 400354c:	18ffffc4 	addi	r3,r3,-1
 4003550:	24a4b03a 	or	r18,r4,r18
 4003554:	18800005 	stb	r2,0(r3)
 4003558:	9544b03a 	or	r2,r18,r21
 400355c:	103ff51e 	bne	r2,zero,4003534 <__alt_data_end+0xfe003534>
 4003560:	d9412817 	ldw	r5,1184(sp)
 4003564:	d8c13115 	stw	r3,1220(sp)
 4003568:	28e3c83a 	sub	r17,r5,r3
 400356c:	003ccb06 	br	400289c <__alt_data_end+0xfe00289c>
 4003570:	d8c10e04 	addi	r3,sp,1080
 4003574:	0023883a 	mov	r17,zero
 4003578:	d8c13115 	stw	r3,1220(sp)
 400357c:	003cc706 	br	400289c <__alt_data_end+0xfe00289c>
 4003580:	dc012617 	ldw	r16,1176(sp)
 4003584:	0401ab0e 	bge	zero,r16,4003c34 <___vfprintf_internal_r+0x1984>
 4003588:	d8813317 	ldw	r2,1228(sp)
 400358c:	d9413117 	ldw	r5,1220(sp)
 4003590:	d9013417 	ldw	r4,1232(sp)
 4003594:	1023883a 	mov	r17,r2
 4003598:	28a1883a 	add	r16,r5,r2
 400359c:	2080010e 	bge	r4,r2,40035a4 <___vfprintf_internal_r+0x12f4>
 40035a0:	2023883a 	mov	r17,r4
 40035a4:	04400b0e 	bge	zero,r17,40035d4 <___vfprintf_internal_r+0x1324>
 40035a8:	d8811f17 	ldw	r2,1148(sp)
 40035ac:	d9413117 	ldw	r5,1220(sp)
 40035b0:	1c47883a 	add	r3,r3,r17
 40035b4:	10800044 	addi	r2,r2,1
 40035b8:	41400015 	stw	r5,0(r8)
 40035bc:	44400115 	stw	r17,4(r8)
 40035c0:	d8c12015 	stw	r3,1152(sp)
 40035c4:	d8811f15 	stw	r2,1148(sp)
 40035c8:	010001c4 	movi	r4,7
 40035cc:	20826716 	blt	r4,r2,4003f6c <___vfprintf_internal_r+0x1cbc>
 40035d0:	42000204 	addi	r8,r8,8
 40035d4:	88026316 	blt	r17,zero,4003f64 <___vfprintf_internal_r+0x1cb4>
 40035d8:	d8813417 	ldw	r2,1232(sp)
 40035dc:	1463c83a 	sub	r17,r2,r17
 40035e0:	0440590e 	bge	zero,r17,4003748 <___vfprintf_internal_r+0x1498>
 40035e4:	04c00404 	movi	r19,16
 40035e8:	d8811f17 	ldw	r2,1148(sp)
 40035ec:	9c41770e 	bge	r19,r17,4003bcc <___vfprintf_internal_r+0x191c>
 40035f0:	01410074 	movhi	r5,1025
 40035f4:	29469484 	addi	r5,r5,6738
 40035f8:	d9412c15 	stw	r5,1200(sp)
 40035fc:	054001c4 	movi	r21,7
 4003600:	00000306 	br	4003610 <___vfprintf_internal_r+0x1360>
 4003604:	42000204 	addi	r8,r8,8
 4003608:	8c7ffc04 	addi	r17,r17,-16
 400360c:	9c41720e 	bge	r19,r17,4003bd8 <___vfprintf_internal_r+0x1928>
 4003610:	18c00404 	addi	r3,r3,16
 4003614:	10800044 	addi	r2,r2,1
 4003618:	45000015 	stw	r20,0(r8)
 400361c:	44c00115 	stw	r19,4(r8)
 4003620:	d8c12015 	stw	r3,1152(sp)
 4003624:	d8811f15 	stw	r2,1148(sp)
 4003628:	a8bff60e 	bge	r21,r2,4003604 <__alt_data_end+0xfe003604>
 400362c:	b809883a 	mov	r4,r23
 4003630:	b00b883a 	mov	r5,r22
 4003634:	d9811e04 	addi	r6,sp,1144
 4003638:	40096f00 	call	40096f0 <__sprint_r>
 400363c:	103c341e 	bne	r2,zero,4002710 <__alt_data_end+0xfe002710>
 4003640:	d8c12017 	ldw	r3,1152(sp)
 4003644:	d8811f17 	ldw	r2,1148(sp)
 4003648:	da000404 	addi	r8,sp,16
 400364c:	003fee06 	br	4003608 <__alt_data_end+0xfe003608>
 4003650:	b809883a 	mov	r4,r23
 4003654:	b00b883a 	mov	r5,r22
 4003658:	d9811e04 	addi	r6,sp,1144
 400365c:	40096f00 	call	40096f0 <__sprint_r>
 4003660:	103c2b1e 	bne	r2,zero,4002710 <__alt_data_end+0xfe002710>
 4003664:	d8c12017 	ldw	r3,1152(sp)
 4003668:	d8812787 	ldb	r2,1182(sp)
 400366c:	da000404 	addi	r8,sp,16
 4003670:	003cce06 	br	40029ac <__alt_data_end+0xfe0029ac>
 4003674:	d8813317 	ldw	r2,1228(sp)
 4003678:	14ffffc4 	addi	r19,r2,-1
 400367c:	04ff630e 	bge	zero,r19,400340c <__alt_data_end+0xfe00340c>
 4003680:	05400404 	movi	r21,16
 4003684:	acc0810e 	bge	r21,r19,400388c <___vfprintf_internal_r+0x15dc>
 4003688:	01410074 	movhi	r5,1025
 400368c:	29469484 	addi	r5,r5,6738
 4003690:	d9412c15 	stw	r5,1200(sp)
 4003694:	01c001c4 	movi	r7,7
 4003698:	00000306 	br	40036a8 <___vfprintf_internal_r+0x13f8>
 400369c:	8c400204 	addi	r17,r17,8
 40036a0:	9cfffc04 	addi	r19,r19,-16
 40036a4:	acc07c0e 	bge	r21,r19,4003898 <___vfprintf_internal_r+0x15e8>
 40036a8:	18c00404 	addi	r3,r3,16
 40036ac:	84000044 	addi	r16,r16,1
 40036b0:	8d000015 	stw	r20,0(r17)
 40036b4:	8d400115 	stw	r21,4(r17)
 40036b8:	d8c12015 	stw	r3,1152(sp)
 40036bc:	dc011f15 	stw	r16,1148(sp)
 40036c0:	3c3ff60e 	bge	r7,r16,400369c <__alt_data_end+0xfe00369c>
 40036c4:	b809883a 	mov	r4,r23
 40036c8:	b00b883a 	mov	r5,r22
 40036cc:	d9811e04 	addi	r6,sp,1144
 40036d0:	d9c13d15 	stw	r7,1268(sp)
 40036d4:	40096f00 	call	40096f0 <__sprint_r>
 40036d8:	d9c13d17 	ldw	r7,1268(sp)
 40036dc:	103c0c1e 	bne	r2,zero,4002710 <__alt_data_end+0xfe002710>
 40036e0:	d8c12017 	ldw	r3,1152(sp)
 40036e4:	dc011f17 	ldw	r16,1148(sp)
 40036e8:	dc400404 	addi	r17,sp,16
 40036ec:	003fec06 	br	40036a0 <__alt_data_end+0xfe0036a0>
 40036f0:	00800084 	movi	r2,2
 40036f4:	9546b03a 	or	r3,r18,r21
 40036f8:	003d7d06 	br	4002cf0 <__alt_data_end+0xfe002cf0>
 40036fc:	10803fcc 	andi	r2,r2,255
 4003700:	1080201c 	xori	r2,r2,128
 4003704:	10bfe004 	addi	r2,r2,-128
 4003708:	01000c04 	movi	r4,48
 400370c:	1101d726 	beq	r2,r4,4003e6c <___vfprintf_internal_r+0x1bbc>
 4003710:	d9413117 	ldw	r5,1220(sp)
 4003714:	d8812817 	ldw	r2,1184(sp)
 4003718:	193fffc5 	stb	r4,-1(r3)
 400371c:	297fffc4 	addi	r5,r5,-1
 4003720:	d9413115 	stw	r5,1220(sp)
 4003724:	1163c83a 	sub	r17,r2,r5
 4003728:	003c5c06 	br	400289c <__alt_data_end+0xfe00289c>
 400372c:	b809883a 	mov	r4,r23
 4003730:	b00b883a 	mov	r5,r22
 4003734:	d9811e04 	addi	r6,sp,1144
 4003738:	40096f00 	call	40096f0 <__sprint_r>
 400373c:	103bf41e 	bne	r2,zero,4002710 <__alt_data_end+0xfe002710>
 4003740:	d8c12017 	ldw	r3,1152(sp)
 4003744:	da000404 	addi	r8,sp,16
 4003748:	d9413117 	ldw	r5,1220(sp)
 400374c:	d9013417 	ldw	r4,1232(sp)
 4003750:	d8812617 	ldw	r2,1176(sp)
 4003754:	2923883a 	add	r17,r5,r4
 4003758:	d9413317 	ldw	r5,1228(sp)
 400375c:	11400216 	blt	r2,r5,4003768 <___vfprintf_internal_r+0x14b8>
 4003760:	e100004c 	andi	r4,fp,1
 4003764:	20000d26 	beq	r4,zero,400379c <___vfprintf_internal_r+0x14ec>
 4003768:	d9013817 	ldw	r4,1248(sp)
 400376c:	d9413517 	ldw	r5,1236(sp)
 4003770:	1907883a 	add	r3,r3,r4
 4003774:	d9011f17 	ldw	r4,1148(sp)
 4003778:	41400015 	stw	r5,0(r8)
 400377c:	d9413817 	ldw	r5,1248(sp)
 4003780:	21000044 	addi	r4,r4,1
 4003784:	d8c12015 	stw	r3,1152(sp)
 4003788:	41400115 	stw	r5,4(r8)
 400378c:	d9011f15 	stw	r4,1148(sp)
 4003790:	014001c4 	movi	r5,7
 4003794:	2901fd16 	blt	r5,r4,4003f8c <___vfprintf_internal_r+0x1cdc>
 4003798:	42000204 	addi	r8,r8,8
 400379c:	d9013317 	ldw	r4,1228(sp)
 40037a0:	2085c83a 	sub	r2,r4,r2
 40037a4:	8449c83a 	sub	r4,r16,r17
 40037a8:	1021883a 	mov	r16,r2
 40037ac:	2080010e 	bge	r4,r2,40037b4 <___vfprintf_internal_r+0x1504>
 40037b0:	2021883a 	mov	r16,r4
 40037b4:	04000a0e 	bge	zero,r16,40037e0 <___vfprintf_internal_r+0x1530>
 40037b8:	d9011f17 	ldw	r4,1148(sp)
 40037bc:	1c07883a 	add	r3,r3,r16
 40037c0:	44400015 	stw	r17,0(r8)
 40037c4:	21000044 	addi	r4,r4,1
 40037c8:	44000115 	stw	r16,4(r8)
 40037cc:	d8c12015 	stw	r3,1152(sp)
 40037d0:	d9011f15 	stw	r4,1148(sp)
 40037d4:	014001c4 	movi	r5,7
 40037d8:	29020916 	blt	r5,r4,4004000 <___vfprintf_internal_r+0x1d50>
 40037dc:	42000204 	addi	r8,r8,8
 40037e0:	80020116 	blt	r16,zero,4003fe8 <___vfprintf_internal_r+0x1d38>
 40037e4:	1421c83a 	sub	r16,r2,r16
 40037e8:	043cc40e 	bge	zero,r16,4002afc <__alt_data_end+0xfe002afc>
 40037ec:	04400404 	movi	r17,16
 40037f0:	d8811f17 	ldw	r2,1148(sp)
 40037f4:	8c3f110e 	bge	r17,r16,400343c <__alt_data_end+0xfe00343c>
 40037f8:	01410074 	movhi	r5,1025
 40037fc:	29469484 	addi	r5,r5,6738
 4003800:	d9412c15 	stw	r5,1200(sp)
 4003804:	04c001c4 	movi	r19,7
 4003808:	00000306 	br	4003818 <___vfprintf_internal_r+0x1568>
 400380c:	42000204 	addi	r8,r8,8
 4003810:	843ffc04 	addi	r16,r16,-16
 4003814:	8c3f0c0e 	bge	r17,r16,4003448 <__alt_data_end+0xfe003448>
 4003818:	18c00404 	addi	r3,r3,16
 400381c:	10800044 	addi	r2,r2,1
 4003820:	45000015 	stw	r20,0(r8)
 4003824:	44400115 	stw	r17,4(r8)
 4003828:	d8c12015 	stw	r3,1152(sp)
 400382c:	d8811f15 	stw	r2,1148(sp)
 4003830:	98bff60e 	bge	r19,r2,400380c <__alt_data_end+0xfe00380c>
 4003834:	b809883a 	mov	r4,r23
 4003838:	b00b883a 	mov	r5,r22
 400383c:	d9811e04 	addi	r6,sp,1144
 4003840:	40096f00 	call	40096f0 <__sprint_r>
 4003844:	103bb21e 	bne	r2,zero,4002710 <__alt_data_end+0xfe002710>
 4003848:	d8c12017 	ldw	r3,1152(sp)
 400384c:	d8811f17 	ldw	r2,1148(sp)
 4003850:	da000404 	addi	r8,sp,16
 4003854:	003fee06 	br	4003810 <__alt_data_end+0xfe003810>
 4003858:	e088703a 	and	r4,fp,r2
 400385c:	203ec01e 	bne	r4,zero,4003360 <__alt_data_end+0xfe003360>
 4003860:	dc011f17 	ldw	r16,1148(sp)
 4003864:	d9013117 	ldw	r4,1220(sp)
 4003868:	40800115 	stw	r2,4(r8)
 400386c:	84000044 	addi	r16,r16,1
 4003870:	41000015 	stw	r4,0(r8)
 4003874:	d8c12015 	stw	r3,1152(sp)
 4003878:	dc011f15 	stw	r16,1148(sp)
 400387c:	008001c4 	movi	r2,7
 4003880:	14000e16 	blt	r2,r16,40038bc <___vfprintf_internal_r+0x160c>
 4003884:	44400204 	addi	r17,r8,8
 4003888:	003ee006 	br	400340c <__alt_data_end+0xfe00340c>
 400388c:	01010074 	movhi	r4,1025
 4003890:	21069484 	addi	r4,r4,6738
 4003894:	d9012c15 	stw	r4,1200(sp)
 4003898:	d8812c17 	ldw	r2,1200(sp)
 400389c:	1cc7883a 	add	r3,r3,r19
 40038a0:	84000044 	addi	r16,r16,1
 40038a4:	88800015 	stw	r2,0(r17)
 40038a8:	8cc00115 	stw	r19,4(r17)
 40038ac:	d8c12015 	stw	r3,1152(sp)
 40038b0:	dc011f15 	stw	r16,1148(sp)
 40038b4:	008001c4 	movi	r2,7
 40038b8:	143ed30e 	bge	r2,r16,4003408 <__alt_data_end+0xfe003408>
 40038bc:	b809883a 	mov	r4,r23
 40038c0:	b00b883a 	mov	r5,r22
 40038c4:	d9811e04 	addi	r6,sp,1144
 40038c8:	40096f00 	call	40096f0 <__sprint_r>
 40038cc:	103b901e 	bne	r2,zero,4002710 <__alt_data_end+0xfe002710>
 40038d0:	d8c12017 	ldw	r3,1152(sp)
 40038d4:	dc011f17 	ldw	r16,1148(sp)
 40038d8:	dc400404 	addi	r17,sp,16
 40038dc:	003ecb06 	br	400340c <__alt_data_end+0xfe00340c>
 40038e0:	b809883a 	mov	r4,r23
 40038e4:	b00b883a 	mov	r5,r22
 40038e8:	d9811e04 	addi	r6,sp,1144
 40038ec:	40096f00 	call	40096f0 <__sprint_r>
 40038f0:	103b871e 	bne	r2,zero,4002710 <__alt_data_end+0xfe002710>
 40038f4:	d8c12017 	ldw	r3,1152(sp)
 40038f8:	dc011f17 	ldw	r16,1148(sp)
 40038fc:	da000404 	addi	r8,sp,16
 4003900:	003ea206 	br	400338c <__alt_data_end+0xfe00338c>
 4003904:	b809883a 	mov	r4,r23
 4003908:	b00b883a 	mov	r5,r22
 400390c:	d9811e04 	addi	r6,sp,1144
 4003910:	40096f00 	call	40096f0 <__sprint_r>
 4003914:	103b7e1e 	bne	r2,zero,4002710 <__alt_data_end+0xfe002710>
 4003918:	d8c12017 	ldw	r3,1152(sp)
 400391c:	dc011f17 	ldw	r16,1148(sp)
 4003920:	dc400404 	addi	r17,sp,16
 4003924:	003ea406 	br	40033b8 <__alt_data_end+0xfe0033b8>
 4003928:	b809883a 	mov	r4,r23
 400392c:	b00b883a 	mov	r5,r22
 4003930:	d9811e04 	addi	r6,sp,1144
 4003934:	40096f00 	call	40096f0 <__sprint_r>
 4003938:	103b751e 	bne	r2,zero,4002710 <__alt_data_end+0xfe002710>
 400393c:	d8c12017 	ldw	r3,1152(sp)
 4003940:	da000404 	addi	r8,sp,16
 4003944:	003c3706 	br	4002a24 <__alt_data_end+0xfe002a24>
 4003948:	04a5c83a 	sub	r18,zero,r18
 400394c:	9004c03a 	cmpne	r2,r18,zero
 4003950:	056bc83a 	sub	r21,zero,r21
 4003954:	a8abc83a 	sub	r21,r21,r2
 4003958:	04c00b44 	movi	r19,45
 400395c:	dcc12785 	stb	r19,1182(sp)
 4003960:	da413215 	stw	r9,1224(sp)
 4003964:	00800044 	movi	r2,1
 4003968:	9546b03a 	or	r3,r18,r21
 400396c:	003bb106 	br	4002834 <__alt_data_end+0xfe002834>
 4003970:	da013f15 	stw	r8,1276(sp)
 4003974:	da413e15 	stw	r9,1272(sp)
 4003978:	400934c0 	call	400934c <__fpclassifyd>
 400397c:	da013f17 	ldw	r8,1276(sp)
 4003980:	da413e17 	ldw	r9,1272(sp)
 4003984:	1000e526 	beq	r2,zero,4003d1c <___vfprintf_internal_r+0x1a6c>
 4003988:	04fff7c4 	movi	r19,-33
 400398c:	00bfffc4 	movi	r2,-1
 4003990:	84e6703a 	and	r19,r16,r19
 4003994:	48822926 	beq	r9,r2,400423c <___vfprintf_internal_r+0x1f8c>
 4003998:	008011c4 	movi	r2,71
 400399c:	98821626 	beq	r19,r2,40041f8 <___vfprintf_internal_r+0x1f48>
 40039a0:	d9013917 	ldw	r4,1252(sp)
 40039a4:	e0c04014 	ori	r3,fp,256
 40039a8:	d8c12d15 	stw	r3,1204(sp)
 40039ac:	20021f16 	blt	r4,zero,400422c <___vfprintf_internal_r+0x1f7c>
 40039b0:	dc413917 	ldw	r17,1252(sp)
 40039b4:	d8012b05 	stb	zero,1196(sp)
 40039b8:	00801984 	movi	r2,102
 40039bc:	80814d26 	beq	r16,r2,4003ef4 <___vfprintf_internal_r+0x1c44>
 40039c0:	00801184 	movi	r2,70
 40039c4:	80814b26 	beq	r16,r2,4003ef4 <___vfprintf_internal_r+0x1c44>
 40039c8:	00801144 	movi	r2,69
 40039cc:	98821d26 	beq	r19,r2,4004244 <___vfprintf_internal_r+0x1f94>
 40039d0:	482b883a 	mov	r21,r9
 40039d4:	d8812604 	addi	r2,sp,1176
 40039d8:	d8800115 	stw	r2,4(sp)
 40039dc:	d9413717 	ldw	r5,1244(sp)
 40039e0:	d8812504 	addi	r2,sp,1172
 40039e4:	d8800215 	stw	r2,8(sp)
 40039e8:	d8812104 	addi	r2,sp,1156
 40039ec:	dd400015 	stw	r21,0(sp)
 40039f0:	d8800315 	stw	r2,12(sp)
 40039f4:	b809883a 	mov	r4,r23
 40039f8:	880d883a 	mov	r6,r17
 40039fc:	01c00084 	movi	r7,2
 4003a00:	da013f15 	stw	r8,1276(sp)
 4003a04:	da413e15 	stw	r9,1272(sp)
 4003a08:	40047280 	call	4004728 <_dtoa_r>
 4003a0c:	d8813115 	stw	r2,1220(sp)
 4003a10:	008019c4 	movi	r2,103
 4003a14:	da013f17 	ldw	r8,1276(sp)
 4003a18:	da413e17 	ldw	r9,1272(sp)
 4003a1c:	80800226 	beq	r16,r2,4003a28 <___vfprintf_internal_r+0x1778>
 4003a20:	008011c4 	movi	r2,71
 4003a24:	8081451e 	bne	r16,r2,4003f3c <___vfprintf_internal_r+0x1c8c>
 4003a28:	e080004c 	andi	r2,fp,1
 4003a2c:	10021e26 	beq	r2,zero,40042a8 <___vfprintf_internal_r+0x1ff8>
 4003a30:	d8c13117 	ldw	r3,1220(sp)
 4003a34:	1d55883a 	add	r10,r3,r21
 4003a38:	d9013717 	ldw	r4,1244(sp)
 4003a3c:	880b883a 	mov	r5,r17
 4003a40:	000d883a 	mov	r6,zero
 4003a44:	000f883a 	mov	r7,zero
 4003a48:	da013f15 	stw	r8,1276(sp)
 4003a4c:	da413e15 	stw	r9,1272(sp)
 4003a50:	da813d15 	stw	r10,1268(sp)
 4003a54:	400d4680 	call	400d468 <__eqdf2>
 4003a58:	da013f17 	ldw	r8,1276(sp)
 4003a5c:	da413e17 	ldw	r9,1272(sp)
 4003a60:	da813d17 	ldw	r10,1268(sp)
 4003a64:	1001a126 	beq	r2,zero,40040ec <___vfprintf_internal_r+0x1e3c>
 4003a68:	d8812117 	ldw	r2,1156(sp)
 4003a6c:	1280062e 	bgeu	r2,r10,4003a88 <___vfprintf_internal_r+0x17d8>
 4003a70:	01000c04 	movi	r4,48
 4003a74:	10c00044 	addi	r3,r2,1
 4003a78:	d8c12115 	stw	r3,1156(sp)
 4003a7c:	11000005 	stb	r4,0(r2)
 4003a80:	d8812117 	ldw	r2,1156(sp)
 4003a84:	12bffb36 	bltu	r2,r10,4003a74 <__alt_data_end+0xfe003a74>
 4003a88:	d8c13117 	ldw	r3,1220(sp)
 4003a8c:	10c5c83a 	sub	r2,r2,r3
 4003a90:	d8813315 	stw	r2,1228(sp)
 4003a94:	008011c4 	movi	r2,71
 4003a98:	98818926 	beq	r19,r2,40040c0 <___vfprintf_internal_r+0x1e10>
 4003a9c:	00801944 	movi	r2,101
 4003aa0:	14023c0e 	bge	r2,r16,4004394 <___vfprintf_internal_r+0x20e4>
 4003aa4:	d8c12617 	ldw	r3,1176(sp)
 4003aa8:	00801984 	movi	r2,102
 4003aac:	d8c13415 	stw	r3,1232(sp)
 4003ab0:	8081ef26 	beq	r16,r2,4004270 <___vfprintf_internal_r+0x1fc0>
 4003ab4:	d8c13417 	ldw	r3,1232(sp)
 4003ab8:	d9013317 	ldw	r4,1228(sp)
 4003abc:	1901e316 	blt	r3,r4,400424c <___vfprintf_internal_r+0x1f9c>
 4003ac0:	e080004c 	andi	r2,fp,1
 4003ac4:	1001f426 	beq	r2,zero,4004298 <___vfprintf_internal_r+0x1fe8>
 4003ac8:	d8c13417 	ldw	r3,1232(sp)
 4003acc:	1c400044 	addi	r17,r3,1
 4003ad0:	8839883a 	mov	fp,r17
 4003ad4:	8801e416 	blt	r17,zero,4004268 <___vfprintf_internal_r+0x1fb8>
 4003ad8:	dd412b07 	ldb	r21,1196(sp)
 4003adc:	a801701e 	bne	r21,zero,40040a0 <___vfprintf_internal_r+0x1df0>
 4003ae0:	df012b15 	stw	fp,1196(sp)
 4003ae4:	dcc12783 	ldbu	r19,1182(sp)
 4003ae8:	df012d17 	ldw	fp,1204(sp)
 4003aec:	d8013215 	stw	zero,1224(sp)
 4003af0:	dc812d15 	stw	r18,1204(sp)
 4003af4:	003b6e06 	br	40028b0 <__alt_data_end+0xfe0028b0>
 4003af8:	e080040c 	andi	r2,fp,16
 4003afc:	1000b51e 	bne	r2,zero,4003dd4 <___vfprintf_internal_r+0x1b24>
 4003b00:	e080100c 	andi	r2,fp,64
 4003b04:	10015b26 	beq	r2,zero,4004074 <___vfprintf_internal_r+0x1dc4>
 4003b08:	d9012d17 	ldw	r4,1204(sp)
 4003b0c:	d9412f17 	ldw	r5,1212(sp)
 4003b10:	20800017 	ldw	r2,0(r4)
 4003b14:	21000104 	addi	r4,r4,4
 4003b18:	d9012d15 	stw	r4,1204(sp)
 4003b1c:	1140000d 	sth	r5,0(r2)
 4003b20:	003a2006 	br	40023a4 <__alt_data_end+0xfe0023a4>
 4003b24:	e0c0100c 	andi	r3,fp,64
 4003b28:	1800a226 	beq	r3,zero,4003db4 <___vfprintf_internal_r+0x1b04>
 4003b2c:	d8c12d17 	ldw	r3,1204(sp)
 4003b30:	1480000b 	ldhu	r18,0(r2)
 4003b34:	002b883a 	mov	r21,zero
 4003b38:	18c00104 	addi	r3,r3,4
 4003b3c:	d8c12d15 	stw	r3,1204(sp)
 4003b40:	0005883a 	mov	r2,zero
 4003b44:	9007883a 	mov	r3,r18
 4003b48:	003c6906 	br	4002cf0 <__alt_data_end+0xfe002cf0>
 4003b4c:	e0c0100c 	andi	r3,fp,64
 4003b50:	18009026 	beq	r3,zero,4003d94 <___vfprintf_internal_r+0x1ae4>
 4003b54:	1480000b 	ldhu	r18,0(r2)
 4003b58:	d8812d17 	ldw	r2,1204(sp)
 4003b5c:	002b883a 	mov	r21,zero
 4003b60:	9007883a 	mov	r3,r18
 4003b64:	10800104 	addi	r2,r2,4
 4003b68:	d8812d15 	stw	r2,1204(sp)
 4003b6c:	00800044 	movi	r2,1
 4003b70:	003c5f06 	br	4002cf0 <__alt_data_end+0xfe002cf0>
 4003b74:	e0c0100c 	andi	r3,fp,64
 4003b78:	18008026 	beq	r3,zero,4003d7c <___vfprintf_internal_r+0x1acc>
 4003b7c:	d9012d17 	ldw	r4,1204(sp)
 4003b80:	1480000b 	ldhu	r18,0(r2)
 4003b84:	002b883a 	mov	r21,zero
 4003b88:	21000104 	addi	r4,r4,4
 4003b8c:	d9012d15 	stw	r4,1204(sp)
 4003b90:	003c7906 	br	4002d78 <__alt_data_end+0xfe002d78>
 4003b94:	e080100c 	andi	r2,fp,64
 4003b98:	10007126 	beq	r2,zero,4003d60 <___vfprintf_internal_r+0x1ab0>
 4003b9c:	1c80000f 	ldh	r18,0(r3)
 4003ba0:	d8812d17 	ldw	r2,1204(sp)
 4003ba4:	902bd7fa 	srai	r21,r18,31
 4003ba8:	10800104 	addi	r2,r2,4
 4003bac:	d8812d15 	stw	r2,1204(sp)
 4003bb0:	a805883a 	mov	r2,r21
 4003bb4:	003b1a06 	br	4002820 <__alt_data_end+0xfe002820>
 4003bb8:	e4000007 	ldb	r16,0(fp)
 4003bbc:	e005883a 	mov	r2,fp
 4003bc0:	003a2306 	br	4002450 <__alt_data_end+0xfe002450>
 4003bc4:	00800084 	movi	r2,2
 4003bc8:	003c4906 	br	4002cf0 <__alt_data_end+0xfe002cf0>
 4003bcc:	01010074 	movhi	r4,1025
 4003bd0:	21069484 	addi	r4,r4,6738
 4003bd4:	d9012c15 	stw	r4,1200(sp)
 4003bd8:	d9012c17 	ldw	r4,1200(sp)
 4003bdc:	1c47883a 	add	r3,r3,r17
 4003be0:	10800044 	addi	r2,r2,1
 4003be4:	41000015 	stw	r4,0(r8)
 4003be8:	44400115 	stw	r17,4(r8)
 4003bec:	d8c12015 	stw	r3,1152(sp)
 4003bf0:	d8811f15 	stw	r2,1148(sp)
 4003bf4:	010001c4 	movi	r4,7
 4003bf8:	20becc16 	blt	r4,r2,400372c <__alt_data_end+0xfe00372c>
 4003bfc:	42000204 	addi	r8,r8,8
 4003c00:	003ed106 	br	4003748 <__alt_data_end+0xfe003748>
 4003c04:	01010074 	movhi	r4,1025
 4003c08:	21069484 	addi	r4,r4,6738
 4003c0c:	d9012c15 	stw	r4,1200(sp)
 4003c10:	003ba306 	br	4002aa0 <__alt_data_end+0xfe002aa0>
 4003c14:	b809883a 	mov	r4,r23
 4003c18:	b00b883a 	mov	r5,r22
 4003c1c:	d9811e04 	addi	r6,sp,1144
 4003c20:	40096f00 	call	40096f0 <__sprint_r>
 4003c24:	103aba1e 	bne	r2,zero,4002710 <__alt_data_end+0xfe002710>
 4003c28:	d8c12017 	ldw	r3,1152(sp)
 4003c2c:	da000404 	addi	r8,sp,16
 4003c30:	003d6c06 	br	40031e4 <__alt_data_end+0xfe0031e4>
 4003c34:	d8811f17 	ldw	r2,1148(sp)
 4003c38:	01410074 	movhi	r5,1025
 4003c3c:	01000044 	movi	r4,1
 4003c40:	18c00044 	addi	r3,r3,1
 4003c44:	10800044 	addi	r2,r2,1
 4003c48:	29469404 	addi	r5,r5,6736
 4003c4c:	41000115 	stw	r4,4(r8)
 4003c50:	41400015 	stw	r5,0(r8)
 4003c54:	d8c12015 	stw	r3,1152(sp)
 4003c58:	d8811f15 	stw	r2,1148(sp)
 4003c5c:	010001c4 	movi	r4,7
 4003c60:	20806716 	blt	r4,r2,4003e00 <___vfprintf_internal_r+0x1b50>
 4003c64:	42000204 	addi	r8,r8,8
 4003c68:	8000041e 	bne	r16,zero,4003c7c <___vfprintf_internal_r+0x19cc>
 4003c6c:	d8813317 	ldw	r2,1228(sp)
 4003c70:	1000021e 	bne	r2,zero,4003c7c <___vfprintf_internal_r+0x19cc>
 4003c74:	e080004c 	andi	r2,fp,1
 4003c78:	103ba026 	beq	r2,zero,4002afc <__alt_data_end+0xfe002afc>
 4003c7c:	d9013817 	ldw	r4,1248(sp)
 4003c80:	d8811f17 	ldw	r2,1148(sp)
 4003c84:	d9413517 	ldw	r5,1236(sp)
 4003c88:	1907883a 	add	r3,r3,r4
 4003c8c:	10800044 	addi	r2,r2,1
 4003c90:	41000115 	stw	r4,4(r8)
 4003c94:	41400015 	stw	r5,0(r8)
 4003c98:	d8c12015 	stw	r3,1152(sp)
 4003c9c:	d8811f15 	stw	r2,1148(sp)
 4003ca0:	010001c4 	movi	r4,7
 4003ca4:	20815716 	blt	r4,r2,4004204 <___vfprintf_internal_r+0x1f54>
 4003ca8:	42000204 	addi	r8,r8,8
 4003cac:	0421c83a 	sub	r16,zero,r16
 4003cb0:	0400810e 	bge	zero,r16,4003eb8 <___vfprintf_internal_r+0x1c08>
 4003cb4:	04400404 	movi	r17,16
 4003cb8:	8c00bd0e 	bge	r17,r16,4003fb0 <___vfprintf_internal_r+0x1d00>
 4003cbc:	01410074 	movhi	r5,1025
 4003cc0:	29469484 	addi	r5,r5,6738
 4003cc4:	d9412c15 	stw	r5,1200(sp)
 4003cc8:	04c001c4 	movi	r19,7
 4003ccc:	00000306 	br	4003cdc <___vfprintf_internal_r+0x1a2c>
 4003cd0:	42000204 	addi	r8,r8,8
 4003cd4:	843ffc04 	addi	r16,r16,-16
 4003cd8:	8c00b80e 	bge	r17,r16,4003fbc <___vfprintf_internal_r+0x1d0c>
 4003cdc:	18c00404 	addi	r3,r3,16
 4003ce0:	10800044 	addi	r2,r2,1
 4003ce4:	45000015 	stw	r20,0(r8)
 4003ce8:	44400115 	stw	r17,4(r8)
 4003cec:	d8c12015 	stw	r3,1152(sp)
 4003cf0:	d8811f15 	stw	r2,1148(sp)
 4003cf4:	98bff60e 	bge	r19,r2,4003cd0 <__alt_data_end+0xfe003cd0>
 4003cf8:	b809883a 	mov	r4,r23
 4003cfc:	b00b883a 	mov	r5,r22
 4003d00:	d9811e04 	addi	r6,sp,1144
 4003d04:	40096f00 	call	40096f0 <__sprint_r>
 4003d08:	103a811e 	bne	r2,zero,4002710 <__alt_data_end+0xfe002710>
 4003d0c:	d8c12017 	ldw	r3,1152(sp)
 4003d10:	d8811f17 	ldw	r2,1148(sp)
 4003d14:	da000404 	addi	r8,sp,16
 4003d18:	003fee06 	br	4003cd4 <__alt_data_end+0xfe003cd4>
 4003d1c:	008011c4 	movi	r2,71
 4003d20:	1400db16 	blt	r2,r16,4004090 <___vfprintf_internal_r+0x1de0>
 4003d24:	01010074 	movhi	r4,1025
 4003d28:	21068604 	addi	r4,r4,6680
 4003d2c:	d9013115 	stw	r4,1220(sp)
 4003d30:	00c000c4 	movi	r3,3
 4003d34:	00bfdfc4 	movi	r2,-129
 4003d38:	d8c12b15 	stw	r3,1196(sp)
 4003d3c:	e0b8703a 	and	fp,fp,r2
 4003d40:	dcc12783 	ldbu	r19,1182(sp)
 4003d44:	dc812d15 	stw	r18,1204(sp)
 4003d48:	1823883a 	mov	r17,r3
 4003d4c:	d8013215 	stw	zero,1224(sp)
 4003d50:	d8013415 	stw	zero,1232(sp)
 4003d54:	003ad606 	br	40028b0 <__alt_data_end+0xfe0028b0>
 4003d58:	4823883a 	mov	r17,r9
 4003d5c:	003cc906 	br	4003084 <__alt_data_end+0xfe003084>
 4003d60:	1c800017 	ldw	r18,0(r3)
 4003d64:	d8c12d17 	ldw	r3,1204(sp)
 4003d68:	902bd7fa 	srai	r21,r18,31
 4003d6c:	18c00104 	addi	r3,r3,4
 4003d70:	d8c12d15 	stw	r3,1204(sp)
 4003d74:	a805883a 	mov	r2,r21
 4003d78:	003aa906 	br	4002820 <__alt_data_end+0xfe002820>
 4003d7c:	d9412d17 	ldw	r5,1204(sp)
 4003d80:	14800017 	ldw	r18,0(r2)
 4003d84:	002b883a 	mov	r21,zero
 4003d88:	29400104 	addi	r5,r5,4
 4003d8c:	d9412d15 	stw	r5,1204(sp)
 4003d90:	003bf906 	br	4002d78 <__alt_data_end+0xfe002d78>
 4003d94:	d8c12d17 	ldw	r3,1204(sp)
 4003d98:	14800017 	ldw	r18,0(r2)
 4003d9c:	002b883a 	mov	r21,zero
 4003da0:	18c00104 	addi	r3,r3,4
 4003da4:	d8c12d15 	stw	r3,1204(sp)
 4003da8:	00800044 	movi	r2,1
 4003dac:	9007883a 	mov	r3,r18
 4003db0:	003bcf06 	br	4002cf0 <__alt_data_end+0xfe002cf0>
 4003db4:	d9012d17 	ldw	r4,1204(sp)
 4003db8:	14800017 	ldw	r18,0(r2)
 4003dbc:	002b883a 	mov	r21,zero
 4003dc0:	21000104 	addi	r4,r4,4
 4003dc4:	d9012d15 	stw	r4,1204(sp)
 4003dc8:	0005883a 	mov	r2,zero
 4003dcc:	9007883a 	mov	r3,r18
 4003dd0:	003bc706 	br	4002cf0 <__alt_data_end+0xfe002cf0>
 4003dd4:	d9412d17 	ldw	r5,1204(sp)
 4003dd8:	d8c12f17 	ldw	r3,1212(sp)
 4003ddc:	28800017 	ldw	r2,0(r5)
 4003de0:	29400104 	addi	r5,r5,4
 4003de4:	d9412d15 	stw	r5,1204(sp)
 4003de8:	10c00015 	stw	r3,0(r2)
 4003dec:	00396d06 	br	40023a4 <__alt_data_end+0xfe0023a4>
 4003df0:	01010074 	movhi	r4,1025
 4003df4:	21068404 	addi	r4,r4,6672
 4003df8:	d9013115 	stw	r4,1220(sp)
 4003dfc:	003ba206 	br	4002c88 <__alt_data_end+0xfe002c88>
 4003e00:	b809883a 	mov	r4,r23
 4003e04:	b00b883a 	mov	r5,r22
 4003e08:	d9811e04 	addi	r6,sp,1144
 4003e0c:	40096f00 	call	40096f0 <__sprint_r>
 4003e10:	103a3f1e 	bne	r2,zero,4002710 <__alt_data_end+0xfe002710>
 4003e14:	dc012617 	ldw	r16,1176(sp)
 4003e18:	d8c12017 	ldw	r3,1152(sp)
 4003e1c:	da000404 	addi	r8,sp,16
 4003e20:	003f9106 	br	4003c68 <__alt_data_end+0xfe003c68>
 4003e24:	e0800044 	addi	r2,fp,1
 4003e28:	9cc00814 	ori	r19,r19,32
 4003e2c:	e4000047 	ldb	r16,1(fp)
 4003e30:	00398706 	br	4002450 <__alt_data_end+0xfe002450>
 4003e34:	d8812e17 	ldw	r2,1208(sp)
 4003e38:	d8c12d15 	stw	r3,1204(sp)
 4003e3c:	0085c83a 	sub	r2,zero,r2
 4003e40:	d8812e15 	stw	r2,1208(sp)
 4003e44:	e005883a 	mov	r2,fp
 4003e48:	003a3a06 	br	4002734 <__alt_data_end+0xfe002734>
 4003e4c:	b809883a 	mov	r4,r23
 4003e50:	b00b883a 	mov	r5,r22
 4003e54:	d9811e04 	addi	r6,sp,1144
 4003e58:	40096f00 	call	40096f0 <__sprint_r>
 4003e5c:	103a2c1e 	bne	r2,zero,4002710 <__alt_data_end+0xfe002710>
 4003e60:	d8c12017 	ldw	r3,1152(sp)
 4003e64:	da000404 	addi	r8,sp,16
 4003e68:	003cf006 	br	400322c <__alt_data_end+0xfe00322c>
 4003e6c:	d8c12817 	ldw	r3,1184(sp)
 4003e70:	d9013117 	ldw	r4,1220(sp)
 4003e74:	1923c83a 	sub	r17,r3,r4
 4003e78:	003a8806 	br	400289c <__alt_data_end+0xfe00289c>
 4003e7c:	da013f15 	stw	r8,1276(sp)
 4003e80:	40022180 	call	4002218 <strlen>
 4003e84:	1023883a 	mov	r17,r2
 4003e88:	da013f17 	ldw	r8,1276(sp)
 4003e8c:	883c7f0e 	bge	r17,zero,400308c <__alt_data_end+0xfe00308c>
 4003e90:	0005883a 	mov	r2,zero
 4003e94:	003c7d06 	br	400308c <__alt_data_end+0xfe00308c>
 4003e98:	b809883a 	mov	r4,r23
 4003e9c:	b00b883a 	mov	r5,r22
 4003ea0:	d9811e04 	addi	r6,sp,1144
 4003ea4:	40096f00 	call	40096f0 <__sprint_r>
 4003ea8:	103a191e 	bne	r2,zero,4002710 <__alt_data_end+0xfe002710>
 4003eac:	d8c12017 	ldw	r3,1152(sp)
 4003eb0:	d8811f17 	ldw	r2,1148(sp)
 4003eb4:	da000404 	addi	r8,sp,16
 4003eb8:	d9413317 	ldw	r5,1228(sp)
 4003ebc:	d9013117 	ldw	r4,1220(sp)
 4003ec0:	10800044 	addi	r2,r2,1
 4003ec4:	28c7883a 	add	r3,r5,r3
 4003ec8:	41000015 	stw	r4,0(r8)
 4003ecc:	41400115 	stw	r5,4(r8)
 4003ed0:	d8c12015 	stw	r3,1152(sp)
 4003ed4:	d8811f15 	stw	r2,1148(sp)
 4003ed8:	010001c4 	movi	r4,7
 4003edc:	20bb060e 	bge	r4,r2,4002af8 <__alt_data_end+0xfe002af8>
 4003ee0:	003d6206 	br	400346c <__alt_data_end+0xfe00346c>
 4003ee4:	01010074 	movhi	r4,1025
 4003ee8:	21069884 	addi	r4,r4,6754
 4003eec:	d9013615 	stw	r4,1240(sp)
 4003ef0:	003aa306 	br	4002980 <__alt_data_end+0xfe002980>
 4003ef4:	d8812604 	addi	r2,sp,1176
 4003ef8:	d8800115 	stw	r2,4(sp)
 4003efc:	d9413717 	ldw	r5,1244(sp)
 4003f00:	d8812504 	addi	r2,sp,1172
 4003f04:	d8800215 	stw	r2,8(sp)
 4003f08:	d8812104 	addi	r2,sp,1156
 4003f0c:	da400015 	stw	r9,0(sp)
 4003f10:	d8800315 	stw	r2,12(sp)
 4003f14:	b809883a 	mov	r4,r23
 4003f18:	880d883a 	mov	r6,r17
 4003f1c:	01c000c4 	movi	r7,3
 4003f20:	da013f15 	stw	r8,1276(sp)
 4003f24:	da413e15 	stw	r9,1272(sp)
 4003f28:	40047280 	call	4004728 <_dtoa_r>
 4003f2c:	da413e17 	ldw	r9,1272(sp)
 4003f30:	da013f17 	ldw	r8,1276(sp)
 4003f34:	d8813115 	stw	r2,1220(sp)
 4003f38:	482b883a 	mov	r21,r9
 4003f3c:	d8c13117 	ldw	r3,1220(sp)
 4003f40:	00801184 	movi	r2,70
 4003f44:	1d55883a 	add	r10,r3,r21
 4003f48:	98bebb1e 	bne	r19,r2,4003a38 <__alt_data_end+0xfe003a38>
 4003f4c:	19000007 	ldb	r4,0(r3)
 4003f50:	00800c04 	movi	r2,48
 4003f54:	2080dd26 	beq	r4,r2,40042cc <___vfprintf_internal_r+0x201c>
 4003f58:	d8c12617 	ldw	r3,1176(sp)
 4003f5c:	50d5883a 	add	r10,r10,r3
 4003f60:	003eb506 	br	4003a38 <__alt_data_end+0xfe003a38>
 4003f64:	0023883a 	mov	r17,zero
 4003f68:	003d9b06 	br	40035d8 <__alt_data_end+0xfe0035d8>
 4003f6c:	b809883a 	mov	r4,r23
 4003f70:	b00b883a 	mov	r5,r22
 4003f74:	d9811e04 	addi	r6,sp,1144
 4003f78:	40096f00 	call	40096f0 <__sprint_r>
 4003f7c:	1039e41e 	bne	r2,zero,4002710 <__alt_data_end+0xfe002710>
 4003f80:	d8c12017 	ldw	r3,1152(sp)
 4003f84:	da000404 	addi	r8,sp,16
 4003f88:	003d9206 	br	40035d4 <__alt_data_end+0xfe0035d4>
 4003f8c:	b809883a 	mov	r4,r23
 4003f90:	b00b883a 	mov	r5,r22
 4003f94:	d9811e04 	addi	r6,sp,1144
 4003f98:	40096f00 	call	40096f0 <__sprint_r>
 4003f9c:	1039dc1e 	bne	r2,zero,4002710 <__alt_data_end+0xfe002710>
 4003fa0:	d8812617 	ldw	r2,1176(sp)
 4003fa4:	d8c12017 	ldw	r3,1152(sp)
 4003fa8:	da000404 	addi	r8,sp,16
 4003fac:	003dfb06 	br	400379c <__alt_data_end+0xfe00379c>
 4003fb0:	01010074 	movhi	r4,1025
 4003fb4:	21069484 	addi	r4,r4,6738
 4003fb8:	d9012c15 	stw	r4,1200(sp)
 4003fbc:	d9012c17 	ldw	r4,1200(sp)
 4003fc0:	1c07883a 	add	r3,r3,r16
 4003fc4:	10800044 	addi	r2,r2,1
 4003fc8:	41000015 	stw	r4,0(r8)
 4003fcc:	44000115 	stw	r16,4(r8)
 4003fd0:	d8c12015 	stw	r3,1152(sp)
 4003fd4:	d8811f15 	stw	r2,1148(sp)
 4003fd8:	010001c4 	movi	r4,7
 4003fdc:	20bfae16 	blt	r4,r2,4003e98 <__alt_data_end+0xfe003e98>
 4003fe0:	42000204 	addi	r8,r8,8
 4003fe4:	003fb406 	br	4003eb8 <__alt_data_end+0xfe003eb8>
 4003fe8:	0021883a 	mov	r16,zero
 4003fec:	003dfd06 	br	40037e4 <__alt_data_end+0xfe0037e4>
 4003ff0:	01410074 	movhi	r5,1025
 4003ff4:	29469884 	addi	r5,r5,6754
 4003ff8:	d9413615 	stw	r5,1240(sp)
 4003ffc:	003ae306 	br	4002b8c <__alt_data_end+0xfe002b8c>
 4004000:	b809883a 	mov	r4,r23
 4004004:	b00b883a 	mov	r5,r22
 4004008:	d9811e04 	addi	r6,sp,1144
 400400c:	40096f00 	call	40096f0 <__sprint_r>
 4004010:	1039bf1e 	bne	r2,zero,4002710 <__alt_data_end+0xfe002710>
 4004014:	d8812617 	ldw	r2,1176(sp)
 4004018:	d9413317 	ldw	r5,1228(sp)
 400401c:	d8c12017 	ldw	r3,1152(sp)
 4004020:	da000404 	addi	r8,sp,16
 4004024:	2885c83a 	sub	r2,r5,r2
 4004028:	003ded06 	br	40037e0 <__alt_data_end+0xfe0037e0>
 400402c:	00800184 	movi	r2,6
 4004030:	1240012e 	bgeu	r2,r9,4004038 <___vfprintf_internal_r+0x1d88>
 4004034:	1013883a 	mov	r9,r2
 4004038:	4823883a 	mov	r17,r9
 400403c:	4805883a 	mov	r2,r9
 4004040:	4800b216 	blt	r9,zero,400430c <___vfprintf_internal_r+0x205c>
 4004044:	01410074 	movhi	r5,1025
 4004048:	29469204 	addi	r5,r5,6728
 400404c:	d8812b15 	stw	r2,1196(sp)
 4004050:	dc812d15 	stw	r18,1204(sp)
 4004054:	d8013215 	stw	zero,1224(sp)
 4004058:	d8013415 	stw	zero,1232(sp)
 400405c:	d9413115 	stw	r5,1220(sp)
 4004060:	0005883a 	mov	r2,zero
 4004064:	003a1906 	br	40028cc <__alt_data_end+0xfe0028cc>
 4004068:	04c00b44 	movi	r19,45
 400406c:	dcc12785 	stb	r19,1182(sp)
 4004070:	003b0006 	br	4002c74 <__alt_data_end+0xfe002c74>
 4004074:	d8c12d17 	ldw	r3,1204(sp)
 4004078:	d9012f17 	ldw	r4,1212(sp)
 400407c:	18800017 	ldw	r2,0(r3)
 4004080:	18c00104 	addi	r3,r3,4
 4004084:	d8c12d15 	stw	r3,1204(sp)
 4004088:	11000015 	stw	r4,0(r2)
 400408c:	0038c506 	br	40023a4 <__alt_data_end+0xfe0023a4>
 4004090:	01410074 	movhi	r5,1025
 4004094:	29468704 	addi	r5,r5,6684
 4004098:	d9413115 	stw	r5,1220(sp)
 400409c:	003f2406 	br	4003d30 <__alt_data_end+0xfe003d30>
 40040a0:	00800b44 	movi	r2,45
 40040a4:	d8812785 	stb	r2,1182(sp)
 40040a8:	df012b15 	stw	fp,1196(sp)
 40040ac:	d8013215 	stw	zero,1224(sp)
 40040b0:	df012d17 	ldw	fp,1204(sp)
 40040b4:	00800b44 	movi	r2,45
 40040b8:	dc812d15 	stw	r18,1204(sp)
 40040bc:	003a0006 	br	40028c0 <__alt_data_end+0xfe0028c0>
 40040c0:	d8c12617 	ldw	r3,1176(sp)
 40040c4:	00bfff44 	movi	r2,-3
 40040c8:	18800a16 	blt	r3,r2,40040f4 <___vfprintf_internal_r+0x1e44>
 40040cc:	48c00916 	blt	r9,r3,40040f4 <___vfprintf_internal_r+0x1e44>
 40040d0:	d8c13415 	stw	r3,1232(sp)
 40040d4:	040019c4 	movi	r16,103
 40040d8:	003e7606 	br	4003ab4 <__alt_data_end+0xfe003ab4>
 40040dc:	01010074 	movhi	r4,1025
 40040e0:	21069484 	addi	r4,r4,6738
 40040e4:	d9012c15 	stw	r4,1200(sp)
 40040e8:	003c8e06 	br	4003324 <__alt_data_end+0xfe003324>
 40040ec:	5005883a 	mov	r2,r10
 40040f0:	003e6506 	br	4003a88 <__alt_data_end+0xfe003a88>
 40040f4:	843fff84 	addi	r16,r16,-2
 40040f8:	1d7fffc4 	addi	r21,r3,-1
 40040fc:	dd412615 	stw	r21,1176(sp)
 4004100:	dc0122c5 	stb	r16,1163(sp)
 4004104:	a8009216 	blt	r21,zero,4004350 <___vfprintf_internal_r+0x20a0>
 4004108:	00800ac4 	movi	r2,43
 400410c:	d8812305 	stb	r2,1164(sp)
 4004110:	00800244 	movi	r2,9
 4004114:	1540660e 	bge	r2,r21,40042b0 <___vfprintf_internal_r+0x2000>
 4004118:	dcc122c4 	addi	r19,sp,1163
 400411c:	dc012c15 	stw	r16,1200(sp)
 4004120:	4023883a 	mov	r17,r8
 4004124:	9821883a 	mov	r16,r19
 4004128:	a809883a 	mov	r4,r21
 400412c:	01400284 	movi	r5,10
 4004130:	400c1b80 	call	400c1b8 <__modsi3>
 4004134:	10800c04 	addi	r2,r2,48
 4004138:	843fffc4 	addi	r16,r16,-1
 400413c:	a809883a 	mov	r4,r21
 4004140:	01400284 	movi	r5,10
 4004144:	80800005 	stb	r2,0(r16)
 4004148:	400c1640 	call	400c164 <__divsi3>
 400414c:	01000244 	movi	r4,9
 4004150:	102b883a 	mov	r21,r2
 4004154:	20bff416 	blt	r4,r2,4004128 <__alt_data_end+0xfe004128>
 4004158:	8811883a 	mov	r8,r17
 400415c:	10800c04 	addi	r2,r2,48
 4004160:	8023883a 	mov	r17,r16
 4004164:	897fffc4 	addi	r5,r17,-1
 4004168:	88bfffc5 	stb	r2,-1(r17)
 400416c:	dc012c17 	ldw	r16,1200(sp)
 4004170:	2cc08a2e 	bgeu	r5,r19,400439c <___vfprintf_internal_r+0x20ec>
 4004174:	d9812384 	addi	r6,sp,1166
 4004178:	344dc83a 	sub	r6,r6,r17
 400417c:	d9012344 	addi	r4,sp,1165
 4004180:	998d883a 	add	r6,r19,r6
 4004184:	00000106 	br	400418c <___vfprintf_internal_r+0x1edc>
 4004188:	28800003 	ldbu	r2,0(r5)
 400418c:	20800005 	stb	r2,0(r4)
 4004190:	21000044 	addi	r4,r4,1
 4004194:	29400044 	addi	r5,r5,1
 4004198:	21bffb1e 	bne	r4,r6,4004188 <__alt_data_end+0xfe004188>
 400419c:	d8812304 	addi	r2,sp,1164
 40041a0:	1445c83a 	sub	r2,r2,r17
 40041a4:	d9412344 	addi	r5,sp,1165
 40041a8:	2885883a 	add	r2,r5,r2
 40041ac:	14e7c83a 	sub	r19,r2,r19
 40041b0:	d8813317 	ldw	r2,1228(sp)
 40041b4:	d8c13317 	ldw	r3,1228(sp)
 40041b8:	dcc13a15 	stw	r19,1256(sp)
 40041bc:	14e3883a 	add	r17,r2,r19
 40041c0:	00800044 	movi	r2,1
 40041c4:	10c0550e 	bge	r2,r3,400431c <___vfprintf_internal_r+0x206c>
 40041c8:	8c400044 	addi	r17,r17,1
 40041cc:	8839883a 	mov	fp,r17
 40041d0:	88005016 	blt	r17,zero,4004314 <___vfprintf_internal_r+0x2064>
 40041d4:	d8013415 	stw	zero,1232(sp)
 40041d8:	003e3f06 	br	4003ad8 <__alt_data_end+0xfe003ad8>
 40041dc:	da412b15 	stw	r9,1196(sp)
 40041e0:	dcc12783 	ldbu	r19,1182(sp)
 40041e4:	4823883a 	mov	r17,r9
 40041e8:	dc812d15 	stw	r18,1204(sp)
 40041ec:	d8013215 	stw	zero,1224(sp)
 40041f0:	d8013415 	stw	zero,1232(sp)
 40041f4:	0039ae06 	br	40028b0 <__alt_data_end+0xfe0028b0>
 40041f8:	483de91e 	bne	r9,zero,40039a0 <__alt_data_end+0xfe0039a0>
 40041fc:	8813883a 	mov	r9,r17
 4004200:	003de706 	br	40039a0 <__alt_data_end+0xfe0039a0>
 4004204:	b809883a 	mov	r4,r23
 4004208:	b00b883a 	mov	r5,r22
 400420c:	d9811e04 	addi	r6,sp,1144
 4004210:	40096f00 	call	40096f0 <__sprint_r>
 4004214:	10393e1e 	bne	r2,zero,4002710 <__alt_data_end+0xfe002710>
 4004218:	dc012617 	ldw	r16,1176(sp)
 400421c:	d8c12017 	ldw	r3,1152(sp)
 4004220:	d8811f17 	ldw	r2,1148(sp)
 4004224:	da000404 	addi	r8,sp,16
 4004228:	003ea006 	br	4003cac <__alt_data_end+0xfe003cac>
 400422c:	00c00b44 	movi	r3,45
 4004230:	2460003c 	xorhi	r17,r4,32768
 4004234:	d8c12b05 	stb	r3,1196(sp)
 4004238:	003ddf06 	br	40039b8 <__alt_data_end+0xfe0039b8>
 400423c:	02400184 	movi	r9,6
 4004240:	003dd706 	br	40039a0 <__alt_data_end+0xfe0039a0>
 4004244:	4d400044 	addi	r21,r9,1
 4004248:	003de206 	br	40039d4 <__alt_data_end+0xfe0039d4>
 400424c:	d8c13417 	ldw	r3,1232(sp)
 4004250:	00c0490e 	bge	zero,r3,4004378 <___vfprintf_internal_r+0x20c8>
 4004254:	04400044 	movi	r17,1
 4004258:	d9013317 	ldw	r4,1228(sp)
 400425c:	8923883a 	add	r17,r17,r4
 4004260:	8839883a 	mov	fp,r17
 4004264:	883e1c0e 	bge	r17,zero,4003ad8 <__alt_data_end+0xfe003ad8>
 4004268:	0039883a 	mov	fp,zero
 400426c:	003e1a06 	br	4003ad8 <__alt_data_end+0xfe003ad8>
 4004270:	00c03b0e 	bge	zero,r3,4004360 <___vfprintf_internal_r+0x20b0>
 4004274:	4800021e 	bne	r9,zero,4004280 <___vfprintf_internal_r+0x1fd0>
 4004278:	e080004c 	andi	r2,fp,1
 400427c:	10000626 	beq	r2,zero,4004298 <___vfprintf_internal_r+0x1fe8>
 4004280:	d8c13417 	ldw	r3,1232(sp)
 4004284:	4a400044 	addi	r9,r9,1
 4004288:	1a63883a 	add	r17,r3,r9
 400428c:	8839883a 	mov	fp,r17
 4004290:	883e110e 	bge	r17,zero,4003ad8 <__alt_data_end+0xfe003ad8>
 4004294:	003ff406 	br	4004268 <__alt_data_end+0xfe004268>
 4004298:	1839883a 	mov	fp,r3
 400429c:	18004116 	blt	r3,zero,40043a4 <___vfprintf_internal_r+0x20f4>
 40042a0:	dc413417 	ldw	r17,1232(sp)
 40042a4:	003e0c06 	br	4003ad8 <__alt_data_end+0xfe003ad8>
 40042a8:	d8812117 	ldw	r2,1156(sp)
 40042ac:	003df606 	br	4003a88 <__alt_data_end+0xfe003a88>
 40042b0:	00800c04 	movi	r2,48
 40042b4:	a8c00c04 	addi	r3,r21,48
 40042b8:	d8812345 	stb	r2,1165(sp)
 40042bc:	d8c12385 	stb	r3,1166(sp)
 40042c0:	d88123c4 	addi	r2,sp,1167
 40042c4:	dcc122c4 	addi	r19,sp,1163
 40042c8:	003fb806 	br	40041ac <__alt_data_end+0xfe0041ac>
 40042cc:	d9013717 	ldw	r4,1244(sp)
 40042d0:	880b883a 	mov	r5,r17
 40042d4:	000d883a 	mov	r6,zero
 40042d8:	000f883a 	mov	r7,zero
 40042dc:	da013f15 	stw	r8,1276(sp)
 40042e0:	da413e15 	stw	r9,1272(sp)
 40042e4:	da813d15 	stw	r10,1268(sp)
 40042e8:	400d4680 	call	400d468 <__eqdf2>
 40042ec:	da013f17 	ldw	r8,1276(sp)
 40042f0:	da413e17 	ldw	r9,1272(sp)
 40042f4:	da813d17 	ldw	r10,1268(sp)
 40042f8:	103f1726 	beq	r2,zero,4003f58 <__alt_data_end+0xfe003f58>
 40042fc:	00800044 	movi	r2,1
 4004300:	1547c83a 	sub	r3,r2,r21
 4004304:	d8c12615 	stw	r3,1176(sp)
 4004308:	003f1406 	br	4003f5c <__alt_data_end+0xfe003f5c>
 400430c:	0005883a 	mov	r2,zero
 4004310:	003f4c06 	br	4004044 <__alt_data_end+0xfe004044>
 4004314:	0039883a 	mov	fp,zero
 4004318:	003fae06 	br	40041d4 <__alt_data_end+0xfe0041d4>
 400431c:	e084703a 	and	r2,fp,r2
 4004320:	103faa26 	beq	r2,zero,40041cc <__alt_data_end+0xfe0041cc>
 4004324:	003fa806 	br	40041c8 <__alt_data_end+0xfe0041c8>
 4004328:	d9412d17 	ldw	r5,1204(sp)
 400432c:	2a400017 	ldw	r9,0(r5)
 4004330:	28c00104 	addi	r3,r5,4
 4004334:	d8c12d15 	stw	r3,1204(sp)
 4004338:	483ebc0e 	bge	r9,zero,4003e2c <__alt_data_end+0xfe003e2c>
 400433c:	027fffc4 	movi	r9,-1
 4004340:	e4000047 	ldb	r16,1(fp)
 4004344:	00384206 	br	4002450 <__alt_data_end+0xfe002450>
 4004348:	043fffc4 	movi	r16,-1
 400434c:	0038ce06 	br	4002688 <__alt_data_end+0xfe002688>
 4004350:	00800b44 	movi	r2,45
 4004354:	056bc83a 	sub	r21,zero,r21
 4004358:	d8812305 	stb	r2,1164(sp)
 400435c:	003f6c06 	br	4004110 <__alt_data_end+0xfe004110>
 4004360:	4800081e 	bne	r9,zero,4004384 <___vfprintf_internal_r+0x20d4>
 4004364:	e080004c 	andi	r2,fp,1
 4004368:	1000061e 	bne	r2,zero,4004384 <___vfprintf_internal_r+0x20d4>
 400436c:	07000044 	movi	fp,1
 4004370:	e023883a 	mov	r17,fp
 4004374:	003dd806 	br	4003ad8 <__alt_data_end+0xfe003ad8>
 4004378:	04400084 	movi	r17,2
 400437c:	88e3c83a 	sub	r17,r17,r3
 4004380:	003fb506 	br	4004258 <__alt_data_end+0xfe004258>
 4004384:	4c400084 	addi	r17,r9,2
 4004388:	8839883a 	mov	fp,r17
 400438c:	883dd20e 	bge	r17,zero,4003ad8 <__alt_data_end+0xfe003ad8>
 4004390:	003fb506 	br	4004268 <__alt_data_end+0xfe004268>
 4004394:	d8c12617 	ldw	r3,1176(sp)
 4004398:	003f5706 	br	40040f8 <__alt_data_end+0xfe0040f8>
 400439c:	d8812344 	addi	r2,sp,1165
 40043a0:	003f8206 	br	40041ac <__alt_data_end+0xfe0041ac>
 40043a4:	0039883a 	mov	fp,zero
 40043a8:	003fbd06 	br	40042a0 <__alt_data_end+0xfe0042a0>

040043ac <__vfprintf_internal>:
 40043ac:	2007883a 	mov	r3,r4
 40043b0:	01010074 	movhi	r4,1025
 40043b4:	210def04 	addi	r4,r4,14268
 40043b8:	21000017 	ldw	r4,0(r4)
 40043bc:	2805883a 	mov	r2,r5
 40043c0:	300f883a 	mov	r7,r6
 40043c4:	180b883a 	mov	r5,r3
 40043c8:	100d883a 	mov	r6,r2
 40043cc:	40022b01 	jmpi	40022b0 <___vfprintf_internal_r>

040043d0 <__swsetup_r>:
 40043d0:	00810074 	movhi	r2,1025
 40043d4:	defffd04 	addi	sp,sp,-12
 40043d8:	108def04 	addi	r2,r2,14268
 40043dc:	dc400115 	stw	r17,4(sp)
 40043e0:	2023883a 	mov	r17,r4
 40043e4:	11000017 	ldw	r4,0(r2)
 40043e8:	dc000015 	stw	r16,0(sp)
 40043ec:	dfc00215 	stw	ra,8(sp)
 40043f0:	2821883a 	mov	r16,r5
 40043f4:	20000226 	beq	r4,zero,4004400 <__swsetup_r+0x30>
 40043f8:	20c00e17 	ldw	r3,56(r4)
 40043fc:	18002e26 	beq	r3,zero,40044b8 <__swsetup_r+0xe8>
 4004400:	8080030b 	ldhu	r2,12(r16)
 4004404:	10c0020c 	andi	r3,r2,8
 4004408:	100d883a 	mov	r6,r2
 400440c:	18000f26 	beq	r3,zero,400444c <__swsetup_r+0x7c>
 4004410:	80c00417 	ldw	r3,16(r16)
 4004414:	18001526 	beq	r3,zero,400446c <__swsetup_r+0x9c>
 4004418:	1100004c 	andi	r4,r2,1
 400441c:	20001c1e 	bne	r4,zero,4004490 <__swsetup_r+0xc0>
 4004420:	1080008c 	andi	r2,r2,2
 4004424:	1000261e 	bne	r2,zero,40044c0 <__swsetup_r+0xf0>
 4004428:	80800517 	ldw	r2,20(r16)
 400442c:	80800215 	stw	r2,8(r16)
 4004430:	18001c26 	beq	r3,zero,40044a4 <__swsetup_r+0xd4>
 4004434:	0005883a 	mov	r2,zero
 4004438:	dfc00217 	ldw	ra,8(sp)
 400443c:	dc400117 	ldw	r17,4(sp)
 4004440:	dc000017 	ldw	r16,0(sp)
 4004444:	dec00304 	addi	sp,sp,12
 4004448:	f800283a 	ret
 400444c:	3080040c 	andi	r2,r6,16
 4004450:	10001726 	beq	r2,zero,40044b0 <__swsetup_r+0xe0>
 4004454:	3080010c 	andi	r2,r6,4
 4004458:	10001b1e 	bne	r2,zero,40044c8 <__swsetup_r+0xf8>
 400445c:	80c00417 	ldw	r3,16(r16)
 4004460:	30800214 	ori	r2,r6,8
 4004464:	8080030d 	sth	r2,12(r16)
 4004468:	183feb1e 	bne	r3,zero,4004418 <__alt_data_end+0xfe004418>
 400446c:	1140a00c 	andi	r5,r2,640
 4004470:	01008004 	movi	r4,512
 4004474:	293fe826 	beq	r5,r4,4004418 <__alt_data_end+0xfe004418>
 4004478:	8809883a 	mov	r4,r17
 400447c:	800b883a 	mov	r5,r16
 4004480:	4006f640 	call	4006f64 <__smakebuf_r>
 4004484:	8080030b 	ldhu	r2,12(r16)
 4004488:	80c00417 	ldw	r3,16(r16)
 400448c:	003fe206 	br	4004418 <__alt_data_end+0xfe004418>
 4004490:	80800517 	ldw	r2,20(r16)
 4004494:	80000215 	stw	zero,8(r16)
 4004498:	0085c83a 	sub	r2,zero,r2
 400449c:	80800615 	stw	r2,24(r16)
 40044a0:	183fe41e 	bne	r3,zero,4004434 <__alt_data_end+0xfe004434>
 40044a4:	8080030b 	ldhu	r2,12(r16)
 40044a8:	1080200c 	andi	r2,r2,128
 40044ac:	103fe226 	beq	r2,zero,4004438 <__alt_data_end+0xfe004438>
 40044b0:	00bfffc4 	movi	r2,-1
 40044b4:	003fe006 	br	4004438 <__alt_data_end+0xfe004438>
 40044b8:	400640c0 	call	400640c <__sinit>
 40044bc:	003fd006 	br	4004400 <__alt_data_end+0xfe004400>
 40044c0:	0005883a 	mov	r2,zero
 40044c4:	003fd906 	br	400442c <__alt_data_end+0xfe00442c>
 40044c8:	81400c17 	ldw	r5,48(r16)
 40044cc:	28000626 	beq	r5,zero,40044e8 <__swsetup_r+0x118>
 40044d0:	80801004 	addi	r2,r16,64
 40044d4:	28800326 	beq	r5,r2,40044e4 <__swsetup_r+0x114>
 40044d8:	8809883a 	mov	r4,r17
 40044dc:	40065800 	call	4006580 <_free_r>
 40044e0:	8180030b 	ldhu	r6,12(r16)
 40044e4:	80000c15 	stw	zero,48(r16)
 40044e8:	80c00417 	ldw	r3,16(r16)
 40044ec:	00bff6c4 	movi	r2,-37
 40044f0:	118c703a 	and	r6,r2,r6
 40044f4:	80000115 	stw	zero,4(r16)
 40044f8:	80c00015 	stw	r3,0(r16)
 40044fc:	003fd806 	br	4004460 <__alt_data_end+0xfe004460>

04004500 <quorem>:
 4004500:	defff204 	addi	sp,sp,-56
 4004504:	ddc00b15 	stw	r23,44(sp)
 4004508:	20800417 	ldw	r2,16(r4)
 400450c:	2dc00417 	ldw	r23,16(r5)
 4004510:	dfc00d15 	stw	ra,52(sp)
 4004514:	df000c15 	stw	fp,48(sp)
 4004518:	dd800a15 	stw	r22,40(sp)
 400451c:	dd400915 	stw	r21,36(sp)
 4004520:	dd000815 	stw	r20,32(sp)
 4004524:	dcc00715 	stw	r19,28(sp)
 4004528:	dc800615 	stw	r18,24(sp)
 400452c:	dc400515 	stw	r17,20(sp)
 4004530:	dc000415 	stw	r16,16(sp)
 4004534:	15c07a16 	blt	r2,r23,4004720 <quorem+0x220>
 4004538:	bdffffc4 	addi	r23,r23,-1
 400453c:	bde9883a 	add	r20,r23,r23
 4004540:	28c00504 	addi	r3,r5,20
 4004544:	a529883a 	add	r20,r20,r20
 4004548:	1d39883a 	add	fp,r3,r20
 400454c:	24c00504 	addi	r19,r4,20
 4004550:	d9400215 	stw	r5,8(sp)
 4004554:	9d29883a 	add	r20,r19,r20
 4004558:	e1400017 	ldw	r5,0(fp)
 400455c:	d9000015 	stw	r4,0(sp)
 4004560:	a1000017 	ldw	r4,0(r20)
 4004564:	29400044 	addi	r5,r5,1
 4004568:	d8c00115 	stw	r3,4(sp)
 400456c:	dd000315 	stw	r20,12(sp)
 4004570:	400c2140 	call	400c214 <__udivsi3>
 4004574:	1025883a 	mov	r18,r2
 4004578:	10003026 	beq	r2,zero,400463c <quorem+0x13c>
 400457c:	dc400117 	ldw	r17,4(sp)
 4004580:	9829883a 	mov	r20,r19
 4004584:	002d883a 	mov	r22,zero
 4004588:	0021883a 	mov	r16,zero
 400458c:	8d400017 	ldw	r21,0(r17)
 4004590:	900b883a 	mov	r5,r18
 4004594:	8c400104 	addi	r17,r17,4
 4004598:	a93fffcc 	andi	r4,r21,65535
 400459c:	400c2240 	call	400c224 <__mulsi3>
 40045a0:	a808d43a 	srli	r4,r21,16
 40045a4:	900b883a 	mov	r5,r18
 40045a8:	b0ad883a 	add	r22,r22,r2
 40045ac:	400c2240 	call	400c224 <__mulsi3>
 40045b0:	a1000017 	ldw	r4,0(r20)
 40045b4:	b00cd43a 	srli	r6,r22,16
 40045b8:	b0ffffcc 	andi	r3,r22,65535
 40045bc:	217fffcc 	andi	r5,r4,65535
 40045c0:	2c21883a 	add	r16,r5,r16
 40045c4:	80c7c83a 	sub	r3,r16,r3
 40045c8:	2008d43a 	srli	r4,r4,16
 40045cc:	3085883a 	add	r2,r6,r2
 40045d0:	1821d43a 	srai	r16,r3,16
 40045d4:	117fffcc 	andi	r5,r2,65535
 40045d8:	2149c83a 	sub	r4,r4,r5
 40045dc:	2421883a 	add	r16,r4,r16
 40045e0:	8008943a 	slli	r4,r16,16
 40045e4:	18ffffcc 	andi	r3,r3,65535
 40045e8:	102cd43a 	srli	r22,r2,16
 40045ec:	20c8b03a 	or	r4,r4,r3
 40045f0:	a1000015 	stw	r4,0(r20)
 40045f4:	8021d43a 	srai	r16,r16,16
 40045f8:	a5000104 	addi	r20,r20,4
 40045fc:	e47fe32e 	bgeu	fp,r17,400458c <__alt_data_end+0xfe00458c>
 4004600:	d8c00317 	ldw	r3,12(sp)
 4004604:	18800017 	ldw	r2,0(r3)
 4004608:	10000c1e 	bne	r2,zero,400463c <quorem+0x13c>
 400460c:	18bfff04 	addi	r2,r3,-4
 4004610:	9880082e 	bgeu	r19,r2,4004634 <quorem+0x134>
 4004614:	18ffff17 	ldw	r3,-4(r3)
 4004618:	18000326 	beq	r3,zero,4004628 <quorem+0x128>
 400461c:	00000506 	br	4004634 <quorem+0x134>
 4004620:	10c00017 	ldw	r3,0(r2)
 4004624:	1800031e 	bne	r3,zero,4004634 <quorem+0x134>
 4004628:	10bfff04 	addi	r2,r2,-4
 400462c:	bdffffc4 	addi	r23,r23,-1
 4004630:	98bffb36 	bltu	r19,r2,4004620 <__alt_data_end+0xfe004620>
 4004634:	d8c00017 	ldw	r3,0(sp)
 4004638:	1dc00415 	stw	r23,16(r3)
 400463c:	d9000017 	ldw	r4,0(sp)
 4004640:	d9400217 	ldw	r5,8(sp)
 4004644:	40086e00 	call	40086e0 <__mcmp>
 4004648:	10002816 	blt	r2,zero,40046ec <quorem+0x1ec>
 400464c:	dc400117 	ldw	r17,4(sp)
 4004650:	94800044 	addi	r18,r18,1
 4004654:	980d883a 	mov	r6,r19
 4004658:	0007883a 	mov	r3,zero
 400465c:	31000017 	ldw	r4,0(r6)
 4004660:	89400017 	ldw	r5,0(r17)
 4004664:	31800104 	addi	r6,r6,4
 4004668:	20bfffcc 	andi	r2,r4,65535
 400466c:	10c7883a 	add	r3,r2,r3
 4004670:	28bfffcc 	andi	r2,r5,65535
 4004674:	1885c83a 	sub	r2,r3,r2
 4004678:	280ad43a 	srli	r5,r5,16
 400467c:	2008d43a 	srli	r4,r4,16
 4004680:	1007d43a 	srai	r3,r2,16
 4004684:	10bfffcc 	andi	r2,r2,65535
 4004688:	2149c83a 	sub	r4,r4,r5
 400468c:	20c9883a 	add	r4,r4,r3
 4004690:	200a943a 	slli	r5,r4,16
 4004694:	8c400104 	addi	r17,r17,4
 4004698:	2007d43a 	srai	r3,r4,16
 400469c:	2884b03a 	or	r2,r5,r2
 40046a0:	30bfff15 	stw	r2,-4(r6)
 40046a4:	e47fed2e 	bgeu	fp,r17,400465c <__alt_data_end+0xfe00465c>
 40046a8:	bdc5883a 	add	r2,r23,r23
 40046ac:	1085883a 	add	r2,r2,r2
 40046b0:	9887883a 	add	r3,r19,r2
 40046b4:	18800017 	ldw	r2,0(r3)
 40046b8:	10000c1e 	bne	r2,zero,40046ec <quorem+0x1ec>
 40046bc:	18bfff04 	addi	r2,r3,-4
 40046c0:	9880082e 	bgeu	r19,r2,40046e4 <quorem+0x1e4>
 40046c4:	18ffff17 	ldw	r3,-4(r3)
 40046c8:	18000326 	beq	r3,zero,40046d8 <quorem+0x1d8>
 40046cc:	00000506 	br	40046e4 <quorem+0x1e4>
 40046d0:	10c00017 	ldw	r3,0(r2)
 40046d4:	1800031e 	bne	r3,zero,40046e4 <quorem+0x1e4>
 40046d8:	10bfff04 	addi	r2,r2,-4
 40046dc:	bdffffc4 	addi	r23,r23,-1
 40046e0:	98bffb36 	bltu	r19,r2,40046d0 <__alt_data_end+0xfe0046d0>
 40046e4:	d8c00017 	ldw	r3,0(sp)
 40046e8:	1dc00415 	stw	r23,16(r3)
 40046ec:	9005883a 	mov	r2,r18
 40046f0:	dfc00d17 	ldw	ra,52(sp)
 40046f4:	df000c17 	ldw	fp,48(sp)
 40046f8:	ddc00b17 	ldw	r23,44(sp)
 40046fc:	dd800a17 	ldw	r22,40(sp)
 4004700:	dd400917 	ldw	r21,36(sp)
 4004704:	dd000817 	ldw	r20,32(sp)
 4004708:	dcc00717 	ldw	r19,28(sp)
 400470c:	dc800617 	ldw	r18,24(sp)
 4004710:	dc400517 	ldw	r17,20(sp)
 4004714:	dc000417 	ldw	r16,16(sp)
 4004718:	dec00e04 	addi	sp,sp,56
 400471c:	f800283a 	ret
 4004720:	0005883a 	mov	r2,zero
 4004724:	003ff206 	br	40046f0 <__alt_data_end+0xfe0046f0>

04004728 <_dtoa_r>:
 4004728:	20801017 	ldw	r2,64(r4)
 400472c:	deffde04 	addi	sp,sp,-136
 4004730:	dd401d15 	stw	r21,116(sp)
 4004734:	dcc01b15 	stw	r19,108(sp)
 4004738:	dc801a15 	stw	r18,104(sp)
 400473c:	dc401915 	stw	r17,100(sp)
 4004740:	dc001815 	stw	r16,96(sp)
 4004744:	dfc02115 	stw	ra,132(sp)
 4004748:	df002015 	stw	fp,128(sp)
 400474c:	ddc01f15 	stw	r23,124(sp)
 4004750:	dd801e15 	stw	r22,120(sp)
 4004754:	dd001c15 	stw	r20,112(sp)
 4004758:	d9c00315 	stw	r7,12(sp)
 400475c:	2021883a 	mov	r16,r4
 4004760:	302b883a 	mov	r21,r6
 4004764:	2825883a 	mov	r18,r5
 4004768:	dc402417 	ldw	r17,144(sp)
 400476c:	3027883a 	mov	r19,r6
 4004770:	10000826 	beq	r2,zero,4004794 <_dtoa_r+0x6c>
 4004774:	21801117 	ldw	r6,68(r4)
 4004778:	00c00044 	movi	r3,1
 400477c:	100b883a 	mov	r5,r2
 4004780:	1986983a 	sll	r3,r3,r6
 4004784:	11800115 	stw	r6,4(r2)
 4004788:	10c00215 	stw	r3,8(r2)
 400478c:	4007e0c0 	call	4007e0c <_Bfree>
 4004790:	80001015 	stw	zero,64(r16)
 4004794:	a8002d16 	blt	r21,zero,400484c <_dtoa_r+0x124>
 4004798:	88000015 	stw	zero,0(r17)
 400479c:	a8dffc2c 	andhi	r3,r21,32752
 40047a0:	009ffc34 	movhi	r2,32752
 40047a4:	18801b26 	beq	r3,r2,4004814 <_dtoa_r+0xec>
 40047a8:	9009883a 	mov	r4,r18
 40047ac:	980b883a 	mov	r5,r19
 40047b0:	000d883a 	mov	r6,zero
 40047b4:	000f883a 	mov	r7,zero
 40047b8:	400d4680 	call	400d468 <__eqdf2>
 40047bc:	10002a1e 	bne	r2,zero,4004868 <_dtoa_r+0x140>
 40047c0:	d8c02317 	ldw	r3,140(sp)
 40047c4:	d9002517 	ldw	r4,148(sp)
 40047c8:	00800044 	movi	r2,1
 40047cc:	18800015 	stw	r2,0(r3)
 40047d0:	2001a226 	beq	r4,zero,4004e5c <_dtoa_r+0x734>
 40047d4:	00810074 	movhi	r2,1025
 40047d8:	10869444 	addi	r2,r2,6737
 40047dc:	20800015 	stw	r2,0(r4)
 40047e0:	10bfffc4 	addi	r2,r2,-1
 40047e4:	dfc02117 	ldw	ra,132(sp)
 40047e8:	df002017 	ldw	fp,128(sp)
 40047ec:	ddc01f17 	ldw	r23,124(sp)
 40047f0:	dd801e17 	ldw	r22,120(sp)
 40047f4:	dd401d17 	ldw	r21,116(sp)
 40047f8:	dd001c17 	ldw	r20,112(sp)
 40047fc:	dcc01b17 	ldw	r19,108(sp)
 4004800:	dc801a17 	ldw	r18,104(sp)
 4004804:	dc401917 	ldw	r17,100(sp)
 4004808:	dc001817 	ldw	r16,96(sp)
 400480c:	dec02204 	addi	sp,sp,136
 4004810:	f800283a 	ret
 4004814:	d8c02317 	ldw	r3,140(sp)
 4004818:	0089c3c4 	movi	r2,9999
 400481c:	18800015 	stw	r2,0(r3)
 4004820:	90017c26 	beq	r18,zero,4004e14 <_dtoa_r+0x6ec>
 4004824:	00810074 	movhi	r2,1025
 4004828:	1086a004 	addi	r2,r2,6784
 400482c:	d9002517 	ldw	r4,148(sp)
 4004830:	203fec26 	beq	r4,zero,40047e4 <__alt_data_end+0xfe0047e4>
 4004834:	10c000c7 	ldb	r3,3(r2)
 4004838:	18017d1e 	bne	r3,zero,4004e30 <_dtoa_r+0x708>
 400483c:	10c000c4 	addi	r3,r2,3
 4004840:	d9802517 	ldw	r6,148(sp)
 4004844:	30c00015 	stw	r3,0(r6)
 4004848:	003fe606 	br	40047e4 <__alt_data_end+0xfe0047e4>
 400484c:	04e00034 	movhi	r19,32768
 4004850:	9cffffc4 	addi	r19,r19,-1
 4004854:	00800044 	movi	r2,1
 4004858:	ace6703a 	and	r19,r21,r19
 400485c:	88800015 	stw	r2,0(r17)
 4004860:	982b883a 	mov	r21,r19
 4004864:	003fcd06 	br	400479c <__alt_data_end+0xfe00479c>
 4004868:	d8800204 	addi	r2,sp,8
 400486c:	a822d53a 	srli	r17,r21,20
 4004870:	d8800015 	stw	r2,0(sp)
 4004874:	8009883a 	mov	r4,r16
 4004878:	900b883a 	mov	r5,r18
 400487c:	980d883a 	mov	r6,r19
 4004880:	d9c00104 	addi	r7,sp,4
 4004884:	4008a540 	call	4008a54 <__d2b>
 4004888:	1039883a 	mov	fp,r2
 400488c:	88016a1e 	bne	r17,zero,4004e38 <_dtoa_r+0x710>
 4004890:	dd000217 	ldw	r20,8(sp)
 4004894:	dc400117 	ldw	r17,4(sp)
 4004898:	00befbc4 	movi	r2,-1041
 400489c:	a463883a 	add	r17,r20,r17
 40048a0:	8882ea16 	blt	r17,r2,400544c <_dtoa_r+0xd24>
 40048a4:	00bf0384 	movi	r2,-1010
 40048a8:	1445c83a 	sub	r2,r2,r17
 40048ac:	89010484 	addi	r4,r17,1042
 40048b0:	a8aa983a 	sll	r21,r21,r2
 40048b4:	9108d83a 	srl	r4,r18,r4
 40048b8:	a908b03a 	or	r4,r21,r4
 40048bc:	400e9400 	call	400e940 <__floatunsidf>
 40048c0:	017f8434 	movhi	r5,65040
 40048c4:	01800044 	movi	r6,1
 40048c8:	1009883a 	mov	r4,r2
 40048cc:	194b883a 	add	r5,r3,r5
 40048d0:	8c7fffc4 	addi	r17,r17,-1
 40048d4:	d9800f15 	stw	r6,60(sp)
 40048d8:	000d883a 	mov	r6,zero
 40048dc:	01cffe34 	movhi	r7,16376
 40048e0:	400df180 	call	400df18 <__subdf3>
 40048e4:	0198dbf4 	movhi	r6,25455
 40048e8:	01cff4f4 	movhi	r7,16339
 40048ec:	1009883a 	mov	r4,r2
 40048f0:	180b883a 	mov	r5,r3
 40048f4:	3190d844 	addi	r6,r6,17249
 40048f8:	39e1e9c4 	addi	r7,r7,-30809
 40048fc:	400d6ac0 	call	400d6ac <__muldf3>
 4004900:	01a2d874 	movhi	r6,35681
 4004904:	01cff1f4 	movhi	r7,16327
 4004908:	180b883a 	mov	r5,r3
 400490c:	31b22cc4 	addi	r6,r6,-14157
 4004910:	39e28a04 	addi	r7,r7,-30168
 4004914:	1009883a 	mov	r4,r2
 4004918:	400c24c0 	call	400c24c <__adddf3>
 400491c:	8809883a 	mov	r4,r17
 4004920:	102d883a 	mov	r22,r2
 4004924:	182b883a 	mov	r21,r3
 4004928:	400e8700 	call	400e870 <__floatsidf>
 400492c:	019427f4 	movhi	r6,20639
 4004930:	01cff4f4 	movhi	r7,16339
 4004934:	1009883a 	mov	r4,r2
 4004938:	180b883a 	mov	r5,r3
 400493c:	319e7ec4 	addi	r6,r6,31227
 4004940:	39d104c4 	addi	r7,r7,17427
 4004944:	400d6ac0 	call	400d6ac <__muldf3>
 4004948:	b009883a 	mov	r4,r22
 400494c:	a80b883a 	mov	r5,r21
 4004950:	100d883a 	mov	r6,r2
 4004954:	180f883a 	mov	r7,r3
 4004958:	400c24c0 	call	400c24c <__adddf3>
 400495c:	1009883a 	mov	r4,r2
 4004960:	180b883a 	mov	r5,r3
 4004964:	102d883a 	mov	r22,r2
 4004968:	182b883a 	mov	r21,r3
 400496c:	400e7e80 	call	400e7e8 <__fixdfsi>
 4004970:	b009883a 	mov	r4,r22
 4004974:	a80b883a 	mov	r5,r21
 4004978:	000d883a 	mov	r6,zero
 400497c:	000f883a 	mov	r7,zero
 4004980:	d8800515 	stw	r2,20(sp)
 4004984:	400d5cc0 	call	400d5cc <__ledf2>
 4004988:	10023116 	blt	r2,zero,4005250 <_dtoa_r+0xb28>
 400498c:	d8c00517 	ldw	r3,20(sp)
 4004990:	00800584 	movi	r2,22
 4004994:	10c21f36 	bltu	r2,r3,4005214 <_dtoa_r+0xaec>
 4004998:	180490fa 	slli	r2,r3,3
 400499c:	00c10074 	movhi	r3,1025
 40049a0:	18c6bc04 	addi	r3,r3,6896
 40049a4:	1885883a 	add	r2,r3,r2
 40049a8:	11000017 	ldw	r4,0(r2)
 40049ac:	11400117 	ldw	r5,4(r2)
 40049b0:	900d883a 	mov	r6,r18
 40049b4:	980f883a 	mov	r7,r19
 40049b8:	400d4ec0 	call	400d4ec <__gedf2>
 40049bc:	0082a70e 	bge	zero,r2,400545c <_dtoa_r+0xd34>
 40049c0:	d9000517 	ldw	r4,20(sp)
 40049c4:	d8000c15 	stw	zero,48(sp)
 40049c8:	213fffc4 	addi	r4,r4,-1
 40049cc:	d9000515 	stw	r4,20(sp)
 40049d0:	a463c83a 	sub	r17,r20,r17
 40049d4:	8dbfffc4 	addi	r22,r17,-1
 40049d8:	b0021916 	blt	r22,zero,4005240 <_dtoa_r+0xb18>
 40049dc:	d8000815 	stw	zero,32(sp)
 40049e0:	d8800517 	ldw	r2,20(sp)
 40049e4:	10020e16 	blt	r2,zero,4005220 <_dtoa_r+0xaf8>
 40049e8:	b0ad883a 	add	r22,r22,r2
 40049ec:	d8800a15 	stw	r2,40(sp)
 40049f0:	d8000915 	stw	zero,36(sp)
 40049f4:	d8c00317 	ldw	r3,12(sp)
 40049f8:	00800244 	movi	r2,9
 40049fc:	10c11a36 	bltu	r2,r3,4004e68 <_dtoa_r+0x740>
 4004a00:	00800144 	movi	r2,5
 4004a04:	10c4fc0e 	bge	r2,r3,4005df8 <_dtoa_r+0x16d0>
 4004a08:	18ffff04 	addi	r3,r3,-4
 4004a0c:	d8c00315 	stw	r3,12(sp)
 4004a10:	0029883a 	mov	r20,zero
 4004a14:	d9800317 	ldw	r6,12(sp)
 4004a18:	008000c4 	movi	r2,3
 4004a1c:	3083bd26 	beq	r6,r2,4005914 <_dtoa_r+0x11ec>
 4004a20:	1183670e 	bge	r2,r6,40057c0 <_dtoa_r+0x1098>
 4004a24:	d8c00317 	ldw	r3,12(sp)
 4004a28:	00800104 	movi	r2,4
 4004a2c:	1882e726 	beq	r3,r2,40055cc <_dtoa_r+0xea4>
 4004a30:	00800144 	movi	r2,5
 4004a34:	1884f21e 	bne	r3,r2,4005e00 <_dtoa_r+0x16d8>
 4004a38:	00800044 	movi	r2,1
 4004a3c:	d8800b15 	stw	r2,44(sp)
 4004a40:	d8c02217 	ldw	r3,136(sp)
 4004a44:	d9000517 	ldw	r4,20(sp)
 4004a48:	1907883a 	add	r3,r3,r4
 4004a4c:	19800044 	addi	r6,r3,1
 4004a50:	d8c00d15 	stw	r3,52(sp)
 4004a54:	d9800615 	stw	r6,24(sp)
 4004a58:	0183c30e 	bge	zero,r6,4005968 <_dtoa_r+0x1240>
 4004a5c:	d9800617 	ldw	r6,24(sp)
 4004a60:	3023883a 	mov	r17,r6
 4004a64:	80001115 	stw	zero,68(r16)
 4004a68:	008005c4 	movi	r2,23
 4004a6c:	1184f62e 	bgeu	r2,r6,4005e48 <_dtoa_r+0x1720>
 4004a70:	00c00044 	movi	r3,1
 4004a74:	00800104 	movi	r2,4
 4004a78:	1085883a 	add	r2,r2,r2
 4004a7c:	11000504 	addi	r4,r2,20
 4004a80:	180b883a 	mov	r5,r3
 4004a84:	18c00044 	addi	r3,r3,1
 4004a88:	313ffb2e 	bgeu	r6,r4,4004a78 <__alt_data_end+0xfe004a78>
 4004a8c:	81401115 	stw	r5,68(r16)
 4004a90:	8009883a 	mov	r4,r16
 4004a94:	4007d640 	call	4007d64 <_Balloc>
 4004a98:	d8800715 	stw	r2,28(sp)
 4004a9c:	80801015 	stw	r2,64(r16)
 4004aa0:	00800384 	movi	r2,14
 4004aa4:	1440fd36 	bltu	r2,r17,4004e9c <_dtoa_r+0x774>
 4004aa8:	a000fc26 	beq	r20,zero,4004e9c <_dtoa_r+0x774>
 4004aac:	d8800517 	ldw	r2,20(sp)
 4004ab0:	0083b90e 	bge	zero,r2,4005998 <_dtoa_r+0x1270>
 4004ab4:	d8c00517 	ldw	r3,20(sp)
 4004ab8:	108003cc 	andi	r2,r2,15
 4004abc:	100490fa 	slli	r2,r2,3
 4004ac0:	182fd13a 	srai	r23,r3,4
 4004ac4:	00c10074 	movhi	r3,1025
 4004ac8:	18c6bc04 	addi	r3,r3,6896
 4004acc:	1885883a 	add	r2,r3,r2
 4004ad0:	b8c0040c 	andi	r3,r23,16
 4004ad4:	12c00017 	ldw	r11,0(r2)
 4004ad8:	12800117 	ldw	r10,4(r2)
 4004adc:	18039726 	beq	r3,zero,400593c <_dtoa_r+0x1214>
 4004ae0:	00810074 	movhi	r2,1025
 4004ae4:	1086b204 	addi	r2,r2,6856
 4004ae8:	11800817 	ldw	r6,32(r2)
 4004aec:	11c00917 	ldw	r7,36(r2)
 4004af0:	9009883a 	mov	r4,r18
 4004af4:	980b883a 	mov	r5,r19
 4004af8:	da801615 	stw	r10,88(sp)
 4004afc:	dac01515 	stw	r11,84(sp)
 4004b00:	400cae80 	call	400cae8 <__divdf3>
 4004b04:	da801617 	ldw	r10,88(sp)
 4004b08:	dac01517 	ldw	r11,84(sp)
 4004b0c:	bdc003cc 	andi	r23,r23,15
 4004b10:	044000c4 	movi	r17,3
 4004b14:	d8800e15 	stw	r2,56(sp)
 4004b18:	182b883a 	mov	r21,r3
 4004b1c:	b8001126 	beq	r23,zero,4004b64 <_dtoa_r+0x43c>
 4004b20:	05010074 	movhi	r20,1025
 4004b24:	a506b204 	addi	r20,r20,6856
 4004b28:	5805883a 	mov	r2,r11
 4004b2c:	5007883a 	mov	r3,r10
 4004b30:	b980004c 	andi	r6,r23,1
 4004b34:	1009883a 	mov	r4,r2
 4004b38:	b82fd07a 	srai	r23,r23,1
 4004b3c:	180b883a 	mov	r5,r3
 4004b40:	30000426 	beq	r6,zero,4004b54 <_dtoa_r+0x42c>
 4004b44:	a1800017 	ldw	r6,0(r20)
 4004b48:	a1c00117 	ldw	r7,4(r20)
 4004b4c:	8c400044 	addi	r17,r17,1
 4004b50:	400d6ac0 	call	400d6ac <__muldf3>
 4004b54:	a5000204 	addi	r20,r20,8
 4004b58:	b83ff51e 	bne	r23,zero,4004b30 <__alt_data_end+0xfe004b30>
 4004b5c:	1017883a 	mov	r11,r2
 4004b60:	1815883a 	mov	r10,r3
 4004b64:	d9000e17 	ldw	r4,56(sp)
 4004b68:	a80b883a 	mov	r5,r21
 4004b6c:	580d883a 	mov	r6,r11
 4004b70:	500f883a 	mov	r7,r10
 4004b74:	400cae80 	call	400cae8 <__divdf3>
 4004b78:	1029883a 	mov	r20,r2
 4004b7c:	182b883a 	mov	r21,r3
 4004b80:	d9800c17 	ldw	r6,48(sp)
 4004b84:	30000626 	beq	r6,zero,4004ba0 <_dtoa_r+0x478>
 4004b88:	a009883a 	mov	r4,r20
 4004b8c:	a80b883a 	mov	r5,r21
 4004b90:	000d883a 	mov	r6,zero
 4004b94:	01cffc34 	movhi	r7,16368
 4004b98:	400d5cc0 	call	400d5cc <__ledf2>
 4004b9c:	10043216 	blt	r2,zero,4005c68 <_dtoa_r+0x1540>
 4004ba0:	8809883a 	mov	r4,r17
 4004ba4:	400e8700 	call	400e870 <__floatsidf>
 4004ba8:	1009883a 	mov	r4,r2
 4004bac:	180b883a 	mov	r5,r3
 4004bb0:	a00d883a 	mov	r6,r20
 4004bb4:	a80f883a 	mov	r7,r21
 4004bb8:	400d6ac0 	call	400d6ac <__muldf3>
 4004bbc:	000d883a 	mov	r6,zero
 4004bc0:	1009883a 	mov	r4,r2
 4004bc4:	180b883a 	mov	r5,r3
 4004bc8:	01d00734 	movhi	r7,16412
 4004bcc:	400c24c0 	call	400c24c <__adddf3>
 4004bd0:	1023883a 	mov	r17,r2
 4004bd4:	d9800617 	ldw	r6,24(sp)
 4004bd8:	00bf3034 	movhi	r2,64704
 4004bdc:	1885883a 	add	r2,r3,r2
 4004be0:	d8800e15 	stw	r2,56(sp)
 4004be4:	30032e26 	beq	r6,zero,40058a0 <_dtoa_r+0x1178>
 4004be8:	d8c00517 	ldw	r3,20(sp)
 4004bec:	da800617 	ldw	r10,24(sp)
 4004bf0:	d8c01215 	stw	r3,72(sp)
 4004bf4:	d9000b17 	ldw	r4,44(sp)
 4004bf8:	2003b026 	beq	r4,zero,4005abc <_dtoa_r+0x1394>
 4004bfc:	50bfffc4 	addi	r2,r10,-1
 4004c00:	100490fa 	slli	r2,r2,3
 4004c04:	00c10074 	movhi	r3,1025
 4004c08:	18c6bc04 	addi	r3,r3,6896
 4004c0c:	1885883a 	add	r2,r3,r2
 4004c10:	11800017 	ldw	r6,0(r2)
 4004c14:	11c00117 	ldw	r7,4(r2)
 4004c18:	d8800717 	ldw	r2,28(sp)
 4004c1c:	0009883a 	mov	r4,zero
 4004c20:	014ff834 	movhi	r5,16352
 4004c24:	da801615 	stw	r10,88(sp)
 4004c28:	15c00044 	addi	r23,r2,1
 4004c2c:	400cae80 	call	400cae8 <__divdf3>
 4004c30:	d9c00e17 	ldw	r7,56(sp)
 4004c34:	880d883a 	mov	r6,r17
 4004c38:	1009883a 	mov	r4,r2
 4004c3c:	180b883a 	mov	r5,r3
 4004c40:	400df180 	call	400df18 <__subdf3>
 4004c44:	a80b883a 	mov	r5,r21
 4004c48:	a009883a 	mov	r4,r20
 4004c4c:	d8c01015 	stw	r3,64(sp)
 4004c50:	d8800e15 	stw	r2,56(sp)
 4004c54:	400e7e80 	call	400e7e8 <__fixdfsi>
 4004c58:	1009883a 	mov	r4,r2
 4004c5c:	d8801715 	stw	r2,92(sp)
 4004c60:	400e8700 	call	400e870 <__floatsidf>
 4004c64:	a009883a 	mov	r4,r20
 4004c68:	a80b883a 	mov	r5,r21
 4004c6c:	100d883a 	mov	r6,r2
 4004c70:	180f883a 	mov	r7,r3
 4004c74:	400df180 	call	400df18 <__subdf3>
 4004c78:	da001717 	ldw	r8,92(sp)
 4004c7c:	1829883a 	mov	r20,r3
 4004c80:	d8c00717 	ldw	r3,28(sp)
 4004c84:	d9000e17 	ldw	r4,56(sp)
 4004c88:	d9401017 	ldw	r5,64(sp)
 4004c8c:	42000c04 	addi	r8,r8,48
 4004c90:	1023883a 	mov	r17,r2
 4004c94:	1a000005 	stb	r8,0(r3)
 4004c98:	880d883a 	mov	r6,r17
 4004c9c:	a00f883a 	mov	r7,r20
 4004ca0:	402b883a 	mov	r21,r8
 4004ca4:	400d4ec0 	call	400d4ec <__gedf2>
 4004ca8:	00844516 	blt	zero,r2,4005dc0 <_dtoa_r+0x1698>
 4004cac:	0009883a 	mov	r4,zero
 4004cb0:	014ffc34 	movhi	r5,16368
 4004cb4:	880d883a 	mov	r6,r17
 4004cb8:	a00f883a 	mov	r7,r20
 4004cbc:	400df180 	call	400df18 <__subdf3>
 4004cc0:	d9000e17 	ldw	r4,56(sp)
 4004cc4:	d9401017 	ldw	r5,64(sp)
 4004cc8:	100d883a 	mov	r6,r2
 4004ccc:	180f883a 	mov	r7,r3
 4004cd0:	400d4ec0 	call	400d4ec <__gedf2>
 4004cd4:	da801617 	ldw	r10,88(sp)
 4004cd8:	00843616 	blt	zero,r2,4005db4 <_dtoa_r+0x168c>
 4004cdc:	00800044 	movi	r2,1
 4004ce0:	12806e0e 	bge	r2,r10,4004e9c <_dtoa_r+0x774>
 4004ce4:	d9000717 	ldw	r4,28(sp)
 4004ce8:	dd801315 	stw	r22,76(sp)
 4004cec:	dc001115 	stw	r16,68(sp)
 4004cf0:	2295883a 	add	r10,r4,r10
 4004cf4:	dcc01415 	stw	r19,80(sp)
 4004cf8:	502d883a 	mov	r22,r10
 4004cfc:	dcc01017 	ldw	r19,64(sp)
 4004d00:	b821883a 	mov	r16,r23
 4004d04:	dc801015 	stw	r18,64(sp)
 4004d08:	dc800e17 	ldw	r18,56(sp)
 4004d0c:	00000906 	br	4004d34 <_dtoa_r+0x60c>
 4004d10:	400df180 	call	400df18 <__subdf3>
 4004d14:	1009883a 	mov	r4,r2
 4004d18:	180b883a 	mov	r5,r3
 4004d1c:	900d883a 	mov	r6,r18
 4004d20:	980f883a 	mov	r7,r19
 4004d24:	400d5cc0 	call	400d5cc <__ledf2>
 4004d28:	10040e16 	blt	r2,zero,4005d64 <_dtoa_r+0x163c>
 4004d2c:	b821883a 	mov	r16,r23
 4004d30:	bd841026 	beq	r23,r22,4005d74 <_dtoa_r+0x164c>
 4004d34:	9009883a 	mov	r4,r18
 4004d38:	980b883a 	mov	r5,r19
 4004d3c:	000d883a 	mov	r6,zero
 4004d40:	01d00934 	movhi	r7,16420
 4004d44:	400d6ac0 	call	400d6ac <__muldf3>
 4004d48:	000d883a 	mov	r6,zero
 4004d4c:	01d00934 	movhi	r7,16420
 4004d50:	8809883a 	mov	r4,r17
 4004d54:	a00b883a 	mov	r5,r20
 4004d58:	1025883a 	mov	r18,r2
 4004d5c:	1827883a 	mov	r19,r3
 4004d60:	400d6ac0 	call	400d6ac <__muldf3>
 4004d64:	180b883a 	mov	r5,r3
 4004d68:	1009883a 	mov	r4,r2
 4004d6c:	1823883a 	mov	r17,r3
 4004d70:	1029883a 	mov	r20,r2
 4004d74:	400e7e80 	call	400e7e8 <__fixdfsi>
 4004d78:	1009883a 	mov	r4,r2
 4004d7c:	102b883a 	mov	r21,r2
 4004d80:	400e8700 	call	400e870 <__floatsidf>
 4004d84:	a009883a 	mov	r4,r20
 4004d88:	880b883a 	mov	r5,r17
 4004d8c:	100d883a 	mov	r6,r2
 4004d90:	180f883a 	mov	r7,r3
 4004d94:	400df180 	call	400df18 <__subdf3>
 4004d98:	ad400c04 	addi	r21,r21,48
 4004d9c:	1009883a 	mov	r4,r2
 4004da0:	180b883a 	mov	r5,r3
 4004da4:	900d883a 	mov	r6,r18
 4004da8:	980f883a 	mov	r7,r19
 4004dac:	85400005 	stb	r21,0(r16)
 4004db0:	1023883a 	mov	r17,r2
 4004db4:	1829883a 	mov	r20,r3
 4004db8:	400d5cc0 	call	400d5cc <__ledf2>
 4004dbc:	bdc00044 	addi	r23,r23,1
 4004dc0:	0009883a 	mov	r4,zero
 4004dc4:	014ffc34 	movhi	r5,16368
 4004dc8:	880d883a 	mov	r6,r17
 4004dcc:	a00f883a 	mov	r7,r20
 4004dd0:	103fcf0e 	bge	r2,zero,4004d10 <__alt_data_end+0xfe004d10>
 4004dd4:	d9801217 	ldw	r6,72(sp)
 4004dd8:	dc001117 	ldw	r16,68(sp)
 4004ddc:	d9800515 	stw	r6,20(sp)
 4004de0:	8009883a 	mov	r4,r16
 4004de4:	e00b883a 	mov	r5,fp
 4004de8:	4007e0c0 	call	4007e0c <_Bfree>
 4004dec:	d8c00517 	ldw	r3,20(sp)
 4004df0:	d9002317 	ldw	r4,140(sp)
 4004df4:	d9802517 	ldw	r6,148(sp)
 4004df8:	b8000005 	stb	zero,0(r23)
 4004dfc:	18800044 	addi	r2,r3,1
 4004e00:	20800015 	stw	r2,0(r4)
 4004e04:	30027226 	beq	r6,zero,40057d0 <_dtoa_r+0x10a8>
 4004e08:	35c00015 	stw	r23,0(r6)
 4004e0c:	d8800717 	ldw	r2,28(sp)
 4004e10:	003e7406 	br	40047e4 <__alt_data_end+0xfe0047e4>
 4004e14:	00800434 	movhi	r2,16
 4004e18:	10bfffc4 	addi	r2,r2,-1
 4004e1c:	a8aa703a 	and	r21,r21,r2
 4004e20:	a83e801e 	bne	r21,zero,4004824 <__alt_data_end+0xfe004824>
 4004e24:	00810074 	movhi	r2,1025
 4004e28:	10869d04 	addi	r2,r2,6772
 4004e2c:	003e7f06 	br	400482c <__alt_data_end+0xfe00482c>
 4004e30:	10c00204 	addi	r3,r2,8
 4004e34:	003e8206 	br	4004840 <__alt_data_end+0xfe004840>
 4004e38:	01400434 	movhi	r5,16
 4004e3c:	297fffc4 	addi	r5,r5,-1
 4004e40:	994a703a 	and	r5,r19,r5
 4004e44:	9009883a 	mov	r4,r18
 4004e48:	8c7f0044 	addi	r17,r17,-1023
 4004e4c:	294ffc34 	orhi	r5,r5,16368
 4004e50:	dd000217 	ldw	r20,8(sp)
 4004e54:	d8000f15 	stw	zero,60(sp)
 4004e58:	003e9f06 	br	40048d8 <__alt_data_end+0xfe0048d8>
 4004e5c:	00810074 	movhi	r2,1025
 4004e60:	10869404 	addi	r2,r2,6736
 4004e64:	003e5f06 	br	40047e4 <__alt_data_end+0xfe0047e4>
 4004e68:	80001115 	stw	zero,68(r16)
 4004e6c:	8009883a 	mov	r4,r16
 4004e70:	000b883a 	mov	r5,zero
 4004e74:	4007d640 	call	4007d64 <_Balloc>
 4004e78:	01bfffc4 	movi	r6,-1
 4004e7c:	d8800715 	stw	r2,28(sp)
 4004e80:	80801015 	stw	r2,64(r16)
 4004e84:	00800044 	movi	r2,1
 4004e88:	d9800615 	stw	r6,24(sp)
 4004e8c:	d8800b15 	stw	r2,44(sp)
 4004e90:	d8002215 	stw	zero,136(sp)
 4004e94:	d9800d15 	stw	r6,52(sp)
 4004e98:	d8000315 	stw	zero,12(sp)
 4004e9c:	d8800117 	ldw	r2,4(sp)
 4004ea0:	10008e16 	blt	r2,zero,40050dc <_dtoa_r+0x9b4>
 4004ea4:	d9000517 	ldw	r4,20(sp)
 4004ea8:	00c00384 	movi	r3,14
 4004eac:	19008b16 	blt	r3,r4,40050dc <_dtoa_r+0x9b4>
 4004eb0:	200490fa 	slli	r2,r4,3
 4004eb4:	00c10074 	movhi	r3,1025
 4004eb8:	d9802217 	ldw	r6,136(sp)
 4004ebc:	18c6bc04 	addi	r3,r3,6896
 4004ec0:	1885883a 	add	r2,r3,r2
 4004ec4:	14400017 	ldw	r17,0(r2)
 4004ec8:	15000117 	ldw	r20,4(r2)
 4004ecc:	3001c716 	blt	r6,zero,40055ec <_dtoa_r+0xec4>
 4004ed0:	880d883a 	mov	r6,r17
 4004ed4:	a00f883a 	mov	r7,r20
 4004ed8:	9009883a 	mov	r4,r18
 4004edc:	980b883a 	mov	r5,r19
 4004ee0:	400cae80 	call	400cae8 <__divdf3>
 4004ee4:	180b883a 	mov	r5,r3
 4004ee8:	1009883a 	mov	r4,r2
 4004eec:	400e7e80 	call	400e7e8 <__fixdfsi>
 4004ef0:	1009883a 	mov	r4,r2
 4004ef4:	102d883a 	mov	r22,r2
 4004ef8:	400e8700 	call	400e870 <__floatsidf>
 4004efc:	1009883a 	mov	r4,r2
 4004f00:	180b883a 	mov	r5,r3
 4004f04:	880d883a 	mov	r6,r17
 4004f08:	a00f883a 	mov	r7,r20
 4004f0c:	400d6ac0 	call	400d6ac <__muldf3>
 4004f10:	9009883a 	mov	r4,r18
 4004f14:	980b883a 	mov	r5,r19
 4004f18:	100d883a 	mov	r6,r2
 4004f1c:	180f883a 	mov	r7,r3
 4004f20:	400df180 	call	400df18 <__subdf3>
 4004f24:	d9000717 	ldw	r4,28(sp)
 4004f28:	d9800617 	ldw	r6,24(sp)
 4004f2c:	180b883a 	mov	r5,r3
 4004f30:	b0c00c04 	addi	r3,r22,48
 4004f34:	20c00005 	stb	r3,0(r4)
 4004f38:	25c00044 	addi	r23,r4,1
 4004f3c:	01000044 	movi	r4,1
 4004f40:	1011883a 	mov	r8,r2
 4004f44:	2807883a 	mov	r3,r5
 4004f48:	31003d26 	beq	r6,r4,4005040 <_dtoa_r+0x918>
 4004f4c:	000d883a 	mov	r6,zero
 4004f50:	01d00934 	movhi	r7,16420
 4004f54:	1009883a 	mov	r4,r2
 4004f58:	400d6ac0 	call	400d6ac <__muldf3>
 4004f5c:	1009883a 	mov	r4,r2
 4004f60:	180b883a 	mov	r5,r3
 4004f64:	000d883a 	mov	r6,zero
 4004f68:	000f883a 	mov	r7,zero
 4004f6c:	1027883a 	mov	r19,r2
 4004f70:	182b883a 	mov	r21,r3
 4004f74:	400d4680 	call	400d468 <__eqdf2>
 4004f78:	103f9926 	beq	r2,zero,4004de0 <__alt_data_end+0xfe004de0>
 4004f7c:	d8c00617 	ldw	r3,24(sp)
 4004f80:	d9000717 	ldw	r4,28(sp)
 4004f84:	b825883a 	mov	r18,r23
 4004f88:	18bfffc4 	addi	r2,r3,-1
 4004f8c:	20ad883a 	add	r22,r4,r2
 4004f90:	dc000315 	stw	r16,12(sp)
 4004f94:	00000a06 	br	4004fc0 <_dtoa_r+0x898>
 4004f98:	400d6ac0 	call	400d6ac <__muldf3>
 4004f9c:	1009883a 	mov	r4,r2
 4004fa0:	180b883a 	mov	r5,r3
 4004fa4:	000d883a 	mov	r6,zero
 4004fa8:	000f883a 	mov	r7,zero
 4004fac:	1027883a 	mov	r19,r2
 4004fb0:	182b883a 	mov	r21,r3
 4004fb4:	b825883a 	mov	r18,r23
 4004fb8:	400d4680 	call	400d468 <__eqdf2>
 4004fbc:	10022626 	beq	r2,zero,4005858 <_dtoa_r+0x1130>
 4004fc0:	880d883a 	mov	r6,r17
 4004fc4:	a00f883a 	mov	r7,r20
 4004fc8:	9809883a 	mov	r4,r19
 4004fcc:	a80b883a 	mov	r5,r21
 4004fd0:	400cae80 	call	400cae8 <__divdf3>
 4004fd4:	180b883a 	mov	r5,r3
 4004fd8:	1009883a 	mov	r4,r2
 4004fdc:	400e7e80 	call	400e7e8 <__fixdfsi>
 4004fe0:	1009883a 	mov	r4,r2
 4004fe4:	1021883a 	mov	r16,r2
 4004fe8:	400e8700 	call	400e870 <__floatsidf>
 4004fec:	1009883a 	mov	r4,r2
 4004ff0:	180b883a 	mov	r5,r3
 4004ff4:	880d883a 	mov	r6,r17
 4004ff8:	a00f883a 	mov	r7,r20
 4004ffc:	400d6ac0 	call	400d6ac <__muldf3>
 4005000:	9809883a 	mov	r4,r19
 4005004:	a80b883a 	mov	r5,r21
 4005008:	100d883a 	mov	r6,r2
 400500c:	180f883a 	mov	r7,r3
 4005010:	400df180 	call	400df18 <__subdf3>
 4005014:	82000c04 	addi	r8,r16,48
 4005018:	92000005 	stb	r8,0(r18)
 400501c:	1009883a 	mov	r4,r2
 4005020:	180b883a 	mov	r5,r3
 4005024:	000d883a 	mov	r6,zero
 4005028:	01d00934 	movhi	r7,16420
 400502c:	1011883a 	mov	r8,r2
 4005030:	bdc00044 	addi	r23,r23,1
 4005034:	95bfd81e 	bne	r18,r22,4004f98 <__alt_data_end+0xfe004f98>
 4005038:	802d883a 	mov	r22,r16
 400503c:	dc000317 	ldw	r16,12(sp)
 4005040:	4009883a 	mov	r4,r8
 4005044:	180b883a 	mov	r5,r3
 4005048:	400d883a 	mov	r6,r8
 400504c:	180f883a 	mov	r7,r3
 4005050:	400c24c0 	call	400c24c <__adddf3>
 4005054:	8809883a 	mov	r4,r17
 4005058:	a00b883a 	mov	r5,r20
 400505c:	100d883a 	mov	r6,r2
 4005060:	180f883a 	mov	r7,r3
 4005064:	1027883a 	mov	r19,r2
 4005068:	1825883a 	mov	r18,r3
 400506c:	400d5cc0 	call	400d5cc <__ledf2>
 4005070:	10000816 	blt	r2,zero,4005094 <_dtoa_r+0x96c>
 4005074:	8809883a 	mov	r4,r17
 4005078:	a00b883a 	mov	r5,r20
 400507c:	980d883a 	mov	r6,r19
 4005080:	900f883a 	mov	r7,r18
 4005084:	400d4680 	call	400d468 <__eqdf2>
 4005088:	103f551e 	bne	r2,zero,4004de0 <__alt_data_end+0xfe004de0>
 400508c:	b580004c 	andi	r22,r22,1
 4005090:	b03f5326 	beq	r22,zero,4004de0 <__alt_data_end+0xfe004de0>
 4005094:	bd7fffc3 	ldbu	r21,-1(r23)
 4005098:	b8bfffc4 	addi	r2,r23,-1
 400509c:	1007883a 	mov	r3,r2
 40050a0:	01400e44 	movi	r5,57
 40050a4:	d9800717 	ldw	r6,28(sp)
 40050a8:	00000506 	br	40050c0 <_dtoa_r+0x998>
 40050ac:	18ffffc4 	addi	r3,r3,-1
 40050b0:	30825e26 	beq	r6,r2,4005a2c <_dtoa_r+0x1304>
 40050b4:	1d400003 	ldbu	r21,0(r3)
 40050b8:	102f883a 	mov	r23,r2
 40050bc:	10bfffc4 	addi	r2,r2,-1
 40050c0:	a9003fcc 	andi	r4,r21,255
 40050c4:	2100201c 	xori	r4,r4,128
 40050c8:	213fe004 	addi	r4,r4,-128
 40050cc:	217ff726 	beq	r4,r5,40050ac <__alt_data_end+0xfe0050ac>
 40050d0:	aa000044 	addi	r8,r21,1
 40050d4:	12000005 	stb	r8,0(r2)
 40050d8:	003f4106 	br	4004de0 <__alt_data_end+0xfe004de0>
 40050dc:	d8c00b17 	ldw	r3,44(sp)
 40050e0:	18006726 	beq	r3,zero,4005280 <_dtoa_r+0xb58>
 40050e4:	d9000317 	ldw	r4,12(sp)
 40050e8:	00c00044 	movi	r3,1
 40050ec:	19016a0e 	bge	r3,r4,4005698 <_dtoa_r+0xf70>
 40050f0:	d8800617 	ldw	r2,24(sp)
 40050f4:	d8c00917 	ldw	r3,36(sp)
 40050f8:	157fffc4 	addi	r21,r2,-1
 40050fc:	1d420716 	blt	r3,r21,400591c <_dtoa_r+0x11f4>
 4005100:	1d6bc83a 	sub	r21,r3,r21
 4005104:	d8800617 	ldw	r2,24(sp)
 4005108:	1002c716 	blt	r2,zero,4005c28 <_dtoa_r+0x1500>
 400510c:	dd000817 	ldw	r20,32(sp)
 4005110:	d8800617 	ldw	r2,24(sp)
 4005114:	d9800817 	ldw	r6,32(sp)
 4005118:	8009883a 	mov	r4,r16
 400511c:	01400044 	movi	r5,1
 4005120:	308d883a 	add	r6,r6,r2
 4005124:	d9800815 	stw	r6,32(sp)
 4005128:	b0ad883a 	add	r22,r22,r2
 400512c:	400818c0 	call	400818c <__i2b>
 4005130:	1023883a 	mov	r17,r2
 4005134:	a0000826 	beq	r20,zero,4005158 <_dtoa_r+0xa30>
 4005138:	0580070e 	bge	zero,r22,4005158 <_dtoa_r+0xa30>
 400513c:	b005883a 	mov	r2,r22
 4005140:	a5812016 	blt	r20,r22,40055c4 <_dtoa_r+0xe9c>
 4005144:	d8c00817 	ldw	r3,32(sp)
 4005148:	a0a9c83a 	sub	r20,r20,r2
 400514c:	b0adc83a 	sub	r22,r22,r2
 4005150:	1887c83a 	sub	r3,r3,r2
 4005154:	d8c00815 	stw	r3,32(sp)
 4005158:	d9000917 	ldw	r4,36(sp)
 400515c:	0100140e 	bge	zero,r4,40051b0 <_dtoa_r+0xa88>
 4005160:	d9800b17 	ldw	r6,44(sp)
 4005164:	3001e526 	beq	r6,zero,40058fc <_dtoa_r+0x11d4>
 4005168:	05400e0e 	bge	zero,r21,40051a4 <_dtoa_r+0xa7c>
 400516c:	880b883a 	mov	r5,r17
 4005170:	8009883a 	mov	r4,r16
 4005174:	a80d883a 	mov	r6,r21
 4005178:	40084580 	call	4008458 <__pow5mult>
 400517c:	e00d883a 	mov	r6,fp
 4005180:	8009883a 	mov	r4,r16
 4005184:	100b883a 	mov	r5,r2
 4005188:	1023883a 	mov	r17,r2
 400518c:	40081c80 	call	40081c8 <__multiply>
 4005190:	102f883a 	mov	r23,r2
 4005194:	e00b883a 	mov	r5,fp
 4005198:	8009883a 	mov	r4,r16
 400519c:	4007e0c0 	call	4007e0c <_Bfree>
 40051a0:	b839883a 	mov	fp,r23
 40051a4:	d8800917 	ldw	r2,36(sp)
 40051a8:	154dc83a 	sub	r6,r2,r21
 40051ac:	3001281e 	bne	r6,zero,4005650 <_dtoa_r+0xf28>
 40051b0:	05c00044 	movi	r23,1
 40051b4:	8009883a 	mov	r4,r16
 40051b8:	b80b883a 	mov	r5,r23
 40051bc:	400818c0 	call	400818c <__i2b>
 40051c0:	d8c00a17 	ldw	r3,40(sp)
 40051c4:	102b883a 	mov	r21,r2
 40051c8:	00c0310e 	bge	zero,r3,4005290 <_dtoa_r+0xb68>
 40051cc:	8009883a 	mov	r4,r16
 40051d0:	100b883a 	mov	r5,r2
 40051d4:	180d883a 	mov	r6,r3
 40051d8:	40084580 	call	4008458 <__pow5mult>
 40051dc:	d9000317 	ldw	r4,12(sp)
 40051e0:	102b883a 	mov	r21,r2
 40051e4:	b9011f0e 	bge	r23,r4,4005664 <_dtoa_r+0xf3c>
 40051e8:	0027883a 	mov	r19,zero
 40051ec:	a8800417 	ldw	r2,16(r21)
 40051f0:	10800104 	addi	r2,r2,4
 40051f4:	1085883a 	add	r2,r2,r2
 40051f8:	1085883a 	add	r2,r2,r2
 40051fc:	a885883a 	add	r2,r21,r2
 4005200:	11000017 	ldw	r4,0(r2)
 4005204:	40080740 	call	4008074 <__hi0bits>
 4005208:	00c00804 	movi	r3,32
 400520c:	1885c83a 	sub	r2,r3,r2
 4005210:	00002506 	br	40052a8 <_dtoa_r+0xb80>
 4005214:	01800044 	movi	r6,1
 4005218:	d9800c15 	stw	r6,48(sp)
 400521c:	003dec06 	br	40049d0 <__alt_data_end+0xfe0049d0>
 4005220:	d8c00817 	ldw	r3,32(sp)
 4005224:	d9000517 	ldw	r4,20(sp)
 4005228:	d8000a15 	stw	zero,40(sp)
 400522c:	1907c83a 	sub	r3,r3,r4
 4005230:	010dc83a 	sub	r6,zero,r4
 4005234:	d8c00815 	stw	r3,32(sp)
 4005238:	d9800915 	stw	r6,36(sp)
 400523c:	003ded06 	br	40049f4 <__alt_data_end+0xfe0049f4>
 4005240:	05adc83a 	sub	r22,zero,r22
 4005244:	dd800815 	stw	r22,32(sp)
 4005248:	002d883a 	mov	r22,zero
 400524c:	003de406 	br	40049e0 <__alt_data_end+0xfe0049e0>
 4005250:	d9000517 	ldw	r4,20(sp)
 4005254:	400e8700 	call	400e870 <__floatsidf>
 4005258:	1009883a 	mov	r4,r2
 400525c:	180b883a 	mov	r5,r3
 4005260:	b00d883a 	mov	r6,r22
 4005264:	a80f883a 	mov	r7,r21
 4005268:	400d4680 	call	400d468 <__eqdf2>
 400526c:	103dc726 	beq	r2,zero,400498c <__alt_data_end+0xfe00498c>
 4005270:	d8800517 	ldw	r2,20(sp)
 4005274:	10bfffc4 	addi	r2,r2,-1
 4005278:	d8800515 	stw	r2,20(sp)
 400527c:	003dc306 	br	400498c <__alt_data_end+0xfe00498c>
 4005280:	dd400917 	ldw	r21,36(sp)
 4005284:	dd000817 	ldw	r20,32(sp)
 4005288:	0023883a 	mov	r17,zero
 400528c:	003fa906 	br	4005134 <__alt_data_end+0xfe005134>
 4005290:	d9800317 	ldw	r6,12(sp)
 4005294:	b981670e 	bge	r23,r6,4005834 <_dtoa_r+0x110c>
 4005298:	0027883a 	mov	r19,zero
 400529c:	d8c00a17 	ldw	r3,40(sp)
 40052a0:	183fd21e 	bne	r3,zero,40051ec <__alt_data_end+0xfe0051ec>
 40052a4:	00800044 	movi	r2,1
 40052a8:	1585883a 	add	r2,r2,r22
 40052ac:	108007cc 	andi	r2,r2,31
 40052b0:	10005f26 	beq	r2,zero,4005430 <_dtoa_r+0xd08>
 40052b4:	00c00804 	movi	r3,32
 40052b8:	1887c83a 	sub	r3,r3,r2
 40052bc:	01000104 	movi	r4,4
 40052c0:	20c2dd0e 	bge	r4,r3,4005e38 <_dtoa_r+0x1710>
 40052c4:	d9000817 	ldw	r4,32(sp)
 40052c8:	00c00704 	movi	r3,28
 40052cc:	1885c83a 	sub	r2,r3,r2
 40052d0:	2089883a 	add	r4,r4,r2
 40052d4:	d9000815 	stw	r4,32(sp)
 40052d8:	a0a9883a 	add	r20,r20,r2
 40052dc:	b0ad883a 	add	r22,r22,r2
 40052e0:	d8800817 	ldw	r2,32(sp)
 40052e4:	0080050e 	bge	zero,r2,40052fc <_dtoa_r+0xbd4>
 40052e8:	e00b883a 	mov	r5,fp
 40052ec:	8009883a 	mov	r4,r16
 40052f0:	100d883a 	mov	r6,r2
 40052f4:	40085980 	call	4008598 <__lshift>
 40052f8:	1039883a 	mov	fp,r2
 40052fc:	0580050e 	bge	zero,r22,4005314 <_dtoa_r+0xbec>
 4005300:	a80b883a 	mov	r5,r21
 4005304:	8009883a 	mov	r4,r16
 4005308:	b00d883a 	mov	r6,r22
 400530c:	40085980 	call	4008598 <__lshift>
 4005310:	102b883a 	mov	r21,r2
 4005314:	d8c00c17 	ldw	r3,48(sp)
 4005318:	1801161e 	bne	r3,zero,4005774 <_dtoa_r+0x104c>
 400531c:	d8c00617 	ldw	r3,24(sp)
 4005320:	00c12d0e 	bge	zero,r3,40057d8 <_dtoa_r+0x10b0>
 4005324:	d8c00b17 	ldw	r3,44(sp)
 4005328:	1800571e 	bne	r3,zero,4005488 <_dtoa_r+0xd60>
 400532c:	dc800717 	ldw	r18,28(sp)
 4005330:	dcc00617 	ldw	r19,24(sp)
 4005334:	9029883a 	mov	r20,r18
 4005338:	00000206 	br	4005344 <_dtoa_r+0xc1c>
 400533c:	4007e340 	call	4007e34 <__multadd>
 4005340:	1039883a 	mov	fp,r2
 4005344:	e009883a 	mov	r4,fp
 4005348:	a80b883a 	mov	r5,r21
 400534c:	40045000 	call	4004500 <quorem>
 4005350:	10800c04 	addi	r2,r2,48
 4005354:	90800005 	stb	r2,0(r18)
 4005358:	94800044 	addi	r18,r18,1
 400535c:	9507c83a 	sub	r3,r18,r20
 4005360:	8009883a 	mov	r4,r16
 4005364:	e00b883a 	mov	r5,fp
 4005368:	01800284 	movi	r6,10
 400536c:	000f883a 	mov	r7,zero
 4005370:	1cfff216 	blt	r3,r19,400533c <__alt_data_end+0xfe00533c>
 4005374:	1011883a 	mov	r8,r2
 4005378:	d8800617 	ldw	r2,24(sp)
 400537c:	00822e0e 	bge	zero,r2,4005c38 <_dtoa_r+0x1510>
 4005380:	d9000717 	ldw	r4,28(sp)
 4005384:	0025883a 	mov	r18,zero
 4005388:	20af883a 	add	r23,r4,r2
 400538c:	e00b883a 	mov	r5,fp
 4005390:	01800044 	movi	r6,1
 4005394:	8009883a 	mov	r4,r16
 4005398:	da001715 	stw	r8,92(sp)
 400539c:	40085980 	call	4008598 <__lshift>
 40053a0:	1009883a 	mov	r4,r2
 40053a4:	a80b883a 	mov	r5,r21
 40053a8:	1039883a 	mov	fp,r2
 40053ac:	40086e00 	call	40086e0 <__mcmp>
 40053b0:	da001717 	ldw	r8,92(sp)
 40053b4:	00816e0e 	bge	zero,r2,4005970 <_dtoa_r+0x1248>
 40053b8:	b93fffc3 	ldbu	r4,-1(r23)
 40053bc:	b8bfffc4 	addi	r2,r23,-1
 40053c0:	1007883a 	mov	r3,r2
 40053c4:	01800e44 	movi	r6,57
 40053c8:	d9c00717 	ldw	r7,28(sp)
 40053cc:	00000506 	br	40053e4 <_dtoa_r+0xcbc>
 40053d0:	18ffffc4 	addi	r3,r3,-1
 40053d4:	38811926 	beq	r7,r2,400583c <_dtoa_r+0x1114>
 40053d8:	19000003 	ldbu	r4,0(r3)
 40053dc:	102f883a 	mov	r23,r2
 40053e0:	10bfffc4 	addi	r2,r2,-1
 40053e4:	21403fcc 	andi	r5,r4,255
 40053e8:	2940201c 	xori	r5,r5,128
 40053ec:	297fe004 	addi	r5,r5,-128
 40053f0:	29bff726 	beq	r5,r6,40053d0 <__alt_data_end+0xfe0053d0>
 40053f4:	21000044 	addi	r4,r4,1
 40053f8:	11000005 	stb	r4,0(r2)
 40053fc:	8009883a 	mov	r4,r16
 4005400:	a80b883a 	mov	r5,r21
 4005404:	4007e0c0 	call	4007e0c <_Bfree>
 4005408:	883e7526 	beq	r17,zero,4004de0 <__alt_data_end+0xfe004de0>
 400540c:	90000426 	beq	r18,zero,4005420 <_dtoa_r+0xcf8>
 4005410:	94400326 	beq	r18,r17,4005420 <_dtoa_r+0xcf8>
 4005414:	8009883a 	mov	r4,r16
 4005418:	900b883a 	mov	r5,r18
 400541c:	4007e0c0 	call	4007e0c <_Bfree>
 4005420:	8009883a 	mov	r4,r16
 4005424:	880b883a 	mov	r5,r17
 4005428:	4007e0c0 	call	4007e0c <_Bfree>
 400542c:	003e6c06 	br	4004de0 <__alt_data_end+0xfe004de0>
 4005430:	00800704 	movi	r2,28
 4005434:	d9800817 	ldw	r6,32(sp)
 4005438:	a0a9883a 	add	r20,r20,r2
 400543c:	b0ad883a 	add	r22,r22,r2
 4005440:	308d883a 	add	r6,r6,r2
 4005444:	d9800815 	stw	r6,32(sp)
 4005448:	003fa506 	br	40052e0 <__alt_data_end+0xfe0052e0>
 400544c:	013efb84 	movi	r4,-1042
 4005450:	246bc83a 	sub	r21,r4,r17
 4005454:	9548983a 	sll	r4,r18,r21
 4005458:	003d1806 	br	40048bc <__alt_data_end+0xfe0048bc>
 400545c:	d8000c15 	stw	zero,48(sp)
 4005460:	003d5b06 	br	40049d0 <__alt_data_end+0xfe0049d0>
 4005464:	880b883a 	mov	r5,r17
 4005468:	8009883a 	mov	r4,r16
 400546c:	01800284 	movi	r6,10
 4005470:	000f883a 	mov	r7,zero
 4005474:	4007e340 	call	4007e34 <__multadd>
 4005478:	1023883a 	mov	r17,r2
 400547c:	d8800d17 	ldw	r2,52(sp)
 4005480:	0082550e 	bge	zero,r2,4005dd8 <_dtoa_r+0x16b0>
 4005484:	d8800615 	stw	r2,24(sp)
 4005488:	0500050e 	bge	zero,r20,40054a0 <_dtoa_r+0xd78>
 400548c:	880b883a 	mov	r5,r17
 4005490:	8009883a 	mov	r4,r16
 4005494:	a00d883a 	mov	r6,r20
 4005498:	40085980 	call	4008598 <__lshift>
 400549c:	1023883a 	mov	r17,r2
 40054a0:	98016a1e 	bne	r19,zero,4005a4c <_dtoa_r+0x1324>
 40054a4:	8829883a 	mov	r20,r17
 40054a8:	d9000617 	ldw	r4,24(sp)
 40054ac:	dcc00717 	ldw	r19,28(sp)
 40054b0:	9480004c 	andi	r18,r18,1
 40054b4:	20bfffc4 	addi	r2,r4,-1
 40054b8:	9885883a 	add	r2,r19,r2
 40054bc:	d8800415 	stw	r2,16(sp)
 40054c0:	dc800615 	stw	r18,24(sp)
 40054c4:	e009883a 	mov	r4,fp
 40054c8:	a80b883a 	mov	r5,r21
 40054cc:	40045000 	call	4004500 <quorem>
 40054d0:	e009883a 	mov	r4,fp
 40054d4:	880b883a 	mov	r5,r17
 40054d8:	102f883a 	mov	r23,r2
 40054dc:	40086e00 	call	40086e0 <__mcmp>
 40054e0:	8009883a 	mov	r4,r16
 40054e4:	a80b883a 	mov	r5,r21
 40054e8:	a00d883a 	mov	r6,r20
 40054ec:	102d883a 	mov	r22,r2
 40054f0:	40087400 	call	4008740 <__mdiff>
 40054f4:	1007883a 	mov	r3,r2
 40054f8:	10800317 	ldw	r2,12(r2)
 40054fc:	bc800c04 	addi	r18,r23,48
 4005500:	1000971e 	bne	r2,zero,4005760 <_dtoa_r+0x1038>
 4005504:	180b883a 	mov	r5,r3
 4005508:	e009883a 	mov	r4,fp
 400550c:	d8c01515 	stw	r3,84(sp)
 4005510:	40086e00 	call	40086e0 <__mcmp>
 4005514:	d8c01517 	ldw	r3,84(sp)
 4005518:	8009883a 	mov	r4,r16
 400551c:	d8801515 	stw	r2,84(sp)
 4005520:	180b883a 	mov	r5,r3
 4005524:	4007e0c0 	call	4007e0c <_Bfree>
 4005528:	d8801517 	ldw	r2,84(sp)
 400552c:	1000041e 	bne	r2,zero,4005540 <_dtoa_r+0xe18>
 4005530:	d9800317 	ldw	r6,12(sp)
 4005534:	3000021e 	bne	r6,zero,4005540 <_dtoa_r+0xe18>
 4005538:	d8c00617 	ldw	r3,24(sp)
 400553c:	18007626 	beq	r3,zero,4005718 <_dtoa_r+0xff0>
 4005540:	b0005b16 	blt	r22,zero,40056b0 <_dtoa_r+0xf88>
 4005544:	b000041e 	bne	r22,zero,4005558 <_dtoa_r+0xe30>
 4005548:	d9000317 	ldw	r4,12(sp)
 400554c:	2000021e 	bne	r4,zero,4005558 <_dtoa_r+0xe30>
 4005550:	d8c00617 	ldw	r3,24(sp)
 4005554:	18005626 	beq	r3,zero,40056b0 <_dtoa_r+0xf88>
 4005558:	00814d16 	blt	zero,r2,4005a90 <_dtoa_r+0x1368>
 400555c:	d8c00417 	ldw	r3,16(sp)
 4005560:	9d800044 	addi	r22,r19,1
 4005564:	9c800005 	stb	r18,0(r19)
 4005568:	b02f883a 	mov	r23,r22
 400556c:	98c14c26 	beq	r19,r3,4005aa0 <_dtoa_r+0x1378>
 4005570:	e00b883a 	mov	r5,fp
 4005574:	8009883a 	mov	r4,r16
 4005578:	01800284 	movi	r6,10
 400557c:	000f883a 	mov	r7,zero
 4005580:	4007e340 	call	4007e34 <__multadd>
 4005584:	1039883a 	mov	fp,r2
 4005588:	8d006d26 	beq	r17,r20,4005740 <_dtoa_r+0x1018>
 400558c:	880b883a 	mov	r5,r17
 4005590:	01800284 	movi	r6,10
 4005594:	000f883a 	mov	r7,zero
 4005598:	8009883a 	mov	r4,r16
 400559c:	4007e340 	call	4007e34 <__multadd>
 40055a0:	a00b883a 	mov	r5,r20
 40055a4:	8009883a 	mov	r4,r16
 40055a8:	01800284 	movi	r6,10
 40055ac:	000f883a 	mov	r7,zero
 40055b0:	1023883a 	mov	r17,r2
 40055b4:	4007e340 	call	4007e34 <__multadd>
 40055b8:	1029883a 	mov	r20,r2
 40055bc:	b027883a 	mov	r19,r22
 40055c0:	003fc006 	br	40054c4 <__alt_data_end+0xfe0054c4>
 40055c4:	a005883a 	mov	r2,r20
 40055c8:	003ede06 	br	4005144 <__alt_data_end+0xfe005144>
 40055cc:	01000044 	movi	r4,1
 40055d0:	d9000b15 	stw	r4,44(sp)
 40055d4:	d9802217 	ldw	r6,136(sp)
 40055d8:	0180dc0e 	bge	zero,r6,400594c <_dtoa_r+0x1224>
 40055dc:	3023883a 	mov	r17,r6
 40055e0:	d9800d15 	stw	r6,52(sp)
 40055e4:	d9800615 	stw	r6,24(sp)
 40055e8:	003d1e06 	br	4004a64 <__alt_data_end+0xfe004a64>
 40055ec:	d8800617 	ldw	r2,24(sp)
 40055f0:	00be3716 	blt	zero,r2,4004ed0 <__alt_data_end+0xfe004ed0>
 40055f4:	1000be1e 	bne	r2,zero,40058f0 <_dtoa_r+0x11c8>
 40055f8:	8809883a 	mov	r4,r17
 40055fc:	a00b883a 	mov	r5,r20
 4005600:	000d883a 	mov	r6,zero
 4005604:	01d00534 	movhi	r7,16404
 4005608:	400d6ac0 	call	400d6ac <__muldf3>
 400560c:	1009883a 	mov	r4,r2
 4005610:	180b883a 	mov	r5,r3
 4005614:	900d883a 	mov	r6,r18
 4005618:	980f883a 	mov	r7,r19
 400561c:	400d4ec0 	call	400d4ec <__gedf2>
 4005620:	002b883a 	mov	r21,zero
 4005624:	0023883a 	mov	r17,zero
 4005628:	10007a16 	blt	r2,zero,4005814 <_dtoa_r+0x10ec>
 400562c:	d9002217 	ldw	r4,136(sp)
 4005630:	ddc00717 	ldw	r23,28(sp)
 4005634:	0108303a 	nor	r4,zero,r4
 4005638:	d9000515 	stw	r4,20(sp)
 400563c:	8009883a 	mov	r4,r16
 4005640:	a80b883a 	mov	r5,r21
 4005644:	4007e0c0 	call	4007e0c <_Bfree>
 4005648:	883f751e 	bne	r17,zero,4005420 <__alt_data_end+0xfe005420>
 400564c:	003de406 	br	4004de0 <__alt_data_end+0xfe004de0>
 4005650:	e00b883a 	mov	r5,fp
 4005654:	8009883a 	mov	r4,r16
 4005658:	40084580 	call	4008458 <__pow5mult>
 400565c:	1039883a 	mov	fp,r2
 4005660:	003ed306 	br	40051b0 <__alt_data_end+0xfe0051b0>
 4005664:	903ee01e 	bne	r18,zero,40051e8 <__alt_data_end+0xfe0051e8>
 4005668:	00800434 	movhi	r2,16
 400566c:	10bfffc4 	addi	r2,r2,-1
 4005670:	9884703a 	and	r2,r19,r2
 4005674:	103f081e 	bne	r2,zero,4005298 <__alt_data_end+0xfe005298>
 4005678:	9cdffc2c 	andhi	r19,r19,32752
 400567c:	983f0626 	beq	r19,zero,4005298 <__alt_data_end+0xfe005298>
 4005680:	d8800817 	ldw	r2,32(sp)
 4005684:	b5800044 	addi	r22,r22,1
 4005688:	04c00044 	movi	r19,1
 400568c:	10800044 	addi	r2,r2,1
 4005690:	d8800815 	stw	r2,32(sp)
 4005694:	003f0106 	br	400529c <__alt_data_end+0xfe00529c>
 4005698:	d9800f17 	ldw	r6,60(sp)
 400569c:	30016826 	beq	r6,zero,4005c40 <_dtoa_r+0x1518>
 40056a0:	10810cc4 	addi	r2,r2,1075
 40056a4:	dd400917 	ldw	r21,36(sp)
 40056a8:	dd000817 	ldw	r20,32(sp)
 40056ac:	003e9906 	br	4005114 <__alt_data_end+0xfe005114>
 40056b0:	9011883a 	mov	r8,r18
 40056b4:	4007883a 	mov	r3,r8
 40056b8:	e02d883a 	mov	r22,fp
 40056bc:	0080100e 	bge	zero,r2,4005700 <_dtoa_r+0xfd8>
 40056c0:	01800044 	movi	r6,1
 40056c4:	8009883a 	mov	r4,r16
 40056c8:	e00b883a 	mov	r5,fp
 40056cc:	da001515 	stw	r8,84(sp)
 40056d0:	da001715 	stw	r8,92(sp)
 40056d4:	40085980 	call	4008598 <__lshift>
 40056d8:	1009883a 	mov	r4,r2
 40056dc:	a80b883a 	mov	r5,r21
 40056e0:	102d883a 	mov	r22,r2
 40056e4:	40086e00 	call	40086e0 <__mcmp>
 40056e8:	d8c01517 	ldw	r3,84(sp)
 40056ec:	da001717 	ldw	r8,92(sp)
 40056f0:	0081a50e 	bge	zero,r2,4005d88 <_dtoa_r+0x1660>
 40056f4:	00800e44 	movi	r2,57
 40056f8:	40817b26 	beq	r8,r2,4005ce8 <_dtoa_r+0x15c0>
 40056fc:	40c00044 	addi	r3,r8,1
 4005700:	8825883a 	mov	r18,r17
 4005704:	9dc00044 	addi	r23,r19,1
 4005708:	98c00005 	stb	r3,0(r19)
 400570c:	a023883a 	mov	r17,r20
 4005710:	b039883a 	mov	fp,r22
 4005714:	003f3906 	br	40053fc <__alt_data_end+0xfe0053fc>
 4005718:	00800e44 	movi	r2,57
 400571c:	9011883a 	mov	r8,r18
 4005720:	90817226 	beq	r18,r2,4005cec <_dtoa_r+0x15c4>
 4005724:	0580010e 	bge	zero,r22,400572c <_dtoa_r+0x1004>
 4005728:	ba000c44 	addi	r8,r23,49
 400572c:	8825883a 	mov	r18,r17
 4005730:	9dc00044 	addi	r23,r19,1
 4005734:	9a000005 	stb	r8,0(r19)
 4005738:	a023883a 	mov	r17,r20
 400573c:	003f2f06 	br	40053fc <__alt_data_end+0xfe0053fc>
 4005740:	880b883a 	mov	r5,r17
 4005744:	8009883a 	mov	r4,r16
 4005748:	01800284 	movi	r6,10
 400574c:	000f883a 	mov	r7,zero
 4005750:	4007e340 	call	4007e34 <__multadd>
 4005754:	1023883a 	mov	r17,r2
 4005758:	1029883a 	mov	r20,r2
 400575c:	003f9706 	br	40055bc <__alt_data_end+0xfe0055bc>
 4005760:	8009883a 	mov	r4,r16
 4005764:	180b883a 	mov	r5,r3
 4005768:	4007e0c0 	call	4007e0c <_Bfree>
 400576c:	00800044 	movi	r2,1
 4005770:	003f7306 	br	4005540 <__alt_data_end+0xfe005540>
 4005774:	e009883a 	mov	r4,fp
 4005778:	a80b883a 	mov	r5,r21
 400577c:	40086e00 	call	40086e0 <__mcmp>
 4005780:	103ee60e 	bge	r2,zero,400531c <__alt_data_end+0xfe00531c>
 4005784:	8009883a 	mov	r4,r16
 4005788:	e00b883a 	mov	r5,fp
 400578c:	01800284 	movi	r6,10
 4005790:	000f883a 	mov	r7,zero
 4005794:	4007e340 	call	4007e34 <__multadd>
 4005798:	d9000517 	ldw	r4,20(sp)
 400579c:	d9800b17 	ldw	r6,44(sp)
 40057a0:	1039883a 	mov	fp,r2
 40057a4:	213fffc4 	addi	r4,r4,-1
 40057a8:	d9000515 	stw	r4,20(sp)
 40057ac:	303f2d1e 	bne	r6,zero,4005464 <__alt_data_end+0xfe005464>
 40057b0:	d9000d17 	ldw	r4,52(sp)
 40057b4:	0101780e 	bge	zero,r4,4005d98 <_dtoa_r+0x1670>
 40057b8:	d9000615 	stw	r4,24(sp)
 40057bc:	003edb06 	br	400532c <__alt_data_end+0xfe00532c>
 40057c0:	00800084 	movi	r2,2
 40057c4:	30818e1e 	bne	r6,r2,4005e00 <_dtoa_r+0x16d8>
 40057c8:	d8000b15 	stw	zero,44(sp)
 40057cc:	003f8106 	br	40055d4 <__alt_data_end+0xfe0055d4>
 40057d0:	d8800717 	ldw	r2,28(sp)
 40057d4:	003c0306 	br	40047e4 <__alt_data_end+0xfe0047e4>
 40057d8:	d9000317 	ldw	r4,12(sp)
 40057dc:	00800084 	movi	r2,2
 40057e0:	113ed00e 	bge	r2,r4,4005324 <__alt_data_end+0xfe005324>
 40057e4:	d8c00617 	ldw	r3,24(sp)
 40057e8:	183f901e 	bne	r3,zero,400562c <__alt_data_end+0xfe00562c>
 40057ec:	a80b883a 	mov	r5,r21
 40057f0:	8009883a 	mov	r4,r16
 40057f4:	01800144 	movi	r6,5
 40057f8:	000f883a 	mov	r7,zero
 40057fc:	4007e340 	call	4007e34 <__multadd>
 4005800:	e009883a 	mov	r4,fp
 4005804:	100b883a 	mov	r5,r2
 4005808:	102b883a 	mov	r21,r2
 400580c:	40086e00 	call	40086e0 <__mcmp>
 4005810:	00bf860e 	bge	zero,r2,400562c <__alt_data_end+0xfe00562c>
 4005814:	d9800717 	ldw	r6,28(sp)
 4005818:	00800c44 	movi	r2,49
 400581c:	30800005 	stb	r2,0(r6)
 4005820:	d8800517 	ldw	r2,20(sp)
 4005824:	35c00044 	addi	r23,r6,1
 4005828:	10800044 	addi	r2,r2,1
 400582c:	d8800515 	stw	r2,20(sp)
 4005830:	003f8206 	br	400563c <__alt_data_end+0xfe00563c>
 4005834:	903e981e 	bne	r18,zero,4005298 <__alt_data_end+0xfe005298>
 4005838:	003f8b06 	br	4005668 <__alt_data_end+0xfe005668>
 400583c:	d9800517 	ldw	r6,20(sp)
 4005840:	d8c00717 	ldw	r3,28(sp)
 4005844:	00800c44 	movi	r2,49
 4005848:	31800044 	addi	r6,r6,1
 400584c:	d9800515 	stw	r6,20(sp)
 4005850:	18800005 	stb	r2,0(r3)
 4005854:	003ee906 	br	40053fc <__alt_data_end+0xfe0053fc>
 4005858:	dc000317 	ldw	r16,12(sp)
 400585c:	003d6006 	br	4004de0 <__alt_data_end+0xfe004de0>
 4005860:	8809883a 	mov	r4,r17
 4005864:	400e8700 	call	400e870 <__floatsidf>
 4005868:	a009883a 	mov	r4,r20
 400586c:	a80b883a 	mov	r5,r21
 4005870:	100d883a 	mov	r6,r2
 4005874:	180f883a 	mov	r7,r3
 4005878:	400d6ac0 	call	400d6ac <__muldf3>
 400587c:	1009883a 	mov	r4,r2
 4005880:	180b883a 	mov	r5,r3
 4005884:	000d883a 	mov	r6,zero
 4005888:	01d00734 	movhi	r7,16412
 400588c:	400c24c0 	call	400c24c <__adddf3>
 4005890:	1023883a 	mov	r17,r2
 4005894:	00bf3034 	movhi	r2,64704
 4005898:	1885883a 	add	r2,r3,r2
 400589c:	d8800e15 	stw	r2,56(sp)
 40058a0:	a009883a 	mov	r4,r20
 40058a4:	a80b883a 	mov	r5,r21
 40058a8:	000d883a 	mov	r6,zero
 40058ac:	01d00534 	movhi	r7,16404
 40058b0:	400df180 	call	400df18 <__subdf3>
 40058b4:	d9c00e17 	ldw	r7,56(sp)
 40058b8:	1009883a 	mov	r4,r2
 40058bc:	180b883a 	mov	r5,r3
 40058c0:	880d883a 	mov	r6,r17
 40058c4:	102b883a 	mov	r21,r2
 40058c8:	1829883a 	mov	r20,r3
 40058cc:	400d4ec0 	call	400d4ec <__gedf2>
 40058d0:	00807716 	blt	zero,r2,4005ab0 <_dtoa_r+0x1388>
 40058d4:	d8800e17 	ldw	r2,56(sp)
 40058d8:	a809883a 	mov	r4,r21
 40058dc:	a00b883a 	mov	r5,r20
 40058e0:	11e0003c 	xorhi	r7,r2,32768
 40058e4:	880d883a 	mov	r6,r17
 40058e8:	400d5cc0 	call	400d5cc <__ledf2>
 40058ec:	103d6b0e 	bge	r2,zero,4004e9c <__alt_data_end+0xfe004e9c>
 40058f0:	002b883a 	mov	r21,zero
 40058f4:	0023883a 	mov	r17,zero
 40058f8:	003f4c06 	br	400562c <__alt_data_end+0xfe00562c>
 40058fc:	d9800917 	ldw	r6,36(sp)
 4005900:	e00b883a 	mov	r5,fp
 4005904:	8009883a 	mov	r4,r16
 4005908:	40084580 	call	4008458 <__pow5mult>
 400590c:	1039883a 	mov	fp,r2
 4005910:	003e2706 	br	40051b0 <__alt_data_end+0xfe0051b0>
 4005914:	d8000b15 	stw	zero,44(sp)
 4005918:	003c4906 	br	4004a40 <__alt_data_end+0xfe004a40>
 400591c:	d9000917 	ldw	r4,36(sp)
 4005920:	d9800a17 	ldw	r6,40(sp)
 4005924:	dd400915 	stw	r21,36(sp)
 4005928:	a905c83a 	sub	r2,r21,r4
 400592c:	308d883a 	add	r6,r6,r2
 4005930:	d9800a15 	stw	r6,40(sp)
 4005934:	002b883a 	mov	r21,zero
 4005938:	003df206 	br	4005104 <__alt_data_end+0xfe005104>
 400593c:	dc800e15 	stw	r18,56(sp)
 4005940:	982b883a 	mov	r21,r19
 4005944:	04400084 	movi	r17,2
 4005948:	003c7406 	br	4004b1c <__alt_data_end+0xfe004b1c>
 400594c:	04400044 	movi	r17,1
 4005950:	dc400d15 	stw	r17,52(sp)
 4005954:	dc400615 	stw	r17,24(sp)
 4005958:	dc402215 	stw	r17,136(sp)
 400595c:	80001115 	stw	zero,68(r16)
 4005960:	000b883a 	mov	r5,zero
 4005964:	003c4a06 	br	4004a90 <__alt_data_end+0xfe004a90>
 4005968:	3023883a 	mov	r17,r6
 400596c:	003ffb06 	br	400595c <__alt_data_end+0xfe00595c>
 4005970:	1000021e 	bne	r2,zero,400597c <_dtoa_r+0x1254>
 4005974:	4200004c 	andi	r8,r8,1
 4005978:	403e8f1e 	bne	r8,zero,40053b8 <__alt_data_end+0xfe0053b8>
 400597c:	01000c04 	movi	r4,48
 4005980:	00000106 	br	4005988 <_dtoa_r+0x1260>
 4005984:	102f883a 	mov	r23,r2
 4005988:	b8bfffc4 	addi	r2,r23,-1
 400598c:	10c00007 	ldb	r3,0(r2)
 4005990:	193ffc26 	beq	r3,r4,4005984 <__alt_data_end+0xfe005984>
 4005994:	003e9906 	br	40053fc <__alt_data_end+0xfe0053fc>
 4005998:	d9000517 	ldw	r4,20(sp)
 400599c:	012fc83a 	sub	r23,zero,r4
 40059a0:	b800ad26 	beq	r23,zero,4005c58 <_dtoa_r+0x1530>
 40059a4:	b88003cc 	andi	r2,r23,15
 40059a8:	100490fa 	slli	r2,r2,3
 40059ac:	00c10074 	movhi	r3,1025
 40059b0:	18c6bc04 	addi	r3,r3,6896
 40059b4:	1885883a 	add	r2,r3,r2
 40059b8:	11800017 	ldw	r6,0(r2)
 40059bc:	11c00117 	ldw	r7,4(r2)
 40059c0:	b82fd13a 	srai	r23,r23,4
 40059c4:	9009883a 	mov	r4,r18
 40059c8:	980b883a 	mov	r5,r19
 40059cc:	400d6ac0 	call	400d6ac <__muldf3>
 40059d0:	1029883a 	mov	r20,r2
 40059d4:	182b883a 	mov	r21,r3
 40059d8:	b800f426 	beq	r23,zero,4005dac <_dtoa_r+0x1684>
 40059dc:	02010074 	movhi	r8,1025
 40059e0:	4206b204 	addi	r8,r8,6856
 40059e4:	8029883a 	mov	r20,r16
 40059e8:	04400084 	movi	r17,2
 40059ec:	4021883a 	mov	r16,r8
 40059f0:	b980004c 	andi	r6,r23,1
 40059f4:	1009883a 	mov	r4,r2
 40059f8:	b82fd07a 	srai	r23,r23,1
 40059fc:	180b883a 	mov	r5,r3
 4005a00:	30000426 	beq	r6,zero,4005a14 <_dtoa_r+0x12ec>
 4005a04:	81800017 	ldw	r6,0(r16)
 4005a08:	81c00117 	ldw	r7,4(r16)
 4005a0c:	8c400044 	addi	r17,r17,1
 4005a10:	400d6ac0 	call	400d6ac <__muldf3>
 4005a14:	84000204 	addi	r16,r16,8
 4005a18:	b83ff51e 	bne	r23,zero,40059f0 <__alt_data_end+0xfe0059f0>
 4005a1c:	a021883a 	mov	r16,r20
 4005a20:	182b883a 	mov	r21,r3
 4005a24:	1029883a 	mov	r20,r2
 4005a28:	003c5506 	br	4004b80 <__alt_data_end+0xfe004b80>
 4005a2c:	d9800517 	ldw	r6,20(sp)
 4005a30:	d9000717 	ldw	r4,28(sp)
 4005a34:	00c00c04 	movi	r3,48
 4005a38:	31800044 	addi	r6,r6,1
 4005a3c:	d9800515 	stw	r6,20(sp)
 4005a40:	20c00005 	stb	r3,0(r4)
 4005a44:	02000c44 	movi	r8,49
 4005a48:	003da206 	br	40050d4 <__alt_data_end+0xfe0050d4>
 4005a4c:	89400117 	ldw	r5,4(r17)
 4005a50:	8009883a 	mov	r4,r16
 4005a54:	4007d640 	call	4007d64 <_Balloc>
 4005a58:	89800417 	ldw	r6,16(r17)
 4005a5c:	11000304 	addi	r4,r2,12
 4005a60:	89400304 	addi	r5,r17,12
 4005a64:	31800084 	addi	r6,r6,2
 4005a68:	318d883a 	add	r6,r6,r6
 4005a6c:	318d883a 	add	r6,r6,r6
 4005a70:	1027883a 	mov	r19,r2
 4005a74:	40079ac0 	call	40079ac <memcpy>
 4005a78:	8009883a 	mov	r4,r16
 4005a7c:	980b883a 	mov	r5,r19
 4005a80:	01800044 	movi	r6,1
 4005a84:	40085980 	call	4008598 <__lshift>
 4005a88:	1029883a 	mov	r20,r2
 4005a8c:	003e8606 	br	40054a8 <__alt_data_end+0xfe0054a8>
 4005a90:	00800e44 	movi	r2,57
 4005a94:	90809526 	beq	r18,r2,4005cec <_dtoa_r+0x15c4>
 4005a98:	92000044 	addi	r8,r18,1
 4005a9c:	003f2306 	br	400572c <__alt_data_end+0xfe00572c>
 4005aa0:	9011883a 	mov	r8,r18
 4005aa4:	8825883a 	mov	r18,r17
 4005aa8:	a023883a 	mov	r17,r20
 4005aac:	003e3706 	br	400538c <__alt_data_end+0xfe00538c>
 4005ab0:	002b883a 	mov	r21,zero
 4005ab4:	0023883a 	mov	r17,zero
 4005ab8:	003f5606 	br	4005814 <__alt_data_end+0xfe005814>
 4005abc:	51bfffc4 	addi	r6,r10,-1
 4005ac0:	300490fa 	slli	r2,r6,3
 4005ac4:	00c10074 	movhi	r3,1025
 4005ac8:	18c6bc04 	addi	r3,r3,6896
 4005acc:	1885883a 	add	r2,r3,r2
 4005ad0:	d9c00e17 	ldw	r7,56(sp)
 4005ad4:	11000017 	ldw	r4,0(r2)
 4005ad8:	11400117 	ldw	r5,4(r2)
 4005adc:	d8800717 	ldw	r2,28(sp)
 4005ae0:	d9801015 	stw	r6,64(sp)
 4005ae4:	880d883a 	mov	r6,r17
 4005ae8:	da801615 	stw	r10,88(sp)
 4005aec:	15c00044 	addi	r23,r2,1
 4005af0:	400d6ac0 	call	400d6ac <__muldf3>
 4005af4:	a80b883a 	mov	r5,r21
 4005af8:	a009883a 	mov	r4,r20
 4005afc:	d8c01115 	stw	r3,68(sp)
 4005b00:	d8800e15 	stw	r2,56(sp)
 4005b04:	400e7e80 	call	400e7e8 <__fixdfsi>
 4005b08:	1009883a 	mov	r4,r2
 4005b0c:	1023883a 	mov	r17,r2
 4005b10:	400e8700 	call	400e870 <__floatsidf>
 4005b14:	a009883a 	mov	r4,r20
 4005b18:	a80b883a 	mov	r5,r21
 4005b1c:	100d883a 	mov	r6,r2
 4005b20:	180f883a 	mov	r7,r3
 4005b24:	400df180 	call	400df18 <__subdf3>
 4005b28:	1813883a 	mov	r9,r3
 4005b2c:	d8c00717 	ldw	r3,28(sp)
 4005b30:	8c400c04 	addi	r17,r17,48
 4005b34:	1011883a 	mov	r8,r2
 4005b38:	1c400005 	stb	r17,0(r3)
 4005b3c:	da801617 	ldw	r10,88(sp)
 4005b40:	00800044 	movi	r2,1
 4005b44:	50802326 	beq	r10,r2,4005bd4 <_dtoa_r+0x14ac>
 4005b48:	d8800717 	ldw	r2,28(sp)
 4005b4c:	b82b883a 	mov	r21,r23
 4005b50:	dc001315 	stw	r16,76(sp)
 4005b54:	12a9883a 	add	r20,r2,r10
 4005b58:	4807883a 	mov	r3,r9
 4005b5c:	4005883a 	mov	r2,r8
 4005b60:	dc801415 	stw	r18,80(sp)
 4005b64:	000d883a 	mov	r6,zero
 4005b68:	01d00934 	movhi	r7,16420
 4005b6c:	1009883a 	mov	r4,r2
 4005b70:	180b883a 	mov	r5,r3
 4005b74:	400d6ac0 	call	400d6ac <__muldf3>
 4005b78:	180b883a 	mov	r5,r3
 4005b7c:	1009883a 	mov	r4,r2
 4005b80:	1821883a 	mov	r16,r3
 4005b84:	1025883a 	mov	r18,r2
 4005b88:	400e7e80 	call	400e7e8 <__fixdfsi>
 4005b8c:	1009883a 	mov	r4,r2
 4005b90:	1023883a 	mov	r17,r2
 4005b94:	400e8700 	call	400e870 <__floatsidf>
 4005b98:	9009883a 	mov	r4,r18
 4005b9c:	800b883a 	mov	r5,r16
 4005ba0:	100d883a 	mov	r6,r2
 4005ba4:	180f883a 	mov	r7,r3
 4005ba8:	8c400c04 	addi	r17,r17,48
 4005bac:	400df180 	call	400df18 <__subdf3>
 4005bb0:	ad400044 	addi	r21,r21,1
 4005bb4:	ac7fffc5 	stb	r17,-1(r21)
 4005bb8:	ad3fea1e 	bne	r21,r20,4005b64 <__alt_data_end+0xfe005b64>
 4005bbc:	1813883a 	mov	r9,r3
 4005bc0:	d8c01017 	ldw	r3,64(sp)
 4005bc4:	dc001317 	ldw	r16,76(sp)
 4005bc8:	dc801417 	ldw	r18,80(sp)
 4005bcc:	1011883a 	mov	r8,r2
 4005bd0:	b8ef883a 	add	r23,r23,r3
 4005bd4:	d9000e17 	ldw	r4,56(sp)
 4005bd8:	d9401117 	ldw	r5,68(sp)
 4005bdc:	000d883a 	mov	r6,zero
 4005be0:	01cff834 	movhi	r7,16352
 4005be4:	da001715 	stw	r8,92(sp)
 4005be8:	da401515 	stw	r9,84(sp)
 4005bec:	400c24c0 	call	400c24c <__adddf3>
 4005bf0:	da001717 	ldw	r8,92(sp)
 4005bf4:	da401517 	ldw	r9,84(sp)
 4005bf8:	1009883a 	mov	r4,r2
 4005bfc:	400d883a 	mov	r6,r8
 4005c00:	480f883a 	mov	r7,r9
 4005c04:	180b883a 	mov	r5,r3
 4005c08:	400d5cc0 	call	400d5cc <__ledf2>
 4005c0c:	da001717 	ldw	r8,92(sp)
 4005c10:	da401517 	ldw	r9,84(sp)
 4005c14:	10003b0e 	bge	r2,zero,4005d04 <_dtoa_r+0x15dc>
 4005c18:	d9001217 	ldw	r4,72(sp)
 4005c1c:	bd7fffc3 	ldbu	r21,-1(r23)
 4005c20:	d9000515 	stw	r4,20(sp)
 4005c24:	003d1c06 	br	4005098 <__alt_data_end+0xfe005098>
 4005c28:	d8c00817 	ldw	r3,32(sp)
 4005c2c:	18a9c83a 	sub	r20,r3,r2
 4005c30:	0005883a 	mov	r2,zero
 4005c34:	003d3706 	br	4005114 <__alt_data_end+0xfe005114>
 4005c38:	00800044 	movi	r2,1
 4005c3c:	003dd006 	br	4005380 <__alt_data_end+0xfe005380>
 4005c40:	d8c00217 	ldw	r3,8(sp)
 4005c44:	00800d84 	movi	r2,54
 4005c48:	dd400917 	ldw	r21,36(sp)
 4005c4c:	10c5c83a 	sub	r2,r2,r3
 4005c50:	dd000817 	ldw	r20,32(sp)
 4005c54:	003d2f06 	br	4005114 <__alt_data_end+0xfe005114>
 4005c58:	9029883a 	mov	r20,r18
 4005c5c:	982b883a 	mov	r21,r19
 4005c60:	04400084 	movi	r17,2
 4005c64:	003bc606 	br	4004b80 <__alt_data_end+0xfe004b80>
 4005c68:	d8800617 	ldw	r2,24(sp)
 4005c6c:	103efc26 	beq	r2,zero,4005860 <__alt_data_end+0xfe005860>
 4005c70:	d8c00d17 	ldw	r3,52(sp)
 4005c74:	00fc890e 	bge	zero,r3,4004e9c <__alt_data_end+0xfe004e9c>
 4005c78:	a80b883a 	mov	r5,r21
 4005c7c:	a009883a 	mov	r4,r20
 4005c80:	000d883a 	mov	r6,zero
 4005c84:	01d00934 	movhi	r7,16420
 4005c88:	400d6ac0 	call	400d6ac <__muldf3>
 4005c8c:	89000044 	addi	r4,r17,1
 4005c90:	1029883a 	mov	r20,r2
 4005c94:	182b883a 	mov	r21,r3
 4005c98:	400e8700 	call	400e870 <__floatsidf>
 4005c9c:	a009883a 	mov	r4,r20
 4005ca0:	a80b883a 	mov	r5,r21
 4005ca4:	100d883a 	mov	r6,r2
 4005ca8:	180f883a 	mov	r7,r3
 4005cac:	400d6ac0 	call	400d6ac <__muldf3>
 4005cb0:	1009883a 	mov	r4,r2
 4005cb4:	180b883a 	mov	r5,r3
 4005cb8:	000d883a 	mov	r6,zero
 4005cbc:	01d00734 	movhi	r7,16412
 4005cc0:	400c24c0 	call	400c24c <__adddf3>
 4005cc4:	d9000517 	ldw	r4,20(sp)
 4005cc8:	1023883a 	mov	r17,r2
 4005ccc:	00bf3034 	movhi	r2,64704
 4005cd0:	213fffc4 	addi	r4,r4,-1
 4005cd4:	1885883a 	add	r2,r3,r2
 4005cd8:	d9001215 	stw	r4,72(sp)
 4005cdc:	d8800e15 	stw	r2,56(sp)
 4005ce0:	da800d17 	ldw	r10,52(sp)
 4005ce4:	003bc306 	br	4004bf4 <__alt_data_end+0xfe004bf4>
 4005ce8:	b039883a 	mov	fp,r22
 4005cec:	01000e44 	movi	r4,57
 4005cf0:	8825883a 	mov	r18,r17
 4005cf4:	9dc00044 	addi	r23,r19,1
 4005cf8:	99000005 	stb	r4,0(r19)
 4005cfc:	a023883a 	mov	r17,r20
 4005d00:	003dae06 	br	40053bc <__alt_data_end+0xfe0053bc>
 4005d04:	d9800e17 	ldw	r6,56(sp)
 4005d08:	d9c01117 	ldw	r7,68(sp)
 4005d0c:	0009883a 	mov	r4,zero
 4005d10:	014ff834 	movhi	r5,16352
 4005d14:	da001715 	stw	r8,92(sp)
 4005d18:	da401515 	stw	r9,84(sp)
 4005d1c:	400df180 	call	400df18 <__subdf3>
 4005d20:	da001717 	ldw	r8,92(sp)
 4005d24:	da401517 	ldw	r9,84(sp)
 4005d28:	1009883a 	mov	r4,r2
 4005d2c:	180b883a 	mov	r5,r3
 4005d30:	400d883a 	mov	r6,r8
 4005d34:	480f883a 	mov	r7,r9
 4005d38:	400d4ec0 	call	400d4ec <__gedf2>
 4005d3c:	00bc570e 	bge	zero,r2,4004e9c <__alt_data_end+0xfe004e9c>
 4005d40:	01000c04 	movi	r4,48
 4005d44:	00000106 	br	4005d4c <_dtoa_r+0x1624>
 4005d48:	102f883a 	mov	r23,r2
 4005d4c:	b8bfffc4 	addi	r2,r23,-1
 4005d50:	10c00007 	ldb	r3,0(r2)
 4005d54:	193ffc26 	beq	r3,r4,4005d48 <__alt_data_end+0xfe005d48>
 4005d58:	d9801217 	ldw	r6,72(sp)
 4005d5c:	d9800515 	stw	r6,20(sp)
 4005d60:	003c1f06 	br	4004de0 <__alt_data_end+0xfe004de0>
 4005d64:	d8801217 	ldw	r2,72(sp)
 4005d68:	dc001117 	ldw	r16,68(sp)
 4005d6c:	d8800515 	stw	r2,20(sp)
 4005d70:	003cc906 	br	4005098 <__alt_data_end+0xfe005098>
 4005d74:	dd801317 	ldw	r22,76(sp)
 4005d78:	dc001117 	ldw	r16,68(sp)
 4005d7c:	dcc01417 	ldw	r19,80(sp)
 4005d80:	dc801017 	ldw	r18,64(sp)
 4005d84:	003c4506 	br	4004e9c <__alt_data_end+0xfe004e9c>
 4005d88:	103e5d1e 	bne	r2,zero,4005700 <__alt_data_end+0xfe005700>
 4005d8c:	4080004c 	andi	r2,r8,1
 4005d90:	103e5b26 	beq	r2,zero,4005700 <__alt_data_end+0xfe005700>
 4005d94:	003e5706 	br	40056f4 <__alt_data_end+0xfe0056f4>
 4005d98:	d8c00317 	ldw	r3,12(sp)
 4005d9c:	00800084 	movi	r2,2
 4005da0:	10c00a16 	blt	r2,r3,4005dcc <_dtoa_r+0x16a4>
 4005da4:	d9000d17 	ldw	r4,52(sp)
 4005da8:	003e8306 	br	40057b8 <__alt_data_end+0xfe0057b8>
 4005dac:	04400084 	movi	r17,2
 4005db0:	003b7306 	br	4004b80 <__alt_data_end+0xfe004b80>
 4005db4:	d9801217 	ldw	r6,72(sp)
 4005db8:	d9800515 	stw	r6,20(sp)
 4005dbc:	003cb606 	br	4005098 <__alt_data_end+0xfe005098>
 4005dc0:	d9001217 	ldw	r4,72(sp)
 4005dc4:	d9000515 	stw	r4,20(sp)
 4005dc8:	003c0506 	br	4004de0 <__alt_data_end+0xfe004de0>
 4005dcc:	d9800d17 	ldw	r6,52(sp)
 4005dd0:	d9800615 	stw	r6,24(sp)
 4005dd4:	003e8306 	br	40057e4 <__alt_data_end+0xfe0057e4>
 4005dd8:	d9800317 	ldw	r6,12(sp)
 4005ddc:	00800084 	movi	r2,2
 4005de0:	11800216 	blt	r2,r6,4005dec <_dtoa_r+0x16c4>
 4005de4:	d8800d17 	ldw	r2,52(sp)
 4005de8:	003da606 	br	4005484 <__alt_data_end+0xfe005484>
 4005dec:	d8800d17 	ldw	r2,52(sp)
 4005df0:	d8800615 	stw	r2,24(sp)
 4005df4:	003e7b06 	br	40057e4 <__alt_data_end+0xfe0057e4>
 4005df8:	05000044 	movi	r20,1
 4005dfc:	003b0506 	br	4004a14 <__alt_data_end+0xfe004a14>
 4005e00:	8009883a 	mov	r4,r16
 4005e04:	80001115 	stw	zero,68(r16)
 4005e08:	000b883a 	mov	r5,zero
 4005e0c:	4007d640 	call	4007d64 <_Balloc>
 4005e10:	d8800715 	stw	r2,28(sp)
 4005e14:	d8c00717 	ldw	r3,28(sp)
 4005e18:	00bfffc4 	movi	r2,-1
 4005e1c:	01000044 	movi	r4,1
 4005e20:	d8800615 	stw	r2,24(sp)
 4005e24:	80c01015 	stw	r3,64(r16)
 4005e28:	d9000b15 	stw	r4,44(sp)
 4005e2c:	d8002215 	stw	zero,136(sp)
 4005e30:	d8800d15 	stw	r2,52(sp)
 4005e34:	003c1906 	br	4004e9c <__alt_data_end+0xfe004e9c>
 4005e38:	193d2926 	beq	r3,r4,40052e0 <__alt_data_end+0xfe0052e0>
 4005e3c:	00c00f04 	movi	r3,60
 4005e40:	1885c83a 	sub	r2,r3,r2
 4005e44:	003d7b06 	br	4005434 <__alt_data_end+0xfe005434>
 4005e48:	000b883a 	mov	r5,zero
 4005e4c:	003b1006 	br	4004a90 <__alt_data_end+0xfe004a90>

04005e50 <_fflush_r>:
 4005e50:	defffb04 	addi	sp,sp,-20
 4005e54:	dcc00315 	stw	r19,12(sp)
 4005e58:	dc000015 	stw	r16,0(sp)
 4005e5c:	dfc00415 	stw	ra,16(sp)
 4005e60:	dc800215 	stw	r18,8(sp)
 4005e64:	dc400115 	stw	r17,4(sp)
 4005e68:	2027883a 	mov	r19,r4
 4005e6c:	2821883a 	mov	r16,r5
 4005e70:	20000226 	beq	r4,zero,4005e7c <_fflush_r+0x2c>
 4005e74:	20800e17 	ldw	r2,56(r4)
 4005e78:	10005326 	beq	r2,zero,4005fc8 <_fflush_r+0x178>
 4005e7c:	8080030b 	ldhu	r2,12(r16)
 4005e80:	10ffffcc 	andi	r3,r2,65535
 4005e84:	18e0001c 	xori	r3,r3,32768
 4005e88:	18e00004 	addi	r3,r3,-32768
 4005e8c:	18002c26 	beq	r3,zero,4005f40 <_fflush_r+0xf0>
 4005e90:	10c0020c 	andi	r3,r2,8
 4005e94:	1800321e 	bne	r3,zero,4005f60 <_fflush_r+0x110>
 4005e98:	80c00117 	ldw	r3,4(r16)
 4005e9c:	10820014 	ori	r2,r2,2048
 4005ea0:	8080030d 	sth	r2,12(r16)
 4005ea4:	00c0570e 	bge	zero,r3,4006004 <_fflush_r+0x1b4>
 4005ea8:	82000a17 	ldw	r8,40(r16)
 4005eac:	40002426 	beq	r8,zero,4005f40 <_fflush_r+0xf0>
 4005eb0:	9c400017 	ldw	r17,0(r19)
 4005eb4:	10c4000c 	andi	r3,r2,4096
 4005eb8:	98000015 	stw	zero,0(r19)
 4005ebc:	18004626 	beq	r3,zero,4005fd8 <_fflush_r+0x188>
 4005ec0:	81801417 	ldw	r6,80(r16)
 4005ec4:	10c0010c 	andi	r3,r2,4
 4005ec8:	18000626 	beq	r3,zero,4005ee4 <_fflush_r+0x94>
 4005ecc:	80c00117 	ldw	r3,4(r16)
 4005ed0:	80800c17 	ldw	r2,48(r16)
 4005ed4:	30cdc83a 	sub	r6,r6,r3
 4005ed8:	10000226 	beq	r2,zero,4005ee4 <_fflush_r+0x94>
 4005edc:	80800f17 	ldw	r2,60(r16)
 4005ee0:	308dc83a 	sub	r6,r6,r2
 4005ee4:	81400717 	ldw	r5,28(r16)
 4005ee8:	9809883a 	mov	r4,r19
 4005eec:	000f883a 	mov	r7,zero
 4005ef0:	403ee83a 	callr	r8
 4005ef4:	00ffffc4 	movi	r3,-1
 4005ef8:	10c04526 	beq	r2,r3,4006010 <_fflush_r+0x1c0>
 4005efc:	80c0030b 	ldhu	r3,12(r16)
 4005f00:	81000417 	ldw	r4,16(r16)
 4005f04:	80000115 	stw	zero,4(r16)
 4005f08:	197dffcc 	andi	r5,r3,63487
 4005f0c:	8140030d 	sth	r5,12(r16)
 4005f10:	81000015 	stw	r4,0(r16)
 4005f14:	18c4000c 	andi	r3,r3,4096
 4005f18:	18000126 	beq	r3,zero,4005f20 <_fflush_r+0xd0>
 4005f1c:	80801415 	stw	r2,80(r16)
 4005f20:	81400c17 	ldw	r5,48(r16)
 4005f24:	9c400015 	stw	r17,0(r19)
 4005f28:	28000526 	beq	r5,zero,4005f40 <_fflush_r+0xf0>
 4005f2c:	80801004 	addi	r2,r16,64
 4005f30:	28800226 	beq	r5,r2,4005f3c <_fflush_r+0xec>
 4005f34:	9809883a 	mov	r4,r19
 4005f38:	40065800 	call	4006580 <_free_r>
 4005f3c:	80000c15 	stw	zero,48(r16)
 4005f40:	0005883a 	mov	r2,zero
 4005f44:	dfc00417 	ldw	ra,16(sp)
 4005f48:	dcc00317 	ldw	r19,12(sp)
 4005f4c:	dc800217 	ldw	r18,8(sp)
 4005f50:	dc400117 	ldw	r17,4(sp)
 4005f54:	dc000017 	ldw	r16,0(sp)
 4005f58:	dec00504 	addi	sp,sp,20
 4005f5c:	f800283a 	ret
 4005f60:	84800417 	ldw	r18,16(r16)
 4005f64:	903ff626 	beq	r18,zero,4005f40 <__alt_data_end+0xfe005f40>
 4005f68:	84400017 	ldw	r17,0(r16)
 4005f6c:	108000cc 	andi	r2,r2,3
 4005f70:	84800015 	stw	r18,0(r16)
 4005f74:	8ca3c83a 	sub	r17,r17,r18
 4005f78:	10001526 	beq	r2,zero,4005fd0 <_fflush_r+0x180>
 4005f7c:	0005883a 	mov	r2,zero
 4005f80:	80800215 	stw	r2,8(r16)
 4005f84:	04400316 	blt	zero,r17,4005f94 <_fflush_r+0x144>
 4005f88:	003fed06 	br	4005f40 <__alt_data_end+0xfe005f40>
 4005f8c:	90a5883a 	add	r18,r18,r2
 4005f90:	047feb0e 	bge	zero,r17,4005f40 <__alt_data_end+0xfe005f40>
 4005f94:	80800917 	ldw	r2,36(r16)
 4005f98:	81400717 	ldw	r5,28(r16)
 4005f9c:	880f883a 	mov	r7,r17
 4005fa0:	900d883a 	mov	r6,r18
 4005fa4:	9809883a 	mov	r4,r19
 4005fa8:	103ee83a 	callr	r2
 4005fac:	88a3c83a 	sub	r17,r17,r2
 4005fb0:	00bff616 	blt	zero,r2,4005f8c <__alt_data_end+0xfe005f8c>
 4005fb4:	80c0030b 	ldhu	r3,12(r16)
 4005fb8:	00bfffc4 	movi	r2,-1
 4005fbc:	18c01014 	ori	r3,r3,64
 4005fc0:	80c0030d 	sth	r3,12(r16)
 4005fc4:	003fdf06 	br	4005f44 <__alt_data_end+0xfe005f44>
 4005fc8:	400640c0 	call	400640c <__sinit>
 4005fcc:	003fab06 	br	4005e7c <__alt_data_end+0xfe005e7c>
 4005fd0:	80800517 	ldw	r2,20(r16)
 4005fd4:	003fea06 	br	4005f80 <__alt_data_end+0xfe005f80>
 4005fd8:	81400717 	ldw	r5,28(r16)
 4005fdc:	000d883a 	mov	r6,zero
 4005fe0:	9809883a 	mov	r4,r19
 4005fe4:	01c00044 	movi	r7,1
 4005fe8:	403ee83a 	callr	r8
 4005fec:	100d883a 	mov	r6,r2
 4005ff0:	00bfffc4 	movi	r2,-1
 4005ff4:	30801326 	beq	r6,r2,4006044 <_fflush_r+0x1f4>
 4005ff8:	8080030b 	ldhu	r2,12(r16)
 4005ffc:	82000a17 	ldw	r8,40(r16)
 4006000:	003fb006 	br	4005ec4 <__alt_data_end+0xfe005ec4>
 4006004:	80c00f17 	ldw	r3,60(r16)
 4006008:	00ffa716 	blt	zero,r3,4005ea8 <__alt_data_end+0xfe005ea8>
 400600c:	003fcc06 	br	4005f40 <__alt_data_end+0xfe005f40>
 4006010:	98c00017 	ldw	r3,0(r19)
 4006014:	183fb926 	beq	r3,zero,4005efc <__alt_data_end+0xfe005efc>
 4006018:	01000744 	movi	r4,29
 400601c:	19000226 	beq	r3,r4,4006028 <_fflush_r+0x1d8>
 4006020:	01000584 	movi	r4,22
 4006024:	1900101e 	bne	r3,r4,4006068 <_fflush_r+0x218>
 4006028:	8080030b 	ldhu	r2,12(r16)
 400602c:	80c00417 	ldw	r3,16(r16)
 4006030:	80000115 	stw	zero,4(r16)
 4006034:	10bdffcc 	andi	r2,r2,63487
 4006038:	8080030d 	sth	r2,12(r16)
 400603c:	80c00015 	stw	r3,0(r16)
 4006040:	003fb706 	br	4005f20 <__alt_data_end+0xfe005f20>
 4006044:	98800017 	ldw	r2,0(r19)
 4006048:	103feb26 	beq	r2,zero,4005ff8 <__alt_data_end+0xfe005ff8>
 400604c:	00c00744 	movi	r3,29
 4006050:	10c00226 	beq	r2,r3,400605c <_fflush_r+0x20c>
 4006054:	00c00584 	movi	r3,22
 4006058:	10ffd61e 	bne	r2,r3,4005fb4 <__alt_data_end+0xfe005fb4>
 400605c:	9c400015 	stw	r17,0(r19)
 4006060:	0005883a 	mov	r2,zero
 4006064:	003fb706 	br	4005f44 <__alt_data_end+0xfe005f44>
 4006068:	80c0030b 	ldhu	r3,12(r16)
 400606c:	18c01014 	ori	r3,r3,64
 4006070:	80c0030d 	sth	r3,12(r16)
 4006074:	003fb306 	br	4005f44 <__alt_data_end+0xfe005f44>

04006078 <fflush>:
 4006078:	20000526 	beq	r4,zero,4006090 <fflush+0x18>
 400607c:	00810074 	movhi	r2,1025
 4006080:	108def04 	addi	r2,r2,14268
 4006084:	200b883a 	mov	r5,r4
 4006088:	11000017 	ldw	r4,0(r2)
 400608c:	4005e501 	jmpi	4005e50 <_fflush_r>
 4006090:	00810074 	movhi	r2,1025
 4006094:	108dee04 	addi	r2,r2,14264
 4006098:	11000017 	ldw	r4,0(r2)
 400609c:	01410034 	movhi	r5,1024
 40060a0:	29579404 	addi	r5,r5,24144
 40060a4:	4006dcc1 	jmpi	4006dcc <_fwalk_reent>

040060a8 <__fp_lock>:
 40060a8:	0005883a 	mov	r2,zero
 40060ac:	f800283a 	ret

040060b0 <__fp_unlock>:
 40060b0:	0005883a 	mov	r2,zero
 40060b4:	f800283a 	ret

040060b8 <_cleanup_r>:
 40060b8:	01410074 	movhi	r5,1025
 40060bc:	296b7604 	addi	r5,r5,-21032
 40060c0:	4006d141 	jmpi	4006d14 <_fwalk>

040060c4 <__sinit.part.1>:
 40060c4:	defff604 	addi	sp,sp,-40
 40060c8:	00c10034 	movhi	r3,1024
 40060cc:	dfc00915 	stw	ra,36(sp)
 40060d0:	df000815 	stw	fp,32(sp)
 40060d4:	ddc00715 	stw	r23,28(sp)
 40060d8:	dd800615 	stw	r22,24(sp)
 40060dc:	dd400515 	stw	r21,20(sp)
 40060e0:	dd000415 	stw	r20,16(sp)
 40060e4:	dcc00315 	stw	r19,12(sp)
 40060e8:	dc800215 	stw	r18,8(sp)
 40060ec:	dc400115 	stw	r17,4(sp)
 40060f0:	dc000015 	stw	r16,0(sp)
 40060f4:	18d82e04 	addi	r3,r3,24760
 40060f8:	24000117 	ldw	r16,4(r4)
 40060fc:	20c00f15 	stw	r3,60(r4)
 4006100:	07000044 	movi	fp,1
 4006104:	00c000c4 	movi	r3,3
 4006108:	2080bb04 	addi	r2,r4,748
 400610c:	20c0b915 	stw	r3,740(r4)
 4006110:	27000e15 	stw	fp,56(r4)
 4006114:	2080ba15 	stw	r2,744(r4)
 4006118:	2000b815 	stw	zero,736(r4)
 400611c:	05c00204 	movi	r23,8
 4006120:	00800104 	movi	r2,4
 4006124:	2025883a 	mov	r18,r4
 4006128:	b80d883a 	mov	r6,r23
 400612c:	81001704 	addi	r4,r16,92
 4006130:	000b883a 	mov	r5,zero
 4006134:	80000015 	stw	zero,0(r16)
 4006138:	80000115 	stw	zero,4(r16)
 400613c:	80000215 	stw	zero,8(r16)
 4006140:	8080030d 	sth	r2,12(r16)
 4006144:	80001915 	stw	zero,100(r16)
 4006148:	8000038d 	sth	zero,14(r16)
 400614c:	80000415 	stw	zero,16(r16)
 4006150:	80000515 	stw	zero,20(r16)
 4006154:	80000615 	stw	zero,24(r16)
 4006158:	4007c400 	call	4007c40 <memset>
 400615c:	05810074 	movhi	r22,1025
 4006160:	94400217 	ldw	r17,8(r18)
 4006164:	05410074 	movhi	r21,1025
 4006168:	05010074 	movhi	r20,1025
 400616c:	04c10074 	movhi	r19,1025
 4006170:	b5a50504 	addi	r22,r22,-27628
 4006174:	ad651c04 	addi	r21,r21,-27536
 4006178:	a5253b04 	addi	r20,r20,-27412
 400617c:	9ce55204 	addi	r19,r19,-27320
 4006180:	85800815 	stw	r22,32(r16)
 4006184:	85400915 	stw	r21,36(r16)
 4006188:	85000a15 	stw	r20,40(r16)
 400618c:	84c00b15 	stw	r19,44(r16)
 4006190:	84000715 	stw	r16,28(r16)
 4006194:	00800284 	movi	r2,10
 4006198:	89001704 	addi	r4,r17,92
 400619c:	b80d883a 	mov	r6,r23
 40061a0:	000b883a 	mov	r5,zero
 40061a4:	88000015 	stw	zero,0(r17)
 40061a8:	88000115 	stw	zero,4(r17)
 40061ac:	88000215 	stw	zero,8(r17)
 40061b0:	8880030d 	sth	r2,12(r17)
 40061b4:	88001915 	stw	zero,100(r17)
 40061b8:	8f00038d 	sth	fp,14(r17)
 40061bc:	88000415 	stw	zero,16(r17)
 40061c0:	88000515 	stw	zero,20(r17)
 40061c4:	88000615 	stw	zero,24(r17)
 40061c8:	4007c400 	call	4007c40 <memset>
 40061cc:	94000317 	ldw	r16,12(r18)
 40061d0:	00800484 	movi	r2,18
 40061d4:	8c400715 	stw	r17,28(r17)
 40061d8:	8d800815 	stw	r22,32(r17)
 40061dc:	8d400915 	stw	r21,36(r17)
 40061e0:	8d000a15 	stw	r20,40(r17)
 40061e4:	8cc00b15 	stw	r19,44(r17)
 40061e8:	8080030d 	sth	r2,12(r16)
 40061ec:	00800084 	movi	r2,2
 40061f0:	80000015 	stw	zero,0(r16)
 40061f4:	80000115 	stw	zero,4(r16)
 40061f8:	80000215 	stw	zero,8(r16)
 40061fc:	80001915 	stw	zero,100(r16)
 4006200:	8080038d 	sth	r2,14(r16)
 4006204:	80000415 	stw	zero,16(r16)
 4006208:	80000515 	stw	zero,20(r16)
 400620c:	80000615 	stw	zero,24(r16)
 4006210:	81001704 	addi	r4,r16,92
 4006214:	000b883a 	mov	r5,zero
 4006218:	b80d883a 	mov	r6,r23
 400621c:	4007c400 	call	4007c40 <memset>
 4006220:	84000715 	stw	r16,28(r16)
 4006224:	85800815 	stw	r22,32(r16)
 4006228:	85400915 	stw	r21,36(r16)
 400622c:	85000a15 	stw	r20,40(r16)
 4006230:	84c00b15 	stw	r19,44(r16)
 4006234:	dfc00917 	ldw	ra,36(sp)
 4006238:	df000817 	ldw	fp,32(sp)
 400623c:	ddc00717 	ldw	r23,28(sp)
 4006240:	dd800617 	ldw	r22,24(sp)
 4006244:	dd400517 	ldw	r21,20(sp)
 4006248:	dd000417 	ldw	r20,16(sp)
 400624c:	dcc00317 	ldw	r19,12(sp)
 4006250:	dc800217 	ldw	r18,8(sp)
 4006254:	dc400117 	ldw	r17,4(sp)
 4006258:	dc000017 	ldw	r16,0(sp)
 400625c:	dec00a04 	addi	sp,sp,40
 4006260:	f800283a 	ret

04006264 <__sfmoreglue>:
 4006264:	defffc04 	addi	sp,sp,-16
 4006268:	dc800215 	stw	r18,8(sp)
 400626c:	2825883a 	mov	r18,r5
 4006270:	dc000015 	stw	r16,0(sp)
 4006274:	01401a04 	movi	r5,104
 4006278:	2021883a 	mov	r16,r4
 400627c:	9009883a 	mov	r4,r18
 4006280:	dfc00315 	stw	ra,12(sp)
 4006284:	dc400115 	stw	r17,4(sp)
 4006288:	400c2240 	call	400c224 <__mulsi3>
 400628c:	8009883a 	mov	r4,r16
 4006290:	11400304 	addi	r5,r2,12
 4006294:	1023883a 	mov	r17,r2
 4006298:	400711c0 	call	400711c <_malloc_r>
 400629c:	1021883a 	mov	r16,r2
 40062a0:	10000726 	beq	r2,zero,40062c0 <__sfmoreglue+0x5c>
 40062a4:	11000304 	addi	r4,r2,12
 40062a8:	10000015 	stw	zero,0(r2)
 40062ac:	14800115 	stw	r18,4(r2)
 40062b0:	11000215 	stw	r4,8(r2)
 40062b4:	000b883a 	mov	r5,zero
 40062b8:	880d883a 	mov	r6,r17
 40062bc:	4007c400 	call	4007c40 <memset>
 40062c0:	8005883a 	mov	r2,r16
 40062c4:	dfc00317 	ldw	ra,12(sp)
 40062c8:	dc800217 	ldw	r18,8(sp)
 40062cc:	dc400117 	ldw	r17,4(sp)
 40062d0:	dc000017 	ldw	r16,0(sp)
 40062d4:	dec00404 	addi	sp,sp,16
 40062d8:	f800283a 	ret

040062dc <__sfp>:
 40062dc:	00810074 	movhi	r2,1025
 40062e0:	defffb04 	addi	sp,sp,-20
 40062e4:	108dee04 	addi	r2,r2,14264
 40062e8:	dc800215 	stw	r18,8(sp)
 40062ec:	14800017 	ldw	r18,0(r2)
 40062f0:	dcc00315 	stw	r19,12(sp)
 40062f4:	dfc00415 	stw	ra,16(sp)
 40062f8:	90800e17 	ldw	r2,56(r18)
 40062fc:	dc400115 	stw	r17,4(sp)
 4006300:	dc000015 	stw	r16,0(sp)
 4006304:	2027883a 	mov	r19,r4
 4006308:	1000021e 	bne	r2,zero,4006314 <__sfp+0x38>
 400630c:	9009883a 	mov	r4,r18
 4006310:	40060c40 	call	40060c4 <__sinit.part.1>
 4006314:	9480b804 	addi	r18,r18,736
 4006318:	047fffc4 	movi	r17,-1
 400631c:	91400117 	ldw	r5,4(r18)
 4006320:	94000217 	ldw	r16,8(r18)
 4006324:	297fffc4 	addi	r5,r5,-1
 4006328:	28000a16 	blt	r5,zero,4006354 <__sfp+0x78>
 400632c:	8080030f 	ldh	r2,12(r16)
 4006330:	10000c26 	beq	r2,zero,4006364 <__sfp+0x88>
 4006334:	80c01d04 	addi	r3,r16,116
 4006338:	00000206 	br	4006344 <__sfp+0x68>
 400633c:	18bfe60f 	ldh	r2,-104(r3)
 4006340:	10000826 	beq	r2,zero,4006364 <__sfp+0x88>
 4006344:	297fffc4 	addi	r5,r5,-1
 4006348:	1c3ffd04 	addi	r16,r3,-12
 400634c:	18c01a04 	addi	r3,r3,104
 4006350:	2c7ffa1e 	bne	r5,r17,400633c <__alt_data_end+0xfe00633c>
 4006354:	90800017 	ldw	r2,0(r18)
 4006358:	10001d26 	beq	r2,zero,40063d0 <__sfp+0xf4>
 400635c:	1025883a 	mov	r18,r2
 4006360:	003fee06 	br	400631c <__alt_data_end+0xfe00631c>
 4006364:	00bfffc4 	movi	r2,-1
 4006368:	8080038d 	sth	r2,14(r16)
 400636c:	00800044 	movi	r2,1
 4006370:	8080030d 	sth	r2,12(r16)
 4006374:	80001915 	stw	zero,100(r16)
 4006378:	80000015 	stw	zero,0(r16)
 400637c:	80000215 	stw	zero,8(r16)
 4006380:	80000115 	stw	zero,4(r16)
 4006384:	80000415 	stw	zero,16(r16)
 4006388:	80000515 	stw	zero,20(r16)
 400638c:	80000615 	stw	zero,24(r16)
 4006390:	81001704 	addi	r4,r16,92
 4006394:	000b883a 	mov	r5,zero
 4006398:	01800204 	movi	r6,8
 400639c:	4007c400 	call	4007c40 <memset>
 40063a0:	8005883a 	mov	r2,r16
 40063a4:	80000c15 	stw	zero,48(r16)
 40063a8:	80000d15 	stw	zero,52(r16)
 40063ac:	80001115 	stw	zero,68(r16)
 40063b0:	80001215 	stw	zero,72(r16)
 40063b4:	dfc00417 	ldw	ra,16(sp)
 40063b8:	dcc00317 	ldw	r19,12(sp)
 40063bc:	dc800217 	ldw	r18,8(sp)
 40063c0:	dc400117 	ldw	r17,4(sp)
 40063c4:	dc000017 	ldw	r16,0(sp)
 40063c8:	dec00504 	addi	sp,sp,20
 40063cc:	f800283a 	ret
 40063d0:	9809883a 	mov	r4,r19
 40063d4:	01400104 	movi	r5,4
 40063d8:	40062640 	call	4006264 <__sfmoreglue>
 40063dc:	90800015 	stw	r2,0(r18)
 40063e0:	103fde1e 	bne	r2,zero,400635c <__alt_data_end+0xfe00635c>
 40063e4:	00800304 	movi	r2,12
 40063e8:	98800015 	stw	r2,0(r19)
 40063ec:	0005883a 	mov	r2,zero
 40063f0:	003ff006 	br	40063b4 <__alt_data_end+0xfe0063b4>

040063f4 <_cleanup>:
 40063f4:	00810074 	movhi	r2,1025
 40063f8:	108dee04 	addi	r2,r2,14264
 40063fc:	11000017 	ldw	r4,0(r2)
 4006400:	01410074 	movhi	r5,1025
 4006404:	296b7604 	addi	r5,r5,-21032
 4006408:	4006d141 	jmpi	4006d14 <_fwalk>

0400640c <__sinit>:
 400640c:	20800e17 	ldw	r2,56(r4)
 4006410:	10000126 	beq	r2,zero,4006418 <__sinit+0xc>
 4006414:	f800283a 	ret
 4006418:	40060c41 	jmpi	40060c4 <__sinit.part.1>

0400641c <__sfp_lock_acquire>:
 400641c:	f800283a 	ret

04006420 <__sfp_lock_release>:
 4006420:	f800283a 	ret

04006424 <__sinit_lock_acquire>:
 4006424:	f800283a 	ret

04006428 <__sinit_lock_release>:
 4006428:	f800283a 	ret

0400642c <__fp_lock_all>:
 400642c:	00810074 	movhi	r2,1025
 4006430:	108def04 	addi	r2,r2,14268
 4006434:	11000017 	ldw	r4,0(r2)
 4006438:	01410034 	movhi	r5,1024
 400643c:	29582a04 	addi	r5,r5,24744
 4006440:	4006d141 	jmpi	4006d14 <_fwalk>

04006444 <__fp_unlock_all>:
 4006444:	00810074 	movhi	r2,1025
 4006448:	108def04 	addi	r2,r2,14268
 400644c:	11000017 	ldw	r4,0(r2)
 4006450:	01410034 	movhi	r5,1024
 4006454:	29582c04 	addi	r5,r5,24752
 4006458:	4006d141 	jmpi	4006d14 <_fwalk>

0400645c <_malloc_trim_r>:
 400645c:	defffb04 	addi	sp,sp,-20
 4006460:	dcc00315 	stw	r19,12(sp)
 4006464:	04c10074 	movhi	r19,1025
 4006468:	dc800215 	stw	r18,8(sp)
 400646c:	dc400115 	stw	r17,4(sp)
 4006470:	dc000015 	stw	r16,0(sp)
 4006474:	dfc00415 	stw	ra,16(sp)
 4006478:	2821883a 	mov	r16,r5
 400647c:	9cc86a04 	addi	r19,r19,8616
 4006480:	2025883a 	mov	r18,r4
 4006484:	400f0280 	call	400f028 <__malloc_lock>
 4006488:	98800217 	ldw	r2,8(r19)
 400648c:	14400117 	ldw	r17,4(r2)
 4006490:	00bfff04 	movi	r2,-4
 4006494:	88a2703a 	and	r17,r17,r2
 4006498:	8c21c83a 	sub	r16,r17,r16
 400649c:	8403fbc4 	addi	r16,r16,4079
 40064a0:	8020d33a 	srli	r16,r16,12
 40064a4:	0083ffc4 	movi	r2,4095
 40064a8:	843fffc4 	addi	r16,r16,-1
 40064ac:	8020933a 	slli	r16,r16,12
 40064b0:	1400060e 	bge	r2,r16,40064cc <_malloc_trim_r+0x70>
 40064b4:	9009883a 	mov	r4,r18
 40064b8:	000b883a 	mov	r5,zero
 40064bc:	40093c00 	call	40093c0 <_sbrk_r>
 40064c0:	98c00217 	ldw	r3,8(r19)
 40064c4:	1c47883a 	add	r3,r3,r17
 40064c8:	10c00a26 	beq	r2,r3,40064f4 <_malloc_trim_r+0x98>
 40064cc:	9009883a 	mov	r4,r18
 40064d0:	400f0480 	call	400f048 <__malloc_unlock>
 40064d4:	0005883a 	mov	r2,zero
 40064d8:	dfc00417 	ldw	ra,16(sp)
 40064dc:	dcc00317 	ldw	r19,12(sp)
 40064e0:	dc800217 	ldw	r18,8(sp)
 40064e4:	dc400117 	ldw	r17,4(sp)
 40064e8:	dc000017 	ldw	r16,0(sp)
 40064ec:	dec00504 	addi	sp,sp,20
 40064f0:	f800283a 	ret
 40064f4:	9009883a 	mov	r4,r18
 40064f8:	040bc83a 	sub	r5,zero,r16
 40064fc:	40093c00 	call	40093c0 <_sbrk_r>
 4006500:	00ffffc4 	movi	r3,-1
 4006504:	10c00d26 	beq	r2,r3,400653c <_malloc_trim_r+0xe0>
 4006508:	00c10074 	movhi	r3,1025
 400650c:	18d4c704 	addi	r3,r3,21276
 4006510:	18800017 	ldw	r2,0(r3)
 4006514:	99000217 	ldw	r4,8(r19)
 4006518:	8c23c83a 	sub	r17,r17,r16
 400651c:	8c400054 	ori	r17,r17,1
 4006520:	1421c83a 	sub	r16,r2,r16
 4006524:	24400115 	stw	r17,4(r4)
 4006528:	9009883a 	mov	r4,r18
 400652c:	1c000015 	stw	r16,0(r3)
 4006530:	400f0480 	call	400f048 <__malloc_unlock>
 4006534:	00800044 	movi	r2,1
 4006538:	003fe706 	br	40064d8 <__alt_data_end+0xfe0064d8>
 400653c:	9009883a 	mov	r4,r18
 4006540:	000b883a 	mov	r5,zero
 4006544:	40093c00 	call	40093c0 <_sbrk_r>
 4006548:	99000217 	ldw	r4,8(r19)
 400654c:	014003c4 	movi	r5,15
 4006550:	1107c83a 	sub	r3,r2,r4
 4006554:	28ffdd0e 	bge	r5,r3,40064cc <__alt_data_end+0xfe0064cc>
 4006558:	01410074 	movhi	r5,1025
 400655c:	294df104 	addi	r5,r5,14276
 4006560:	29400017 	ldw	r5,0(r5)
 4006564:	18c00054 	ori	r3,r3,1
 4006568:	20c00115 	stw	r3,4(r4)
 400656c:	00c10074 	movhi	r3,1025
 4006570:	1145c83a 	sub	r2,r2,r5
 4006574:	18d4c704 	addi	r3,r3,21276
 4006578:	18800015 	stw	r2,0(r3)
 400657c:	003fd306 	br	40064cc <__alt_data_end+0xfe0064cc>

04006580 <_free_r>:
 4006580:	28004c26 	beq	r5,zero,40066b4 <_free_r+0x134>
 4006584:	defffd04 	addi	sp,sp,-12
 4006588:	dc400115 	stw	r17,4(sp)
 400658c:	dc000015 	stw	r16,0(sp)
 4006590:	2023883a 	mov	r17,r4
 4006594:	2821883a 	mov	r16,r5
 4006598:	dfc00215 	stw	ra,8(sp)
 400659c:	400f0280 	call	400f028 <__malloc_lock>
 40065a0:	813fff17 	ldw	r4,-4(r16)
 40065a4:	00bfff84 	movi	r2,-2
 40065a8:	02410074 	movhi	r9,1025
 40065ac:	81bffe04 	addi	r6,r16,-8
 40065b0:	2084703a 	and	r2,r4,r2
 40065b4:	4a486a04 	addi	r9,r9,8616
 40065b8:	308b883a 	add	r5,r6,r2
 40065bc:	2a000117 	ldw	r8,4(r5)
 40065c0:	49c00217 	ldw	r7,8(r9)
 40065c4:	00ffff04 	movi	r3,-4
 40065c8:	40c6703a 	and	r3,r8,r3
 40065cc:	39405326 	beq	r7,r5,400671c <_free_r+0x19c>
 40065d0:	28c00115 	stw	r3,4(r5)
 40065d4:	2100004c 	andi	r4,r4,1
 40065d8:	2000091e 	bne	r4,zero,4006600 <_free_r+0x80>
 40065dc:	81fffe17 	ldw	r7,-8(r16)
 40065e0:	4a000204 	addi	r8,r9,8
 40065e4:	31cdc83a 	sub	r6,r6,r7
 40065e8:	31000217 	ldw	r4,8(r6)
 40065ec:	11c5883a 	add	r2,r2,r7
 40065f0:	22006126 	beq	r4,r8,4006778 <_free_r+0x1f8>
 40065f4:	31c00317 	ldw	r7,12(r6)
 40065f8:	21c00315 	stw	r7,12(r4)
 40065fc:	39000215 	stw	r4,8(r7)
 4006600:	28c9883a 	add	r4,r5,r3
 4006604:	21c00117 	ldw	r7,4(r4)
 4006608:	39c0004c 	andi	r7,r7,1
 400660c:	38000d1e 	bne	r7,zero,4006644 <_free_r+0xc4>
 4006610:	29000217 	ldw	r4,8(r5)
 4006614:	10c5883a 	add	r2,r2,r3
 4006618:	00c10074 	movhi	r3,1025
 400661c:	18c86c04 	addi	r3,r3,8624
 4006620:	20c07526 	beq	r4,r3,40067f8 <_free_r+0x278>
 4006624:	29c00317 	ldw	r7,12(r5)
 4006628:	11400054 	ori	r5,r2,1
 400662c:	3087883a 	add	r3,r6,r2
 4006630:	21c00315 	stw	r7,12(r4)
 4006634:	39000215 	stw	r4,8(r7)
 4006638:	31400115 	stw	r5,4(r6)
 400663c:	18800015 	stw	r2,0(r3)
 4006640:	00000406 	br	4006654 <_free_r+0xd4>
 4006644:	10c00054 	ori	r3,r2,1
 4006648:	30c00115 	stw	r3,4(r6)
 400664c:	3087883a 	add	r3,r6,r2
 4006650:	18800015 	stw	r2,0(r3)
 4006654:	00c07fc4 	movi	r3,511
 4006658:	18801736 	bltu	r3,r2,40066b8 <_free_r+0x138>
 400665c:	1004d0fa 	srli	r2,r2,3
 4006660:	01400044 	movi	r5,1
 4006664:	49000117 	ldw	r4,4(r9)
 4006668:	1087883a 	add	r3,r2,r2
 400666c:	18c7883a 	add	r3,r3,r3
 4006670:	1005d0ba 	srai	r2,r2,2
 4006674:	18c7883a 	add	r3,r3,r3
 4006678:	1a47883a 	add	r3,r3,r9
 400667c:	19c00217 	ldw	r7,8(r3)
 4006680:	2884983a 	sll	r2,r5,r2
 4006684:	30c00315 	stw	r3,12(r6)
 4006688:	31c00215 	stw	r7,8(r6)
 400668c:	1104b03a 	or	r2,r2,r4
 4006690:	19800215 	stw	r6,8(r3)
 4006694:	48800115 	stw	r2,4(r9)
 4006698:	39800315 	stw	r6,12(r7)
 400669c:	8809883a 	mov	r4,r17
 40066a0:	dfc00217 	ldw	ra,8(sp)
 40066a4:	dc400117 	ldw	r17,4(sp)
 40066a8:	dc000017 	ldw	r16,0(sp)
 40066ac:	dec00304 	addi	sp,sp,12
 40066b0:	400f0481 	jmpi	400f048 <__malloc_unlock>
 40066b4:	f800283a 	ret
 40066b8:	1006d27a 	srli	r3,r2,9
 40066bc:	01000104 	movi	r4,4
 40066c0:	20c04036 	bltu	r4,r3,40067c4 <_free_r+0x244>
 40066c4:	1006d1ba 	srli	r3,r2,6
 40066c8:	19400e04 	addi	r5,r3,56
 40066cc:	2947883a 	add	r3,r5,r5
 40066d0:	18c7883a 	add	r3,r3,r3
 40066d4:	18c7883a 	add	r3,r3,r3
 40066d8:	1a49883a 	add	r4,r3,r9
 40066dc:	20c00217 	ldw	r3,8(r4)
 40066e0:	01c10074 	movhi	r7,1025
 40066e4:	39c86a04 	addi	r7,r7,8616
 40066e8:	19003b26 	beq	r3,r4,40067d8 <_free_r+0x258>
 40066ec:	01ffff04 	movi	r7,-4
 40066f0:	19400117 	ldw	r5,4(r3)
 40066f4:	29ca703a 	and	r5,r5,r7
 40066f8:	1140022e 	bgeu	r2,r5,4006704 <_free_r+0x184>
 40066fc:	18c00217 	ldw	r3,8(r3)
 4006700:	20fffb1e 	bne	r4,r3,40066f0 <__alt_data_end+0xfe0066f0>
 4006704:	18800317 	ldw	r2,12(r3)
 4006708:	30800315 	stw	r2,12(r6)
 400670c:	30c00215 	stw	r3,8(r6)
 4006710:	11800215 	stw	r6,8(r2)
 4006714:	19800315 	stw	r6,12(r3)
 4006718:	003fe006 	br	400669c <__alt_data_end+0xfe00669c>
 400671c:	2100004c 	andi	r4,r4,1
 4006720:	1885883a 	add	r2,r3,r2
 4006724:	2000071e 	bne	r4,zero,4006744 <_free_r+0x1c4>
 4006728:	817ffe17 	ldw	r5,-8(r16)
 400672c:	314dc83a 	sub	r6,r6,r5
 4006730:	30c00317 	ldw	r3,12(r6)
 4006734:	31000217 	ldw	r4,8(r6)
 4006738:	1145883a 	add	r2,r2,r5
 400673c:	20c00315 	stw	r3,12(r4)
 4006740:	19000215 	stw	r4,8(r3)
 4006744:	10c00054 	ori	r3,r2,1
 4006748:	30c00115 	stw	r3,4(r6)
 400674c:	00c10074 	movhi	r3,1025
 4006750:	18cdf204 	addi	r3,r3,14280
 4006754:	18c00017 	ldw	r3,0(r3)
 4006758:	49800215 	stw	r6,8(r9)
 400675c:	10ffcf36 	bltu	r2,r3,400669c <__alt_data_end+0xfe00669c>
 4006760:	00810074 	movhi	r2,1025
 4006764:	1094bf04 	addi	r2,r2,21244
 4006768:	11400017 	ldw	r5,0(r2)
 400676c:	8809883a 	mov	r4,r17
 4006770:	400645c0 	call	400645c <_malloc_trim_r>
 4006774:	003fc906 	br	400669c <__alt_data_end+0xfe00669c>
 4006778:	28c9883a 	add	r4,r5,r3
 400677c:	21000117 	ldw	r4,4(r4)
 4006780:	2100004c 	andi	r4,r4,1
 4006784:	20000a1e 	bne	r4,zero,40067b0 <_free_r+0x230>
 4006788:	29000317 	ldw	r4,12(r5)
 400678c:	29400217 	ldw	r5,8(r5)
 4006790:	10c5883a 	add	r2,r2,r3
 4006794:	10c00054 	ori	r3,r2,1
 4006798:	29000315 	stw	r4,12(r5)
 400679c:	21400215 	stw	r5,8(r4)
 40067a0:	30c00115 	stw	r3,4(r6)
 40067a4:	308d883a 	add	r6,r6,r2
 40067a8:	30800015 	stw	r2,0(r6)
 40067ac:	003fbb06 	br	400669c <__alt_data_end+0xfe00669c>
 40067b0:	10c00054 	ori	r3,r2,1
 40067b4:	30c00115 	stw	r3,4(r6)
 40067b8:	308d883a 	add	r6,r6,r2
 40067bc:	30800015 	stw	r2,0(r6)
 40067c0:	003fb606 	br	400669c <__alt_data_end+0xfe00669c>
 40067c4:	01000504 	movi	r4,20
 40067c8:	20c01436 	bltu	r4,r3,400681c <_free_r+0x29c>
 40067cc:	194016c4 	addi	r5,r3,91
 40067d0:	2947883a 	add	r3,r5,r5
 40067d4:	003fbe06 	br	40066d0 <__alt_data_end+0xfe0066d0>
 40067d8:	280bd0ba 	srai	r5,r5,2
 40067dc:	00800044 	movi	r2,1
 40067e0:	39000117 	ldw	r4,4(r7)
 40067e4:	114a983a 	sll	r5,r2,r5
 40067e8:	1805883a 	mov	r2,r3
 40067ec:	2908b03a 	or	r4,r5,r4
 40067f0:	39000115 	stw	r4,4(r7)
 40067f4:	003fc406 	br	4006708 <__alt_data_end+0xfe006708>
 40067f8:	49800515 	stw	r6,20(r9)
 40067fc:	49800415 	stw	r6,16(r9)
 4006800:	10c00054 	ori	r3,r2,1
 4006804:	31000315 	stw	r4,12(r6)
 4006808:	31000215 	stw	r4,8(r6)
 400680c:	30c00115 	stw	r3,4(r6)
 4006810:	308d883a 	add	r6,r6,r2
 4006814:	30800015 	stw	r2,0(r6)
 4006818:	003fa006 	br	400669c <__alt_data_end+0xfe00669c>
 400681c:	01001504 	movi	r4,84
 4006820:	20c00436 	bltu	r4,r3,4006834 <_free_r+0x2b4>
 4006824:	1006d33a 	srli	r3,r2,12
 4006828:	19401b84 	addi	r5,r3,110
 400682c:	2947883a 	add	r3,r5,r5
 4006830:	003fa706 	br	40066d0 <__alt_data_end+0xfe0066d0>
 4006834:	01005504 	movi	r4,340
 4006838:	20c00436 	bltu	r4,r3,400684c <_free_r+0x2cc>
 400683c:	1006d3fa 	srli	r3,r2,15
 4006840:	19401dc4 	addi	r5,r3,119
 4006844:	2947883a 	add	r3,r5,r5
 4006848:	003fa106 	br	40066d0 <__alt_data_end+0xfe0066d0>
 400684c:	01015504 	movi	r4,1364
 4006850:	20c00436 	bltu	r4,r3,4006864 <_free_r+0x2e4>
 4006854:	1006d4ba 	srli	r3,r2,18
 4006858:	19401f04 	addi	r5,r3,124
 400685c:	2947883a 	add	r3,r5,r5
 4006860:	003f9b06 	br	40066d0 <__alt_data_end+0xfe0066d0>
 4006864:	00c03f04 	movi	r3,252
 4006868:	01401f84 	movi	r5,126
 400686c:	003f9806 	br	40066d0 <__alt_data_end+0xfe0066d0>

04006870 <__sfvwrite_r>:
 4006870:	30800217 	ldw	r2,8(r6)
 4006874:	10004526 	beq	r2,zero,400698c <__sfvwrite_r+0x11c>
 4006878:	28c0030b 	ldhu	r3,12(r5)
 400687c:	defff404 	addi	sp,sp,-48
 4006880:	dd400715 	stw	r21,28(sp)
 4006884:	dcc00515 	stw	r19,20(sp)
 4006888:	dc000215 	stw	r16,8(sp)
 400688c:	dfc00b15 	stw	ra,44(sp)
 4006890:	df000a15 	stw	fp,40(sp)
 4006894:	ddc00915 	stw	r23,36(sp)
 4006898:	dd800815 	stw	r22,32(sp)
 400689c:	dd000615 	stw	r20,24(sp)
 40068a0:	dc800415 	stw	r18,16(sp)
 40068a4:	dc400315 	stw	r17,12(sp)
 40068a8:	1880020c 	andi	r2,r3,8
 40068ac:	2821883a 	mov	r16,r5
 40068b0:	202b883a 	mov	r21,r4
 40068b4:	3027883a 	mov	r19,r6
 40068b8:	10002526 	beq	r2,zero,4006950 <__sfvwrite_r+0xe0>
 40068bc:	28800417 	ldw	r2,16(r5)
 40068c0:	10002326 	beq	r2,zero,4006950 <__sfvwrite_r+0xe0>
 40068c4:	1880008c 	andi	r2,r3,2
 40068c8:	9c400017 	ldw	r17,0(r19)
 40068cc:	10003126 	beq	r2,zero,4006994 <__sfvwrite_r+0x124>
 40068d0:	0029883a 	mov	r20,zero
 40068d4:	0025883a 	mov	r18,zero
 40068d8:	05810004 	movi	r22,1024
 40068dc:	a00d883a 	mov	r6,r20
 40068e0:	a809883a 	mov	r4,r21
 40068e4:	90002526 	beq	r18,zero,400697c <__sfvwrite_r+0x10c>
 40068e8:	900f883a 	mov	r7,r18
 40068ec:	81400717 	ldw	r5,28(r16)
 40068f0:	b480012e 	bgeu	r22,r18,40068f8 <__sfvwrite_r+0x88>
 40068f4:	01c10004 	movi	r7,1024
 40068f8:	80800917 	ldw	r2,36(r16)
 40068fc:	103ee83a 	callr	r2
 4006900:	0080510e 	bge	zero,r2,4006a48 <__sfvwrite_r+0x1d8>
 4006904:	98c00217 	ldw	r3,8(r19)
 4006908:	a0a9883a 	add	r20,r20,r2
 400690c:	90a5c83a 	sub	r18,r18,r2
 4006910:	1885c83a 	sub	r2,r3,r2
 4006914:	98800215 	stw	r2,8(r19)
 4006918:	103ff01e 	bne	r2,zero,40068dc <__alt_data_end+0xfe0068dc>
 400691c:	0005883a 	mov	r2,zero
 4006920:	dfc00b17 	ldw	ra,44(sp)
 4006924:	df000a17 	ldw	fp,40(sp)
 4006928:	ddc00917 	ldw	r23,36(sp)
 400692c:	dd800817 	ldw	r22,32(sp)
 4006930:	dd400717 	ldw	r21,28(sp)
 4006934:	dd000617 	ldw	r20,24(sp)
 4006938:	dcc00517 	ldw	r19,20(sp)
 400693c:	dc800417 	ldw	r18,16(sp)
 4006940:	dc400317 	ldw	r17,12(sp)
 4006944:	dc000217 	ldw	r16,8(sp)
 4006948:	dec00c04 	addi	sp,sp,48
 400694c:	f800283a 	ret
 4006950:	a809883a 	mov	r4,r21
 4006954:	800b883a 	mov	r5,r16
 4006958:	40043d00 	call	40043d0 <__swsetup_r>
 400695c:	80c0030b 	ldhu	r3,12(r16)
 4006960:	103fd826 	beq	r2,zero,40068c4 <__alt_data_end+0xfe0068c4>
 4006964:	18c01014 	ori	r3,r3,64
 4006968:	80c0030d 	sth	r3,12(r16)
 400696c:	00c00244 	movi	r3,9
 4006970:	00bfffc4 	movi	r2,-1
 4006974:	a8c00015 	stw	r3,0(r21)
 4006978:	003fe906 	br	4006920 <__alt_data_end+0xfe006920>
 400697c:	8d000017 	ldw	r20,0(r17)
 4006980:	8c800117 	ldw	r18,4(r17)
 4006984:	8c400204 	addi	r17,r17,8
 4006988:	003fd406 	br	40068dc <__alt_data_end+0xfe0068dc>
 400698c:	0005883a 	mov	r2,zero
 4006990:	f800283a 	ret
 4006994:	1880004c 	andi	r2,r3,1
 4006998:	1000301e 	bne	r2,zero,4006a5c <__sfvwrite_r+0x1ec>
 400699c:	002f883a 	mov	r23,zero
 40069a0:	0025883a 	mov	r18,zero
 40069a4:	90001c26 	beq	r18,zero,4006a18 <__sfvwrite_r+0x1a8>
 40069a8:	1880800c 	andi	r2,r3,512
 40069ac:	85000217 	ldw	r20,8(r16)
 40069b0:	10006c26 	beq	r2,zero,4006b64 <__sfvwrite_r+0x2f4>
 40069b4:	a02d883a 	mov	r22,r20
 40069b8:	95008536 	bltu	r18,r20,4006bd0 <__sfvwrite_r+0x360>
 40069bc:	1881200c 	andi	r2,r3,1152
 40069c0:	10009d1e 	bne	r2,zero,4006c38 <__sfvwrite_r+0x3c8>
 40069c4:	81000017 	ldw	r4,0(r16)
 40069c8:	a039883a 	mov	fp,r20
 40069cc:	9029883a 	mov	r20,r18
 40069d0:	b80b883a 	mov	r5,r23
 40069d4:	b00d883a 	mov	r6,r22
 40069d8:	4007ae40 	call	4007ae4 <memmove>
 40069dc:	80c00217 	ldw	r3,8(r16)
 40069e0:	81000017 	ldw	r4,0(r16)
 40069e4:	9005883a 	mov	r2,r18
 40069e8:	1f39c83a 	sub	fp,r3,fp
 40069ec:	258f883a 	add	r7,r4,r22
 40069f0:	87000215 	stw	fp,8(r16)
 40069f4:	81c00015 	stw	r7,0(r16)
 40069f8:	98c00217 	ldw	r3,8(r19)
 40069fc:	b8af883a 	add	r23,r23,r2
 4006a00:	90a5c83a 	sub	r18,r18,r2
 4006a04:	1d05c83a 	sub	r2,r3,r20
 4006a08:	98800215 	stw	r2,8(r19)
 4006a0c:	103fc326 	beq	r2,zero,400691c <__alt_data_end+0xfe00691c>
 4006a10:	80c0030b 	ldhu	r3,12(r16)
 4006a14:	903fe41e 	bne	r18,zero,40069a8 <__alt_data_end+0xfe0069a8>
 4006a18:	8dc00017 	ldw	r23,0(r17)
 4006a1c:	8c800117 	ldw	r18,4(r17)
 4006a20:	8c400204 	addi	r17,r17,8
 4006a24:	003fdf06 	br	40069a4 <__alt_data_end+0xfe0069a4>
 4006a28:	4008dac0 	call	4008dac <_realloc_r>
 4006a2c:	102d883a 	mov	r22,r2
 4006a30:	1000a01e 	bne	r2,zero,4006cb4 <__sfvwrite_r+0x444>
 4006a34:	81400417 	ldw	r5,16(r16)
 4006a38:	a809883a 	mov	r4,r21
 4006a3c:	40065800 	call	4006580 <_free_r>
 4006a40:	00800304 	movi	r2,12
 4006a44:	a8800015 	stw	r2,0(r21)
 4006a48:	80c0030b 	ldhu	r3,12(r16)
 4006a4c:	00bfffc4 	movi	r2,-1
 4006a50:	18c01014 	ori	r3,r3,64
 4006a54:	80c0030d 	sth	r3,12(r16)
 4006a58:	003fb106 	br	4006920 <__alt_data_end+0xfe006920>
 4006a5c:	0029883a 	mov	r20,zero
 4006a60:	0011883a 	mov	r8,zero
 4006a64:	0039883a 	mov	fp,zero
 4006a68:	0025883a 	mov	r18,zero
 4006a6c:	90001f26 	beq	r18,zero,4006aec <__sfvwrite_r+0x27c>
 4006a70:	40006826 	beq	r8,zero,4006c14 <__sfvwrite_r+0x3a4>
 4006a74:	a02f883a 	mov	r23,r20
 4006a78:	9500012e 	bgeu	r18,r20,4006a80 <__sfvwrite_r+0x210>
 4006a7c:	902f883a 	mov	r23,r18
 4006a80:	81000017 	ldw	r4,0(r16)
 4006a84:	80800417 	ldw	r2,16(r16)
 4006a88:	b82d883a 	mov	r22,r23
 4006a8c:	81800217 	ldw	r6,8(r16)
 4006a90:	81c00517 	ldw	r7,20(r16)
 4006a94:	1100022e 	bgeu	r2,r4,4006aa0 <__sfvwrite_r+0x230>
 4006a98:	31c7883a 	add	r3,r6,r7
 4006a9c:	1dc01816 	blt	r3,r23,4006b00 <__sfvwrite_r+0x290>
 4006aa0:	b9c03f16 	blt	r23,r7,4006ba0 <__sfvwrite_r+0x330>
 4006aa4:	80800917 	ldw	r2,36(r16)
 4006aa8:	81400717 	ldw	r5,28(r16)
 4006aac:	a809883a 	mov	r4,r21
 4006ab0:	da000115 	stw	r8,4(sp)
 4006ab4:	e00d883a 	mov	r6,fp
 4006ab8:	103ee83a 	callr	r2
 4006abc:	102d883a 	mov	r22,r2
 4006ac0:	da000117 	ldw	r8,4(sp)
 4006ac4:	00bfe00e 	bge	zero,r2,4006a48 <__alt_data_end+0xfe006a48>
 4006ac8:	a5a9c83a 	sub	r20,r20,r22
 4006acc:	a0001f26 	beq	r20,zero,4006b4c <__sfvwrite_r+0x2dc>
 4006ad0:	98800217 	ldw	r2,8(r19)
 4006ad4:	e5b9883a 	add	fp,fp,r22
 4006ad8:	95a5c83a 	sub	r18,r18,r22
 4006adc:	15adc83a 	sub	r22,r2,r22
 4006ae0:	9d800215 	stw	r22,8(r19)
 4006ae4:	b03f8d26 	beq	r22,zero,400691c <__alt_data_end+0xfe00691c>
 4006ae8:	903fe11e 	bne	r18,zero,4006a70 <__alt_data_end+0xfe006a70>
 4006aec:	8f000017 	ldw	fp,0(r17)
 4006af0:	8c800117 	ldw	r18,4(r17)
 4006af4:	0011883a 	mov	r8,zero
 4006af8:	8c400204 	addi	r17,r17,8
 4006afc:	003fdb06 	br	4006a6c <__alt_data_end+0xfe006a6c>
 4006b00:	180d883a 	mov	r6,r3
 4006b04:	e00b883a 	mov	r5,fp
 4006b08:	da000115 	stw	r8,4(sp)
 4006b0c:	d8c00015 	stw	r3,0(sp)
 4006b10:	4007ae40 	call	4007ae4 <memmove>
 4006b14:	d8c00017 	ldw	r3,0(sp)
 4006b18:	80800017 	ldw	r2,0(r16)
 4006b1c:	a809883a 	mov	r4,r21
 4006b20:	800b883a 	mov	r5,r16
 4006b24:	10c5883a 	add	r2,r2,r3
 4006b28:	80800015 	stw	r2,0(r16)
 4006b2c:	d8c00015 	stw	r3,0(sp)
 4006b30:	4005e500 	call	4005e50 <_fflush_r>
 4006b34:	d8c00017 	ldw	r3,0(sp)
 4006b38:	da000117 	ldw	r8,4(sp)
 4006b3c:	103fc21e 	bne	r2,zero,4006a48 <__alt_data_end+0xfe006a48>
 4006b40:	182d883a 	mov	r22,r3
 4006b44:	a5a9c83a 	sub	r20,r20,r22
 4006b48:	a03fe11e 	bne	r20,zero,4006ad0 <__alt_data_end+0xfe006ad0>
 4006b4c:	a809883a 	mov	r4,r21
 4006b50:	800b883a 	mov	r5,r16
 4006b54:	4005e500 	call	4005e50 <_fflush_r>
 4006b58:	103fbb1e 	bne	r2,zero,4006a48 <__alt_data_end+0xfe006a48>
 4006b5c:	0011883a 	mov	r8,zero
 4006b60:	003fdb06 	br	4006ad0 <__alt_data_end+0xfe006ad0>
 4006b64:	81000017 	ldw	r4,0(r16)
 4006b68:	80800417 	ldw	r2,16(r16)
 4006b6c:	1100012e 	bgeu	r2,r4,4006b74 <__sfvwrite_r+0x304>
 4006b70:	a4805a36 	bltu	r20,r18,4006cdc <__sfvwrite_r+0x46c>
 4006b74:	81c00517 	ldw	r7,20(r16)
 4006b78:	91c01a36 	bltu	r18,r7,4006be4 <__sfvwrite_r+0x374>
 4006b7c:	80800917 	ldw	r2,36(r16)
 4006b80:	81400717 	ldw	r5,28(r16)
 4006b84:	a809883a 	mov	r4,r21
 4006b88:	b80d883a 	mov	r6,r23
 4006b8c:	103ee83a 	callr	r2
 4006b90:	1029883a 	mov	r20,r2
 4006b94:	00bfac0e 	bge	zero,r2,4006a48 <__alt_data_end+0xfe006a48>
 4006b98:	a005883a 	mov	r2,r20
 4006b9c:	003f9606 	br	40069f8 <__alt_data_end+0xfe0069f8>
 4006ba0:	b80d883a 	mov	r6,r23
 4006ba4:	e00b883a 	mov	r5,fp
 4006ba8:	da000115 	stw	r8,4(sp)
 4006bac:	4007ae40 	call	4007ae4 <memmove>
 4006bb0:	80800217 	ldw	r2,8(r16)
 4006bb4:	80c00017 	ldw	r3,0(r16)
 4006bb8:	da000117 	ldw	r8,4(sp)
 4006bbc:	15c5c83a 	sub	r2,r2,r23
 4006bc0:	1def883a 	add	r23,r3,r23
 4006bc4:	80800215 	stw	r2,8(r16)
 4006bc8:	85c00015 	stw	r23,0(r16)
 4006bcc:	003fbe06 	br	4006ac8 <__alt_data_end+0xfe006ac8>
 4006bd0:	81000017 	ldw	r4,0(r16)
 4006bd4:	9039883a 	mov	fp,r18
 4006bd8:	9029883a 	mov	r20,r18
 4006bdc:	902d883a 	mov	r22,r18
 4006be0:	003f7b06 	br	40069d0 <__alt_data_end+0xfe0069d0>
 4006be4:	b80b883a 	mov	r5,r23
 4006be8:	900d883a 	mov	r6,r18
 4006bec:	4007ae40 	call	4007ae4 <memmove>
 4006bf0:	80c00217 	ldw	r3,8(r16)
 4006bf4:	80800017 	ldw	r2,0(r16)
 4006bf8:	9029883a 	mov	r20,r18
 4006bfc:	1c87c83a 	sub	r3,r3,r18
 4006c00:	1485883a 	add	r2,r2,r18
 4006c04:	80800015 	stw	r2,0(r16)
 4006c08:	80c00215 	stw	r3,8(r16)
 4006c0c:	9005883a 	mov	r2,r18
 4006c10:	003f7906 	br	40069f8 <__alt_data_end+0xfe0069f8>
 4006c14:	e009883a 	mov	r4,fp
 4006c18:	01400284 	movi	r5,10
 4006c1c:	900d883a 	mov	r6,r18
 4006c20:	40078c40 	call	40078c4 <memchr>
 4006c24:	10003826 	beq	r2,zero,4006d08 <__sfvwrite_r+0x498>
 4006c28:	10800044 	addi	r2,r2,1
 4006c2c:	1729c83a 	sub	r20,r2,fp
 4006c30:	02000044 	movi	r8,1
 4006c34:	003f8f06 	br	4006a74 <__alt_data_end+0xfe006a74>
 4006c38:	80800517 	ldw	r2,20(r16)
 4006c3c:	81400417 	ldw	r5,16(r16)
 4006c40:	87000017 	ldw	fp,0(r16)
 4006c44:	10a9883a 	add	r20,r2,r2
 4006c48:	a085883a 	add	r2,r20,r2
 4006c4c:	1028d7fa 	srli	r20,r2,31
 4006c50:	e179c83a 	sub	fp,fp,r5
 4006c54:	e1000044 	addi	r4,fp,1
 4006c58:	a085883a 	add	r2,r20,r2
 4006c5c:	1029d07a 	srai	r20,r2,1
 4006c60:	2485883a 	add	r2,r4,r18
 4006c64:	a00d883a 	mov	r6,r20
 4006c68:	a080022e 	bgeu	r20,r2,4006c74 <__sfvwrite_r+0x404>
 4006c6c:	1029883a 	mov	r20,r2
 4006c70:	100d883a 	mov	r6,r2
 4006c74:	18c1000c 	andi	r3,r3,1024
 4006c78:	a809883a 	mov	r4,r21
 4006c7c:	183f6a26 	beq	r3,zero,4006a28 <__alt_data_end+0xfe006a28>
 4006c80:	300b883a 	mov	r5,r6
 4006c84:	400711c0 	call	400711c <_malloc_r>
 4006c88:	102d883a 	mov	r22,r2
 4006c8c:	103f6c26 	beq	r2,zero,4006a40 <__alt_data_end+0xfe006a40>
 4006c90:	81400417 	ldw	r5,16(r16)
 4006c94:	1009883a 	mov	r4,r2
 4006c98:	e00d883a 	mov	r6,fp
 4006c9c:	40079ac0 	call	40079ac <memcpy>
 4006ca0:	8080030b 	ldhu	r2,12(r16)
 4006ca4:	00fedfc4 	movi	r3,-1153
 4006ca8:	10c4703a 	and	r2,r2,r3
 4006cac:	10802014 	ori	r2,r2,128
 4006cb0:	8080030d 	sth	r2,12(r16)
 4006cb4:	b709883a 	add	r4,r22,fp
 4006cb8:	a707c83a 	sub	r3,r20,fp
 4006cbc:	85800415 	stw	r22,16(r16)
 4006cc0:	85000515 	stw	r20,20(r16)
 4006cc4:	81000015 	stw	r4,0(r16)
 4006cc8:	9039883a 	mov	fp,r18
 4006ccc:	80c00215 	stw	r3,8(r16)
 4006cd0:	9029883a 	mov	r20,r18
 4006cd4:	902d883a 	mov	r22,r18
 4006cd8:	003f3d06 	br	40069d0 <__alt_data_end+0xfe0069d0>
 4006cdc:	b80b883a 	mov	r5,r23
 4006ce0:	a00d883a 	mov	r6,r20
 4006ce4:	4007ae40 	call	4007ae4 <memmove>
 4006ce8:	80800017 	ldw	r2,0(r16)
 4006cec:	a809883a 	mov	r4,r21
 4006cf0:	800b883a 	mov	r5,r16
 4006cf4:	1505883a 	add	r2,r2,r20
 4006cf8:	80800015 	stw	r2,0(r16)
 4006cfc:	4005e500 	call	4005e50 <_fflush_r>
 4006d00:	103fa526 	beq	r2,zero,4006b98 <__alt_data_end+0xfe006b98>
 4006d04:	003f5006 	br	4006a48 <__alt_data_end+0xfe006a48>
 4006d08:	95000044 	addi	r20,r18,1
 4006d0c:	02000044 	movi	r8,1
 4006d10:	003f5806 	br	4006a74 <__alt_data_end+0xfe006a74>

04006d14 <_fwalk>:
 4006d14:	defff804 	addi	sp,sp,-32
 4006d18:	dd400515 	stw	r21,20(sp)
 4006d1c:	2540b804 	addi	r21,r4,736
 4006d20:	dd800615 	stw	r22,24(sp)
 4006d24:	dd000415 	stw	r20,16(sp)
 4006d28:	dfc00715 	stw	ra,28(sp)
 4006d2c:	dcc00315 	stw	r19,12(sp)
 4006d30:	dc800215 	stw	r18,8(sp)
 4006d34:	dc400115 	stw	r17,4(sp)
 4006d38:	dc000015 	stw	r16,0(sp)
 4006d3c:	2829883a 	mov	r20,r5
 4006d40:	002d883a 	mov	r22,zero
 4006d44:	400641c0 	call	400641c <__sfp_lock_acquire>
 4006d48:	a8001426 	beq	r21,zero,4006d9c <_fwalk+0x88>
 4006d4c:	04ffffc4 	movi	r19,-1
 4006d50:	ac400117 	ldw	r17,4(r21)
 4006d54:	ac800217 	ldw	r18,8(r21)
 4006d58:	8c7fffc4 	addi	r17,r17,-1
 4006d5c:	88000d16 	blt	r17,zero,4006d94 <_fwalk+0x80>
 4006d60:	94000304 	addi	r16,r18,12
 4006d64:	94800384 	addi	r18,r18,14
 4006d68:	80c0000f 	ldh	r3,0(r16)
 4006d6c:	8c7fffc4 	addi	r17,r17,-1
 4006d70:	813ffd04 	addi	r4,r16,-12
 4006d74:	18000426 	beq	r3,zero,4006d88 <_fwalk+0x74>
 4006d78:	90c0000f 	ldh	r3,0(r18)
 4006d7c:	1cc00226 	beq	r3,r19,4006d88 <_fwalk+0x74>
 4006d80:	a03ee83a 	callr	r20
 4006d84:	b0acb03a 	or	r22,r22,r2
 4006d88:	84001a04 	addi	r16,r16,104
 4006d8c:	94801a04 	addi	r18,r18,104
 4006d90:	8cfff51e 	bne	r17,r19,4006d68 <__alt_data_end+0xfe006d68>
 4006d94:	ad400017 	ldw	r21,0(r21)
 4006d98:	a83fed1e 	bne	r21,zero,4006d50 <__alt_data_end+0xfe006d50>
 4006d9c:	40064200 	call	4006420 <__sfp_lock_release>
 4006da0:	b005883a 	mov	r2,r22
 4006da4:	dfc00717 	ldw	ra,28(sp)
 4006da8:	dd800617 	ldw	r22,24(sp)
 4006dac:	dd400517 	ldw	r21,20(sp)
 4006db0:	dd000417 	ldw	r20,16(sp)
 4006db4:	dcc00317 	ldw	r19,12(sp)
 4006db8:	dc800217 	ldw	r18,8(sp)
 4006dbc:	dc400117 	ldw	r17,4(sp)
 4006dc0:	dc000017 	ldw	r16,0(sp)
 4006dc4:	dec00804 	addi	sp,sp,32
 4006dc8:	f800283a 	ret

04006dcc <_fwalk_reent>:
 4006dcc:	defff804 	addi	sp,sp,-32
 4006dd0:	dd400515 	stw	r21,20(sp)
 4006dd4:	2540b804 	addi	r21,r4,736
 4006dd8:	dd800615 	stw	r22,24(sp)
 4006ddc:	dd000415 	stw	r20,16(sp)
 4006de0:	dcc00315 	stw	r19,12(sp)
 4006de4:	dfc00715 	stw	ra,28(sp)
 4006de8:	dc800215 	stw	r18,8(sp)
 4006dec:	dc400115 	stw	r17,4(sp)
 4006df0:	dc000015 	stw	r16,0(sp)
 4006df4:	2027883a 	mov	r19,r4
 4006df8:	2829883a 	mov	r20,r5
 4006dfc:	002d883a 	mov	r22,zero
 4006e00:	400641c0 	call	400641c <__sfp_lock_acquire>
 4006e04:	a8001326 	beq	r21,zero,4006e54 <_fwalk_reent+0x88>
 4006e08:	04bfffc4 	movi	r18,-1
 4006e0c:	ac400117 	ldw	r17,4(r21)
 4006e10:	ac000217 	ldw	r16,8(r21)
 4006e14:	8c7fffc4 	addi	r17,r17,-1
 4006e18:	88000c16 	blt	r17,zero,4006e4c <_fwalk_reent+0x80>
 4006e1c:	84000304 	addi	r16,r16,12
 4006e20:	80c0000f 	ldh	r3,0(r16)
 4006e24:	8c7fffc4 	addi	r17,r17,-1
 4006e28:	817ffd04 	addi	r5,r16,-12
 4006e2c:	18000526 	beq	r3,zero,4006e44 <_fwalk_reent+0x78>
 4006e30:	80c0008f 	ldh	r3,2(r16)
 4006e34:	9809883a 	mov	r4,r19
 4006e38:	1c800226 	beq	r3,r18,4006e44 <_fwalk_reent+0x78>
 4006e3c:	a03ee83a 	callr	r20
 4006e40:	b0acb03a 	or	r22,r22,r2
 4006e44:	84001a04 	addi	r16,r16,104
 4006e48:	8cbff51e 	bne	r17,r18,4006e20 <__alt_data_end+0xfe006e20>
 4006e4c:	ad400017 	ldw	r21,0(r21)
 4006e50:	a83fee1e 	bne	r21,zero,4006e0c <__alt_data_end+0xfe006e0c>
 4006e54:	40064200 	call	4006420 <__sfp_lock_release>
 4006e58:	b005883a 	mov	r2,r22
 4006e5c:	dfc00717 	ldw	ra,28(sp)
 4006e60:	dd800617 	ldw	r22,24(sp)
 4006e64:	dd400517 	ldw	r21,20(sp)
 4006e68:	dd000417 	ldw	r20,16(sp)
 4006e6c:	dcc00317 	ldw	r19,12(sp)
 4006e70:	dc800217 	ldw	r18,8(sp)
 4006e74:	dc400117 	ldw	r17,4(sp)
 4006e78:	dc000017 	ldw	r16,0(sp)
 4006e7c:	dec00804 	addi	sp,sp,32
 4006e80:	f800283a 	ret

04006e84 <_setlocale_r>:
 4006e84:	30001b26 	beq	r6,zero,4006ef4 <_setlocale_r+0x70>
 4006e88:	01410074 	movhi	r5,1025
 4006e8c:	defffe04 	addi	sp,sp,-8
 4006e90:	2946a204 	addi	r5,r5,6792
 4006e94:	3009883a 	mov	r4,r6
 4006e98:	dc000015 	stw	r16,0(sp)
 4006e9c:	dfc00115 	stw	ra,4(sp)
 4006ea0:	3021883a 	mov	r16,r6
 4006ea4:	40095500 	call	4009550 <strcmp>
 4006ea8:	1000061e 	bne	r2,zero,4006ec4 <_setlocale_r+0x40>
 4006eac:	00810074 	movhi	r2,1025
 4006eb0:	1086a104 	addi	r2,r2,6788
 4006eb4:	dfc00117 	ldw	ra,4(sp)
 4006eb8:	dc000017 	ldw	r16,0(sp)
 4006ebc:	dec00204 	addi	sp,sp,8
 4006ec0:	f800283a 	ret
 4006ec4:	01410074 	movhi	r5,1025
 4006ec8:	2946a104 	addi	r5,r5,6788
 4006ecc:	8009883a 	mov	r4,r16
 4006ed0:	40095500 	call	4009550 <strcmp>
 4006ed4:	103ff526 	beq	r2,zero,4006eac <__alt_data_end+0xfe006eac>
 4006ed8:	01410074 	movhi	r5,1025
 4006edc:	29468c04 	addi	r5,r5,6704
 4006ee0:	8009883a 	mov	r4,r16
 4006ee4:	40095500 	call	4009550 <strcmp>
 4006ee8:	103ff026 	beq	r2,zero,4006eac <__alt_data_end+0xfe006eac>
 4006eec:	0005883a 	mov	r2,zero
 4006ef0:	003ff006 	br	4006eb4 <__alt_data_end+0xfe006eb4>
 4006ef4:	00810074 	movhi	r2,1025
 4006ef8:	1086a104 	addi	r2,r2,6788
 4006efc:	f800283a 	ret

04006f00 <__locale_charset>:
 4006f00:	00810074 	movhi	r2,1025
 4006f04:	10885404 	addi	r2,r2,8528
 4006f08:	f800283a 	ret

04006f0c <__locale_mb_cur_max>:
 4006f0c:	00810074 	movhi	r2,1025
 4006f10:	108df004 	addi	r2,r2,14272
 4006f14:	10800017 	ldw	r2,0(r2)
 4006f18:	f800283a 	ret

04006f1c <__locale_msgcharset>:
 4006f1c:	00810074 	movhi	r2,1025
 4006f20:	10884c04 	addi	r2,r2,8496
 4006f24:	f800283a 	ret

04006f28 <__locale_cjk_lang>:
 4006f28:	0005883a 	mov	r2,zero
 4006f2c:	f800283a 	ret

04006f30 <_localeconv_r>:
 4006f30:	00810074 	movhi	r2,1025
 4006f34:	10885c04 	addi	r2,r2,8560
 4006f38:	f800283a 	ret

04006f3c <setlocale>:
 4006f3c:	00c10074 	movhi	r3,1025
 4006f40:	18cdef04 	addi	r3,r3,14268
 4006f44:	2005883a 	mov	r2,r4
 4006f48:	19000017 	ldw	r4,0(r3)
 4006f4c:	280d883a 	mov	r6,r5
 4006f50:	100b883a 	mov	r5,r2
 4006f54:	4006e841 	jmpi	4006e84 <_setlocale_r>

04006f58 <localeconv>:
 4006f58:	00810074 	movhi	r2,1025
 4006f5c:	10885c04 	addi	r2,r2,8560
 4006f60:	f800283a 	ret

04006f64 <__smakebuf_r>:
 4006f64:	2880030b 	ldhu	r2,12(r5)
 4006f68:	10c0008c 	andi	r3,r2,2
 4006f6c:	1800401e 	bne	r3,zero,4007070 <__smakebuf_r+0x10c>
 4006f70:	deffec04 	addi	sp,sp,-80
 4006f74:	dc000f15 	stw	r16,60(sp)
 4006f78:	2821883a 	mov	r16,r5
 4006f7c:	2940038f 	ldh	r5,14(r5)
 4006f80:	dc401015 	stw	r17,64(sp)
 4006f84:	dfc01315 	stw	ra,76(sp)
 4006f88:	dcc01215 	stw	r19,72(sp)
 4006f8c:	dc801115 	stw	r18,68(sp)
 4006f90:	2023883a 	mov	r17,r4
 4006f94:	28001b16 	blt	r5,zero,4007004 <__smakebuf_r+0xa0>
 4006f98:	d80d883a 	mov	r6,sp
 4006f9c:	400afc80 	call	400afc8 <_fstat_r>
 4006fa0:	10001716 	blt	r2,zero,4007000 <__smakebuf_r+0x9c>
 4006fa4:	d8800117 	ldw	r2,4(sp)
 4006fa8:	00e00014 	movui	r3,32768
 4006fac:	10bc000c 	andi	r2,r2,61440
 4006fb0:	10c03726 	beq	r2,r3,4007090 <__smakebuf_r+0x12c>
 4006fb4:	80c0030b 	ldhu	r3,12(r16)
 4006fb8:	18c20014 	ori	r3,r3,2048
 4006fbc:	80c0030d 	sth	r3,12(r16)
 4006fc0:	00c80004 	movi	r3,8192
 4006fc4:	10c03c1e 	bne	r2,r3,40070b8 <__smakebuf_r+0x154>
 4006fc8:	8140038f 	ldh	r5,14(r16)
 4006fcc:	8809883a 	mov	r4,r17
 4006fd0:	400b0200 	call	400b020 <_isatty_r>
 4006fd4:	10004e26 	beq	r2,zero,4007110 <__smakebuf_r+0x1ac>
 4006fd8:	8080030b 	ldhu	r2,12(r16)
 4006fdc:	04c00044 	movi	r19,1
 4006fe0:	80c010c4 	addi	r3,r16,67
 4006fe4:	14c4b03a 	or	r2,r2,r19
 4006fe8:	8080030d 	sth	r2,12(r16)
 4006fec:	80c00015 	stw	r3,0(r16)
 4006ff0:	80c00415 	stw	r3,16(r16)
 4006ff4:	84c00515 	stw	r19,20(r16)
 4006ff8:	04810004 	movi	r18,1024
 4006ffc:	00000706 	br	400701c <__smakebuf_r+0xb8>
 4007000:	8080030b 	ldhu	r2,12(r16)
 4007004:	10c0200c 	andi	r3,r2,128
 4007008:	18001f1e 	bne	r3,zero,4007088 <__smakebuf_r+0x124>
 400700c:	04810004 	movi	r18,1024
 4007010:	10820014 	ori	r2,r2,2048
 4007014:	8080030d 	sth	r2,12(r16)
 4007018:	0027883a 	mov	r19,zero
 400701c:	8809883a 	mov	r4,r17
 4007020:	900b883a 	mov	r5,r18
 4007024:	400711c0 	call	400711c <_malloc_r>
 4007028:	10002e26 	beq	r2,zero,40070e4 <__smakebuf_r+0x180>
 400702c:	80c0030b 	ldhu	r3,12(r16)
 4007030:	01010034 	movhi	r4,1024
 4007034:	21182e04 	addi	r4,r4,24760
 4007038:	89000f15 	stw	r4,60(r17)
 400703c:	18c02014 	ori	r3,r3,128
 4007040:	80c0030d 	sth	r3,12(r16)
 4007044:	80800015 	stw	r2,0(r16)
 4007048:	80800415 	stw	r2,16(r16)
 400704c:	84800515 	stw	r18,20(r16)
 4007050:	98001c1e 	bne	r19,zero,40070c4 <__smakebuf_r+0x160>
 4007054:	dfc01317 	ldw	ra,76(sp)
 4007058:	dcc01217 	ldw	r19,72(sp)
 400705c:	dc801117 	ldw	r18,68(sp)
 4007060:	dc401017 	ldw	r17,64(sp)
 4007064:	dc000f17 	ldw	r16,60(sp)
 4007068:	dec01404 	addi	sp,sp,80
 400706c:	f800283a 	ret
 4007070:	288010c4 	addi	r2,r5,67
 4007074:	28800015 	stw	r2,0(r5)
 4007078:	28800415 	stw	r2,16(r5)
 400707c:	00800044 	movi	r2,1
 4007080:	28800515 	stw	r2,20(r5)
 4007084:	f800283a 	ret
 4007088:	04801004 	movi	r18,64
 400708c:	003fe006 	br	4007010 <__alt_data_end+0xfe007010>
 4007090:	81000a17 	ldw	r4,40(r16)
 4007094:	00c10074 	movhi	r3,1025
 4007098:	18e53b04 	addi	r3,r3,-27412
 400709c:	20ffc51e 	bne	r4,r3,4006fb4 <__alt_data_end+0xfe006fb4>
 40070a0:	80c0030b 	ldhu	r3,12(r16)
 40070a4:	01010004 	movi	r4,1024
 40070a8:	81001315 	stw	r4,76(r16)
 40070ac:	1906b03a 	or	r3,r3,r4
 40070b0:	80c0030d 	sth	r3,12(r16)
 40070b4:	003fc206 	br	4006fc0 <__alt_data_end+0xfe006fc0>
 40070b8:	0027883a 	mov	r19,zero
 40070bc:	04810004 	movi	r18,1024
 40070c0:	003fd606 	br	400701c <__alt_data_end+0xfe00701c>
 40070c4:	8140038f 	ldh	r5,14(r16)
 40070c8:	8809883a 	mov	r4,r17
 40070cc:	400b0200 	call	400b020 <_isatty_r>
 40070d0:	103fe026 	beq	r2,zero,4007054 <__alt_data_end+0xfe007054>
 40070d4:	8080030b 	ldhu	r2,12(r16)
 40070d8:	10800054 	ori	r2,r2,1
 40070dc:	8080030d 	sth	r2,12(r16)
 40070e0:	003fdc06 	br	4007054 <__alt_data_end+0xfe007054>
 40070e4:	8080030b 	ldhu	r2,12(r16)
 40070e8:	10c0800c 	andi	r3,r2,512
 40070ec:	183fd91e 	bne	r3,zero,4007054 <__alt_data_end+0xfe007054>
 40070f0:	10800094 	ori	r2,r2,2
 40070f4:	80c010c4 	addi	r3,r16,67
 40070f8:	8080030d 	sth	r2,12(r16)
 40070fc:	00800044 	movi	r2,1
 4007100:	80c00015 	stw	r3,0(r16)
 4007104:	80c00415 	stw	r3,16(r16)
 4007108:	80800515 	stw	r2,20(r16)
 400710c:	003fd106 	br	4007054 <__alt_data_end+0xfe007054>
 4007110:	04c00044 	movi	r19,1
 4007114:	04810004 	movi	r18,1024
 4007118:	003fc006 	br	400701c <__alt_data_end+0xfe00701c>

0400711c <_malloc_r>:
 400711c:	defff504 	addi	sp,sp,-44
 4007120:	dc800315 	stw	r18,12(sp)
 4007124:	dfc00a15 	stw	ra,40(sp)
 4007128:	df000915 	stw	fp,36(sp)
 400712c:	ddc00815 	stw	r23,32(sp)
 4007130:	dd800715 	stw	r22,28(sp)
 4007134:	dd400615 	stw	r21,24(sp)
 4007138:	dd000515 	stw	r20,20(sp)
 400713c:	dcc00415 	stw	r19,16(sp)
 4007140:	dc400215 	stw	r17,8(sp)
 4007144:	dc000115 	stw	r16,4(sp)
 4007148:	288002c4 	addi	r2,r5,11
 400714c:	00c00584 	movi	r3,22
 4007150:	2025883a 	mov	r18,r4
 4007154:	18802a2e 	bgeu	r3,r2,4007200 <_malloc_r+0xe4>
 4007158:	047ffe04 	movi	r17,-8
 400715c:	1462703a 	and	r17,r2,r17
 4007160:	88009e16 	blt	r17,zero,40073dc <_malloc_r+0x2c0>
 4007164:	89409d36 	bltu	r17,r5,40073dc <_malloc_r+0x2c0>
 4007168:	400f0280 	call	400f028 <__malloc_lock>
 400716c:	00807dc4 	movi	r2,503
 4007170:	14402736 	bltu	r2,r17,4007210 <_malloc_r+0xf4>
 4007174:	8806d0fa 	srli	r3,r17,3
 4007178:	04c10074 	movhi	r19,1025
 400717c:	9cc86a04 	addi	r19,r19,8616
 4007180:	18c5883a 	add	r2,r3,r3
 4007184:	1085883a 	add	r2,r2,r2
 4007188:	1085883a 	add	r2,r2,r2
 400718c:	9885883a 	add	r2,r19,r2
 4007190:	14000317 	ldw	r16,12(r2)
 4007194:	80814a26 	beq	r16,r2,40076c0 <_malloc_r+0x5a4>
 4007198:	80c00117 	ldw	r3,4(r16)
 400719c:	81000317 	ldw	r4,12(r16)
 40071a0:	00bfff04 	movi	r2,-4
 40071a4:	1884703a 	and	r2,r3,r2
 40071a8:	81400217 	ldw	r5,8(r16)
 40071ac:	8085883a 	add	r2,r16,r2
 40071b0:	10c00117 	ldw	r3,4(r2)
 40071b4:	29000315 	stw	r4,12(r5)
 40071b8:	21400215 	stw	r5,8(r4)
 40071bc:	18c00054 	ori	r3,r3,1
 40071c0:	10c00115 	stw	r3,4(r2)
 40071c4:	9009883a 	mov	r4,r18
 40071c8:	400f0480 	call	400f048 <__malloc_unlock>
 40071cc:	80800204 	addi	r2,r16,8
 40071d0:	dfc00a17 	ldw	ra,40(sp)
 40071d4:	df000917 	ldw	fp,36(sp)
 40071d8:	ddc00817 	ldw	r23,32(sp)
 40071dc:	dd800717 	ldw	r22,28(sp)
 40071e0:	dd400617 	ldw	r21,24(sp)
 40071e4:	dd000517 	ldw	r20,20(sp)
 40071e8:	dcc00417 	ldw	r19,16(sp)
 40071ec:	dc800317 	ldw	r18,12(sp)
 40071f0:	dc400217 	ldw	r17,8(sp)
 40071f4:	dc000117 	ldw	r16,4(sp)
 40071f8:	dec00b04 	addi	sp,sp,44
 40071fc:	f800283a 	ret
 4007200:	04400404 	movi	r17,16
 4007204:	89407536 	bltu	r17,r5,40073dc <_malloc_r+0x2c0>
 4007208:	400f0280 	call	400f028 <__malloc_lock>
 400720c:	003fd906 	br	4007174 <__alt_data_end+0xfe007174>
 4007210:	8806d27a 	srli	r3,r17,9
 4007214:	18007526 	beq	r3,zero,40073ec <_malloc_r+0x2d0>
 4007218:	00800104 	movi	r2,4
 400721c:	10c0ef36 	bltu	r2,r3,40075dc <_malloc_r+0x4c0>
 4007220:	8806d1ba 	srli	r3,r17,6
 4007224:	19c00e04 	addi	r7,r3,56
 4007228:	39cb883a 	add	r5,r7,r7
 400722c:	04c10074 	movhi	r19,1025
 4007230:	294b883a 	add	r5,r5,r5
 4007234:	9cc86a04 	addi	r19,r19,8616
 4007238:	294b883a 	add	r5,r5,r5
 400723c:	994b883a 	add	r5,r19,r5
 4007240:	2c000317 	ldw	r16,12(r5)
 4007244:	2c000e26 	beq	r5,r16,4007280 <_malloc_r+0x164>
 4007248:	80800117 	ldw	r2,4(r16)
 400724c:	01bfff04 	movi	r6,-4
 4007250:	010003c4 	movi	r4,15
 4007254:	1184703a 	and	r2,r2,r6
 4007258:	1447c83a 	sub	r3,r2,r17
 400725c:	20c00716 	blt	r4,r3,400727c <_malloc_r+0x160>
 4007260:	1800650e 	bge	r3,zero,40073f8 <_malloc_r+0x2dc>
 4007264:	84000317 	ldw	r16,12(r16)
 4007268:	2c000526 	beq	r5,r16,4007280 <_malloc_r+0x164>
 400726c:	80800117 	ldw	r2,4(r16)
 4007270:	1184703a 	and	r2,r2,r6
 4007274:	1447c83a 	sub	r3,r2,r17
 4007278:	20fff90e 	bge	r4,r3,4007260 <__alt_data_end+0xfe007260>
 400727c:	39ffffc4 	addi	r7,r7,-1
 4007280:	38c00044 	addi	r3,r7,1
 4007284:	01810074 	movhi	r6,1025
 4007288:	9c000417 	ldw	r16,16(r19)
 400728c:	31886a04 	addi	r6,r6,8616
 4007290:	32400204 	addi	r9,r6,8
 4007294:	82410326 	beq	r16,r9,40076a4 <_malloc_r+0x588>
 4007298:	81000117 	ldw	r4,4(r16)
 400729c:	00bfff04 	movi	r2,-4
 40072a0:	208e703a 	and	r7,r4,r2
 40072a4:	3c45c83a 	sub	r2,r7,r17
 40072a8:	010003c4 	movi	r4,15
 40072ac:	2080ee16 	blt	r4,r2,4007668 <_malloc_r+0x54c>
 40072b0:	32400515 	stw	r9,20(r6)
 40072b4:	32400415 	stw	r9,16(r6)
 40072b8:	1000510e 	bge	r2,zero,4007400 <_malloc_r+0x2e4>
 40072bc:	00807fc4 	movi	r2,511
 40072c0:	11c0ce36 	bltu	r2,r7,40075fc <_malloc_r+0x4e0>
 40072c4:	3808d0fa 	srli	r4,r7,3
 40072c8:	01c00044 	movi	r7,1
 40072cc:	30800117 	ldw	r2,4(r6)
 40072d0:	210b883a 	add	r5,r4,r4
 40072d4:	294b883a 	add	r5,r5,r5
 40072d8:	2009d0ba 	srai	r4,r4,2
 40072dc:	294b883a 	add	r5,r5,r5
 40072e0:	298b883a 	add	r5,r5,r6
 40072e4:	2a000217 	ldw	r8,8(r5)
 40072e8:	3908983a 	sll	r4,r7,r4
 40072ec:	81400315 	stw	r5,12(r16)
 40072f0:	82000215 	stw	r8,8(r16)
 40072f4:	2088b03a 	or	r4,r4,r2
 40072f8:	2c000215 	stw	r16,8(r5)
 40072fc:	31000115 	stw	r4,4(r6)
 4007300:	44000315 	stw	r16,12(r8)
 4007304:	1805d0ba 	srai	r2,r3,2
 4007308:	01400044 	movi	r5,1
 400730c:	288a983a 	sll	r5,r5,r2
 4007310:	21404336 	bltu	r4,r5,4007420 <_malloc_r+0x304>
 4007314:	2144703a 	and	r2,r4,r5
 4007318:	10000a1e 	bne	r2,zero,4007344 <_malloc_r+0x228>
 400731c:	00bfff04 	movi	r2,-4
 4007320:	294b883a 	add	r5,r5,r5
 4007324:	1886703a 	and	r3,r3,r2
 4007328:	2144703a 	and	r2,r4,r5
 400732c:	18c00104 	addi	r3,r3,4
 4007330:	1000041e 	bne	r2,zero,4007344 <_malloc_r+0x228>
 4007334:	294b883a 	add	r5,r5,r5
 4007338:	2144703a 	and	r2,r4,r5
 400733c:	18c00104 	addi	r3,r3,4
 4007340:	103ffc26 	beq	r2,zero,4007334 <__alt_data_end+0xfe007334>
 4007344:	023fff04 	movi	r8,-4
 4007348:	01c003c4 	movi	r7,15
 400734c:	18c5883a 	add	r2,r3,r3
 4007350:	1085883a 	add	r2,r2,r2
 4007354:	1085883a 	add	r2,r2,r2
 4007358:	9895883a 	add	r10,r19,r2
 400735c:	52c00304 	addi	r11,r10,12
 4007360:	1819883a 	mov	r12,r3
 4007364:	5c000017 	ldw	r16,0(r11)
 4007368:	59bffd04 	addi	r6,r11,-12
 400736c:	8180041e 	bne	r16,r6,4007380 <_malloc_r+0x264>
 4007370:	0000ce06 	br	40076ac <_malloc_r+0x590>
 4007374:	2000d70e 	bge	r4,zero,40076d4 <_malloc_r+0x5b8>
 4007378:	84000317 	ldw	r16,12(r16)
 400737c:	8180cb26 	beq	r16,r6,40076ac <_malloc_r+0x590>
 4007380:	80800117 	ldw	r2,4(r16)
 4007384:	1204703a 	and	r2,r2,r8
 4007388:	1449c83a 	sub	r4,r2,r17
 400738c:	393ff90e 	bge	r7,r4,4007374 <__alt_data_end+0xfe007374>
 4007390:	80800317 	ldw	r2,12(r16)
 4007394:	80c00217 	ldw	r3,8(r16)
 4007398:	89400054 	ori	r5,r17,1
 400739c:	81400115 	stw	r5,4(r16)
 40073a0:	18800315 	stw	r2,12(r3)
 40073a4:	10c00215 	stw	r3,8(r2)
 40073a8:	8463883a 	add	r17,r16,r17
 40073ac:	9c400515 	stw	r17,20(r19)
 40073b0:	9c400415 	stw	r17,16(r19)
 40073b4:	20800054 	ori	r2,r4,1
 40073b8:	88800115 	stw	r2,4(r17)
 40073bc:	8a400315 	stw	r9,12(r17)
 40073c0:	8a400215 	stw	r9,8(r17)
 40073c4:	8923883a 	add	r17,r17,r4
 40073c8:	89000015 	stw	r4,0(r17)
 40073cc:	9009883a 	mov	r4,r18
 40073d0:	400f0480 	call	400f048 <__malloc_unlock>
 40073d4:	80800204 	addi	r2,r16,8
 40073d8:	003f7d06 	br	40071d0 <__alt_data_end+0xfe0071d0>
 40073dc:	00800304 	movi	r2,12
 40073e0:	90800015 	stw	r2,0(r18)
 40073e4:	0005883a 	mov	r2,zero
 40073e8:	003f7906 	br	40071d0 <__alt_data_end+0xfe0071d0>
 40073ec:	01401f84 	movi	r5,126
 40073f0:	01c00fc4 	movi	r7,63
 40073f4:	003f8d06 	br	400722c <__alt_data_end+0xfe00722c>
 40073f8:	81000317 	ldw	r4,12(r16)
 40073fc:	003f6a06 	br	40071a8 <__alt_data_end+0xfe0071a8>
 4007400:	81c5883a 	add	r2,r16,r7
 4007404:	10c00117 	ldw	r3,4(r2)
 4007408:	9009883a 	mov	r4,r18
 400740c:	18c00054 	ori	r3,r3,1
 4007410:	10c00115 	stw	r3,4(r2)
 4007414:	400f0480 	call	400f048 <__malloc_unlock>
 4007418:	80800204 	addi	r2,r16,8
 400741c:	003f6c06 	br	40071d0 <__alt_data_end+0xfe0071d0>
 4007420:	9c000217 	ldw	r16,8(r19)
 4007424:	00bfff04 	movi	r2,-4
 4007428:	85800117 	ldw	r22,4(r16)
 400742c:	b0ac703a 	and	r22,r22,r2
 4007430:	b4400336 	bltu	r22,r17,4007440 <_malloc_r+0x324>
 4007434:	b445c83a 	sub	r2,r22,r17
 4007438:	00c003c4 	movi	r3,15
 400743c:	18805d16 	blt	r3,r2,40075b4 <_malloc_r+0x498>
 4007440:	05c10074 	movhi	r23,1025
 4007444:	00810074 	movhi	r2,1025
 4007448:	bdcdf104 	addi	r23,r23,14276
 400744c:	1094bf04 	addi	r2,r2,21244
 4007450:	15400017 	ldw	r21,0(r2)
 4007454:	b9000017 	ldw	r4,0(r23)
 4007458:	00ffffc4 	movi	r3,-1
 400745c:	858d883a 	add	r6,r16,r22
 4007460:	8d6b883a 	add	r21,r17,r21
 4007464:	20c0e426 	beq	r4,r3,40077f8 <_malloc_r+0x6dc>
 4007468:	ad4403c4 	addi	r21,r21,4111
 400746c:	00fc0004 	movi	r3,-4096
 4007470:	a8ea703a 	and	r21,r21,r3
 4007474:	9009883a 	mov	r4,r18
 4007478:	a80b883a 	mov	r5,r21
 400747c:	d9800015 	stw	r6,0(sp)
 4007480:	40093c00 	call	40093c0 <_sbrk_r>
 4007484:	00ffffc4 	movi	r3,-1
 4007488:	1029883a 	mov	r20,r2
 400748c:	d9800017 	ldw	r6,0(sp)
 4007490:	10c0a426 	beq	r2,r3,4007724 <_malloc_r+0x608>
 4007494:	1180a236 	bltu	r2,r6,4007720 <_malloc_r+0x604>
 4007498:	07010074 	movhi	fp,1025
 400749c:	e714c704 	addi	fp,fp,21276
 40074a0:	e0c00017 	ldw	r3,0(fp)
 40074a4:	a8c7883a 	add	r3,r21,r3
 40074a8:	e0c00015 	stw	r3,0(fp)
 40074ac:	3500da26 	beq	r6,r20,4007818 <_malloc_r+0x6fc>
 40074b0:	b9000017 	ldw	r4,0(r23)
 40074b4:	00bfffc4 	movi	r2,-1
 40074b8:	2080e426 	beq	r4,r2,400784c <_malloc_r+0x730>
 40074bc:	a185c83a 	sub	r2,r20,r6
 40074c0:	1885883a 	add	r2,r3,r2
 40074c4:	e0800015 	stw	r2,0(fp)
 40074c8:	a0c001cc 	andi	r3,r20,7
 40074cc:	1800b526 	beq	r3,zero,40077a4 <_malloc_r+0x688>
 40074d0:	a0e9c83a 	sub	r20,r20,r3
 40074d4:	00840204 	movi	r2,4104
 40074d8:	a5000204 	addi	r20,r20,8
 40074dc:	10c7c83a 	sub	r3,r2,r3
 40074e0:	a545883a 	add	r2,r20,r21
 40074e4:	1083ffcc 	andi	r2,r2,4095
 40074e8:	18abc83a 	sub	r21,r3,r2
 40074ec:	9009883a 	mov	r4,r18
 40074f0:	a80b883a 	mov	r5,r21
 40074f4:	40093c00 	call	40093c0 <_sbrk_r>
 40074f8:	00ffffc4 	movi	r3,-1
 40074fc:	10c0d026 	beq	r2,r3,4007840 <_malloc_r+0x724>
 4007500:	1507c83a 	sub	r3,r2,r20
 4007504:	a8c7883a 	add	r3,r21,r3
 4007508:	18c00054 	ori	r3,r3,1
 400750c:	e0800017 	ldw	r2,0(fp)
 4007510:	9d000215 	stw	r20,8(r19)
 4007514:	a0c00115 	stw	r3,4(r20)
 4007518:	a887883a 	add	r3,r21,r2
 400751c:	e0c00015 	stw	r3,0(fp)
 4007520:	84c00e26 	beq	r16,r19,400755c <_malloc_r+0x440>
 4007524:	018003c4 	movi	r6,15
 4007528:	3580a02e 	bgeu	r6,r22,40077ac <_malloc_r+0x690>
 400752c:	81400117 	ldw	r5,4(r16)
 4007530:	013ffe04 	movi	r4,-8
 4007534:	b0bffd04 	addi	r2,r22,-12
 4007538:	1104703a 	and	r2,r2,r4
 400753c:	2900004c 	andi	r4,r5,1
 4007540:	1108b03a 	or	r4,r2,r4
 4007544:	81000115 	stw	r4,4(r16)
 4007548:	01400144 	movi	r5,5
 400754c:	8089883a 	add	r4,r16,r2
 4007550:	21400115 	stw	r5,4(r4)
 4007554:	21400215 	stw	r5,8(r4)
 4007558:	3080c036 	bltu	r6,r2,400785c <_malloc_r+0x740>
 400755c:	00810074 	movhi	r2,1025
 4007560:	1094be04 	addi	r2,r2,21240
 4007564:	11000017 	ldw	r4,0(r2)
 4007568:	20c0012e 	bgeu	r4,r3,4007570 <_malloc_r+0x454>
 400756c:	10c00015 	stw	r3,0(r2)
 4007570:	00810074 	movhi	r2,1025
 4007574:	1094bd04 	addi	r2,r2,21236
 4007578:	11000017 	ldw	r4,0(r2)
 400757c:	9c000217 	ldw	r16,8(r19)
 4007580:	20c0012e 	bgeu	r4,r3,4007588 <_malloc_r+0x46c>
 4007584:	10c00015 	stw	r3,0(r2)
 4007588:	80c00117 	ldw	r3,4(r16)
 400758c:	00bfff04 	movi	r2,-4
 4007590:	1886703a 	and	r3,r3,r2
 4007594:	1c45c83a 	sub	r2,r3,r17
 4007598:	1c400236 	bltu	r3,r17,40075a4 <_malloc_r+0x488>
 400759c:	00c003c4 	movi	r3,15
 40075a0:	18800416 	blt	r3,r2,40075b4 <_malloc_r+0x498>
 40075a4:	9009883a 	mov	r4,r18
 40075a8:	400f0480 	call	400f048 <__malloc_unlock>
 40075ac:	0005883a 	mov	r2,zero
 40075b0:	003f0706 	br	40071d0 <__alt_data_end+0xfe0071d0>
 40075b4:	88c00054 	ori	r3,r17,1
 40075b8:	80c00115 	stw	r3,4(r16)
 40075bc:	8463883a 	add	r17,r16,r17
 40075c0:	10800054 	ori	r2,r2,1
 40075c4:	9c400215 	stw	r17,8(r19)
 40075c8:	88800115 	stw	r2,4(r17)
 40075cc:	9009883a 	mov	r4,r18
 40075d0:	400f0480 	call	400f048 <__malloc_unlock>
 40075d4:	80800204 	addi	r2,r16,8
 40075d8:	003efd06 	br	40071d0 <__alt_data_end+0xfe0071d0>
 40075dc:	00800504 	movi	r2,20
 40075e0:	10c0482e 	bgeu	r2,r3,4007704 <_malloc_r+0x5e8>
 40075e4:	00801504 	movi	r2,84
 40075e8:	10c06836 	bltu	r2,r3,400778c <_malloc_r+0x670>
 40075ec:	8806d33a 	srli	r3,r17,12
 40075f0:	19c01b84 	addi	r7,r3,110
 40075f4:	39cb883a 	add	r5,r7,r7
 40075f8:	003f0c06 	br	400722c <__alt_data_end+0xfe00722c>
 40075fc:	3804d27a 	srli	r2,r7,9
 4007600:	01000104 	movi	r4,4
 4007604:	2080422e 	bgeu	r4,r2,4007710 <_malloc_r+0x5f4>
 4007608:	01000504 	movi	r4,20
 400760c:	20807c36 	bltu	r4,r2,4007800 <_malloc_r+0x6e4>
 4007610:	110016c4 	addi	r4,r2,91
 4007614:	210b883a 	add	r5,r4,r4
 4007618:	294b883a 	add	r5,r5,r5
 400761c:	294b883a 	add	r5,r5,r5
 4007620:	994b883a 	add	r5,r19,r5
 4007624:	28800217 	ldw	r2,8(r5)
 4007628:	02010074 	movhi	r8,1025
 400762c:	42086a04 	addi	r8,r8,8616
 4007630:	11406326 	beq	r2,r5,40077c0 <_malloc_r+0x6a4>
 4007634:	01bfff04 	movi	r6,-4
 4007638:	11000117 	ldw	r4,4(r2)
 400763c:	2188703a 	and	r4,r4,r6
 4007640:	3900022e 	bgeu	r7,r4,400764c <_malloc_r+0x530>
 4007644:	10800217 	ldw	r2,8(r2)
 4007648:	28bffb1e 	bne	r5,r2,4007638 <__alt_data_end+0xfe007638>
 400764c:	11800317 	ldw	r6,12(r2)
 4007650:	99000117 	ldw	r4,4(r19)
 4007654:	81800315 	stw	r6,12(r16)
 4007658:	80800215 	stw	r2,8(r16)
 400765c:	34000215 	stw	r16,8(r6)
 4007660:	14000315 	stw	r16,12(r2)
 4007664:	003f2706 	br	4007304 <__alt_data_end+0xfe007304>
 4007668:	88c00054 	ori	r3,r17,1
 400766c:	80c00115 	stw	r3,4(r16)
 4007670:	8463883a 	add	r17,r16,r17
 4007674:	34400515 	stw	r17,20(r6)
 4007678:	34400415 	stw	r17,16(r6)
 400767c:	10c00054 	ori	r3,r2,1
 4007680:	8a400315 	stw	r9,12(r17)
 4007684:	8a400215 	stw	r9,8(r17)
 4007688:	88c00115 	stw	r3,4(r17)
 400768c:	88a3883a 	add	r17,r17,r2
 4007690:	88800015 	stw	r2,0(r17)
 4007694:	9009883a 	mov	r4,r18
 4007698:	400f0480 	call	400f048 <__malloc_unlock>
 400769c:	80800204 	addi	r2,r16,8
 40076a0:	003ecb06 	br	40071d0 <__alt_data_end+0xfe0071d0>
 40076a4:	31000117 	ldw	r4,4(r6)
 40076a8:	003f1606 	br	4007304 <__alt_data_end+0xfe007304>
 40076ac:	63000044 	addi	r12,r12,1
 40076b0:	608000cc 	andi	r2,r12,3
 40076b4:	5ac00204 	addi	r11,r11,8
 40076b8:	103f2a1e 	bne	r2,zero,4007364 <__alt_data_end+0xfe007364>
 40076bc:	00002106 	br	4007744 <_malloc_r+0x628>
 40076c0:	80800204 	addi	r2,r16,8
 40076c4:	84000517 	ldw	r16,20(r16)
 40076c8:	143eb31e 	bne	r2,r16,4007198 <__alt_data_end+0xfe007198>
 40076cc:	18c00084 	addi	r3,r3,2
 40076d0:	003eec06 	br	4007284 <__alt_data_end+0xfe007284>
 40076d4:	8085883a 	add	r2,r16,r2
 40076d8:	10c00117 	ldw	r3,4(r2)
 40076dc:	81000317 	ldw	r4,12(r16)
 40076e0:	81400217 	ldw	r5,8(r16)
 40076e4:	18c00054 	ori	r3,r3,1
 40076e8:	10c00115 	stw	r3,4(r2)
 40076ec:	29000315 	stw	r4,12(r5)
 40076f0:	21400215 	stw	r5,8(r4)
 40076f4:	9009883a 	mov	r4,r18
 40076f8:	400f0480 	call	400f048 <__malloc_unlock>
 40076fc:	80800204 	addi	r2,r16,8
 4007700:	003eb306 	br	40071d0 <__alt_data_end+0xfe0071d0>
 4007704:	19c016c4 	addi	r7,r3,91
 4007708:	39cb883a 	add	r5,r7,r7
 400770c:	003ec706 	br	400722c <__alt_data_end+0xfe00722c>
 4007710:	3804d1ba 	srli	r2,r7,6
 4007714:	11000e04 	addi	r4,r2,56
 4007718:	210b883a 	add	r5,r4,r4
 400771c:	003fbe06 	br	4007618 <__alt_data_end+0xfe007618>
 4007720:	84ff5d26 	beq	r16,r19,4007498 <__alt_data_end+0xfe007498>
 4007724:	9c000217 	ldw	r16,8(r19)
 4007728:	00bfff04 	movi	r2,-4
 400772c:	80c00117 	ldw	r3,4(r16)
 4007730:	1886703a 	and	r3,r3,r2
 4007734:	003f9706 	br	4007594 <__alt_data_end+0xfe007594>
 4007738:	52800017 	ldw	r10,0(r10)
 400773c:	18ffffc4 	addi	r3,r3,-1
 4007740:	50805c1e 	bne	r10,r2,40078b4 <_malloc_r+0x798>
 4007744:	190000cc 	andi	r4,r3,3
 4007748:	50bffe04 	addi	r2,r10,-8
 400774c:	203ffa1e 	bne	r4,zero,4007738 <__alt_data_end+0xfe007738>
 4007750:	98800117 	ldw	r2,4(r19)
 4007754:	0146303a 	nor	r3,zero,r5
 4007758:	1884703a 	and	r2,r3,r2
 400775c:	98800115 	stw	r2,4(r19)
 4007760:	294b883a 	add	r5,r5,r5
 4007764:	117f2e36 	bltu	r2,r5,4007420 <__alt_data_end+0xfe007420>
 4007768:	283f2d26 	beq	r5,zero,4007420 <__alt_data_end+0xfe007420>
 400776c:	1146703a 	and	r3,r2,r5
 4007770:	1800521e 	bne	r3,zero,40078bc <_malloc_r+0x7a0>
 4007774:	6007883a 	mov	r3,r12
 4007778:	294b883a 	add	r5,r5,r5
 400777c:	1148703a 	and	r4,r2,r5
 4007780:	18c00104 	addi	r3,r3,4
 4007784:	203ffc26 	beq	r4,zero,4007778 <__alt_data_end+0xfe007778>
 4007788:	003ef006 	br	400734c <__alt_data_end+0xfe00734c>
 400778c:	00805504 	movi	r2,340
 4007790:	10c01336 	bltu	r2,r3,40077e0 <_malloc_r+0x6c4>
 4007794:	8806d3fa 	srli	r3,r17,15
 4007798:	19c01dc4 	addi	r7,r3,119
 400779c:	39cb883a 	add	r5,r7,r7
 40077a0:	003ea206 	br	400722c <__alt_data_end+0xfe00722c>
 40077a4:	00c40004 	movi	r3,4096
 40077a8:	003f4d06 	br	40074e0 <__alt_data_end+0xfe0074e0>
 40077ac:	00800044 	movi	r2,1
 40077b0:	a0800115 	stw	r2,4(r20)
 40077b4:	a021883a 	mov	r16,r20
 40077b8:	0007883a 	mov	r3,zero
 40077bc:	003f7506 	br	4007594 <__alt_data_end+0xfe007594>
 40077c0:	200bd0ba 	srai	r5,r4,2
 40077c4:	01800044 	movi	r6,1
 40077c8:	41000117 	ldw	r4,4(r8)
 40077cc:	314a983a 	sll	r5,r6,r5
 40077d0:	100d883a 	mov	r6,r2
 40077d4:	2908b03a 	or	r4,r5,r4
 40077d8:	41000115 	stw	r4,4(r8)
 40077dc:	003f9d06 	br	4007654 <__alt_data_end+0xfe007654>
 40077e0:	00815504 	movi	r2,1364
 40077e4:	10c01336 	bltu	r2,r3,4007834 <_malloc_r+0x718>
 40077e8:	8806d4ba 	srli	r3,r17,18
 40077ec:	19c01f04 	addi	r7,r3,124
 40077f0:	39cb883a 	add	r5,r7,r7
 40077f4:	003e8d06 	br	400722c <__alt_data_end+0xfe00722c>
 40077f8:	ad400404 	addi	r21,r21,16
 40077fc:	003f1d06 	br	4007474 <__alt_data_end+0xfe007474>
 4007800:	01001504 	movi	r4,84
 4007804:	20801c36 	bltu	r4,r2,4007878 <_malloc_r+0x75c>
 4007808:	3804d33a 	srli	r2,r7,12
 400780c:	11001b84 	addi	r4,r2,110
 4007810:	210b883a 	add	r5,r4,r4
 4007814:	003f8006 	br	4007618 <__alt_data_end+0xfe007618>
 4007818:	3083ffcc 	andi	r2,r6,4095
 400781c:	103f241e 	bne	r2,zero,40074b0 <__alt_data_end+0xfe0074b0>
 4007820:	99000217 	ldw	r4,8(r19)
 4007824:	ad85883a 	add	r2,r21,r22
 4007828:	10800054 	ori	r2,r2,1
 400782c:	20800115 	stw	r2,4(r4)
 4007830:	003f4a06 	br	400755c <__alt_data_end+0xfe00755c>
 4007834:	01403f04 	movi	r5,252
 4007838:	01c01f84 	movi	r7,126
 400783c:	003e7b06 	br	400722c <__alt_data_end+0xfe00722c>
 4007840:	00c00044 	movi	r3,1
 4007844:	002b883a 	mov	r21,zero
 4007848:	003f3006 	br	400750c <__alt_data_end+0xfe00750c>
 400784c:	00810074 	movhi	r2,1025
 4007850:	108df104 	addi	r2,r2,14276
 4007854:	15000015 	stw	r20,0(r2)
 4007858:	003f1b06 	br	40074c8 <__alt_data_end+0xfe0074c8>
 400785c:	9009883a 	mov	r4,r18
 4007860:	81400204 	addi	r5,r16,8
 4007864:	40065800 	call	4006580 <_free_r>
 4007868:	00810074 	movhi	r2,1025
 400786c:	1094c704 	addi	r2,r2,21276
 4007870:	10c00017 	ldw	r3,0(r2)
 4007874:	003f3906 	br	400755c <__alt_data_end+0xfe00755c>
 4007878:	01005504 	movi	r4,340
 400787c:	20800436 	bltu	r4,r2,4007890 <_malloc_r+0x774>
 4007880:	3804d3fa 	srli	r2,r7,15
 4007884:	11001dc4 	addi	r4,r2,119
 4007888:	210b883a 	add	r5,r4,r4
 400788c:	003f6206 	br	4007618 <__alt_data_end+0xfe007618>
 4007890:	01015504 	movi	r4,1364
 4007894:	20800436 	bltu	r4,r2,40078a8 <_malloc_r+0x78c>
 4007898:	3804d4ba 	srli	r2,r7,18
 400789c:	11001f04 	addi	r4,r2,124
 40078a0:	210b883a 	add	r5,r4,r4
 40078a4:	003f5c06 	br	4007618 <__alt_data_end+0xfe007618>
 40078a8:	01403f04 	movi	r5,252
 40078ac:	01001f84 	movi	r4,126
 40078b0:	003f5906 	br	4007618 <__alt_data_end+0xfe007618>
 40078b4:	98800117 	ldw	r2,4(r19)
 40078b8:	003fa906 	br	4007760 <__alt_data_end+0xfe007760>
 40078bc:	6007883a 	mov	r3,r12
 40078c0:	003ea206 	br	400734c <__alt_data_end+0xfe00734c>

040078c4 <memchr>:
 40078c4:	208000cc 	andi	r2,r4,3
 40078c8:	280f883a 	mov	r7,r5
 40078cc:	10003526 	beq	r2,zero,40079a4 <memchr+0xe0>
 40078d0:	30bfffc4 	addi	r2,r6,-1
 40078d4:	30001b26 	beq	r6,zero,4007944 <memchr+0x80>
 40078d8:	21800003 	ldbu	r6,0(r4)
 40078dc:	28c03fcc 	andi	r3,r5,255
 40078e0:	30c01a26 	beq	r6,r3,400794c <memchr+0x88>
 40078e4:	180d883a 	mov	r6,r3
 40078e8:	00000406 	br	40078fc <memchr+0x38>
 40078ec:	10001526 	beq	r2,zero,4007944 <memchr+0x80>
 40078f0:	20c00003 	ldbu	r3,0(r4)
 40078f4:	10bfffc4 	addi	r2,r2,-1
 40078f8:	19801426 	beq	r3,r6,400794c <memchr+0x88>
 40078fc:	21000044 	addi	r4,r4,1
 4007900:	20c000cc 	andi	r3,r4,3
 4007904:	183ff91e 	bne	r3,zero,40078ec <__alt_data_end+0xfe0078ec>
 4007908:	024000c4 	movi	r9,3
 400790c:	48801136 	bltu	r9,r2,4007954 <memchr+0x90>
 4007910:	10000c26 	beq	r2,zero,4007944 <memchr+0x80>
 4007914:	20c00003 	ldbu	r3,0(r4)
 4007918:	29403fcc 	andi	r5,r5,255
 400791c:	19400b26 	beq	r3,r5,400794c <memchr+0x88>
 4007920:	20c00044 	addi	r3,r4,1
 4007924:	2085883a 	add	r2,r4,r2
 4007928:	39803fcc 	andi	r6,r7,255
 400792c:	00000306 	br	400793c <memchr+0x78>
 4007930:	18c00044 	addi	r3,r3,1
 4007934:	197fffc3 	ldbu	r5,-1(r3)
 4007938:	29800426 	beq	r5,r6,400794c <memchr+0x88>
 400793c:	1809883a 	mov	r4,r3
 4007940:	18bffb1e 	bne	r3,r2,4007930 <__alt_data_end+0xfe007930>
 4007944:	0005883a 	mov	r2,zero
 4007948:	f800283a 	ret
 400794c:	2005883a 	mov	r2,r4
 4007950:	f800283a 	ret
 4007954:	28c03fcc 	andi	r3,r5,255
 4007958:	1810923a 	slli	r8,r3,8
 400795c:	02ffbff4 	movhi	r11,65279
 4007960:	02a02074 	movhi	r10,32897
 4007964:	40c6b03a 	or	r3,r8,r3
 4007968:	1810943a 	slli	r8,r3,16
 400796c:	5affbfc4 	addi	r11,r11,-257
 4007970:	52a02004 	addi	r10,r10,-32640
 4007974:	40d0b03a 	or	r8,r8,r3
 4007978:	20c00017 	ldw	r3,0(r4)
 400797c:	40c6f03a 	xor	r3,r8,r3
 4007980:	1acd883a 	add	r6,r3,r11
 4007984:	00c6303a 	nor	r3,zero,r3
 4007988:	30c6703a 	and	r3,r6,r3
 400798c:	1a86703a 	and	r3,r3,r10
 4007990:	183fdf1e 	bne	r3,zero,4007910 <__alt_data_end+0xfe007910>
 4007994:	10bfff04 	addi	r2,r2,-4
 4007998:	21000104 	addi	r4,r4,4
 400799c:	48bff636 	bltu	r9,r2,4007978 <__alt_data_end+0xfe007978>
 40079a0:	003fdb06 	br	4007910 <__alt_data_end+0xfe007910>
 40079a4:	3005883a 	mov	r2,r6
 40079a8:	003fd706 	br	4007908 <__alt_data_end+0xfe007908>

040079ac <memcpy>:
 40079ac:	deffff04 	addi	sp,sp,-4
 40079b0:	dc000015 	stw	r16,0(sp)
 40079b4:	00c003c4 	movi	r3,15
 40079b8:	2005883a 	mov	r2,r4
 40079bc:	1980432e 	bgeu	r3,r6,4007acc <memcpy+0x120>
 40079c0:	2146b03a 	or	r3,r4,r5
 40079c4:	18c000cc 	andi	r3,r3,3
 40079c8:	1800421e 	bne	r3,zero,4007ad4 <memcpy+0x128>
 40079cc:	343ffc04 	addi	r16,r6,-16
 40079d0:	8020d13a 	srli	r16,r16,4
 40079d4:	28c00104 	addi	r3,r5,4
 40079d8:	23400104 	addi	r13,r4,4
 40079dc:	801e913a 	slli	r15,r16,4
 40079e0:	2b000204 	addi	r12,r5,8
 40079e4:	22c00204 	addi	r11,r4,8
 40079e8:	7bc00504 	addi	r15,r15,20
 40079ec:	2a800304 	addi	r10,r5,12
 40079f0:	22400304 	addi	r9,r4,12
 40079f4:	2bdf883a 	add	r15,r5,r15
 40079f8:	2811883a 	mov	r8,r5
 40079fc:	200f883a 	mov	r7,r4
 4007a00:	41000017 	ldw	r4,0(r8)
 4007a04:	39c00404 	addi	r7,r7,16
 4007a08:	18c00404 	addi	r3,r3,16
 4007a0c:	393ffc15 	stw	r4,-16(r7)
 4007a10:	1bbffc17 	ldw	r14,-16(r3)
 4007a14:	6b400404 	addi	r13,r13,16
 4007a18:	5ac00404 	addi	r11,r11,16
 4007a1c:	6bbffc15 	stw	r14,-16(r13)
 4007a20:	63800017 	ldw	r14,0(r12)
 4007a24:	4a400404 	addi	r9,r9,16
 4007a28:	42000404 	addi	r8,r8,16
 4007a2c:	5bbffc15 	stw	r14,-16(r11)
 4007a30:	53800017 	ldw	r14,0(r10)
 4007a34:	63000404 	addi	r12,r12,16
 4007a38:	52800404 	addi	r10,r10,16
 4007a3c:	4bbffc15 	stw	r14,-16(r9)
 4007a40:	1bffef1e 	bne	r3,r15,4007a00 <__alt_data_end+0xfe007a00>
 4007a44:	81c00044 	addi	r7,r16,1
 4007a48:	380e913a 	slli	r7,r7,4
 4007a4c:	310003cc 	andi	r4,r6,15
 4007a50:	02c000c4 	movi	r11,3
 4007a54:	11c7883a 	add	r3,r2,r7
 4007a58:	29cb883a 	add	r5,r5,r7
 4007a5c:	59001f2e 	bgeu	r11,r4,4007adc <memcpy+0x130>
 4007a60:	1813883a 	mov	r9,r3
 4007a64:	2811883a 	mov	r8,r5
 4007a68:	200f883a 	mov	r7,r4
 4007a6c:	42800017 	ldw	r10,0(r8)
 4007a70:	4a400104 	addi	r9,r9,4
 4007a74:	39ffff04 	addi	r7,r7,-4
 4007a78:	4abfff15 	stw	r10,-4(r9)
 4007a7c:	42000104 	addi	r8,r8,4
 4007a80:	59fffa36 	bltu	r11,r7,4007a6c <__alt_data_end+0xfe007a6c>
 4007a84:	213fff04 	addi	r4,r4,-4
 4007a88:	2008d0ba 	srli	r4,r4,2
 4007a8c:	318000cc 	andi	r6,r6,3
 4007a90:	21000044 	addi	r4,r4,1
 4007a94:	2109883a 	add	r4,r4,r4
 4007a98:	2109883a 	add	r4,r4,r4
 4007a9c:	1907883a 	add	r3,r3,r4
 4007aa0:	290b883a 	add	r5,r5,r4
 4007aa4:	30000626 	beq	r6,zero,4007ac0 <memcpy+0x114>
 4007aa8:	198d883a 	add	r6,r3,r6
 4007aac:	29c00003 	ldbu	r7,0(r5)
 4007ab0:	18c00044 	addi	r3,r3,1
 4007ab4:	29400044 	addi	r5,r5,1
 4007ab8:	19ffffc5 	stb	r7,-1(r3)
 4007abc:	19bffb1e 	bne	r3,r6,4007aac <__alt_data_end+0xfe007aac>
 4007ac0:	dc000017 	ldw	r16,0(sp)
 4007ac4:	dec00104 	addi	sp,sp,4
 4007ac8:	f800283a 	ret
 4007acc:	2007883a 	mov	r3,r4
 4007ad0:	003ff406 	br	4007aa4 <__alt_data_end+0xfe007aa4>
 4007ad4:	2007883a 	mov	r3,r4
 4007ad8:	003ff306 	br	4007aa8 <__alt_data_end+0xfe007aa8>
 4007adc:	200d883a 	mov	r6,r4
 4007ae0:	003ff006 	br	4007aa4 <__alt_data_end+0xfe007aa4>

04007ae4 <memmove>:
 4007ae4:	2005883a 	mov	r2,r4
 4007ae8:	29000b2e 	bgeu	r5,r4,4007b18 <memmove+0x34>
 4007aec:	298f883a 	add	r7,r5,r6
 4007af0:	21c0092e 	bgeu	r4,r7,4007b18 <memmove+0x34>
 4007af4:	2187883a 	add	r3,r4,r6
 4007af8:	198bc83a 	sub	r5,r3,r6
 4007afc:	30004b26 	beq	r6,zero,4007c2c <memmove+0x148>
 4007b00:	39ffffc4 	addi	r7,r7,-1
 4007b04:	39000003 	ldbu	r4,0(r7)
 4007b08:	18ffffc4 	addi	r3,r3,-1
 4007b0c:	19000005 	stb	r4,0(r3)
 4007b10:	197ffb1e 	bne	r3,r5,4007b00 <__alt_data_end+0xfe007b00>
 4007b14:	f800283a 	ret
 4007b18:	00c003c4 	movi	r3,15
 4007b1c:	1980412e 	bgeu	r3,r6,4007c24 <memmove+0x140>
 4007b20:	1146b03a 	or	r3,r2,r5
 4007b24:	18c000cc 	andi	r3,r3,3
 4007b28:	1800411e 	bne	r3,zero,4007c30 <memmove+0x14c>
 4007b2c:	33fffc04 	addi	r15,r6,-16
 4007b30:	781ed13a 	srli	r15,r15,4
 4007b34:	28c00104 	addi	r3,r5,4
 4007b38:	13400104 	addi	r13,r2,4
 4007b3c:	781c913a 	slli	r14,r15,4
 4007b40:	2b000204 	addi	r12,r5,8
 4007b44:	12c00204 	addi	r11,r2,8
 4007b48:	73800504 	addi	r14,r14,20
 4007b4c:	2a800304 	addi	r10,r5,12
 4007b50:	12400304 	addi	r9,r2,12
 4007b54:	2b9d883a 	add	r14,r5,r14
 4007b58:	2811883a 	mov	r8,r5
 4007b5c:	100f883a 	mov	r7,r2
 4007b60:	41000017 	ldw	r4,0(r8)
 4007b64:	39c00404 	addi	r7,r7,16
 4007b68:	18c00404 	addi	r3,r3,16
 4007b6c:	393ffc15 	stw	r4,-16(r7)
 4007b70:	193ffc17 	ldw	r4,-16(r3)
 4007b74:	6b400404 	addi	r13,r13,16
 4007b78:	5ac00404 	addi	r11,r11,16
 4007b7c:	693ffc15 	stw	r4,-16(r13)
 4007b80:	61000017 	ldw	r4,0(r12)
 4007b84:	4a400404 	addi	r9,r9,16
 4007b88:	42000404 	addi	r8,r8,16
 4007b8c:	593ffc15 	stw	r4,-16(r11)
 4007b90:	51000017 	ldw	r4,0(r10)
 4007b94:	63000404 	addi	r12,r12,16
 4007b98:	52800404 	addi	r10,r10,16
 4007b9c:	493ffc15 	stw	r4,-16(r9)
 4007ba0:	1bbfef1e 	bne	r3,r14,4007b60 <__alt_data_end+0xfe007b60>
 4007ba4:	79000044 	addi	r4,r15,1
 4007ba8:	2008913a 	slli	r4,r4,4
 4007bac:	328003cc 	andi	r10,r6,15
 4007bb0:	02c000c4 	movi	r11,3
 4007bb4:	1107883a 	add	r3,r2,r4
 4007bb8:	290b883a 	add	r5,r5,r4
 4007bbc:	5a801e2e 	bgeu	r11,r10,4007c38 <memmove+0x154>
 4007bc0:	1813883a 	mov	r9,r3
 4007bc4:	2811883a 	mov	r8,r5
 4007bc8:	500f883a 	mov	r7,r10
 4007bcc:	41000017 	ldw	r4,0(r8)
 4007bd0:	4a400104 	addi	r9,r9,4
 4007bd4:	39ffff04 	addi	r7,r7,-4
 4007bd8:	493fff15 	stw	r4,-4(r9)
 4007bdc:	42000104 	addi	r8,r8,4
 4007be0:	59fffa36 	bltu	r11,r7,4007bcc <__alt_data_end+0xfe007bcc>
 4007be4:	513fff04 	addi	r4,r10,-4
 4007be8:	2008d0ba 	srli	r4,r4,2
 4007bec:	318000cc 	andi	r6,r6,3
 4007bf0:	21000044 	addi	r4,r4,1
 4007bf4:	2109883a 	add	r4,r4,r4
 4007bf8:	2109883a 	add	r4,r4,r4
 4007bfc:	1907883a 	add	r3,r3,r4
 4007c00:	290b883a 	add	r5,r5,r4
 4007c04:	30000926 	beq	r6,zero,4007c2c <memmove+0x148>
 4007c08:	198d883a 	add	r6,r3,r6
 4007c0c:	29c00003 	ldbu	r7,0(r5)
 4007c10:	18c00044 	addi	r3,r3,1
 4007c14:	29400044 	addi	r5,r5,1
 4007c18:	19ffffc5 	stb	r7,-1(r3)
 4007c1c:	19bffb1e 	bne	r3,r6,4007c0c <__alt_data_end+0xfe007c0c>
 4007c20:	f800283a 	ret
 4007c24:	1007883a 	mov	r3,r2
 4007c28:	003ff606 	br	4007c04 <__alt_data_end+0xfe007c04>
 4007c2c:	f800283a 	ret
 4007c30:	1007883a 	mov	r3,r2
 4007c34:	003ff406 	br	4007c08 <__alt_data_end+0xfe007c08>
 4007c38:	500d883a 	mov	r6,r10
 4007c3c:	003ff106 	br	4007c04 <__alt_data_end+0xfe007c04>

04007c40 <memset>:
 4007c40:	20c000cc 	andi	r3,r4,3
 4007c44:	2005883a 	mov	r2,r4
 4007c48:	18004326 	beq	r3,zero,4007d58 <memset+0x118>
 4007c4c:	31ffffc4 	addi	r7,r6,-1
 4007c50:	30004026 	beq	r6,zero,4007d54 <memset+0x114>
 4007c54:	2813883a 	mov	r9,r5
 4007c58:	200d883a 	mov	r6,r4
 4007c5c:	2007883a 	mov	r3,r4
 4007c60:	00000406 	br	4007c74 <memset+0x34>
 4007c64:	3a3fffc4 	addi	r8,r7,-1
 4007c68:	31800044 	addi	r6,r6,1
 4007c6c:	38003926 	beq	r7,zero,4007d54 <memset+0x114>
 4007c70:	400f883a 	mov	r7,r8
 4007c74:	18c00044 	addi	r3,r3,1
 4007c78:	32400005 	stb	r9,0(r6)
 4007c7c:	1a0000cc 	andi	r8,r3,3
 4007c80:	403ff81e 	bne	r8,zero,4007c64 <__alt_data_end+0xfe007c64>
 4007c84:	010000c4 	movi	r4,3
 4007c88:	21c02d2e 	bgeu	r4,r7,4007d40 <memset+0x100>
 4007c8c:	29803fcc 	andi	r6,r5,255
 4007c90:	3008923a 	slli	r4,r6,8
 4007c94:	218cb03a 	or	r6,r4,r6
 4007c98:	3008943a 	slli	r4,r6,16
 4007c9c:	218cb03a 	or	r6,r4,r6
 4007ca0:	010003c4 	movi	r4,15
 4007ca4:	21c0182e 	bgeu	r4,r7,4007d08 <memset+0xc8>
 4007ca8:	3b3ffc04 	addi	r12,r7,-16
 4007cac:	6018d13a 	srli	r12,r12,4
 4007cb0:	1a000104 	addi	r8,r3,4
 4007cb4:	1ac00204 	addi	r11,r3,8
 4007cb8:	6008913a 	slli	r4,r12,4
 4007cbc:	1a800304 	addi	r10,r3,12
 4007cc0:	1813883a 	mov	r9,r3
 4007cc4:	21000504 	addi	r4,r4,20
 4007cc8:	1909883a 	add	r4,r3,r4
 4007ccc:	49800015 	stw	r6,0(r9)
 4007cd0:	41800015 	stw	r6,0(r8)
 4007cd4:	59800015 	stw	r6,0(r11)
 4007cd8:	51800015 	stw	r6,0(r10)
 4007cdc:	42000404 	addi	r8,r8,16
 4007ce0:	4a400404 	addi	r9,r9,16
 4007ce4:	5ac00404 	addi	r11,r11,16
 4007ce8:	52800404 	addi	r10,r10,16
 4007cec:	413ff71e 	bne	r8,r4,4007ccc <__alt_data_end+0xfe007ccc>
 4007cf0:	63000044 	addi	r12,r12,1
 4007cf4:	6018913a 	slli	r12,r12,4
 4007cf8:	39c003cc 	andi	r7,r7,15
 4007cfc:	010000c4 	movi	r4,3
 4007d00:	1b07883a 	add	r3,r3,r12
 4007d04:	21c00e2e 	bgeu	r4,r7,4007d40 <memset+0x100>
 4007d08:	1813883a 	mov	r9,r3
 4007d0c:	3811883a 	mov	r8,r7
 4007d10:	010000c4 	movi	r4,3
 4007d14:	49800015 	stw	r6,0(r9)
 4007d18:	423fff04 	addi	r8,r8,-4
 4007d1c:	4a400104 	addi	r9,r9,4
 4007d20:	223ffc36 	bltu	r4,r8,4007d14 <__alt_data_end+0xfe007d14>
 4007d24:	393fff04 	addi	r4,r7,-4
 4007d28:	2008d0ba 	srli	r4,r4,2
 4007d2c:	39c000cc 	andi	r7,r7,3
 4007d30:	21000044 	addi	r4,r4,1
 4007d34:	2109883a 	add	r4,r4,r4
 4007d38:	2109883a 	add	r4,r4,r4
 4007d3c:	1907883a 	add	r3,r3,r4
 4007d40:	38000426 	beq	r7,zero,4007d54 <memset+0x114>
 4007d44:	19cf883a 	add	r7,r3,r7
 4007d48:	19400005 	stb	r5,0(r3)
 4007d4c:	18c00044 	addi	r3,r3,1
 4007d50:	19fffd1e 	bne	r3,r7,4007d48 <__alt_data_end+0xfe007d48>
 4007d54:	f800283a 	ret
 4007d58:	2007883a 	mov	r3,r4
 4007d5c:	300f883a 	mov	r7,r6
 4007d60:	003fc806 	br	4007c84 <__alt_data_end+0xfe007c84>

04007d64 <_Balloc>:
 4007d64:	20801317 	ldw	r2,76(r4)
 4007d68:	defffc04 	addi	sp,sp,-16
 4007d6c:	dc400115 	stw	r17,4(sp)
 4007d70:	dc000015 	stw	r16,0(sp)
 4007d74:	dfc00315 	stw	ra,12(sp)
 4007d78:	dc800215 	stw	r18,8(sp)
 4007d7c:	2023883a 	mov	r17,r4
 4007d80:	2821883a 	mov	r16,r5
 4007d84:	10000f26 	beq	r2,zero,4007dc4 <_Balloc+0x60>
 4007d88:	8407883a 	add	r3,r16,r16
 4007d8c:	18c7883a 	add	r3,r3,r3
 4007d90:	10c7883a 	add	r3,r2,r3
 4007d94:	18800017 	ldw	r2,0(r3)
 4007d98:	10001126 	beq	r2,zero,4007de0 <_Balloc+0x7c>
 4007d9c:	11000017 	ldw	r4,0(r2)
 4007da0:	19000015 	stw	r4,0(r3)
 4007da4:	10000415 	stw	zero,16(r2)
 4007da8:	10000315 	stw	zero,12(r2)
 4007dac:	dfc00317 	ldw	ra,12(sp)
 4007db0:	dc800217 	ldw	r18,8(sp)
 4007db4:	dc400117 	ldw	r17,4(sp)
 4007db8:	dc000017 	ldw	r16,0(sp)
 4007dbc:	dec00404 	addi	sp,sp,16
 4007dc0:	f800283a 	ret
 4007dc4:	01400104 	movi	r5,4
 4007dc8:	01800844 	movi	r6,33
 4007dcc:	400ac000 	call	400ac00 <_calloc_r>
 4007dd0:	88801315 	stw	r2,76(r17)
 4007dd4:	103fec1e 	bne	r2,zero,4007d88 <__alt_data_end+0xfe007d88>
 4007dd8:	0005883a 	mov	r2,zero
 4007ddc:	003ff306 	br	4007dac <__alt_data_end+0xfe007dac>
 4007de0:	01400044 	movi	r5,1
 4007de4:	2c24983a 	sll	r18,r5,r16
 4007de8:	8809883a 	mov	r4,r17
 4007dec:	91800144 	addi	r6,r18,5
 4007df0:	318d883a 	add	r6,r6,r6
 4007df4:	318d883a 	add	r6,r6,r6
 4007df8:	400ac000 	call	400ac00 <_calloc_r>
 4007dfc:	103ff626 	beq	r2,zero,4007dd8 <__alt_data_end+0xfe007dd8>
 4007e00:	14000115 	stw	r16,4(r2)
 4007e04:	14800215 	stw	r18,8(r2)
 4007e08:	003fe606 	br	4007da4 <__alt_data_end+0xfe007da4>

04007e0c <_Bfree>:
 4007e0c:	28000826 	beq	r5,zero,4007e30 <_Bfree+0x24>
 4007e10:	28c00117 	ldw	r3,4(r5)
 4007e14:	20801317 	ldw	r2,76(r4)
 4007e18:	18c7883a 	add	r3,r3,r3
 4007e1c:	18c7883a 	add	r3,r3,r3
 4007e20:	10c5883a 	add	r2,r2,r3
 4007e24:	10c00017 	ldw	r3,0(r2)
 4007e28:	28c00015 	stw	r3,0(r5)
 4007e2c:	11400015 	stw	r5,0(r2)
 4007e30:	f800283a 	ret

04007e34 <__multadd>:
 4007e34:	defff704 	addi	sp,sp,-36
 4007e38:	dc800215 	stw	r18,8(sp)
 4007e3c:	2c800417 	ldw	r18,16(r5)
 4007e40:	ddc00715 	stw	r23,28(sp)
 4007e44:	dd800615 	stw	r22,24(sp)
 4007e48:	dd000415 	stw	r20,16(sp)
 4007e4c:	dcc00315 	stw	r19,12(sp)
 4007e50:	dc400115 	stw	r17,4(sp)
 4007e54:	dc000015 	stw	r16,0(sp)
 4007e58:	dfc00815 	stw	ra,32(sp)
 4007e5c:	dd400515 	stw	r21,20(sp)
 4007e60:	2827883a 	mov	r19,r5
 4007e64:	2029883a 	mov	r20,r4
 4007e68:	3023883a 	mov	r17,r6
 4007e6c:	3821883a 	mov	r16,r7
 4007e70:	2d800504 	addi	r22,r5,20
 4007e74:	002f883a 	mov	r23,zero
 4007e78:	b5400017 	ldw	r21,0(r22)
 4007e7c:	880b883a 	mov	r5,r17
 4007e80:	bdc00044 	addi	r23,r23,1
 4007e84:	a93fffcc 	andi	r4,r21,65535
 4007e88:	400c2240 	call	400c224 <__mulsi3>
 4007e8c:	1421883a 	add	r16,r2,r16
 4007e90:	a808d43a 	srli	r4,r21,16
 4007e94:	802ad43a 	srli	r21,r16,16
 4007e98:	880b883a 	mov	r5,r17
 4007e9c:	400c2240 	call	400c224 <__mulsi3>
 4007ea0:	a88f883a 	add	r7,r21,r2
 4007ea4:	3804943a 	slli	r2,r7,16
 4007ea8:	80ffffcc 	andi	r3,r16,65535
 4007eac:	b5800104 	addi	r22,r22,4
 4007eb0:	10c7883a 	add	r3,r2,r3
 4007eb4:	b0ffff15 	stw	r3,-4(r22)
 4007eb8:	3820d43a 	srli	r16,r7,16
 4007ebc:	bcbfee16 	blt	r23,r18,4007e78 <__alt_data_end+0xfe007e78>
 4007ec0:	80000926 	beq	r16,zero,4007ee8 <__multadd+0xb4>
 4007ec4:	98800217 	ldw	r2,8(r19)
 4007ec8:	9080130e 	bge	r18,r2,4007f18 <__multadd+0xe4>
 4007ecc:	90800144 	addi	r2,r18,5
 4007ed0:	1085883a 	add	r2,r2,r2
 4007ed4:	1085883a 	add	r2,r2,r2
 4007ed8:	9885883a 	add	r2,r19,r2
 4007edc:	14000015 	stw	r16,0(r2)
 4007ee0:	94800044 	addi	r18,r18,1
 4007ee4:	9c800415 	stw	r18,16(r19)
 4007ee8:	9805883a 	mov	r2,r19
 4007eec:	dfc00817 	ldw	ra,32(sp)
 4007ef0:	ddc00717 	ldw	r23,28(sp)
 4007ef4:	dd800617 	ldw	r22,24(sp)
 4007ef8:	dd400517 	ldw	r21,20(sp)
 4007efc:	dd000417 	ldw	r20,16(sp)
 4007f00:	dcc00317 	ldw	r19,12(sp)
 4007f04:	dc800217 	ldw	r18,8(sp)
 4007f08:	dc400117 	ldw	r17,4(sp)
 4007f0c:	dc000017 	ldw	r16,0(sp)
 4007f10:	dec00904 	addi	sp,sp,36
 4007f14:	f800283a 	ret
 4007f18:	99400117 	ldw	r5,4(r19)
 4007f1c:	a009883a 	mov	r4,r20
 4007f20:	29400044 	addi	r5,r5,1
 4007f24:	4007d640 	call	4007d64 <_Balloc>
 4007f28:	99800417 	ldw	r6,16(r19)
 4007f2c:	99400304 	addi	r5,r19,12
 4007f30:	11000304 	addi	r4,r2,12
 4007f34:	31800084 	addi	r6,r6,2
 4007f38:	318d883a 	add	r6,r6,r6
 4007f3c:	318d883a 	add	r6,r6,r6
 4007f40:	1023883a 	mov	r17,r2
 4007f44:	40079ac0 	call	40079ac <memcpy>
 4007f48:	99000117 	ldw	r4,4(r19)
 4007f4c:	a0c01317 	ldw	r3,76(r20)
 4007f50:	2109883a 	add	r4,r4,r4
 4007f54:	2109883a 	add	r4,r4,r4
 4007f58:	1907883a 	add	r3,r3,r4
 4007f5c:	18800017 	ldw	r2,0(r3)
 4007f60:	98800015 	stw	r2,0(r19)
 4007f64:	1cc00015 	stw	r19,0(r3)
 4007f68:	8827883a 	mov	r19,r17
 4007f6c:	003fd706 	br	4007ecc <__alt_data_end+0xfe007ecc>

04007f70 <__s2b>:
 4007f70:	defff904 	addi	sp,sp,-28
 4007f74:	dc400115 	stw	r17,4(sp)
 4007f78:	dc000015 	stw	r16,0(sp)
 4007f7c:	2023883a 	mov	r17,r4
 4007f80:	2821883a 	mov	r16,r5
 4007f84:	39000204 	addi	r4,r7,8
 4007f88:	01400244 	movi	r5,9
 4007f8c:	dcc00315 	stw	r19,12(sp)
 4007f90:	dc800215 	stw	r18,8(sp)
 4007f94:	dfc00615 	stw	ra,24(sp)
 4007f98:	dd400515 	stw	r21,20(sp)
 4007f9c:	dd000415 	stw	r20,16(sp)
 4007fa0:	3825883a 	mov	r18,r7
 4007fa4:	3027883a 	mov	r19,r6
 4007fa8:	400c1640 	call	400c164 <__divsi3>
 4007fac:	00c00044 	movi	r3,1
 4007fb0:	000b883a 	mov	r5,zero
 4007fb4:	1880030e 	bge	r3,r2,4007fc4 <__s2b+0x54>
 4007fb8:	18c7883a 	add	r3,r3,r3
 4007fbc:	29400044 	addi	r5,r5,1
 4007fc0:	18bffd16 	blt	r3,r2,4007fb8 <__alt_data_end+0xfe007fb8>
 4007fc4:	8809883a 	mov	r4,r17
 4007fc8:	4007d640 	call	4007d64 <_Balloc>
 4007fcc:	d8c00717 	ldw	r3,28(sp)
 4007fd0:	10c00515 	stw	r3,20(r2)
 4007fd4:	00c00044 	movi	r3,1
 4007fd8:	10c00415 	stw	r3,16(r2)
 4007fdc:	00c00244 	movi	r3,9
 4007fe0:	1cc0210e 	bge	r3,r19,4008068 <__s2b+0xf8>
 4007fe4:	80eb883a 	add	r21,r16,r3
 4007fe8:	a829883a 	mov	r20,r21
 4007fec:	84e1883a 	add	r16,r16,r19
 4007ff0:	a1c00007 	ldb	r7,0(r20)
 4007ff4:	8809883a 	mov	r4,r17
 4007ff8:	a5000044 	addi	r20,r20,1
 4007ffc:	100b883a 	mov	r5,r2
 4008000:	01800284 	movi	r6,10
 4008004:	39fff404 	addi	r7,r7,-48
 4008008:	4007e340 	call	4007e34 <__multadd>
 400800c:	a43ff81e 	bne	r20,r16,4007ff0 <__alt_data_end+0xfe007ff0>
 4008010:	ace1883a 	add	r16,r21,r19
 4008014:	843ffe04 	addi	r16,r16,-8
 4008018:	9c800a0e 	bge	r19,r18,4008044 <__s2b+0xd4>
 400801c:	94e5c83a 	sub	r18,r18,r19
 4008020:	84a5883a 	add	r18,r16,r18
 4008024:	81c00007 	ldb	r7,0(r16)
 4008028:	8809883a 	mov	r4,r17
 400802c:	84000044 	addi	r16,r16,1
 4008030:	100b883a 	mov	r5,r2
 4008034:	01800284 	movi	r6,10
 4008038:	39fff404 	addi	r7,r7,-48
 400803c:	4007e340 	call	4007e34 <__multadd>
 4008040:	84bff81e 	bne	r16,r18,4008024 <__alt_data_end+0xfe008024>
 4008044:	dfc00617 	ldw	ra,24(sp)
 4008048:	dd400517 	ldw	r21,20(sp)
 400804c:	dd000417 	ldw	r20,16(sp)
 4008050:	dcc00317 	ldw	r19,12(sp)
 4008054:	dc800217 	ldw	r18,8(sp)
 4008058:	dc400117 	ldw	r17,4(sp)
 400805c:	dc000017 	ldw	r16,0(sp)
 4008060:	dec00704 	addi	sp,sp,28
 4008064:	f800283a 	ret
 4008068:	84000284 	addi	r16,r16,10
 400806c:	1827883a 	mov	r19,r3
 4008070:	003fe906 	br	4008018 <__alt_data_end+0xfe008018>

04008074 <__hi0bits>:
 4008074:	20bfffec 	andhi	r2,r4,65535
 4008078:	1000141e 	bne	r2,zero,40080cc <__hi0bits+0x58>
 400807c:	2008943a 	slli	r4,r4,16
 4008080:	00800404 	movi	r2,16
 4008084:	20ffc02c 	andhi	r3,r4,65280
 4008088:	1800021e 	bne	r3,zero,4008094 <__hi0bits+0x20>
 400808c:	2008923a 	slli	r4,r4,8
 4008090:	10800204 	addi	r2,r2,8
 4008094:	20fc002c 	andhi	r3,r4,61440
 4008098:	1800021e 	bne	r3,zero,40080a4 <__hi0bits+0x30>
 400809c:	2008913a 	slli	r4,r4,4
 40080a0:	10800104 	addi	r2,r2,4
 40080a4:	20f0002c 	andhi	r3,r4,49152
 40080a8:	1800031e 	bne	r3,zero,40080b8 <__hi0bits+0x44>
 40080ac:	2109883a 	add	r4,r4,r4
 40080b0:	10800084 	addi	r2,r2,2
 40080b4:	2109883a 	add	r4,r4,r4
 40080b8:	20000316 	blt	r4,zero,40080c8 <__hi0bits+0x54>
 40080bc:	2110002c 	andhi	r4,r4,16384
 40080c0:	2000041e 	bne	r4,zero,40080d4 <__hi0bits+0x60>
 40080c4:	00800804 	movi	r2,32
 40080c8:	f800283a 	ret
 40080cc:	0005883a 	mov	r2,zero
 40080d0:	003fec06 	br	4008084 <__alt_data_end+0xfe008084>
 40080d4:	10800044 	addi	r2,r2,1
 40080d8:	f800283a 	ret

040080dc <__lo0bits>:
 40080dc:	20c00017 	ldw	r3,0(r4)
 40080e0:	188001cc 	andi	r2,r3,7
 40080e4:	10000826 	beq	r2,zero,4008108 <__lo0bits+0x2c>
 40080e8:	1880004c 	andi	r2,r3,1
 40080ec:	1000211e 	bne	r2,zero,4008174 <__lo0bits+0x98>
 40080f0:	1880008c 	andi	r2,r3,2
 40080f4:	1000211e 	bne	r2,zero,400817c <__lo0bits+0xa0>
 40080f8:	1806d0ba 	srli	r3,r3,2
 40080fc:	00800084 	movi	r2,2
 4008100:	20c00015 	stw	r3,0(r4)
 4008104:	f800283a 	ret
 4008108:	18bfffcc 	andi	r2,r3,65535
 400810c:	10001326 	beq	r2,zero,400815c <__lo0bits+0x80>
 4008110:	0005883a 	mov	r2,zero
 4008114:	19403fcc 	andi	r5,r3,255
 4008118:	2800021e 	bne	r5,zero,4008124 <__lo0bits+0x48>
 400811c:	1806d23a 	srli	r3,r3,8
 4008120:	10800204 	addi	r2,r2,8
 4008124:	194003cc 	andi	r5,r3,15
 4008128:	2800021e 	bne	r5,zero,4008134 <__lo0bits+0x58>
 400812c:	1806d13a 	srli	r3,r3,4
 4008130:	10800104 	addi	r2,r2,4
 4008134:	194000cc 	andi	r5,r3,3
 4008138:	2800021e 	bne	r5,zero,4008144 <__lo0bits+0x68>
 400813c:	1806d0ba 	srli	r3,r3,2
 4008140:	10800084 	addi	r2,r2,2
 4008144:	1940004c 	andi	r5,r3,1
 4008148:	2800081e 	bne	r5,zero,400816c <__lo0bits+0x90>
 400814c:	1806d07a 	srli	r3,r3,1
 4008150:	1800051e 	bne	r3,zero,4008168 <__lo0bits+0x8c>
 4008154:	00800804 	movi	r2,32
 4008158:	f800283a 	ret
 400815c:	1806d43a 	srli	r3,r3,16
 4008160:	00800404 	movi	r2,16
 4008164:	003feb06 	br	4008114 <__alt_data_end+0xfe008114>
 4008168:	10800044 	addi	r2,r2,1
 400816c:	20c00015 	stw	r3,0(r4)
 4008170:	f800283a 	ret
 4008174:	0005883a 	mov	r2,zero
 4008178:	f800283a 	ret
 400817c:	1806d07a 	srli	r3,r3,1
 4008180:	00800044 	movi	r2,1
 4008184:	20c00015 	stw	r3,0(r4)
 4008188:	f800283a 	ret

0400818c <__i2b>:
 400818c:	defffd04 	addi	sp,sp,-12
 4008190:	dc000015 	stw	r16,0(sp)
 4008194:	04000044 	movi	r16,1
 4008198:	dc400115 	stw	r17,4(sp)
 400819c:	2823883a 	mov	r17,r5
 40081a0:	800b883a 	mov	r5,r16
 40081a4:	dfc00215 	stw	ra,8(sp)
 40081a8:	4007d640 	call	4007d64 <_Balloc>
 40081ac:	14400515 	stw	r17,20(r2)
 40081b0:	14000415 	stw	r16,16(r2)
 40081b4:	dfc00217 	ldw	ra,8(sp)
 40081b8:	dc400117 	ldw	r17,4(sp)
 40081bc:	dc000017 	ldw	r16,0(sp)
 40081c0:	dec00304 	addi	sp,sp,12
 40081c4:	f800283a 	ret

040081c8 <__multiply>:
 40081c8:	deffef04 	addi	sp,sp,-68
 40081cc:	dc400815 	stw	r17,32(sp)
 40081d0:	dc000715 	stw	r16,28(sp)
 40081d4:	2c400417 	ldw	r17,16(r5)
 40081d8:	34000417 	ldw	r16,16(r6)
 40081dc:	dd800d15 	stw	r22,52(sp)
 40081e0:	dc800915 	stw	r18,36(sp)
 40081e4:	dfc01015 	stw	ra,64(sp)
 40081e8:	df000f15 	stw	fp,60(sp)
 40081ec:	ddc00e15 	stw	r23,56(sp)
 40081f0:	dd400c15 	stw	r21,48(sp)
 40081f4:	dd000b15 	stw	r20,44(sp)
 40081f8:	dcc00a15 	stw	r19,40(sp)
 40081fc:	2825883a 	mov	r18,r5
 4008200:	302d883a 	mov	r22,r6
 4008204:	8c009116 	blt	r17,r16,400844c <__multiply+0x284>
 4008208:	8005883a 	mov	r2,r16
 400820c:	8821883a 	mov	r16,r17
 4008210:	1023883a 	mov	r17,r2
 4008214:	90800217 	ldw	r2,8(r18)
 4008218:	8447883a 	add	r3,r16,r17
 400821c:	d8c00215 	stw	r3,8(sp)
 4008220:	91400117 	ldw	r5,4(r18)
 4008224:	10c0010e 	bge	r2,r3,400822c <__multiply+0x64>
 4008228:	29400044 	addi	r5,r5,1
 400822c:	4007d640 	call	4007d64 <_Balloc>
 4008230:	d8c00217 	ldw	r3,8(sp)
 4008234:	d8800615 	stw	r2,24(sp)
 4008238:	18eb883a 	add	r21,r3,r3
 400823c:	ad6b883a 	add	r21,r21,r21
 4008240:	10c00504 	addi	r3,r2,20
 4008244:	1d6b883a 	add	r21,r3,r21
 4008248:	d8c00115 	stw	r3,4(sp)
 400824c:	dd400315 	stw	r21,12(sp)
 4008250:	1805883a 	mov	r2,r3
 4008254:	1d40042e 	bgeu	r3,r21,4008268 <__multiply+0xa0>
 4008258:	d8c00317 	ldw	r3,12(sp)
 400825c:	10000015 	stw	zero,0(r2)
 4008260:	10800104 	addi	r2,r2,4
 4008264:	10fffc36 	bltu	r2,r3,4008258 <__alt_data_end+0xfe008258>
 4008268:	8c63883a 	add	r17,r17,r17
 400826c:	b5800504 	addi	r22,r22,20
 4008270:	8c63883a 	add	r17,r17,r17
 4008274:	94800504 	addi	r18,r18,20
 4008278:	8421883a 	add	r16,r16,r16
 400827c:	b463883a 	add	r17,r22,r17
 4008280:	8421883a 	add	r16,r16,r16
 4008284:	dd800015 	stw	r22,0(sp)
 4008288:	dc800415 	stw	r18,16(sp)
 400828c:	dc400515 	stw	r17,20(sp)
 4008290:	9429883a 	add	r20,r18,r16
 4008294:	b4404f2e 	bgeu	r22,r17,40083d4 <__multiply+0x20c>
 4008298:	d8c00017 	ldw	r3,0(sp)
 400829c:	1c800017 	ldw	r18,0(r3)
 40082a0:	943fffcc 	andi	r16,r18,65535
 40082a4:	80001e26 	beq	r16,zero,4008320 <__multiply+0x158>
 40082a8:	dd800117 	ldw	r22,4(sp)
 40082ac:	dd400417 	ldw	r21,16(sp)
 40082b0:	0025883a 	mov	r18,zero
 40082b4:	adc00017 	ldw	r23,0(r21)
 40082b8:	b4c00017 	ldw	r19,0(r22)
 40082bc:	800b883a 	mov	r5,r16
 40082c0:	b93fffcc 	andi	r4,r23,65535
 40082c4:	400c2240 	call	400c224 <__mulsi3>
 40082c8:	9c7fffcc 	andi	r17,r19,65535
 40082cc:	8885883a 	add	r2,r17,r2
 40082d0:	b808d43a 	srli	r4,r23,16
 40082d4:	14a3883a 	add	r17,r2,r18
 40082d8:	9826d43a 	srli	r19,r19,16
 40082dc:	8824d43a 	srli	r18,r17,16
 40082e0:	800b883a 	mov	r5,r16
 40082e4:	400c2240 	call	400c224 <__mulsi3>
 40082e8:	9885883a 	add	r2,r19,r2
 40082ec:	14a7883a 	add	r19,r2,r18
 40082f0:	88ffffcc 	andi	r3,r17,65535
 40082f4:	9822943a 	slli	r17,r19,16
 40082f8:	ad400104 	addi	r21,r21,4
 40082fc:	b005883a 	mov	r2,r22
 4008300:	88c6b03a 	or	r3,r17,r3
 4008304:	b0c00015 	stw	r3,0(r22)
 4008308:	9824d43a 	srli	r18,r19,16
 400830c:	b5800104 	addi	r22,r22,4
 4008310:	ad3fe836 	bltu	r21,r20,40082b4 <__alt_data_end+0xfe0082b4>
 4008314:	d8c00017 	ldw	r3,0(sp)
 4008318:	14800115 	stw	r18,4(r2)
 400831c:	1c800017 	ldw	r18,0(r3)
 4008320:	9024d43a 	srli	r18,r18,16
 4008324:	90002226 	beq	r18,zero,40083b0 <__multiply+0x1e8>
 4008328:	d8c00117 	ldw	r3,4(sp)
 400832c:	dd800417 	ldw	r22,16(sp)
 4008330:	002f883a 	mov	r23,zero
 4008334:	1f000017 	ldw	fp,0(r3)
 4008338:	1823883a 	mov	r17,r3
 400833c:	182b883a 	mov	r21,r3
 4008340:	e021883a 	mov	r16,fp
 4008344:	00000106 	br	400834c <__multiply+0x184>
 4008348:	982b883a 	mov	r21,r19
 400834c:	b100000b 	ldhu	r4,0(r22)
 4008350:	8020d43a 	srli	r16,r16,16
 4008354:	900b883a 	mov	r5,r18
 4008358:	400c2240 	call	400c224 <__mulsi3>
 400835c:	1405883a 	add	r2,r2,r16
 4008360:	15ef883a 	add	r23,r2,r23
 4008364:	b804943a 	slli	r2,r23,16
 4008368:	e0ffffcc 	andi	r3,fp,65535
 400836c:	8c400104 	addi	r17,r17,4
 4008370:	10c6b03a 	or	r3,r2,r3
 4008374:	88ffff15 	stw	r3,-4(r17)
 4008378:	b5800104 	addi	r22,r22,4
 400837c:	b13fff17 	ldw	r4,-4(r22)
 4008380:	acc00104 	addi	r19,r21,4
 4008384:	900b883a 	mov	r5,r18
 4008388:	2008d43a 	srli	r4,r4,16
 400838c:	9c000017 	ldw	r16,0(r19)
 4008390:	400c2240 	call	400c224 <__mulsi3>
 4008394:	b806d43a 	srli	r3,r23,16
 4008398:	813fffcc 	andi	r4,r16,65535
 400839c:	1105883a 	add	r2,r2,r4
 40083a0:	10f9883a 	add	fp,r2,r3
 40083a4:	e02ed43a 	srli	r23,fp,16
 40083a8:	b53fe736 	bltu	r22,r20,4008348 <__alt_data_end+0xfe008348>
 40083ac:	af000115 	stw	fp,4(r21)
 40083b0:	d8c00017 	ldw	r3,0(sp)
 40083b4:	d9000517 	ldw	r4,20(sp)
 40083b8:	18c00104 	addi	r3,r3,4
 40083bc:	d8c00015 	stw	r3,0(sp)
 40083c0:	d8c00117 	ldw	r3,4(sp)
 40083c4:	18c00104 	addi	r3,r3,4
 40083c8:	d8c00115 	stw	r3,4(sp)
 40083cc:	d8c00017 	ldw	r3,0(sp)
 40083d0:	193fb136 	bltu	r3,r4,4008298 <__alt_data_end+0xfe008298>
 40083d4:	d8c00217 	ldw	r3,8(sp)
 40083d8:	00c00c0e 	bge	zero,r3,400840c <__multiply+0x244>
 40083dc:	d8c00317 	ldw	r3,12(sp)
 40083e0:	18bfff17 	ldw	r2,-4(r3)
 40083e4:	1d7fff04 	addi	r21,r3,-4
 40083e8:	10000326 	beq	r2,zero,40083f8 <__multiply+0x230>
 40083ec:	00000706 	br	400840c <__multiply+0x244>
 40083f0:	a8800017 	ldw	r2,0(r21)
 40083f4:	1000051e 	bne	r2,zero,400840c <__multiply+0x244>
 40083f8:	d8c00217 	ldw	r3,8(sp)
 40083fc:	ad7fff04 	addi	r21,r21,-4
 4008400:	18ffffc4 	addi	r3,r3,-1
 4008404:	d8c00215 	stw	r3,8(sp)
 4008408:	183ff91e 	bne	r3,zero,40083f0 <__alt_data_end+0xfe0083f0>
 400840c:	d8c00617 	ldw	r3,24(sp)
 4008410:	d9000217 	ldw	r4,8(sp)
 4008414:	1805883a 	mov	r2,r3
 4008418:	19000415 	stw	r4,16(r3)
 400841c:	dfc01017 	ldw	ra,64(sp)
 4008420:	df000f17 	ldw	fp,60(sp)
 4008424:	ddc00e17 	ldw	r23,56(sp)
 4008428:	dd800d17 	ldw	r22,52(sp)
 400842c:	dd400c17 	ldw	r21,48(sp)
 4008430:	dd000b17 	ldw	r20,44(sp)
 4008434:	dcc00a17 	ldw	r19,40(sp)
 4008438:	dc800917 	ldw	r18,36(sp)
 400843c:	dc400817 	ldw	r17,32(sp)
 4008440:	dc000717 	ldw	r16,28(sp)
 4008444:	dec01104 	addi	sp,sp,68
 4008448:	f800283a 	ret
 400844c:	3025883a 	mov	r18,r6
 4008450:	282d883a 	mov	r22,r5
 4008454:	003f6f06 	br	4008214 <__alt_data_end+0xfe008214>

04008458 <__pow5mult>:
 4008458:	defffa04 	addi	sp,sp,-24
 400845c:	dcc00315 	stw	r19,12(sp)
 4008460:	dc800215 	stw	r18,8(sp)
 4008464:	dc000015 	stw	r16,0(sp)
 4008468:	dfc00515 	stw	ra,20(sp)
 400846c:	dd000415 	stw	r20,16(sp)
 4008470:	dc400115 	stw	r17,4(sp)
 4008474:	308000cc 	andi	r2,r6,3
 4008478:	3021883a 	mov	r16,r6
 400847c:	2027883a 	mov	r19,r4
 4008480:	2825883a 	mov	r18,r5
 4008484:	10002e1e 	bne	r2,zero,4008540 <__pow5mult+0xe8>
 4008488:	8021d0ba 	srai	r16,r16,2
 400848c:	80001a26 	beq	r16,zero,40084f8 <__pow5mult+0xa0>
 4008490:	9c401217 	ldw	r17,72(r19)
 4008494:	8800061e 	bne	r17,zero,40084b0 <__pow5mult+0x58>
 4008498:	00003406 	br	400856c <__pow5mult+0x114>
 400849c:	8021d07a 	srai	r16,r16,1
 40084a0:	80001526 	beq	r16,zero,40084f8 <__pow5mult+0xa0>
 40084a4:	88800017 	ldw	r2,0(r17)
 40084a8:	10001c26 	beq	r2,zero,400851c <__pow5mult+0xc4>
 40084ac:	1023883a 	mov	r17,r2
 40084b0:	80c0004c 	andi	r3,r16,1
 40084b4:	183ff926 	beq	r3,zero,400849c <__alt_data_end+0xfe00849c>
 40084b8:	900b883a 	mov	r5,r18
 40084bc:	880d883a 	mov	r6,r17
 40084c0:	9809883a 	mov	r4,r19
 40084c4:	40081c80 	call	40081c8 <__multiply>
 40084c8:	90001b26 	beq	r18,zero,4008538 <__pow5mult+0xe0>
 40084cc:	91c00117 	ldw	r7,4(r18)
 40084d0:	98c01317 	ldw	r3,76(r19)
 40084d4:	8021d07a 	srai	r16,r16,1
 40084d8:	39cf883a 	add	r7,r7,r7
 40084dc:	39cf883a 	add	r7,r7,r7
 40084e0:	19c7883a 	add	r3,r3,r7
 40084e4:	19000017 	ldw	r4,0(r3)
 40084e8:	91000015 	stw	r4,0(r18)
 40084ec:	1c800015 	stw	r18,0(r3)
 40084f0:	1025883a 	mov	r18,r2
 40084f4:	803feb1e 	bne	r16,zero,40084a4 <__alt_data_end+0xfe0084a4>
 40084f8:	9005883a 	mov	r2,r18
 40084fc:	dfc00517 	ldw	ra,20(sp)
 4008500:	dd000417 	ldw	r20,16(sp)
 4008504:	dcc00317 	ldw	r19,12(sp)
 4008508:	dc800217 	ldw	r18,8(sp)
 400850c:	dc400117 	ldw	r17,4(sp)
 4008510:	dc000017 	ldw	r16,0(sp)
 4008514:	dec00604 	addi	sp,sp,24
 4008518:	f800283a 	ret
 400851c:	9809883a 	mov	r4,r19
 4008520:	880b883a 	mov	r5,r17
 4008524:	880d883a 	mov	r6,r17
 4008528:	40081c80 	call	40081c8 <__multiply>
 400852c:	88800015 	stw	r2,0(r17)
 4008530:	10000015 	stw	zero,0(r2)
 4008534:	003fdd06 	br	40084ac <__alt_data_end+0xfe0084ac>
 4008538:	1025883a 	mov	r18,r2
 400853c:	003fd706 	br	400849c <__alt_data_end+0xfe00849c>
 4008540:	10bfffc4 	addi	r2,r2,-1
 4008544:	1085883a 	add	r2,r2,r2
 4008548:	00c10074 	movhi	r3,1025
 400854c:	18c6a504 	addi	r3,r3,6804
 4008550:	1085883a 	add	r2,r2,r2
 4008554:	1885883a 	add	r2,r3,r2
 4008558:	11800017 	ldw	r6,0(r2)
 400855c:	000f883a 	mov	r7,zero
 4008560:	4007e340 	call	4007e34 <__multadd>
 4008564:	1025883a 	mov	r18,r2
 4008568:	003fc706 	br	4008488 <__alt_data_end+0xfe008488>
 400856c:	05000044 	movi	r20,1
 4008570:	9809883a 	mov	r4,r19
 4008574:	a00b883a 	mov	r5,r20
 4008578:	4007d640 	call	4007d64 <_Balloc>
 400857c:	1023883a 	mov	r17,r2
 4008580:	00809c44 	movi	r2,625
 4008584:	88800515 	stw	r2,20(r17)
 4008588:	8d000415 	stw	r20,16(r17)
 400858c:	9c401215 	stw	r17,72(r19)
 4008590:	88000015 	stw	zero,0(r17)
 4008594:	003fc606 	br	40084b0 <__alt_data_end+0xfe0084b0>

04008598 <__lshift>:
 4008598:	defff904 	addi	sp,sp,-28
 400859c:	dd000415 	stw	r20,16(sp)
 40085a0:	dcc00315 	stw	r19,12(sp)
 40085a4:	3029d17a 	srai	r20,r6,5
 40085a8:	2cc00417 	ldw	r19,16(r5)
 40085ac:	28800217 	ldw	r2,8(r5)
 40085b0:	dd400515 	stw	r21,20(sp)
 40085b4:	a4e7883a 	add	r19,r20,r19
 40085b8:	dc800215 	stw	r18,8(sp)
 40085bc:	dc400115 	stw	r17,4(sp)
 40085c0:	dc000015 	stw	r16,0(sp)
 40085c4:	dfc00615 	stw	ra,24(sp)
 40085c8:	9c000044 	addi	r16,r19,1
 40085cc:	2823883a 	mov	r17,r5
 40085d0:	302b883a 	mov	r21,r6
 40085d4:	2025883a 	mov	r18,r4
 40085d8:	29400117 	ldw	r5,4(r5)
 40085dc:	1400030e 	bge	r2,r16,40085ec <__lshift+0x54>
 40085e0:	1085883a 	add	r2,r2,r2
 40085e4:	29400044 	addi	r5,r5,1
 40085e8:	143ffd16 	blt	r2,r16,40085e0 <__alt_data_end+0xfe0085e0>
 40085ec:	9009883a 	mov	r4,r18
 40085f0:	4007d640 	call	4007d64 <_Balloc>
 40085f4:	11c00504 	addi	r7,r2,20
 40085f8:	0500090e 	bge	zero,r20,4008620 <__lshift+0x88>
 40085fc:	3811883a 	mov	r8,r7
 4008600:	0007883a 	mov	r3,zero
 4008604:	40000015 	stw	zero,0(r8)
 4008608:	18c00044 	addi	r3,r3,1
 400860c:	42000104 	addi	r8,r8,4
 4008610:	1d3ffc1e 	bne	r3,r20,4008604 <__alt_data_end+0xfe008604>
 4008614:	18c7883a 	add	r3,r3,r3
 4008618:	18c7883a 	add	r3,r3,r3
 400861c:	38cf883a 	add	r7,r7,r3
 4008620:	89000417 	ldw	r4,16(r17)
 4008624:	88c00504 	addi	r3,r17,20
 4008628:	a98007cc 	andi	r6,r21,31
 400862c:	2109883a 	add	r4,r4,r4
 4008630:	2109883a 	add	r4,r4,r4
 4008634:	1909883a 	add	r4,r3,r4
 4008638:	30002326 	beq	r6,zero,40086c8 <__lshift+0x130>
 400863c:	01400804 	movi	r5,32
 4008640:	298bc83a 	sub	r5,r5,r6
 4008644:	0013883a 	mov	r9,zero
 4008648:	1a000017 	ldw	r8,0(r3)
 400864c:	3815883a 	mov	r10,r7
 4008650:	39c00104 	addi	r7,r7,4
 4008654:	4190983a 	sll	r8,r8,r6
 4008658:	18c00104 	addi	r3,r3,4
 400865c:	4a10b03a 	or	r8,r9,r8
 4008660:	3a3fff15 	stw	r8,-4(r7)
 4008664:	1a3fff17 	ldw	r8,-4(r3)
 4008668:	4152d83a 	srl	r9,r8,r5
 400866c:	193ff636 	bltu	r3,r4,4008648 <__alt_data_end+0xfe008648>
 4008670:	52400115 	stw	r9,4(r10)
 4008674:	48000126 	beq	r9,zero,400867c <__lshift+0xe4>
 4008678:	9c000084 	addi	r16,r19,2
 400867c:	89000117 	ldw	r4,4(r17)
 4008680:	90c01317 	ldw	r3,76(r18)
 4008684:	843fffc4 	addi	r16,r16,-1
 4008688:	2109883a 	add	r4,r4,r4
 400868c:	2109883a 	add	r4,r4,r4
 4008690:	1907883a 	add	r3,r3,r4
 4008694:	19000017 	ldw	r4,0(r3)
 4008698:	14000415 	stw	r16,16(r2)
 400869c:	89000015 	stw	r4,0(r17)
 40086a0:	1c400015 	stw	r17,0(r3)
 40086a4:	dfc00617 	ldw	ra,24(sp)
 40086a8:	dd400517 	ldw	r21,20(sp)
 40086ac:	dd000417 	ldw	r20,16(sp)
 40086b0:	dcc00317 	ldw	r19,12(sp)
 40086b4:	dc800217 	ldw	r18,8(sp)
 40086b8:	dc400117 	ldw	r17,4(sp)
 40086bc:	dc000017 	ldw	r16,0(sp)
 40086c0:	dec00704 	addi	sp,sp,28
 40086c4:	f800283a 	ret
 40086c8:	19400017 	ldw	r5,0(r3)
 40086cc:	39c00104 	addi	r7,r7,4
 40086d0:	18c00104 	addi	r3,r3,4
 40086d4:	397fff15 	stw	r5,-4(r7)
 40086d8:	193ffb36 	bltu	r3,r4,40086c8 <__alt_data_end+0xfe0086c8>
 40086dc:	003fe706 	br	400867c <__alt_data_end+0xfe00867c>

040086e0 <__mcmp>:
 40086e0:	20800417 	ldw	r2,16(r4)
 40086e4:	28c00417 	ldw	r3,16(r5)
 40086e8:	10c5c83a 	sub	r2,r2,r3
 40086ec:	1000111e 	bne	r2,zero,4008734 <__mcmp+0x54>
 40086f0:	18c7883a 	add	r3,r3,r3
 40086f4:	18c7883a 	add	r3,r3,r3
 40086f8:	21000504 	addi	r4,r4,20
 40086fc:	29400504 	addi	r5,r5,20
 4008700:	20c5883a 	add	r2,r4,r3
 4008704:	28cb883a 	add	r5,r5,r3
 4008708:	00000106 	br	4008710 <__mcmp+0x30>
 400870c:	20800a2e 	bgeu	r4,r2,4008738 <__mcmp+0x58>
 4008710:	10bfff04 	addi	r2,r2,-4
 4008714:	297fff04 	addi	r5,r5,-4
 4008718:	11800017 	ldw	r6,0(r2)
 400871c:	28c00017 	ldw	r3,0(r5)
 4008720:	30fffa26 	beq	r6,r3,400870c <__alt_data_end+0xfe00870c>
 4008724:	30c00236 	bltu	r6,r3,4008730 <__mcmp+0x50>
 4008728:	00800044 	movi	r2,1
 400872c:	f800283a 	ret
 4008730:	00bfffc4 	movi	r2,-1
 4008734:	f800283a 	ret
 4008738:	0005883a 	mov	r2,zero
 400873c:	f800283a 	ret

04008740 <__mdiff>:
 4008740:	defffb04 	addi	sp,sp,-20
 4008744:	dc000015 	stw	r16,0(sp)
 4008748:	2821883a 	mov	r16,r5
 400874c:	dcc00315 	stw	r19,12(sp)
 4008750:	300b883a 	mov	r5,r6
 4008754:	2027883a 	mov	r19,r4
 4008758:	8009883a 	mov	r4,r16
 400875c:	dc800215 	stw	r18,8(sp)
 4008760:	dfc00415 	stw	ra,16(sp)
 4008764:	dc400115 	stw	r17,4(sp)
 4008768:	3025883a 	mov	r18,r6
 400876c:	40086e00 	call	40086e0 <__mcmp>
 4008770:	10005226 	beq	r2,zero,40088bc <__mdiff+0x17c>
 4008774:	10004c16 	blt	r2,zero,40088a8 <__mdiff+0x168>
 4008778:	0023883a 	mov	r17,zero
 400877c:	81400117 	ldw	r5,4(r16)
 4008780:	9809883a 	mov	r4,r19
 4008784:	4007d640 	call	4007d64 <_Balloc>
 4008788:	83400417 	ldw	r13,16(r16)
 400878c:	93800417 	ldw	r14,16(r18)
 4008790:	81000504 	addi	r4,r16,20
 4008794:	6b59883a 	add	r12,r13,r13
 4008798:	739d883a 	add	r14,r14,r14
 400879c:	6319883a 	add	r12,r12,r12
 40087a0:	91800504 	addi	r6,r18,20
 40087a4:	739d883a 	add	r14,r14,r14
 40087a8:	14400315 	stw	r17,12(r2)
 40087ac:	2319883a 	add	r12,r4,r12
 40087b0:	339d883a 	add	r14,r6,r14
 40087b4:	12400504 	addi	r9,r2,20
 40087b8:	0007883a 	mov	r3,zero
 40087bc:	22000017 	ldw	r8,0(r4)
 40087c0:	32800017 	ldw	r10,0(r6)
 40087c4:	4ac00104 	addi	r11,r9,4
 40087c8:	41ffffcc 	andi	r7,r8,65535
 40087cc:	38c7883a 	add	r3,r7,r3
 40087d0:	51ffffcc 	andi	r7,r10,65535
 40087d4:	19cfc83a 	sub	r7,r3,r7
 40087d8:	4010d43a 	srli	r8,r8,16
 40087dc:	5014d43a 	srli	r10,r10,16
 40087e0:	3807d43a 	srai	r3,r7,16
 40087e4:	39ffffcc 	andi	r7,r7,65535
 40087e8:	4291c83a 	sub	r8,r8,r10
 40087ec:	40c7883a 	add	r3,r8,r3
 40087f0:	1810943a 	slli	r8,r3,16
 40087f4:	31800104 	addi	r6,r6,4
 40087f8:	21000104 	addi	r4,r4,4
 40087fc:	41ceb03a 	or	r7,r8,r7
 4008800:	49c00015 	stw	r7,0(r9)
 4008804:	1807d43a 	srai	r3,r3,16
 4008808:	580b883a 	mov	r5,r11
 400880c:	5813883a 	mov	r9,r11
 4008810:	33bfea36 	bltu	r6,r14,40087bc <__alt_data_end+0xfe0087bc>
 4008814:	2011883a 	mov	r8,r4
 4008818:	2300152e 	bgeu	r4,r12,4008870 <__mdiff+0x130>
 400881c:	21400017 	ldw	r5,0(r4)
 4008820:	4a400104 	addi	r9,r9,4
 4008824:	21000104 	addi	r4,r4,4
 4008828:	29ffffcc 	andi	r7,r5,65535
 400882c:	38c7883a 	add	r3,r7,r3
 4008830:	280ad43a 	srli	r5,r5,16
 4008834:	180dd43a 	srai	r6,r3,16
 4008838:	19ffffcc 	andi	r7,r3,65535
 400883c:	3147883a 	add	r3,r6,r5
 4008840:	180a943a 	slli	r5,r3,16
 4008844:	1807d43a 	srai	r3,r3,16
 4008848:	29ceb03a 	or	r7,r5,r7
 400884c:	49ffff15 	stw	r7,-4(r9)
 4008850:	233ff236 	bltu	r4,r12,400881c <__alt_data_end+0xfe00881c>
 4008854:	0206303a 	nor	r3,zero,r8
 4008858:	1b07883a 	add	r3,r3,r12
 400885c:	1806d0ba 	srli	r3,r3,2
 4008860:	18c00044 	addi	r3,r3,1
 4008864:	18c7883a 	add	r3,r3,r3
 4008868:	18c7883a 	add	r3,r3,r3
 400886c:	58cb883a 	add	r5,r11,r3
 4008870:	28ffff04 	addi	r3,r5,-4
 4008874:	3800041e 	bne	r7,zero,4008888 <__mdiff+0x148>
 4008878:	18ffff04 	addi	r3,r3,-4
 400887c:	19000017 	ldw	r4,0(r3)
 4008880:	6b7fffc4 	addi	r13,r13,-1
 4008884:	203ffc26 	beq	r4,zero,4008878 <__alt_data_end+0xfe008878>
 4008888:	13400415 	stw	r13,16(r2)
 400888c:	dfc00417 	ldw	ra,16(sp)
 4008890:	dcc00317 	ldw	r19,12(sp)
 4008894:	dc800217 	ldw	r18,8(sp)
 4008898:	dc400117 	ldw	r17,4(sp)
 400889c:	dc000017 	ldw	r16,0(sp)
 40088a0:	dec00504 	addi	sp,sp,20
 40088a4:	f800283a 	ret
 40088a8:	8005883a 	mov	r2,r16
 40088ac:	04400044 	movi	r17,1
 40088b0:	9021883a 	mov	r16,r18
 40088b4:	1025883a 	mov	r18,r2
 40088b8:	003fb006 	br	400877c <__alt_data_end+0xfe00877c>
 40088bc:	9809883a 	mov	r4,r19
 40088c0:	000b883a 	mov	r5,zero
 40088c4:	4007d640 	call	4007d64 <_Balloc>
 40088c8:	00c00044 	movi	r3,1
 40088cc:	10c00415 	stw	r3,16(r2)
 40088d0:	10000515 	stw	zero,20(r2)
 40088d4:	003fed06 	br	400888c <__alt_data_end+0xfe00888c>

040088d8 <__ulp>:
 40088d8:	295ffc2c 	andhi	r5,r5,32752
 40088dc:	00bf3034 	movhi	r2,64704
 40088e0:	2887883a 	add	r3,r5,r2
 40088e4:	00c0020e 	bge	zero,r3,40088f0 <__ulp+0x18>
 40088e8:	0005883a 	mov	r2,zero
 40088ec:	f800283a 	ret
 40088f0:	00c7c83a 	sub	r3,zero,r3
 40088f4:	180bd53a 	srai	r5,r3,20
 40088f8:	008004c4 	movi	r2,19
 40088fc:	11400a0e 	bge	r2,r5,4008928 <__ulp+0x50>
 4008900:	00800c84 	movi	r2,50
 4008904:	0007883a 	mov	r3,zero
 4008908:	11400516 	blt	r2,r5,4008920 <__ulp+0x48>
 400890c:	00800cc4 	movi	r2,51
 4008910:	114bc83a 	sub	r5,r2,r5
 4008914:	00800044 	movi	r2,1
 4008918:	1144983a 	sll	r2,r2,r5
 400891c:	f800283a 	ret
 4008920:	00800044 	movi	r2,1
 4008924:	f800283a 	ret
 4008928:	00800234 	movhi	r2,8
 400892c:	1147d83a 	sra	r3,r2,r5
 4008930:	0005883a 	mov	r2,zero
 4008934:	f800283a 	ret

04008938 <__b2d>:
 4008938:	defffa04 	addi	sp,sp,-24
 400893c:	dc000015 	stw	r16,0(sp)
 4008940:	24000417 	ldw	r16,16(r4)
 4008944:	dc400115 	stw	r17,4(sp)
 4008948:	24400504 	addi	r17,r4,20
 400894c:	8421883a 	add	r16,r16,r16
 4008950:	8421883a 	add	r16,r16,r16
 4008954:	8c21883a 	add	r16,r17,r16
 4008958:	dc800215 	stw	r18,8(sp)
 400895c:	84bfff17 	ldw	r18,-4(r16)
 4008960:	dd000415 	stw	r20,16(sp)
 4008964:	dcc00315 	stw	r19,12(sp)
 4008968:	9009883a 	mov	r4,r18
 400896c:	2829883a 	mov	r20,r5
 4008970:	dfc00515 	stw	ra,20(sp)
 4008974:	40080740 	call	4008074 <__hi0bits>
 4008978:	00c00804 	movi	r3,32
 400897c:	1887c83a 	sub	r3,r3,r2
 4008980:	a0c00015 	stw	r3,0(r20)
 4008984:	00c00284 	movi	r3,10
 4008988:	84ffff04 	addi	r19,r16,-4
 400898c:	18801216 	blt	r3,r2,40089d8 <__b2d+0xa0>
 4008990:	014002c4 	movi	r5,11
 4008994:	2889c83a 	sub	r4,r5,r2
 4008998:	9106d83a 	srl	r3,r18,r4
 400899c:	18cffc34 	orhi	r3,r3,16368
 40089a0:	8cc0282e 	bgeu	r17,r19,4008a44 <__b2d+0x10c>
 40089a4:	817ffe17 	ldw	r5,-8(r16)
 40089a8:	290ad83a 	srl	r5,r5,r4
 40089ac:	10800544 	addi	r2,r2,21
 40089b0:	9084983a 	sll	r2,r18,r2
 40089b4:	2884b03a 	or	r2,r5,r2
 40089b8:	dfc00517 	ldw	ra,20(sp)
 40089bc:	dd000417 	ldw	r20,16(sp)
 40089c0:	dcc00317 	ldw	r19,12(sp)
 40089c4:	dc800217 	ldw	r18,8(sp)
 40089c8:	dc400117 	ldw	r17,4(sp)
 40089cc:	dc000017 	ldw	r16,0(sp)
 40089d0:	dec00604 	addi	sp,sp,24
 40089d4:	f800283a 	ret
 40089d8:	113ffd44 	addi	r4,r2,-11
 40089dc:	8cc00f2e 	bgeu	r17,r19,4008a1c <__b2d+0xe4>
 40089e0:	81bffe04 	addi	r6,r16,-8
 40089e4:	817ffe17 	ldw	r5,-8(r16)
 40089e8:	20001326 	beq	r4,zero,4008a38 <__b2d+0x100>
 40089ec:	00c00ac4 	movi	r3,43
 40089f0:	1885c83a 	sub	r2,r3,r2
 40089f4:	2886d83a 	srl	r3,r5,r2
 40089f8:	9124983a 	sll	r18,r18,r4
 40089fc:	90e4b03a 	or	r18,r18,r3
 4008a00:	90cffc34 	orhi	r3,r18,16368
 4008a04:	8980112e 	bgeu	r17,r6,4008a4c <__b2d+0x114>
 4008a08:	81bffd17 	ldw	r6,-12(r16)
 4008a0c:	308cd83a 	srl	r6,r6,r2
 4008a10:	2904983a 	sll	r2,r5,r4
 4008a14:	1184b03a 	or	r2,r2,r6
 4008a18:	003fe706 	br	40089b8 <__alt_data_end+0xfe0089b8>
 4008a1c:	20000526 	beq	r4,zero,4008a34 <__b2d+0xfc>
 4008a20:	9124983a 	sll	r18,r18,r4
 4008a24:	000d883a 	mov	r6,zero
 4008a28:	000b883a 	mov	r5,zero
 4008a2c:	90cffc34 	orhi	r3,r18,16368
 4008a30:	003ff706 	br	4008a10 <__alt_data_end+0xfe008a10>
 4008a34:	000b883a 	mov	r5,zero
 4008a38:	90cffc34 	orhi	r3,r18,16368
 4008a3c:	2805883a 	mov	r2,r5
 4008a40:	003fdd06 	br	40089b8 <__alt_data_end+0xfe0089b8>
 4008a44:	000b883a 	mov	r5,zero
 4008a48:	003fd806 	br	40089ac <__alt_data_end+0xfe0089ac>
 4008a4c:	000d883a 	mov	r6,zero
 4008a50:	003fef06 	br	4008a10 <__alt_data_end+0xfe008a10>

04008a54 <__d2b>:
 4008a54:	defff704 	addi	sp,sp,-36
 4008a58:	dc000215 	stw	r16,8(sp)
 4008a5c:	3021883a 	mov	r16,r6
 4008a60:	dc400315 	stw	r17,12(sp)
 4008a64:	8022907a 	slli	r17,r16,1
 4008a68:	dd400715 	stw	r21,28(sp)
 4008a6c:	282b883a 	mov	r21,r5
 4008a70:	01400044 	movi	r5,1
 4008a74:	dd000615 	stw	r20,24(sp)
 4008a78:	dcc00515 	stw	r19,20(sp)
 4008a7c:	dc800415 	stw	r18,16(sp)
 4008a80:	dfc00815 	stw	ra,32(sp)
 4008a84:	3829883a 	mov	r20,r7
 4008a88:	dc800917 	ldw	r18,36(sp)
 4008a8c:	8822d57a 	srli	r17,r17,21
 4008a90:	4007d640 	call	4007d64 <_Balloc>
 4008a94:	1027883a 	mov	r19,r2
 4008a98:	00800434 	movhi	r2,16
 4008a9c:	10bfffc4 	addi	r2,r2,-1
 4008aa0:	808c703a 	and	r6,r16,r2
 4008aa4:	88000126 	beq	r17,zero,4008aac <__d2b+0x58>
 4008aa8:	31800434 	orhi	r6,r6,16
 4008aac:	d9800015 	stw	r6,0(sp)
 4008ab0:	a8001f26 	beq	r21,zero,4008b30 <__d2b+0xdc>
 4008ab4:	d9000104 	addi	r4,sp,4
 4008ab8:	dd400115 	stw	r21,4(sp)
 4008abc:	40080dc0 	call	40080dc <__lo0bits>
 4008ac0:	d8c00017 	ldw	r3,0(sp)
 4008ac4:	1000291e 	bne	r2,zero,4008b6c <__d2b+0x118>
 4008ac8:	d9000117 	ldw	r4,4(sp)
 4008acc:	99000515 	stw	r4,20(r19)
 4008ad0:	1820c03a 	cmpne	r16,r3,zero
 4008ad4:	84000044 	addi	r16,r16,1
 4008ad8:	98c00615 	stw	r3,24(r19)
 4008adc:	9c000415 	stw	r16,16(r19)
 4008ae0:	88001b1e 	bne	r17,zero,4008b50 <__d2b+0xfc>
 4008ae4:	800690ba 	slli	r3,r16,2
 4008ae8:	10bef384 	addi	r2,r2,-1074
 4008aec:	a0800015 	stw	r2,0(r20)
 4008af0:	98c5883a 	add	r2,r19,r3
 4008af4:	11000417 	ldw	r4,16(r2)
 4008af8:	8020917a 	slli	r16,r16,5
 4008afc:	40080740 	call	4008074 <__hi0bits>
 4008b00:	8085c83a 	sub	r2,r16,r2
 4008b04:	90800015 	stw	r2,0(r18)
 4008b08:	9805883a 	mov	r2,r19
 4008b0c:	dfc00817 	ldw	ra,32(sp)
 4008b10:	dd400717 	ldw	r21,28(sp)
 4008b14:	dd000617 	ldw	r20,24(sp)
 4008b18:	dcc00517 	ldw	r19,20(sp)
 4008b1c:	dc800417 	ldw	r18,16(sp)
 4008b20:	dc400317 	ldw	r17,12(sp)
 4008b24:	dc000217 	ldw	r16,8(sp)
 4008b28:	dec00904 	addi	sp,sp,36
 4008b2c:	f800283a 	ret
 4008b30:	d809883a 	mov	r4,sp
 4008b34:	40080dc0 	call	40080dc <__lo0bits>
 4008b38:	d8c00017 	ldw	r3,0(sp)
 4008b3c:	04000044 	movi	r16,1
 4008b40:	9c000415 	stw	r16,16(r19)
 4008b44:	98c00515 	stw	r3,20(r19)
 4008b48:	10800804 	addi	r2,r2,32
 4008b4c:	883fe526 	beq	r17,zero,4008ae4 <__alt_data_end+0xfe008ae4>
 4008b50:	8c7ef344 	addi	r17,r17,-1075
 4008b54:	88a3883a 	add	r17,r17,r2
 4008b58:	00c00d44 	movi	r3,53
 4008b5c:	a4400015 	stw	r17,0(r20)
 4008b60:	1885c83a 	sub	r2,r3,r2
 4008b64:	90800015 	stw	r2,0(r18)
 4008b68:	003fe706 	br	4008b08 <__alt_data_end+0xfe008b08>
 4008b6c:	01000804 	movi	r4,32
 4008b70:	2089c83a 	sub	r4,r4,r2
 4008b74:	1908983a 	sll	r4,r3,r4
 4008b78:	d9400117 	ldw	r5,4(sp)
 4008b7c:	1886d83a 	srl	r3,r3,r2
 4008b80:	2148b03a 	or	r4,r4,r5
 4008b84:	99000515 	stw	r4,20(r19)
 4008b88:	d8c00015 	stw	r3,0(sp)
 4008b8c:	003fd006 	br	4008ad0 <__alt_data_end+0xfe008ad0>

04008b90 <__ratio>:
 4008b90:	defff904 	addi	sp,sp,-28
 4008b94:	dc400315 	stw	r17,12(sp)
 4008b98:	2823883a 	mov	r17,r5
 4008b9c:	d9400104 	addi	r5,sp,4
 4008ba0:	dfc00615 	stw	ra,24(sp)
 4008ba4:	dcc00515 	stw	r19,20(sp)
 4008ba8:	dc800415 	stw	r18,16(sp)
 4008bac:	2027883a 	mov	r19,r4
 4008bb0:	dc000215 	stw	r16,8(sp)
 4008bb4:	40089380 	call	4008938 <__b2d>
 4008bb8:	8809883a 	mov	r4,r17
 4008bbc:	d80b883a 	mov	r5,sp
 4008bc0:	1025883a 	mov	r18,r2
 4008bc4:	1821883a 	mov	r16,r3
 4008bc8:	40089380 	call	4008938 <__b2d>
 4008bcc:	8a400417 	ldw	r9,16(r17)
 4008bd0:	9a000417 	ldw	r8,16(r19)
 4008bd4:	100d883a 	mov	r6,r2
 4008bd8:	d8800017 	ldw	r2,0(sp)
 4008bdc:	4251c83a 	sub	r8,r8,r9
 4008be0:	4012917a 	slli	r9,r8,5
 4008be4:	da000117 	ldw	r8,4(sp)
 4008be8:	4091c83a 	sub	r8,r8,r2
 4008bec:	4251883a 	add	r8,r8,r9
 4008bf0:	02000d0e 	bge	zero,r8,4008c28 <__ratio+0x98>
 4008bf4:	4010953a 	slli	r8,r8,20
 4008bf8:	4421883a 	add	r16,r8,r16
 4008bfc:	9009883a 	mov	r4,r18
 4008c00:	800b883a 	mov	r5,r16
 4008c04:	180f883a 	mov	r7,r3
 4008c08:	400cae80 	call	400cae8 <__divdf3>
 4008c0c:	dfc00617 	ldw	ra,24(sp)
 4008c10:	dcc00517 	ldw	r19,20(sp)
 4008c14:	dc800417 	ldw	r18,16(sp)
 4008c18:	dc400317 	ldw	r17,12(sp)
 4008c1c:	dc000217 	ldw	r16,8(sp)
 4008c20:	dec00704 	addi	sp,sp,28
 4008c24:	f800283a 	ret
 4008c28:	4010953a 	slli	r8,r8,20
 4008c2c:	1a07c83a 	sub	r3,r3,r8
 4008c30:	003ff206 	br	4008bfc <__alt_data_end+0xfe008bfc>

04008c34 <_mprec_log10>:
 4008c34:	defffe04 	addi	sp,sp,-8
 4008c38:	dc000015 	stw	r16,0(sp)
 4008c3c:	dfc00115 	stw	ra,4(sp)
 4008c40:	008005c4 	movi	r2,23
 4008c44:	2021883a 	mov	r16,r4
 4008c48:	11000d0e 	bge	r2,r4,4008c80 <_mprec_log10+0x4c>
 4008c4c:	0005883a 	mov	r2,zero
 4008c50:	00cffc34 	movhi	r3,16368
 4008c54:	843fffc4 	addi	r16,r16,-1
 4008c58:	1009883a 	mov	r4,r2
 4008c5c:	180b883a 	mov	r5,r3
 4008c60:	000d883a 	mov	r6,zero
 4008c64:	01d00934 	movhi	r7,16420
 4008c68:	400d6ac0 	call	400d6ac <__muldf3>
 4008c6c:	803ff91e 	bne	r16,zero,4008c54 <__alt_data_end+0xfe008c54>
 4008c70:	dfc00117 	ldw	ra,4(sp)
 4008c74:	dc000017 	ldw	r16,0(sp)
 4008c78:	dec00204 	addi	sp,sp,8
 4008c7c:	f800283a 	ret
 4008c80:	202090fa 	slli	r16,r4,3
 4008c84:	00810074 	movhi	r2,1025
 4008c88:	1086bc04 	addi	r2,r2,6896
 4008c8c:	1421883a 	add	r16,r2,r16
 4008c90:	80800017 	ldw	r2,0(r16)
 4008c94:	80c00117 	ldw	r3,4(r16)
 4008c98:	dfc00117 	ldw	ra,4(sp)
 4008c9c:	dc000017 	ldw	r16,0(sp)
 4008ca0:	dec00204 	addi	sp,sp,8
 4008ca4:	f800283a 	ret

04008ca8 <__copybits>:
 4008ca8:	297fffc4 	addi	r5,r5,-1
 4008cac:	280fd17a 	srai	r7,r5,5
 4008cb0:	30c00417 	ldw	r3,16(r6)
 4008cb4:	30800504 	addi	r2,r6,20
 4008cb8:	39c00044 	addi	r7,r7,1
 4008cbc:	18c7883a 	add	r3,r3,r3
 4008cc0:	39cf883a 	add	r7,r7,r7
 4008cc4:	18c7883a 	add	r3,r3,r3
 4008cc8:	39cf883a 	add	r7,r7,r7
 4008ccc:	10c7883a 	add	r3,r2,r3
 4008cd0:	21cf883a 	add	r7,r4,r7
 4008cd4:	10c00d2e 	bgeu	r2,r3,4008d0c <__copybits+0x64>
 4008cd8:	200b883a 	mov	r5,r4
 4008cdc:	12000017 	ldw	r8,0(r2)
 4008ce0:	29400104 	addi	r5,r5,4
 4008ce4:	10800104 	addi	r2,r2,4
 4008ce8:	2a3fff15 	stw	r8,-4(r5)
 4008cec:	10fffb36 	bltu	r2,r3,4008cdc <__alt_data_end+0xfe008cdc>
 4008cf0:	1985c83a 	sub	r2,r3,r6
 4008cf4:	10bffac4 	addi	r2,r2,-21
 4008cf8:	1004d0ba 	srli	r2,r2,2
 4008cfc:	10800044 	addi	r2,r2,1
 4008d00:	1085883a 	add	r2,r2,r2
 4008d04:	1085883a 	add	r2,r2,r2
 4008d08:	2089883a 	add	r4,r4,r2
 4008d0c:	21c0032e 	bgeu	r4,r7,4008d1c <__copybits+0x74>
 4008d10:	20000015 	stw	zero,0(r4)
 4008d14:	21000104 	addi	r4,r4,4
 4008d18:	21fffd36 	bltu	r4,r7,4008d10 <__alt_data_end+0xfe008d10>
 4008d1c:	f800283a 	ret

04008d20 <__any_on>:
 4008d20:	20c00417 	ldw	r3,16(r4)
 4008d24:	2805d17a 	srai	r2,r5,5
 4008d28:	21000504 	addi	r4,r4,20
 4008d2c:	18800d0e 	bge	r3,r2,4008d64 <__any_on+0x44>
 4008d30:	18c7883a 	add	r3,r3,r3
 4008d34:	18c7883a 	add	r3,r3,r3
 4008d38:	20c7883a 	add	r3,r4,r3
 4008d3c:	20c0192e 	bgeu	r4,r3,4008da4 <__any_on+0x84>
 4008d40:	18bfff17 	ldw	r2,-4(r3)
 4008d44:	18ffff04 	addi	r3,r3,-4
 4008d48:	1000041e 	bne	r2,zero,4008d5c <__any_on+0x3c>
 4008d4c:	20c0142e 	bgeu	r4,r3,4008da0 <__any_on+0x80>
 4008d50:	18ffff04 	addi	r3,r3,-4
 4008d54:	19400017 	ldw	r5,0(r3)
 4008d58:	283ffc26 	beq	r5,zero,4008d4c <__alt_data_end+0xfe008d4c>
 4008d5c:	00800044 	movi	r2,1
 4008d60:	f800283a 	ret
 4008d64:	10c00a0e 	bge	r2,r3,4008d90 <__any_on+0x70>
 4008d68:	1085883a 	add	r2,r2,r2
 4008d6c:	1085883a 	add	r2,r2,r2
 4008d70:	294007cc 	andi	r5,r5,31
 4008d74:	2087883a 	add	r3,r4,r2
 4008d78:	283ff026 	beq	r5,zero,4008d3c <__alt_data_end+0xfe008d3c>
 4008d7c:	19800017 	ldw	r6,0(r3)
 4008d80:	3144d83a 	srl	r2,r6,r5
 4008d84:	114a983a 	sll	r5,r2,r5
 4008d88:	29bff41e 	bne	r5,r6,4008d5c <__alt_data_end+0xfe008d5c>
 4008d8c:	003feb06 	br	4008d3c <__alt_data_end+0xfe008d3c>
 4008d90:	1085883a 	add	r2,r2,r2
 4008d94:	1085883a 	add	r2,r2,r2
 4008d98:	2087883a 	add	r3,r4,r2
 4008d9c:	003fe706 	br	4008d3c <__alt_data_end+0xfe008d3c>
 4008da0:	f800283a 	ret
 4008da4:	0005883a 	mov	r2,zero
 4008da8:	f800283a 	ret

04008dac <_realloc_r>:
 4008dac:	defff604 	addi	sp,sp,-40
 4008db0:	dcc00315 	stw	r19,12(sp)
 4008db4:	dc400115 	stw	r17,4(sp)
 4008db8:	dfc00915 	stw	ra,36(sp)
 4008dbc:	df000815 	stw	fp,32(sp)
 4008dc0:	ddc00715 	stw	r23,28(sp)
 4008dc4:	dd800615 	stw	r22,24(sp)
 4008dc8:	dd400515 	stw	r21,20(sp)
 4008dcc:	dd000415 	stw	r20,16(sp)
 4008dd0:	dc800215 	stw	r18,8(sp)
 4008dd4:	dc000015 	stw	r16,0(sp)
 4008dd8:	2827883a 	mov	r19,r5
 4008ddc:	3023883a 	mov	r17,r6
 4008de0:	2800bf26 	beq	r5,zero,40090e0 <_realloc_r+0x334>
 4008de4:	2025883a 	mov	r18,r4
 4008de8:	400f0280 	call	400f028 <__malloc_lock>
 4008dec:	98ffff17 	ldw	r3,-4(r19)
 4008df0:	01bfff04 	movi	r6,-4
 4008df4:	890002c4 	addi	r4,r17,11
 4008df8:	01c00584 	movi	r7,22
 4008dfc:	9d7ffe04 	addi	r21,r19,-8
 4008e00:	19a0703a 	and	r16,r3,r6
 4008e04:	39003f2e 	bgeu	r7,r4,4008f04 <_realloc_r+0x158>
 4008e08:	053ffe04 	movi	r20,-8
 4008e0c:	2528703a 	and	r20,r4,r20
 4008e10:	a00f883a 	mov	r7,r20
 4008e14:	a0008216 	blt	r20,zero,4009020 <_realloc_r+0x274>
 4008e18:	a4408136 	bltu	r20,r17,4009020 <_realloc_r+0x274>
 4008e1c:	81c03c0e 	bge	r16,r7,4008f10 <_realloc_r+0x164>
 4008e20:	07010074 	movhi	fp,1025
 4008e24:	e7086a04 	addi	fp,fp,8616
 4008e28:	e1000217 	ldw	r4,8(fp)
 4008e2c:	ac05883a 	add	r2,r21,r16
 4008e30:	2080bf26 	beq	r4,r2,4009130 <_realloc_r+0x384>
 4008e34:	11000117 	ldw	r4,4(r2)
 4008e38:	023fff84 	movi	r8,-2
 4008e3c:	2210703a 	and	r8,r4,r8
 4008e40:	1211883a 	add	r8,r2,r8
 4008e44:	41400117 	ldw	r5,4(r8)
 4008e48:	2940004c 	andi	r5,r5,1
 4008e4c:	28004a1e 	bne	r5,zero,4008f78 <_realloc_r+0x1cc>
 4008e50:	017fff04 	movi	r5,-4
 4008e54:	2148703a 	and	r4,r4,r5
 4008e58:	2409883a 	add	r4,r4,r16
 4008e5c:	21c0ad0e 	bge	r4,r7,4009114 <_realloc_r+0x368>
 4008e60:	18c0004c 	andi	r3,r3,1
 4008e64:	18007f1e 	bne	r3,zero,4009064 <_realloc_r+0x2b8>
 4008e68:	9dfffe17 	ldw	r23,-8(r19)
 4008e6c:	adefc83a 	sub	r23,r21,r23
 4008e70:	bd800117 	ldw	r22,4(r23)
 4008e74:	b14a703a 	and	r5,r22,r5
 4008e78:	216d883a 	add	r22,r4,r5
 4008e7c:	b1c04516 	blt	r22,r7,4008f94 <_realloc_r+0x1e8>
 4008e80:	10c00317 	ldw	r3,12(r2)
 4008e84:	10800217 	ldw	r2,8(r2)
 4008e88:	81bfff04 	addi	r6,r16,-4
 4008e8c:	bc400204 	addi	r17,r23,8
 4008e90:	10c00315 	stw	r3,12(r2)
 4008e94:	18800215 	stw	r2,8(r3)
 4008e98:	b9400217 	ldw	r5,8(r23)
 4008e9c:	b8c00317 	ldw	r3,12(r23)
 4008ea0:	00800904 	movi	r2,36
 4008ea4:	28c00315 	stw	r3,12(r5)
 4008ea8:	19400215 	stw	r5,8(r3)
 4008eac:	1180ef36 	bltu	r2,r6,400926c <_realloc_r+0x4c0>
 4008eb0:	008004c4 	movi	r2,19
 4008eb4:	1180da2e 	bgeu	r2,r6,4009220 <_realloc_r+0x474>
 4008eb8:	98800017 	ldw	r2,0(r19)
 4008ebc:	b8800215 	stw	r2,8(r23)
 4008ec0:	98800117 	ldw	r2,4(r19)
 4008ec4:	b8800315 	stw	r2,12(r23)
 4008ec8:	008006c4 	movi	r2,27
 4008ecc:	1180fc2e 	bgeu	r2,r6,40092c0 <_realloc_r+0x514>
 4008ed0:	98800217 	ldw	r2,8(r19)
 4008ed4:	b8800415 	stw	r2,16(r23)
 4008ed8:	98800317 	ldw	r2,12(r19)
 4008edc:	b8800515 	stw	r2,20(r23)
 4008ee0:	00800904 	movi	r2,36
 4008ee4:	3080421e 	bne	r6,r2,4008ff0 <_realloc_r+0x244>
 4008ee8:	98800417 	ldw	r2,16(r19)
 4008eec:	9cc00604 	addi	r19,r19,24
 4008ef0:	b8c00804 	addi	r3,r23,32
 4008ef4:	b8800615 	stw	r2,24(r23)
 4008ef8:	98bfff17 	ldw	r2,-4(r19)
 4008efc:	b8800715 	stw	r2,28(r23)
 4008f00:	00003d06 	br	4008ff8 <_realloc_r+0x24c>
 4008f04:	01c00404 	movi	r7,16
 4008f08:	3829883a 	mov	r20,r7
 4008f0c:	003fc206 	br	4008e18 <__alt_data_end+0xfe008e18>
 4008f10:	9823883a 	mov	r17,r19
 4008f14:	850fc83a 	sub	r7,r16,r20
 4008f18:	008003c4 	movi	r2,15
 4008f1c:	18c0004c 	andi	r3,r3,1
 4008f20:	11c04336 	bltu	r2,r7,4009030 <_realloc_r+0x284>
 4008f24:	1c06b03a 	or	r3,r3,r16
 4008f28:	a8c00115 	stw	r3,4(r21)
 4008f2c:	ac21883a 	add	r16,r21,r16
 4008f30:	80c00117 	ldw	r3,4(r16)
 4008f34:	18c00054 	ori	r3,r3,1
 4008f38:	80c00115 	stw	r3,4(r16)
 4008f3c:	9009883a 	mov	r4,r18
 4008f40:	400f0480 	call	400f048 <__malloc_unlock>
 4008f44:	8805883a 	mov	r2,r17
 4008f48:	dfc00917 	ldw	ra,36(sp)
 4008f4c:	df000817 	ldw	fp,32(sp)
 4008f50:	ddc00717 	ldw	r23,28(sp)
 4008f54:	dd800617 	ldw	r22,24(sp)
 4008f58:	dd400517 	ldw	r21,20(sp)
 4008f5c:	dd000417 	ldw	r20,16(sp)
 4008f60:	dcc00317 	ldw	r19,12(sp)
 4008f64:	dc800217 	ldw	r18,8(sp)
 4008f68:	dc400117 	ldw	r17,4(sp)
 4008f6c:	dc000017 	ldw	r16,0(sp)
 4008f70:	dec00a04 	addi	sp,sp,40
 4008f74:	f800283a 	ret
 4008f78:	18c0004c 	andi	r3,r3,1
 4008f7c:	1800391e 	bne	r3,zero,4009064 <_realloc_r+0x2b8>
 4008f80:	9dfffe17 	ldw	r23,-8(r19)
 4008f84:	00bfff04 	movi	r2,-4
 4008f88:	adefc83a 	sub	r23,r21,r23
 4008f8c:	b9400117 	ldw	r5,4(r23)
 4008f90:	288a703a 	and	r5,r5,r2
 4008f94:	2c2d883a 	add	r22,r5,r16
 4008f98:	b1c03216 	blt	r22,r7,4009064 <_realloc_r+0x2b8>
 4008f9c:	b8800317 	ldw	r2,12(r23)
 4008fa0:	b8c00217 	ldw	r3,8(r23)
 4008fa4:	81bfff04 	addi	r6,r16,-4
 4008fa8:	01000904 	movi	r4,36
 4008fac:	18800315 	stw	r2,12(r3)
 4008fb0:	10c00215 	stw	r3,8(r2)
 4008fb4:	bc400204 	addi	r17,r23,8
 4008fb8:	2180ac36 	bltu	r4,r6,400926c <_realloc_r+0x4c0>
 4008fbc:	008004c4 	movi	r2,19
 4008fc0:	1180972e 	bgeu	r2,r6,4009220 <_realloc_r+0x474>
 4008fc4:	98800017 	ldw	r2,0(r19)
 4008fc8:	b8800215 	stw	r2,8(r23)
 4008fcc:	98800117 	ldw	r2,4(r19)
 4008fd0:	b8800315 	stw	r2,12(r23)
 4008fd4:	008006c4 	movi	r2,27
 4008fd8:	1180b92e 	bgeu	r2,r6,40092c0 <_realloc_r+0x514>
 4008fdc:	98800217 	ldw	r2,8(r19)
 4008fe0:	b8800415 	stw	r2,16(r23)
 4008fe4:	98800317 	ldw	r2,12(r19)
 4008fe8:	b8800515 	stw	r2,20(r23)
 4008fec:	313fbe26 	beq	r6,r4,4008ee8 <__alt_data_end+0xfe008ee8>
 4008ff0:	b8c00604 	addi	r3,r23,24
 4008ff4:	9cc00404 	addi	r19,r19,16
 4008ff8:	98800017 	ldw	r2,0(r19)
 4008ffc:	b021883a 	mov	r16,r22
 4009000:	b82b883a 	mov	r21,r23
 4009004:	18800015 	stw	r2,0(r3)
 4009008:	98800117 	ldw	r2,4(r19)
 400900c:	18800115 	stw	r2,4(r3)
 4009010:	98800217 	ldw	r2,8(r19)
 4009014:	18800215 	stw	r2,8(r3)
 4009018:	b8c00117 	ldw	r3,4(r23)
 400901c:	003fbd06 	br	4008f14 <__alt_data_end+0xfe008f14>
 4009020:	00800304 	movi	r2,12
 4009024:	90800015 	stw	r2,0(r18)
 4009028:	0005883a 	mov	r2,zero
 400902c:	003fc606 	br	4008f48 <__alt_data_end+0xfe008f48>
 4009030:	1d06b03a 	or	r3,r3,r20
 4009034:	ad0b883a 	add	r5,r21,r20
 4009038:	a8c00115 	stw	r3,4(r21)
 400903c:	38800054 	ori	r2,r7,1
 4009040:	28800115 	stw	r2,4(r5)
 4009044:	29cf883a 	add	r7,r5,r7
 4009048:	38800117 	ldw	r2,4(r7)
 400904c:	9009883a 	mov	r4,r18
 4009050:	29400204 	addi	r5,r5,8
 4009054:	10800054 	ori	r2,r2,1
 4009058:	38800115 	stw	r2,4(r7)
 400905c:	40065800 	call	4006580 <_free_r>
 4009060:	003fb606 	br	4008f3c <__alt_data_end+0xfe008f3c>
 4009064:	880b883a 	mov	r5,r17
 4009068:	9009883a 	mov	r4,r18
 400906c:	400711c0 	call	400711c <_malloc_r>
 4009070:	1023883a 	mov	r17,r2
 4009074:	1000aa26 	beq	r2,zero,4009320 <_realloc_r+0x574>
 4009078:	98ffff17 	ldw	r3,-4(r19)
 400907c:	113ffe04 	addi	r4,r2,-8
 4009080:	00bfff84 	movi	r2,-2
 4009084:	1884703a 	and	r2,r3,r2
 4009088:	a885883a 	add	r2,r21,r2
 400908c:	20808626 	beq	r4,r2,40092a8 <_realloc_r+0x4fc>
 4009090:	81bfff04 	addi	r6,r16,-4
 4009094:	00800904 	movi	r2,36
 4009098:	11807036 	bltu	r2,r6,400925c <_realloc_r+0x4b0>
 400909c:	00c004c4 	movi	r3,19
 40090a0:	19805636 	bltu	r3,r6,40091fc <_realloc_r+0x450>
 40090a4:	8805883a 	mov	r2,r17
 40090a8:	9807883a 	mov	r3,r19
 40090ac:	19000017 	ldw	r4,0(r3)
 40090b0:	11000015 	stw	r4,0(r2)
 40090b4:	19000117 	ldw	r4,4(r3)
 40090b8:	11000115 	stw	r4,4(r2)
 40090bc:	18c00217 	ldw	r3,8(r3)
 40090c0:	10c00215 	stw	r3,8(r2)
 40090c4:	980b883a 	mov	r5,r19
 40090c8:	9009883a 	mov	r4,r18
 40090cc:	40065800 	call	4006580 <_free_r>
 40090d0:	9009883a 	mov	r4,r18
 40090d4:	400f0480 	call	400f048 <__malloc_unlock>
 40090d8:	8805883a 	mov	r2,r17
 40090dc:	003f9a06 	br	4008f48 <__alt_data_end+0xfe008f48>
 40090e0:	300b883a 	mov	r5,r6
 40090e4:	dfc00917 	ldw	ra,36(sp)
 40090e8:	df000817 	ldw	fp,32(sp)
 40090ec:	ddc00717 	ldw	r23,28(sp)
 40090f0:	dd800617 	ldw	r22,24(sp)
 40090f4:	dd400517 	ldw	r21,20(sp)
 40090f8:	dd000417 	ldw	r20,16(sp)
 40090fc:	dcc00317 	ldw	r19,12(sp)
 4009100:	dc800217 	ldw	r18,8(sp)
 4009104:	dc400117 	ldw	r17,4(sp)
 4009108:	dc000017 	ldw	r16,0(sp)
 400910c:	dec00a04 	addi	sp,sp,40
 4009110:	400711c1 	jmpi	400711c <_malloc_r>
 4009114:	11400317 	ldw	r5,12(r2)
 4009118:	10800217 	ldw	r2,8(r2)
 400911c:	9823883a 	mov	r17,r19
 4009120:	2021883a 	mov	r16,r4
 4009124:	11400315 	stw	r5,12(r2)
 4009128:	28800215 	stw	r2,8(r5)
 400912c:	003f7906 	br	4008f14 <__alt_data_end+0xfe008f14>
 4009130:	21000117 	ldw	r4,4(r4)
 4009134:	00bfff04 	movi	r2,-4
 4009138:	a1800404 	addi	r6,r20,16
 400913c:	2088703a 	and	r4,r4,r2
 4009140:	2409883a 	add	r4,r4,r16
 4009144:	2180380e 	bge	r4,r6,4009228 <_realloc_r+0x47c>
 4009148:	18c0004c 	andi	r3,r3,1
 400914c:	183fc51e 	bne	r3,zero,4009064 <__alt_data_end+0xfe009064>
 4009150:	9dfffe17 	ldw	r23,-8(r19)
 4009154:	adefc83a 	sub	r23,r21,r23
 4009158:	b9400117 	ldw	r5,4(r23)
 400915c:	288a703a 	and	r5,r5,r2
 4009160:	216d883a 	add	r22,r4,r5
 4009164:	b1bf8b16 	blt	r22,r6,4008f94 <__alt_data_end+0xfe008f94>
 4009168:	b8800317 	ldw	r2,12(r23)
 400916c:	b8c00217 	ldw	r3,8(r23)
 4009170:	81bfff04 	addi	r6,r16,-4
 4009174:	01000904 	movi	r4,36
 4009178:	18800315 	stw	r2,12(r3)
 400917c:	10c00215 	stw	r3,8(r2)
 4009180:	bc400204 	addi	r17,r23,8
 4009184:	21805a36 	bltu	r4,r6,40092f0 <_realloc_r+0x544>
 4009188:	008004c4 	movi	r2,19
 400918c:	1180562e 	bgeu	r2,r6,40092e8 <_realloc_r+0x53c>
 4009190:	98800017 	ldw	r2,0(r19)
 4009194:	b8800215 	stw	r2,8(r23)
 4009198:	98800117 	ldw	r2,4(r19)
 400919c:	b8800315 	stw	r2,12(r23)
 40091a0:	008006c4 	movi	r2,27
 40091a4:	11805636 	bltu	r2,r6,4009300 <_realloc_r+0x554>
 40091a8:	b8800404 	addi	r2,r23,16
 40091ac:	9cc00204 	addi	r19,r19,8
 40091b0:	98c00017 	ldw	r3,0(r19)
 40091b4:	10c00015 	stw	r3,0(r2)
 40091b8:	98c00117 	ldw	r3,4(r19)
 40091bc:	10c00115 	stw	r3,4(r2)
 40091c0:	98c00217 	ldw	r3,8(r19)
 40091c4:	10c00215 	stw	r3,8(r2)
 40091c8:	bd07883a 	add	r3,r23,r20
 40091cc:	b505c83a 	sub	r2,r22,r20
 40091d0:	e0c00215 	stw	r3,8(fp)
 40091d4:	10800054 	ori	r2,r2,1
 40091d8:	18800115 	stw	r2,4(r3)
 40091dc:	b8800117 	ldw	r2,4(r23)
 40091e0:	9009883a 	mov	r4,r18
 40091e4:	1080004c 	andi	r2,r2,1
 40091e8:	a0a8b03a 	or	r20,r20,r2
 40091ec:	bd000115 	stw	r20,4(r23)
 40091f0:	400f0480 	call	400f048 <__malloc_unlock>
 40091f4:	8805883a 	mov	r2,r17
 40091f8:	003f5306 	br	4008f48 <__alt_data_end+0xfe008f48>
 40091fc:	98c00017 	ldw	r3,0(r19)
 4009200:	88c00015 	stw	r3,0(r17)
 4009204:	98c00117 	ldw	r3,4(r19)
 4009208:	88c00115 	stw	r3,4(r17)
 400920c:	00c006c4 	movi	r3,27
 4009210:	19801d36 	bltu	r3,r6,4009288 <_realloc_r+0x4dc>
 4009214:	88800204 	addi	r2,r17,8
 4009218:	98c00204 	addi	r3,r19,8
 400921c:	003fa306 	br	40090ac <__alt_data_end+0xfe0090ac>
 4009220:	8807883a 	mov	r3,r17
 4009224:	003f7406 	br	4008ff8 <__alt_data_end+0xfe008ff8>
 4009228:	ad2b883a 	add	r21,r21,r20
 400922c:	2505c83a 	sub	r2,r4,r20
 4009230:	e5400215 	stw	r21,8(fp)
 4009234:	10800054 	ori	r2,r2,1
 4009238:	a8800115 	stw	r2,4(r21)
 400923c:	98bfff17 	ldw	r2,-4(r19)
 4009240:	9009883a 	mov	r4,r18
 4009244:	1080004c 	andi	r2,r2,1
 4009248:	a0a8b03a 	or	r20,r20,r2
 400924c:	9d3fff15 	stw	r20,-4(r19)
 4009250:	400f0480 	call	400f048 <__malloc_unlock>
 4009254:	9805883a 	mov	r2,r19
 4009258:	003f3b06 	br	4008f48 <__alt_data_end+0xfe008f48>
 400925c:	8809883a 	mov	r4,r17
 4009260:	980b883a 	mov	r5,r19
 4009264:	4007ae40 	call	4007ae4 <memmove>
 4009268:	003f9606 	br	40090c4 <__alt_data_end+0xfe0090c4>
 400926c:	8809883a 	mov	r4,r17
 4009270:	980b883a 	mov	r5,r19
 4009274:	4007ae40 	call	4007ae4 <memmove>
 4009278:	b8c00117 	ldw	r3,4(r23)
 400927c:	b021883a 	mov	r16,r22
 4009280:	b82b883a 	mov	r21,r23
 4009284:	003f2306 	br	4008f14 <__alt_data_end+0xfe008f14>
 4009288:	98c00217 	ldw	r3,8(r19)
 400928c:	88c00215 	stw	r3,8(r17)
 4009290:	98c00317 	ldw	r3,12(r19)
 4009294:	88c00315 	stw	r3,12(r17)
 4009298:	30800c26 	beq	r6,r2,40092cc <_realloc_r+0x520>
 400929c:	88800404 	addi	r2,r17,16
 40092a0:	98c00404 	addi	r3,r19,16
 40092a4:	003f8106 	br	40090ac <__alt_data_end+0xfe0090ac>
 40092a8:	893fff17 	ldw	r4,-4(r17)
 40092ac:	00bfff04 	movi	r2,-4
 40092b0:	9823883a 	mov	r17,r19
 40092b4:	2084703a 	and	r2,r4,r2
 40092b8:	80a1883a 	add	r16,r16,r2
 40092bc:	003f1506 	br	4008f14 <__alt_data_end+0xfe008f14>
 40092c0:	b8c00404 	addi	r3,r23,16
 40092c4:	9cc00204 	addi	r19,r19,8
 40092c8:	003f4b06 	br	4008ff8 <__alt_data_end+0xfe008ff8>
 40092cc:	99000417 	ldw	r4,16(r19)
 40092d0:	88800604 	addi	r2,r17,24
 40092d4:	98c00604 	addi	r3,r19,24
 40092d8:	89000415 	stw	r4,16(r17)
 40092dc:	99000517 	ldw	r4,20(r19)
 40092e0:	89000515 	stw	r4,20(r17)
 40092e4:	003f7106 	br	40090ac <__alt_data_end+0xfe0090ac>
 40092e8:	8805883a 	mov	r2,r17
 40092ec:	003fb006 	br	40091b0 <__alt_data_end+0xfe0091b0>
 40092f0:	8809883a 	mov	r4,r17
 40092f4:	980b883a 	mov	r5,r19
 40092f8:	4007ae40 	call	4007ae4 <memmove>
 40092fc:	003fb206 	br	40091c8 <__alt_data_end+0xfe0091c8>
 4009300:	98800217 	ldw	r2,8(r19)
 4009304:	b8800415 	stw	r2,16(r23)
 4009308:	98800317 	ldw	r2,12(r19)
 400930c:	b8800515 	stw	r2,20(r23)
 4009310:	31000726 	beq	r6,r4,4009330 <_realloc_r+0x584>
 4009314:	b8800604 	addi	r2,r23,24
 4009318:	9cc00404 	addi	r19,r19,16
 400931c:	003fa406 	br	40091b0 <__alt_data_end+0xfe0091b0>
 4009320:	9009883a 	mov	r4,r18
 4009324:	400f0480 	call	400f048 <__malloc_unlock>
 4009328:	0005883a 	mov	r2,zero
 400932c:	003f0606 	br	4008f48 <__alt_data_end+0xfe008f48>
 4009330:	98c00417 	ldw	r3,16(r19)
 4009334:	9cc00604 	addi	r19,r19,24
 4009338:	b8800804 	addi	r2,r23,32
 400933c:	b8c00615 	stw	r3,24(r23)
 4009340:	98ffff17 	ldw	r3,-4(r19)
 4009344:	b8c00715 	stw	r3,28(r23)
 4009348:	003f9906 	br	40091b0 <__alt_data_end+0xfe0091b0>

0400934c <__fpclassifyd>:
 400934c:	00a00034 	movhi	r2,32768
 4009350:	10bfffc4 	addi	r2,r2,-1
 4009354:	2884703a 	and	r2,r5,r2
 4009358:	10000726 	beq	r2,zero,4009378 <__fpclassifyd+0x2c>
 400935c:	00fffc34 	movhi	r3,65520
 4009360:	019ff834 	movhi	r6,32736
 4009364:	28c7883a 	add	r3,r5,r3
 4009368:	31bfffc4 	addi	r6,r6,-1
 400936c:	30c00536 	bltu	r6,r3,4009384 <__fpclassifyd+0x38>
 4009370:	00800104 	movi	r2,4
 4009374:	f800283a 	ret
 4009378:	2000021e 	bne	r4,zero,4009384 <__fpclassifyd+0x38>
 400937c:	00800084 	movi	r2,2
 4009380:	f800283a 	ret
 4009384:	00dffc34 	movhi	r3,32752
 4009388:	019ff834 	movhi	r6,32736
 400938c:	28cb883a 	add	r5,r5,r3
 4009390:	31bfffc4 	addi	r6,r6,-1
 4009394:	317ff62e 	bgeu	r6,r5,4009370 <__alt_data_end+0xfe009370>
 4009398:	01400434 	movhi	r5,16
 400939c:	297fffc4 	addi	r5,r5,-1
 40093a0:	28800236 	bltu	r5,r2,40093ac <__fpclassifyd+0x60>
 40093a4:	008000c4 	movi	r2,3
 40093a8:	f800283a 	ret
 40093ac:	10c00226 	beq	r2,r3,40093b8 <__fpclassifyd+0x6c>
 40093b0:	0005883a 	mov	r2,zero
 40093b4:	f800283a 	ret
 40093b8:	2005003a 	cmpeq	r2,r4,zero
 40093bc:	f800283a 	ret

040093c0 <_sbrk_r>:
 40093c0:	defffd04 	addi	sp,sp,-12
 40093c4:	dc000015 	stw	r16,0(sp)
 40093c8:	04010074 	movhi	r16,1025
 40093cc:	dc400115 	stw	r17,4(sp)
 40093d0:	8414c004 	addi	r16,r16,21248
 40093d4:	2023883a 	mov	r17,r4
 40093d8:	2809883a 	mov	r4,r5
 40093dc:	dfc00215 	stw	ra,8(sp)
 40093e0:	80000015 	stw	zero,0(r16)
 40093e4:	400f23c0 	call	400f23c <sbrk>
 40093e8:	00ffffc4 	movi	r3,-1
 40093ec:	10c00526 	beq	r2,r3,4009404 <_sbrk_r+0x44>
 40093f0:	dfc00217 	ldw	ra,8(sp)
 40093f4:	dc400117 	ldw	r17,4(sp)
 40093f8:	dc000017 	ldw	r16,0(sp)
 40093fc:	dec00304 	addi	sp,sp,12
 4009400:	f800283a 	ret
 4009404:	80c00017 	ldw	r3,0(r16)
 4009408:	183ff926 	beq	r3,zero,40093f0 <__alt_data_end+0xfe0093f0>
 400940c:	88c00015 	stw	r3,0(r17)
 4009410:	003ff706 	br	40093f0 <__alt_data_end+0xfe0093f0>

04009414 <__sread>:
 4009414:	defffe04 	addi	sp,sp,-8
 4009418:	dc000015 	stw	r16,0(sp)
 400941c:	2821883a 	mov	r16,r5
 4009420:	2940038f 	ldh	r5,14(r5)
 4009424:	dfc00115 	stw	ra,4(sp)
 4009428:	400b0d00 	call	400b0d0 <_read_r>
 400942c:	10000716 	blt	r2,zero,400944c <__sread+0x38>
 4009430:	80c01417 	ldw	r3,80(r16)
 4009434:	1887883a 	add	r3,r3,r2
 4009438:	80c01415 	stw	r3,80(r16)
 400943c:	dfc00117 	ldw	ra,4(sp)
 4009440:	dc000017 	ldw	r16,0(sp)
 4009444:	dec00204 	addi	sp,sp,8
 4009448:	f800283a 	ret
 400944c:	80c0030b 	ldhu	r3,12(r16)
 4009450:	18fbffcc 	andi	r3,r3,61439
 4009454:	80c0030d 	sth	r3,12(r16)
 4009458:	dfc00117 	ldw	ra,4(sp)
 400945c:	dc000017 	ldw	r16,0(sp)
 4009460:	dec00204 	addi	sp,sp,8
 4009464:	f800283a 	ret

04009468 <__seofread>:
 4009468:	0005883a 	mov	r2,zero
 400946c:	f800283a 	ret

04009470 <__swrite>:
 4009470:	2880030b 	ldhu	r2,12(r5)
 4009474:	defffb04 	addi	sp,sp,-20
 4009478:	dcc00315 	stw	r19,12(sp)
 400947c:	dc800215 	stw	r18,8(sp)
 4009480:	dc400115 	stw	r17,4(sp)
 4009484:	dc000015 	stw	r16,0(sp)
 4009488:	dfc00415 	stw	ra,16(sp)
 400948c:	10c0400c 	andi	r3,r2,256
 4009490:	2821883a 	mov	r16,r5
 4009494:	2027883a 	mov	r19,r4
 4009498:	3025883a 	mov	r18,r6
 400949c:	3823883a 	mov	r17,r7
 40094a0:	18000526 	beq	r3,zero,40094b8 <__swrite+0x48>
 40094a4:	2940038f 	ldh	r5,14(r5)
 40094a8:	000d883a 	mov	r6,zero
 40094ac:	01c00084 	movi	r7,2
 40094b0:	400b0740 	call	400b074 <_lseek_r>
 40094b4:	8080030b 	ldhu	r2,12(r16)
 40094b8:	8140038f 	ldh	r5,14(r16)
 40094bc:	10bbffcc 	andi	r2,r2,61439
 40094c0:	9809883a 	mov	r4,r19
 40094c4:	900d883a 	mov	r6,r18
 40094c8:	880f883a 	mov	r7,r17
 40094cc:	8080030d 	sth	r2,12(r16)
 40094d0:	dfc00417 	ldw	ra,16(sp)
 40094d4:	dcc00317 	ldw	r19,12(sp)
 40094d8:	dc800217 	ldw	r18,8(sp)
 40094dc:	dc400117 	ldw	r17,4(sp)
 40094e0:	dc000017 	ldw	r16,0(sp)
 40094e4:	dec00504 	addi	sp,sp,20
 40094e8:	400ab501 	jmpi	400ab50 <_write_r>

040094ec <__sseek>:
 40094ec:	defffe04 	addi	sp,sp,-8
 40094f0:	dc000015 	stw	r16,0(sp)
 40094f4:	2821883a 	mov	r16,r5
 40094f8:	2940038f 	ldh	r5,14(r5)
 40094fc:	dfc00115 	stw	ra,4(sp)
 4009500:	400b0740 	call	400b074 <_lseek_r>
 4009504:	00ffffc4 	movi	r3,-1
 4009508:	10c00826 	beq	r2,r3,400952c <__sseek+0x40>
 400950c:	80c0030b 	ldhu	r3,12(r16)
 4009510:	80801415 	stw	r2,80(r16)
 4009514:	18c40014 	ori	r3,r3,4096
 4009518:	80c0030d 	sth	r3,12(r16)
 400951c:	dfc00117 	ldw	ra,4(sp)
 4009520:	dc000017 	ldw	r16,0(sp)
 4009524:	dec00204 	addi	sp,sp,8
 4009528:	f800283a 	ret
 400952c:	80c0030b 	ldhu	r3,12(r16)
 4009530:	18fbffcc 	andi	r3,r3,61439
 4009534:	80c0030d 	sth	r3,12(r16)
 4009538:	dfc00117 	ldw	ra,4(sp)
 400953c:	dc000017 	ldw	r16,0(sp)
 4009540:	dec00204 	addi	sp,sp,8
 4009544:	f800283a 	ret

04009548 <__sclose>:
 4009548:	2940038f 	ldh	r5,14(r5)
 400954c:	400abac1 	jmpi	400abac <_close_r>

04009550 <strcmp>:
 4009550:	2144b03a 	or	r2,r4,r5
 4009554:	108000cc 	andi	r2,r2,3
 4009558:	1000171e 	bne	r2,zero,40095b8 <strcmp+0x68>
 400955c:	20800017 	ldw	r2,0(r4)
 4009560:	28c00017 	ldw	r3,0(r5)
 4009564:	10c0141e 	bne	r2,r3,40095b8 <strcmp+0x68>
 4009568:	027fbff4 	movhi	r9,65279
 400956c:	4a7fbfc4 	addi	r9,r9,-257
 4009570:	0086303a 	nor	r3,zero,r2
 4009574:	02202074 	movhi	r8,32897
 4009578:	1245883a 	add	r2,r2,r9
 400957c:	42202004 	addi	r8,r8,-32640
 4009580:	10c4703a 	and	r2,r2,r3
 4009584:	1204703a 	and	r2,r2,r8
 4009588:	10000226 	beq	r2,zero,4009594 <strcmp+0x44>
 400958c:	00001706 	br	40095ec <strcmp+0x9c>
 4009590:	1000161e 	bne	r2,zero,40095ec <strcmp+0x9c>
 4009594:	21000104 	addi	r4,r4,4
 4009598:	20c00017 	ldw	r3,0(r4)
 400959c:	29400104 	addi	r5,r5,4
 40095a0:	29800017 	ldw	r6,0(r5)
 40095a4:	1a4f883a 	add	r7,r3,r9
 40095a8:	00c4303a 	nor	r2,zero,r3
 40095ac:	3884703a 	and	r2,r7,r2
 40095b0:	1204703a 	and	r2,r2,r8
 40095b4:	19bff626 	beq	r3,r6,4009590 <__alt_data_end+0xfe009590>
 40095b8:	20800007 	ldb	r2,0(r4)
 40095bc:	1000051e 	bne	r2,zero,40095d4 <strcmp+0x84>
 40095c0:	00000606 	br	40095dc <strcmp+0x8c>
 40095c4:	21000044 	addi	r4,r4,1
 40095c8:	20800007 	ldb	r2,0(r4)
 40095cc:	29400044 	addi	r5,r5,1
 40095d0:	10000226 	beq	r2,zero,40095dc <strcmp+0x8c>
 40095d4:	28c00007 	ldb	r3,0(r5)
 40095d8:	10fffa26 	beq	r2,r3,40095c4 <__alt_data_end+0xfe0095c4>
 40095dc:	20800003 	ldbu	r2,0(r4)
 40095e0:	28c00003 	ldbu	r3,0(r5)
 40095e4:	10c5c83a 	sub	r2,r2,r3
 40095e8:	f800283a 	ret
 40095ec:	0005883a 	mov	r2,zero
 40095f0:	f800283a 	ret

040095f4 <__sprint_r.part.0>:
 40095f4:	28801917 	ldw	r2,100(r5)
 40095f8:	defff604 	addi	sp,sp,-40
 40095fc:	dd400515 	stw	r21,20(sp)
 4009600:	dcc00315 	stw	r19,12(sp)
 4009604:	dfc00915 	stw	ra,36(sp)
 4009608:	df000815 	stw	fp,32(sp)
 400960c:	ddc00715 	stw	r23,28(sp)
 4009610:	dd800615 	stw	r22,24(sp)
 4009614:	dd000415 	stw	r20,16(sp)
 4009618:	dc800215 	stw	r18,8(sp)
 400961c:	dc400115 	stw	r17,4(sp)
 4009620:	dc000015 	stw	r16,0(sp)
 4009624:	1088000c 	andi	r2,r2,8192
 4009628:	2827883a 	mov	r19,r5
 400962c:	302b883a 	mov	r21,r6
 4009630:	10002d26 	beq	r2,zero,40096e8 <__sprint_r.part.0+0xf4>
 4009634:	30800217 	ldw	r2,8(r6)
 4009638:	35800017 	ldw	r22,0(r6)
 400963c:	10002826 	beq	r2,zero,40096e0 <__sprint_r.part.0+0xec>
 4009640:	2029883a 	mov	r20,r4
 4009644:	b5c00104 	addi	r23,r22,4
 4009648:	04bfffc4 	movi	r18,-1
 400964c:	bc400017 	ldw	r17,0(r23)
 4009650:	b4000017 	ldw	r16,0(r22)
 4009654:	0039883a 	mov	fp,zero
 4009658:	8822d0ba 	srli	r17,r17,2
 400965c:	04400316 	blt	zero,r17,400966c <__sprint_r.part.0+0x78>
 4009660:	00001706 	br	40096c0 <__sprint_r.part.0+0xcc>
 4009664:	84000104 	addi	r16,r16,4
 4009668:	8f001526 	beq	r17,fp,40096c0 <__sprint_r.part.0+0xcc>
 400966c:	81400017 	ldw	r5,0(r16)
 4009670:	a009883a 	mov	r4,r20
 4009674:	980d883a 	mov	r6,r19
 4009678:	400adec0 	call	400adec <_fputwc_r>
 400967c:	e7000044 	addi	fp,fp,1
 4009680:	14bff81e 	bne	r2,r18,4009664 <__alt_data_end+0xfe009664>
 4009684:	9005883a 	mov	r2,r18
 4009688:	a8000215 	stw	zero,8(r21)
 400968c:	a8000115 	stw	zero,4(r21)
 4009690:	dfc00917 	ldw	ra,36(sp)
 4009694:	df000817 	ldw	fp,32(sp)
 4009698:	ddc00717 	ldw	r23,28(sp)
 400969c:	dd800617 	ldw	r22,24(sp)
 40096a0:	dd400517 	ldw	r21,20(sp)
 40096a4:	dd000417 	ldw	r20,16(sp)
 40096a8:	dcc00317 	ldw	r19,12(sp)
 40096ac:	dc800217 	ldw	r18,8(sp)
 40096b0:	dc400117 	ldw	r17,4(sp)
 40096b4:	dc000017 	ldw	r16,0(sp)
 40096b8:	dec00a04 	addi	sp,sp,40
 40096bc:	f800283a 	ret
 40096c0:	a8c00217 	ldw	r3,8(r21)
 40096c4:	8c63883a 	add	r17,r17,r17
 40096c8:	8c63883a 	add	r17,r17,r17
 40096cc:	1c45c83a 	sub	r2,r3,r17
 40096d0:	a8800215 	stw	r2,8(r21)
 40096d4:	b5800204 	addi	r22,r22,8
 40096d8:	bdc00204 	addi	r23,r23,8
 40096dc:	103fdb1e 	bne	r2,zero,400964c <__alt_data_end+0xfe00964c>
 40096e0:	0005883a 	mov	r2,zero
 40096e4:	003fe806 	br	4009688 <__alt_data_end+0xfe009688>
 40096e8:	40068700 	call	4006870 <__sfvwrite_r>
 40096ec:	003fe606 	br	4009688 <__alt_data_end+0xfe009688>

040096f0 <__sprint_r>:
 40096f0:	30c00217 	ldw	r3,8(r6)
 40096f4:	18000126 	beq	r3,zero,40096fc <__sprint_r+0xc>
 40096f8:	40095f41 	jmpi	40095f4 <__sprint_r.part.0>
 40096fc:	30000115 	stw	zero,4(r6)
 4009700:	0005883a 	mov	r2,zero
 4009704:	f800283a 	ret

04009708 <___vfiprintf_internal_r>:
 4009708:	defeca04 	addi	sp,sp,-1240
 400970c:	dcc12f15 	stw	r19,1212(sp)
 4009710:	dfc13515 	stw	ra,1236(sp)
 4009714:	df013415 	stw	fp,1232(sp)
 4009718:	ddc13315 	stw	r23,1228(sp)
 400971c:	dd813215 	stw	r22,1224(sp)
 4009720:	dd413115 	stw	r21,1220(sp)
 4009724:	dd013015 	stw	r20,1216(sp)
 4009728:	dc812e15 	stw	r18,1208(sp)
 400972c:	dc412d15 	stw	r17,1204(sp)
 4009730:	dc012c15 	stw	r16,1200(sp)
 4009734:	d9012115 	stw	r4,1156(sp)
 4009738:	d9412015 	stw	r5,1152(sp)
 400973c:	d9c12315 	stw	r7,1164(sp)
 4009740:	3027883a 	mov	r19,r6
 4009744:	20000226 	beq	r4,zero,4009750 <___vfiprintf_internal_r+0x48>
 4009748:	20800e17 	ldw	r2,56(r4)
 400974c:	1000f726 	beq	r2,zero,4009b2c <___vfiprintf_internal_r+0x424>
 4009750:	d8812017 	ldw	r2,1152(sp)
 4009754:	10c0030b 	ldhu	r3,12(r2)
 4009758:	1908000c 	andi	r4,r3,8192
 400975c:	1805883a 	mov	r2,r3
 4009760:	2000081e 	bne	r4,zero,4009784 <___vfiprintf_internal_r+0x7c>
 4009764:	d9412017 	ldw	r5,1152(sp)
 4009768:	18880014 	ori	r2,r3,8192
 400976c:	00f7ffc4 	movi	r3,-8193
 4009770:	29001917 	ldw	r4,100(r5)
 4009774:	2880030d 	sth	r2,12(r5)
 4009778:	20c8703a 	and	r4,r4,r3
 400977c:	29001915 	stw	r4,100(r5)
 4009780:	1007883a 	mov	r3,r2
 4009784:	1100020c 	andi	r4,r2,8
 4009788:	2000a726 	beq	r4,zero,4009a28 <___vfiprintf_internal_r+0x320>
 400978c:	d9412017 	ldw	r5,1152(sp)
 4009790:	29000417 	ldw	r4,16(r5)
 4009794:	2000a426 	beq	r4,zero,4009a28 <___vfiprintf_internal_r+0x320>
 4009798:	1080068c 	andi	r2,r2,26
 400979c:	01000284 	movi	r4,10
 40097a0:	1100ab26 	beq	r2,r4,4009a50 <___vfiprintf_internal_r+0x348>
 40097a4:	d9010a04 	addi	r4,sp,1064
 40097a8:	d94109c4 	addi	r5,sp,1063
 40097ac:	07010074 	movhi	fp,1025
 40097b0:	04410074 	movhi	r17,1025
 40097b4:	2145c83a 	sub	r2,r4,r5
 40097b8:	e706f204 	addi	fp,fp,7112
 40097bc:	8c46ee04 	addi	r17,r17,7096
 40097c0:	d9011e15 	stw	r4,1144(sp)
 40097c4:	d9411f15 	stw	r5,1148(sp)
 40097c8:	dec11a15 	stw	sp,1128(sp)
 40097cc:	d8011c15 	stw	zero,1136(sp)
 40097d0:	d8011b15 	stw	zero,1132(sp)
 40097d4:	d8012715 	stw	zero,1180(sp)
 40097d8:	d8012515 	stw	zero,1172(sp)
 40097dc:	d811883a 	mov	r8,sp
 40097e0:	d8812815 	stw	r2,1184(sp)
 40097e4:	982f883a 	mov	r23,r19
 40097e8:	b8800007 	ldb	r2,0(r23)
 40097ec:	1003b026 	beq	r2,zero,400a6b0 <___vfiprintf_internal_r+0xfa8>
 40097f0:	01000944 	movi	r4,37
 40097f4:	1103ae26 	beq	r2,r4,400a6b0 <___vfiprintf_internal_r+0xfa8>
 40097f8:	b805883a 	mov	r2,r23
 40097fc:	00000106 	br	4009804 <___vfiprintf_internal_r+0xfc>
 4009800:	19000326 	beq	r3,r4,4009810 <___vfiprintf_internal_r+0x108>
 4009804:	10800044 	addi	r2,r2,1
 4009808:	10c00007 	ldb	r3,0(r2)
 400980c:	183ffc1e 	bne	r3,zero,4009800 <__alt_data_end+0xfe009800>
 4009810:	15e1c83a 	sub	r16,r2,r23
 4009814:	1029883a 	mov	r20,r2
 4009818:	80001026 	beq	r16,zero,400985c <___vfiprintf_internal_r+0x154>
 400981c:	d8c11c17 	ldw	r3,1136(sp)
 4009820:	d8811b17 	ldw	r2,1132(sp)
 4009824:	45c00015 	stw	r23,0(r8)
 4009828:	80c7883a 	add	r3,r16,r3
 400982c:	10800044 	addi	r2,r2,1
 4009830:	44000115 	stw	r16,4(r8)
 4009834:	d8c11c15 	stw	r3,1136(sp)
 4009838:	d8811b15 	stw	r2,1132(sp)
 400983c:	010001c4 	movi	r4,7
 4009840:	2080740e 	bge	r4,r2,4009a14 <___vfiprintf_internal_r+0x30c>
 4009844:	1803a71e 	bne	r3,zero,400a6e4 <___vfiprintf_internal_r+0xfdc>
 4009848:	d8c12517 	ldw	r3,1172(sp)
 400984c:	d8011b15 	stw	zero,1132(sp)
 4009850:	d811883a 	mov	r8,sp
 4009854:	1c07883a 	add	r3,r3,r16
 4009858:	d8c12515 	stw	r3,1172(sp)
 400985c:	a0800007 	ldb	r2,0(r20)
 4009860:	1002bf26 	beq	r2,zero,400a360 <___vfiprintf_internal_r+0xc58>
 4009864:	a5c00044 	addi	r23,r20,1
 4009868:	a1800047 	ldb	r6,1(r20)
 400986c:	d8011d85 	stb	zero,1142(sp)
 4009870:	d8012205 	stb	zero,1160(sp)
 4009874:	043fffc4 	movi	r16,-1
 4009878:	d8012415 	stw	zero,1168(sp)
 400987c:	0025883a 	mov	r18,zero
 4009880:	05001604 	movi	r20,88
 4009884:	05400244 	movi	r21,9
 4009888:	4027883a 	mov	r19,r8
 400988c:	bdc00044 	addi	r23,r23,1
 4009890:	30bff804 	addi	r2,r6,-32
 4009894:	a0825636 	bltu	r20,r2,400a1f0 <___vfiprintf_internal_r+0xae8>
 4009898:	100490ba 	slli	r2,r2,2
 400989c:	01010074 	movhi	r4,1025
 40098a0:	21262c04 	addi	r4,r4,-26448
 40098a4:	1105883a 	add	r2,r2,r4
 40098a8:	10800017 	ldw	r2,0(r2)
 40098ac:	1000683a 	jmp	r2
 40098b0:	0400a180 	call	400a18 <__alt_mem_onchip_memory2_0+0x400a18>
 40098b4:	0400a1f0 	cmpltui	r16,zero,647
 40098b8:	0400a1f0 	cmpltui	r16,zero,647
 40098bc:	0400a1e4 	muli	r16,zero,647
 40098c0:	0400a1f0 	cmpltui	r16,zero,647
 40098c4:	0400a1f0 	cmpltui	r16,zero,647
 40098c8:	0400a1f0 	cmpltui	r16,zero,647
 40098cc:	0400a1f0 	cmpltui	r16,zero,647
 40098d0:	0400a1f0 	cmpltui	r16,zero,647
 40098d4:	0400a1f0 	cmpltui	r16,zero,647
 40098d8:	04009f70 	cmpltui	r16,zero,637
 40098dc:	0400a198 	cmpnei	r16,zero,646
 40098e0:	0400a1f0 	cmpltui	r16,zero,647
 40098e4:	04009b44 	movi	r16,621
 40098e8:	04009f94 	movui	r16,638
 40098ec:	0400a1f0 	cmpltui	r16,zero,647
 40098f0:	04009b50 	cmplti	r16,zero,621
 40098f4:	04009b5c 	xori	r16,zero,621
 40098f8:	04009b5c 	xori	r16,zero,621
 40098fc:	04009b5c 	xori	r16,zero,621
 4009900:	04009b5c 	xori	r16,zero,621
 4009904:	04009b5c 	xori	r16,zero,621
 4009908:	04009b5c 	xori	r16,zero,621
 400990c:	04009b5c 	xori	r16,zero,621
 4009910:	04009b5c 	xori	r16,zero,621
 4009914:	04009b5c 	xori	r16,zero,621
 4009918:	0400a1f0 	cmpltui	r16,zero,647
 400991c:	0400a1f0 	cmpltui	r16,zero,647
 4009920:	0400a1f0 	cmpltui	r16,zero,647
 4009924:	0400a1f0 	cmpltui	r16,zero,647
 4009928:	0400a1f0 	cmpltui	r16,zero,647
 400992c:	0400a1f0 	cmpltui	r16,zero,647
 4009930:	0400a1f0 	cmpltui	r16,zero,647
 4009934:	0400a1f0 	cmpltui	r16,zero,647
 4009938:	0400a1f0 	cmpltui	r16,zero,647
 400993c:	0400a1f0 	cmpltui	r16,zero,647
 4009940:	04009b9c 	xori	r16,zero,622
 4009944:	0400a1f0 	cmpltui	r16,zero,647
 4009948:	0400a1f0 	cmpltui	r16,zero,647
 400994c:	0400a1f0 	cmpltui	r16,zero,647
 4009950:	0400a1f0 	cmpltui	r16,zero,647
 4009954:	0400a1f0 	cmpltui	r16,zero,647
 4009958:	0400a1f0 	cmpltui	r16,zero,647
 400995c:	0400a1f0 	cmpltui	r16,zero,647
 4009960:	0400a1f0 	cmpltui	r16,zero,647
 4009964:	0400a1f0 	cmpltui	r16,zero,647
 4009968:	0400a1f0 	cmpltui	r16,zero,647
 400996c:	04009e8c 	andi	r16,zero,634
 4009970:	0400a1f0 	cmpltui	r16,zero,647
 4009974:	0400a1f0 	cmpltui	r16,zero,647
 4009978:	0400a1f0 	cmpltui	r16,zero,647
 400997c:	0400a1f0 	cmpltui	r16,zero,647
 4009980:	0400a1f0 	cmpltui	r16,zero,647
 4009984:	04009ecc 	andi	r16,zero,635
 4009988:	0400a1f0 	cmpltui	r16,zero,647
 400998c:	0400a1f0 	cmpltui	r16,zero,647
 4009990:	04009f10 	cmplti	r16,zero,636
 4009994:	0400a1f0 	cmpltui	r16,zero,647
 4009998:	0400a1f0 	cmpltui	r16,zero,647
 400999c:	0400a1f0 	cmpltui	r16,zero,647
 40099a0:	0400a1f0 	cmpltui	r16,zero,647
 40099a4:	0400a1f0 	cmpltui	r16,zero,647
 40099a8:	0400a1f0 	cmpltui	r16,zero,647
 40099ac:	0400a1f0 	cmpltui	r16,zero,647
 40099b0:	0400a1f0 	cmpltui	r16,zero,647
 40099b4:	0400a1f0 	cmpltui	r16,zero,647
 40099b8:	0400a1f0 	cmpltui	r16,zero,647
 40099bc:	04009e58 	cmpnei	r16,zero,633
 40099c0:	0400a1a8 	cmpgeui	r16,zero,646
 40099c4:	0400a1f0 	cmpltui	r16,zero,647
 40099c8:	0400a1f0 	cmpltui	r16,zero,647
 40099cc:	0400a1f0 	cmpltui	r16,zero,647
 40099d0:	04009fe4 	muli	r16,zero,639
 40099d4:	0400a1a8 	cmpgeui	r16,zero,646
 40099d8:	0400a1f0 	cmpltui	r16,zero,647
 40099dc:	0400a1f0 	cmpltui	r16,zero,647
 40099e0:	04009efc 	xorhi	r16,zero,635
 40099e4:	0400a1f0 	cmpltui	r16,zero,647
 40099e8:	0400a148 	cmpgei	r16,zero,645
 40099ec:	0400a0d0 	cmplti	r16,zero,643
 40099f0:	0400a104 	movi	r16,644
 40099f4:	04009ff0 	cmpltui	r16,zero,639
 40099f8:	0400a1f0 	cmpltui	r16,zero,647
 40099fc:	04009ffc 	xorhi	r16,zero,639
 4009a00:	0400a1f0 	cmpltui	r16,zero,647
 4009a04:	0400a058 	cmpnei	r16,zero,641
 4009a08:	0400a1f0 	cmpltui	r16,zero,647
 4009a0c:	0400a1f0 	cmpltui	r16,zero,647
 4009a10:	0400a08c 	andi	r16,zero,642
 4009a14:	42000204 	addi	r8,r8,8
 4009a18:	d8c12517 	ldw	r3,1172(sp)
 4009a1c:	1c07883a 	add	r3,r3,r16
 4009a20:	d8c12515 	stw	r3,1172(sp)
 4009a24:	003f8d06 	br	400985c <__alt_data_end+0xfe00985c>
 4009a28:	d9012117 	ldw	r4,1156(sp)
 4009a2c:	d9412017 	ldw	r5,1152(sp)
 4009a30:	40043d00 	call	40043d0 <__swsetup_r>
 4009a34:	1000301e 	bne	r2,zero,4009af8 <___vfiprintf_internal_r+0x3f0>
 4009a38:	d8812017 	ldw	r2,1152(sp)
 4009a3c:	01000284 	movi	r4,10
 4009a40:	10c0030b 	ldhu	r3,12(r2)
 4009a44:	1805883a 	mov	r2,r3
 4009a48:	1080068c 	andi	r2,r2,26
 4009a4c:	113f551e 	bne	r2,r4,40097a4 <__alt_data_end+0xfe0097a4>
 4009a50:	d9012017 	ldw	r4,1152(sp)
 4009a54:	2080038b 	ldhu	r2,14(r4)
 4009a58:	113fffcc 	andi	r4,r2,65535
 4009a5c:	2120001c 	xori	r4,r4,32768
 4009a60:	21200004 	addi	r4,r4,-32768
 4009a64:	203f4f16 	blt	r4,zero,40097a4 <__alt_data_end+0xfe0097a4>
 4009a68:	d9412017 	ldw	r5,1152(sp)
 4009a6c:	d9012117 	ldw	r4,1156(sp)
 4009a70:	d9c12317 	ldw	r7,1164(sp)
 4009a74:	2b001917 	ldw	r12,100(r5)
 4009a78:	2ac00717 	ldw	r11,28(r5)
 4009a7c:	2a800917 	ldw	r10,36(r5)
 4009a80:	02010004 	movi	r8,1024
 4009a84:	18ffff4c 	andi	r3,r3,65533
 4009a88:	da0b883a 	add	r5,sp,r8
 4009a8c:	980d883a 	mov	r6,r19
 4009a90:	d8c1030d 	sth	r3,1036(sp)
 4009a94:	db011915 	stw	r12,1124(sp)
 4009a98:	d881038d 	sth	r2,1038(sp)
 4009a9c:	dac10715 	stw	r11,1052(sp)
 4009aa0:	da810915 	stw	r10,1060(sp)
 4009aa4:	dec10015 	stw	sp,1024(sp)
 4009aa8:	dec10415 	stw	sp,1040(sp)
 4009aac:	da010215 	stw	r8,1032(sp)
 4009ab0:	da010515 	stw	r8,1044(sp)
 4009ab4:	d8010615 	stw	zero,1048(sp)
 4009ab8:	40097080 	call	4009708 <___vfiprintf_internal_r>
 4009abc:	1021883a 	mov	r16,r2
 4009ac0:	10000416 	blt	r2,zero,4009ad4 <___vfiprintf_internal_r+0x3cc>
 4009ac4:	d9012117 	ldw	r4,1156(sp)
 4009ac8:	d9410004 	addi	r5,sp,1024
 4009acc:	4005e500 	call	4005e50 <_fflush_r>
 4009ad0:	10040f1e 	bne	r2,zero,400ab10 <___vfiprintf_internal_r+0x1408>
 4009ad4:	d881030b 	ldhu	r2,1036(sp)
 4009ad8:	1080100c 	andi	r2,r2,64
 4009adc:	10000426 	beq	r2,zero,4009af0 <___vfiprintf_internal_r+0x3e8>
 4009ae0:	d8c12017 	ldw	r3,1152(sp)
 4009ae4:	1880030b 	ldhu	r2,12(r3)
 4009ae8:	10801014 	ori	r2,r2,64
 4009aec:	1880030d 	sth	r2,12(r3)
 4009af0:	8005883a 	mov	r2,r16
 4009af4:	00000106 	br	4009afc <___vfiprintf_internal_r+0x3f4>
 4009af8:	00bfffc4 	movi	r2,-1
 4009afc:	dfc13517 	ldw	ra,1236(sp)
 4009b00:	df013417 	ldw	fp,1232(sp)
 4009b04:	ddc13317 	ldw	r23,1228(sp)
 4009b08:	dd813217 	ldw	r22,1224(sp)
 4009b0c:	dd413117 	ldw	r21,1220(sp)
 4009b10:	dd013017 	ldw	r20,1216(sp)
 4009b14:	dcc12f17 	ldw	r19,1212(sp)
 4009b18:	dc812e17 	ldw	r18,1208(sp)
 4009b1c:	dc412d17 	ldw	r17,1204(sp)
 4009b20:	dc012c17 	ldw	r16,1200(sp)
 4009b24:	dec13604 	addi	sp,sp,1240
 4009b28:	f800283a 	ret
 4009b2c:	400640c0 	call	400640c <__sinit>
 4009b30:	003f0706 	br	4009750 <__alt_data_end+0xfe009750>
 4009b34:	d8c12417 	ldw	r3,1168(sp)
 4009b38:	d8812315 	stw	r2,1164(sp)
 4009b3c:	00c7c83a 	sub	r3,zero,r3
 4009b40:	d8c12415 	stw	r3,1168(sp)
 4009b44:	94800114 	ori	r18,r18,4
 4009b48:	b9800007 	ldb	r6,0(r23)
 4009b4c:	003f4f06 	br	400988c <__alt_data_end+0xfe00988c>
 4009b50:	94802014 	ori	r18,r18,128
 4009b54:	b9800007 	ldb	r6,0(r23)
 4009b58:	003f4c06 	br	400988c <__alt_data_end+0xfe00988c>
 4009b5c:	dc012615 	stw	r16,1176(sp)
 4009b60:	d8012415 	stw	zero,1168(sp)
 4009b64:	35bff404 	addi	r22,r6,-48
 4009b68:	0009883a 	mov	r4,zero
 4009b6c:	b821883a 	mov	r16,r23
 4009b70:	01400284 	movi	r5,10
 4009b74:	400c2240 	call	400c224 <__mulsi3>
 4009b78:	81800007 	ldb	r6,0(r16)
 4009b7c:	1589883a 	add	r4,r2,r22
 4009b80:	bdc00044 	addi	r23,r23,1
 4009b84:	35bff404 	addi	r22,r6,-48
 4009b88:	b821883a 	mov	r16,r23
 4009b8c:	adbff82e 	bgeu	r21,r22,4009b70 <__alt_data_end+0xfe009b70>
 4009b90:	d9012415 	stw	r4,1168(sp)
 4009b94:	dc012617 	ldw	r16,1176(sp)
 4009b98:	003f3d06 	br	4009890 <__alt_data_end+0xfe009890>
 4009b9c:	d8c12203 	ldbu	r3,1160(sp)
 4009ba0:	94800414 	ori	r18,r18,16
 4009ba4:	9080080c 	andi	r2,r18,32
 4009ba8:	d8c11d85 	stb	r3,1142(sp)
 4009bac:	9811883a 	mov	r8,r19
 4009bb0:	d8c12317 	ldw	r3,1164(sp)
 4009bb4:	10018226 	beq	r2,zero,400a1c0 <___vfiprintf_internal_r+0xab8>
 4009bb8:	d9012317 	ldw	r4,1164(sp)
 4009bbc:	18800117 	ldw	r2,4(r3)
 4009bc0:	1cc00017 	ldw	r19,0(r3)
 4009bc4:	21000204 	addi	r4,r4,8
 4009bc8:	d9012315 	stw	r4,1164(sp)
 4009bcc:	102b883a 	mov	r21,r2
 4009bd0:	10030016 	blt	r2,zero,400a7d4 <___vfiprintf_internal_r+0x10cc>
 4009bd4:	dd811d83 	ldbu	r22,1142(sp)
 4009bd8:	8029883a 	mov	r20,r16
 4009bdc:	00800044 	movi	r2,1
 4009be0:	9d46b03a 	or	r3,r19,r21
 4009be4:	80000216 	blt	r16,zero,4009bf0 <___vfiprintf_internal_r+0x4e8>
 4009be8:	013fdfc4 	movi	r4,-129
 4009bec:	9124703a 	and	r18,r18,r4
 4009bf0:	1801b41e 	bne	r3,zero,400a2c4 <___vfiprintf_internal_r+0xbbc>
 4009bf4:	80028126 	beq	r16,zero,400a5fc <___vfiprintf_internal_r+0xef4>
 4009bf8:	10803fcc 	andi	r2,r2,255
 4009bfc:	00c00044 	movi	r3,1
 4009c00:	10c1d126 	beq	r2,r3,400a348 <___vfiprintf_internal_r+0xc40>
 4009c04:	00c00084 	movi	r3,2
 4009c08:	10c28626 	beq	r2,r3,400a624 <___vfiprintf_internal_r+0xf1c>
 4009c0c:	d8c10a04 	addi	r3,sp,1064
 4009c10:	9808d0fa 	srli	r4,r19,3
 4009c14:	a80a977a 	slli	r5,r21,29
 4009c18:	a82ad0fa 	srli	r21,r21,3
 4009c1c:	9cc001cc 	andi	r19,r19,7
 4009c20:	98800c04 	addi	r2,r19,48
 4009c24:	18ffffc4 	addi	r3,r3,-1
 4009c28:	2926b03a 	or	r19,r5,r4
 4009c2c:	18800005 	stb	r2,0(r3)
 4009c30:	9d48b03a 	or	r4,r19,r21
 4009c34:	203ff61e 	bne	r4,zero,4009c10 <__alt_data_end+0xfe009c10>
 4009c38:	9100004c 	andi	r4,r18,1
 4009c3c:	d8c12215 	stw	r3,1160(sp)
 4009c40:	2002b31e 	bne	r4,zero,400a710 <___vfiprintf_internal_r+0x1008>
 4009c44:	d9411e17 	ldw	r5,1144(sp)
 4009c48:	28e9c83a 	sub	r20,r5,r3
 4009c4c:	a02b883a 	mov	r21,r20
 4009c50:	a400010e 	bge	r20,r16,4009c58 <___vfiprintf_internal_r+0x550>
 4009c54:	802b883a 	mov	r21,r16
 4009c58:	b5803fcc 	andi	r22,r22,255
 4009c5c:	b580201c 	xori	r22,r22,128
 4009c60:	b5bfe004 	addi	r22,r22,-128
 4009c64:	b0000126 	beq	r22,zero,4009c6c <___vfiprintf_internal_r+0x564>
 4009c68:	ad400044 	addi	r21,r21,1
 4009c6c:	9280008c 	andi	r10,r18,2
 4009c70:	50000126 	beq	r10,zero,4009c78 <___vfiprintf_internal_r+0x570>
 4009c74:	ad400084 	addi	r21,r21,2
 4009c78:	9580210c 	andi	r22,r18,132
 4009c7c:	b001751e 	bne	r22,zero,400a254 <___vfiprintf_internal_r+0xb4c>
 4009c80:	d9012417 	ldw	r4,1168(sp)
 4009c84:	2567c83a 	sub	r19,r4,r21
 4009c88:	04c1720e 	bge	zero,r19,400a254 <___vfiprintf_internal_r+0xb4c>
 4009c8c:	01c00404 	movi	r7,16
 4009c90:	d8c11c17 	ldw	r3,1136(sp)
 4009c94:	3cc36b0e 	bge	r7,r19,400aa44 <___vfiprintf_internal_r+0x133c>
 4009c98:	00810074 	movhi	r2,1025
 4009c9c:	1086f204 	addi	r2,r2,7112
 4009ca0:	dc012915 	stw	r16,1188(sp)
 4009ca4:	d9011b17 	ldw	r4,1132(sp)
 4009ca8:	9821883a 	mov	r16,r19
 4009cac:	d8812615 	stw	r2,1176(sp)
 4009cb0:	030001c4 	movi	r12,7
 4009cb4:	5027883a 	mov	r19,r10
 4009cb8:	00000506 	br	4009cd0 <___vfiprintf_internal_r+0x5c8>
 4009cbc:	21400084 	addi	r5,r4,2
 4009cc0:	42000204 	addi	r8,r8,8
 4009cc4:	1009883a 	mov	r4,r2
 4009cc8:	843ffc04 	addi	r16,r16,-16
 4009ccc:	3c000d0e 	bge	r7,r16,4009d04 <___vfiprintf_internal_r+0x5fc>
 4009cd0:	18c00404 	addi	r3,r3,16
 4009cd4:	20800044 	addi	r2,r4,1
 4009cd8:	47000015 	stw	fp,0(r8)
 4009cdc:	41c00115 	stw	r7,4(r8)
 4009ce0:	d8c11c15 	stw	r3,1136(sp)
 4009ce4:	d8811b15 	stw	r2,1132(sp)
 4009ce8:	60bff40e 	bge	r12,r2,4009cbc <__alt_data_end+0xfe009cbc>
 4009cec:	18014b1e 	bne	r3,zero,400a21c <___vfiprintf_internal_r+0xb14>
 4009cf0:	843ffc04 	addi	r16,r16,-16
 4009cf4:	0009883a 	mov	r4,zero
 4009cf8:	01400044 	movi	r5,1
 4009cfc:	d811883a 	mov	r8,sp
 4009d00:	3c3ff316 	blt	r7,r16,4009cd0 <__alt_data_end+0xfe009cd0>
 4009d04:	9815883a 	mov	r10,r19
 4009d08:	8027883a 	mov	r19,r16
 4009d0c:	dc012917 	ldw	r16,1188(sp)
 4009d10:	d9012617 	ldw	r4,1176(sp)
 4009d14:	98c7883a 	add	r3,r19,r3
 4009d18:	44c00115 	stw	r19,4(r8)
 4009d1c:	41000015 	stw	r4,0(r8)
 4009d20:	d8c11c15 	stw	r3,1136(sp)
 4009d24:	d9411b15 	stw	r5,1132(sp)
 4009d28:	008001c4 	movi	r2,7
 4009d2c:	11425116 	blt	r2,r5,400a674 <___vfiprintf_internal_r+0xf6c>
 4009d30:	d9011d87 	ldb	r4,1142(sp)
 4009d34:	42000204 	addi	r8,r8,8
 4009d38:	28800044 	addi	r2,r5,1
 4009d3c:	20014a1e 	bne	r4,zero,400a268 <___vfiprintf_internal_r+0xb60>
 4009d40:	50000c26 	beq	r10,zero,4009d74 <___vfiprintf_internal_r+0x66c>
 4009d44:	d9011d04 	addi	r4,sp,1140
 4009d48:	18c00084 	addi	r3,r3,2
 4009d4c:	41000015 	stw	r4,0(r8)
 4009d50:	01000084 	movi	r4,2
 4009d54:	41000115 	stw	r4,4(r8)
 4009d58:	d8c11c15 	stw	r3,1136(sp)
 4009d5c:	d8811b15 	stw	r2,1132(sp)
 4009d60:	010001c4 	movi	r4,7
 4009d64:	20822016 	blt	r4,r2,400a5e8 <___vfiprintf_internal_r+0xee0>
 4009d68:	100b883a 	mov	r5,r2
 4009d6c:	42000204 	addi	r8,r8,8
 4009d70:	10800044 	addi	r2,r2,1
 4009d74:	01002004 	movi	r4,128
 4009d78:	b101de26 	beq	r22,r4,400a4f4 <___vfiprintf_internal_r+0xdec>
 4009d7c:	8521c83a 	sub	r16,r16,r20
 4009d80:	0400230e 	bge	zero,r16,4009e10 <___vfiprintf_internal_r+0x708>
 4009d84:	04c00404 	movi	r19,16
 4009d88:	9c030d0e 	bge	r19,r16,400a9c0 <___vfiprintf_internal_r+0x12b8>
 4009d8c:	00810074 	movhi	r2,1025
 4009d90:	1086ee04 	addi	r2,r2,7096
 4009d94:	d8812615 	stw	r2,1176(sp)
 4009d98:	058001c4 	movi	r22,7
 4009d9c:	00000506 	br	4009db4 <___vfiprintf_internal_r+0x6ac>
 4009da0:	28800084 	addi	r2,r5,2
 4009da4:	42000204 	addi	r8,r8,8
 4009da8:	200b883a 	mov	r5,r4
 4009dac:	843ffc04 	addi	r16,r16,-16
 4009db0:	9c000d0e 	bge	r19,r16,4009de8 <___vfiprintf_internal_r+0x6e0>
 4009db4:	18c00404 	addi	r3,r3,16
 4009db8:	29000044 	addi	r4,r5,1
 4009dbc:	44400015 	stw	r17,0(r8)
 4009dc0:	44c00115 	stw	r19,4(r8)
 4009dc4:	d8c11c15 	stw	r3,1136(sp)
 4009dc8:	d9011b15 	stw	r4,1132(sp)
 4009dcc:	b13ff40e 	bge	r22,r4,4009da0 <__alt_data_end+0xfe009da0>
 4009dd0:	1801321e 	bne	r3,zero,400a29c <___vfiprintf_internal_r+0xb94>
 4009dd4:	843ffc04 	addi	r16,r16,-16
 4009dd8:	000b883a 	mov	r5,zero
 4009ddc:	00800044 	movi	r2,1
 4009de0:	d811883a 	mov	r8,sp
 4009de4:	9c3ff316 	blt	r19,r16,4009db4 <__alt_data_end+0xfe009db4>
 4009de8:	d9012617 	ldw	r4,1176(sp)
 4009dec:	1c07883a 	add	r3,r3,r16
 4009df0:	44000115 	stw	r16,4(r8)
 4009df4:	41000015 	stw	r4,0(r8)
 4009df8:	d8c11c15 	stw	r3,1136(sp)
 4009dfc:	d8811b15 	stw	r2,1132(sp)
 4009e00:	010001c4 	movi	r4,7
 4009e04:	20816216 	blt	r4,r2,400a390 <___vfiprintf_internal_r+0xc88>
 4009e08:	42000204 	addi	r8,r8,8
 4009e0c:	10800044 	addi	r2,r2,1
 4009e10:	d9012217 	ldw	r4,1160(sp)
 4009e14:	1d07883a 	add	r3,r3,r20
 4009e18:	45000115 	stw	r20,4(r8)
 4009e1c:	41000015 	stw	r4,0(r8)
 4009e20:	d8c11c15 	stw	r3,1136(sp)
 4009e24:	d8811b15 	stw	r2,1132(sp)
 4009e28:	010001c4 	movi	r4,7
 4009e2c:	2081610e 	bge	r4,r2,400a3b4 <___vfiprintf_internal_r+0xcac>
 4009e30:	1802211e 	bne	r3,zero,400a6b8 <___vfiprintf_internal_r+0xfb0>
 4009e34:	d8011b15 	stw	zero,1132(sp)
 4009e38:	9480010c 	andi	r18,r18,4
 4009e3c:	9002171e 	bne	r18,zero,400a69c <___vfiprintf_internal_r+0xf94>
 4009e40:	d9412417 	ldw	r5,1168(sp)
 4009e44:	a9433716 	blt	r21,r5,400ab24 <___vfiprintf_internal_r+0x141c>
 4009e48:	d8812517 	ldw	r2,1172(sp)
 4009e4c:	1545883a 	add	r2,r2,r21
 4009e50:	d8812515 	stw	r2,1172(sp)
 4009e54:	00019a06 	br	400a4c0 <___vfiprintf_internal_r+0xdb8>
 4009e58:	d8c12317 	ldw	r3,1164(sp)
 4009e5c:	05400044 	movi	r21,1
 4009e60:	9811883a 	mov	r8,r19
 4009e64:	18800017 	ldw	r2,0(r3)
 4009e68:	18c00104 	addi	r3,r3,4
 4009e6c:	d8c12315 	stw	r3,1164(sp)
 4009e70:	d8c10004 	addi	r3,sp,1024
 4009e74:	d8011d85 	stb	zero,1142(sp)
 4009e78:	d8810005 	stb	r2,1024(sp)
 4009e7c:	a829883a 	mov	r20,r21
 4009e80:	d8c12215 	stw	r3,1160(sp)
 4009e84:	0021883a 	mov	r16,zero
 4009e88:	003f7806 	br	4009c6c <__alt_data_end+0xfe009c6c>
 4009e8c:	94800414 	ori	r18,r18,16
 4009e90:	9080080c 	andi	r2,r18,32
 4009e94:	9811883a 	mov	r8,r19
 4009e98:	10009026 	beq	r2,zero,400a0dc <___vfiprintf_internal_r+0x9d4>
 4009e9c:	d8812317 	ldw	r2,1164(sp)
 4009ea0:	d8c12317 	ldw	r3,1164(sp)
 4009ea4:	14c00017 	ldw	r19,0(r2)
 4009ea8:	15400117 	ldw	r21,4(r2)
 4009eac:	18c00204 	addi	r3,r3,8
 4009eb0:	d8c12315 	stw	r3,1164(sp)
 4009eb4:	0005883a 	mov	r2,zero
 4009eb8:	9d46b03a 	or	r3,r19,r21
 4009ebc:	d8011d85 	stb	zero,1142(sp)
 4009ec0:	8029883a 	mov	r20,r16
 4009ec4:	002d883a 	mov	r22,zero
 4009ec8:	003f4606 	br	4009be4 <__alt_data_end+0xfe009be4>
 4009ecc:	94800414 	ori	r18,r18,16
 4009ed0:	9080080c 	andi	r2,r18,32
 4009ed4:	9811883a 	mov	r8,r19
 4009ed8:	10006226 	beq	r2,zero,400a064 <___vfiprintf_internal_r+0x95c>
 4009edc:	d9012317 	ldw	r4,1164(sp)
 4009ee0:	00800044 	movi	r2,1
 4009ee4:	24c00017 	ldw	r19,0(r4)
 4009ee8:	25400117 	ldw	r21,4(r4)
 4009eec:	21000204 	addi	r4,r4,8
 4009ef0:	d9012315 	stw	r4,1164(sp)
 4009ef4:	9d46b03a 	or	r3,r19,r21
 4009ef8:	003ff006 	br	4009ebc <__alt_data_end+0xfe009ebc>
 4009efc:	b9800007 	ldb	r6,0(r23)
 4009f00:	00801b04 	movi	r2,108
 4009f04:	3082b226 	beq	r6,r2,400a9d0 <___vfiprintf_internal_r+0x12c8>
 4009f08:	94800414 	ori	r18,r18,16
 4009f0c:	003e5f06 	br	400988c <__alt_data_end+0xfe00988c>
 4009f10:	d8c12203 	ldbu	r3,1160(sp)
 4009f14:	01010074 	movhi	r4,1025
 4009f18:	21068804 	addi	r4,r4,6688
 4009f1c:	d8c11d85 	stb	r3,1142(sp)
 4009f20:	d9012715 	stw	r4,1180(sp)
 4009f24:	90c0080c 	andi	r3,r18,32
 4009f28:	9811883a 	mov	r8,r19
 4009f2c:	d8812317 	ldw	r2,1164(sp)
 4009f30:	18005f26 	beq	r3,zero,400a0b0 <___vfiprintf_internal_r+0x9a8>
 4009f34:	d9012317 	ldw	r4,1164(sp)
 4009f38:	14c00017 	ldw	r19,0(r2)
 4009f3c:	15400117 	ldw	r21,4(r2)
 4009f40:	21000204 	addi	r4,r4,8
 4009f44:	d9012315 	stw	r4,1164(sp)
 4009f48:	9080004c 	andi	r2,r18,1
 4009f4c:	1001e226 	beq	r2,zero,400a6d8 <___vfiprintf_internal_r+0xfd0>
 4009f50:	9d46b03a 	or	r3,r19,r21
 4009f54:	18024e26 	beq	r3,zero,400a890 <___vfiprintf_internal_r+0x1188>
 4009f58:	00800c04 	movi	r2,48
 4009f5c:	d8811d05 	stb	r2,1140(sp)
 4009f60:	d9811d45 	stb	r6,1141(sp)
 4009f64:	94800094 	ori	r18,r18,2
 4009f68:	00800084 	movi	r2,2
 4009f6c:	003fd306 	br	4009ebc <__alt_data_end+0xfe009ebc>
 4009f70:	d9012317 	ldw	r4,1164(sp)
 4009f74:	d9412317 	ldw	r5,1164(sp)
 4009f78:	21000017 	ldw	r4,0(r4)
 4009f7c:	28800104 	addi	r2,r5,4
 4009f80:	d9012415 	stw	r4,1168(sp)
 4009f84:	203eeb16 	blt	r4,zero,4009b34 <__alt_data_end+0xfe009b34>
 4009f88:	d8812315 	stw	r2,1164(sp)
 4009f8c:	b9800007 	ldb	r6,0(r23)
 4009f90:	003e3e06 	br	400988c <__alt_data_end+0xfe00988c>
 4009f94:	b9800007 	ldb	r6,0(r23)
 4009f98:	01000a84 	movi	r4,42
 4009f9c:	b8800044 	addi	r2,r23,1
 4009fa0:	3102d226 	beq	r6,r4,400aaec <___vfiprintf_internal_r+0x13e4>
 4009fa4:	35bff404 	addi	r22,r6,-48
 4009fa8:	102f883a 	mov	r23,r2
 4009fac:	0021883a 	mov	r16,zero
 4009fb0:	adbe3736 	bltu	r21,r22,4009890 <__alt_data_end+0xfe009890>
 4009fb4:	0009883a 	mov	r4,zero
 4009fb8:	01400284 	movi	r5,10
 4009fbc:	400c2240 	call	400c224 <__mulsi3>
 4009fc0:	b9800007 	ldb	r6,0(r23)
 4009fc4:	b089883a 	add	r4,r22,r2
 4009fc8:	bdc00044 	addi	r23,r23,1
 4009fcc:	35bff404 	addi	r22,r6,-48
 4009fd0:	adbff92e 	bgeu	r21,r22,4009fb8 <__alt_data_end+0xfe009fb8>
 4009fd4:	2021883a 	mov	r16,r4
 4009fd8:	203e2d0e 	bge	r4,zero,4009890 <__alt_data_end+0xfe009890>
 4009fdc:	043fffc4 	movi	r16,-1
 4009fe0:	003e2b06 	br	4009890 <__alt_data_end+0xfe009890>
 4009fe4:	94801014 	ori	r18,r18,64
 4009fe8:	b9800007 	ldb	r6,0(r23)
 4009fec:	003e2706 	br	400988c <__alt_data_end+0xfe00988c>
 4009ff0:	94800814 	ori	r18,r18,32
 4009ff4:	b9800007 	ldb	r6,0(r23)
 4009ff8:	003e2406 	br	400988c <__alt_data_end+0xfe00988c>
 4009ffc:	d9412317 	ldw	r5,1164(sp)
 400a000:	d8812317 	ldw	r2,1164(sp)
 400a004:	d8011d85 	stb	zero,1142(sp)
 400a008:	29400017 	ldw	r5,0(r5)
 400a00c:	9811883a 	mov	r8,r19
 400a010:	14c00104 	addi	r19,r2,4
 400a014:	d9412215 	stw	r5,1160(sp)
 400a018:	28029026 	beq	r5,zero,400aa5c <___vfiprintf_internal_r+0x1354>
 400a01c:	d9012217 	ldw	r4,1160(sp)
 400a020:	80027616 	blt	r16,zero,400a9fc <___vfiprintf_internal_r+0x12f4>
 400a024:	000b883a 	mov	r5,zero
 400a028:	800d883a 	mov	r6,r16
 400a02c:	da012a15 	stw	r8,1192(sp)
 400a030:	40078c40 	call	40078c4 <memchr>
 400a034:	da012a17 	ldw	r8,1192(sp)
 400a038:	1002a026 	beq	r2,zero,400aabc <___vfiprintf_internal_r+0x13b4>
 400a03c:	d8c12217 	ldw	r3,1160(sp)
 400a040:	10e9c83a 	sub	r20,r2,r3
 400a044:	85023816 	blt	r16,r20,400a928 <___vfiprintf_internal_r+0x1220>
 400a048:	dd811d83 	ldbu	r22,1142(sp)
 400a04c:	dcc12315 	stw	r19,1164(sp)
 400a050:	0021883a 	mov	r16,zero
 400a054:	003efd06 	br	4009c4c <__alt_data_end+0xfe009c4c>
 400a058:	9080080c 	andi	r2,r18,32
 400a05c:	9811883a 	mov	r8,r19
 400a060:	103f9e1e 	bne	r2,zero,4009edc <__alt_data_end+0xfe009edc>
 400a064:	9080040c 	andi	r2,r18,16
 400a068:	10021726 	beq	r2,zero,400a8c8 <___vfiprintf_internal_r+0x11c0>
 400a06c:	d9412317 	ldw	r5,1164(sp)
 400a070:	002b883a 	mov	r21,zero
 400a074:	00800044 	movi	r2,1
 400a078:	2cc00017 	ldw	r19,0(r5)
 400a07c:	29400104 	addi	r5,r5,4
 400a080:	d9412315 	stw	r5,1164(sp)
 400a084:	9807883a 	mov	r3,r19
 400a088:	003f8c06 	br	4009ebc <__alt_data_end+0xfe009ebc>
 400a08c:	d8c12203 	ldbu	r3,1160(sp)
 400a090:	01010074 	movhi	r4,1025
 400a094:	21068d04 	addi	r4,r4,6708
 400a098:	d8c11d85 	stb	r3,1142(sp)
 400a09c:	d9012715 	stw	r4,1180(sp)
 400a0a0:	90c0080c 	andi	r3,r18,32
 400a0a4:	9811883a 	mov	r8,r19
 400a0a8:	d8812317 	ldw	r2,1164(sp)
 400a0ac:	183fa11e 	bne	r3,zero,4009f34 <__alt_data_end+0xfe009f34>
 400a0b0:	90c0040c 	andi	r3,r18,16
 400a0b4:	1801e526 	beq	r3,zero,400a84c <___vfiprintf_internal_r+0x1144>
 400a0b8:	d9412317 	ldw	r5,1164(sp)
 400a0bc:	14c00017 	ldw	r19,0(r2)
 400a0c0:	002b883a 	mov	r21,zero
 400a0c4:	29400104 	addi	r5,r5,4
 400a0c8:	d9412315 	stw	r5,1164(sp)
 400a0cc:	003f9e06 	br	4009f48 <__alt_data_end+0xfe009f48>
 400a0d0:	9080080c 	andi	r2,r18,32
 400a0d4:	9811883a 	mov	r8,r19
 400a0d8:	103f701e 	bne	r2,zero,4009e9c <__alt_data_end+0xfe009e9c>
 400a0dc:	9080040c 	andi	r2,r18,16
 400a0e0:	1001ef26 	beq	r2,zero,400a8a0 <___vfiprintf_internal_r+0x1198>
 400a0e4:	d9012317 	ldw	r4,1164(sp)
 400a0e8:	002b883a 	mov	r21,zero
 400a0ec:	0005883a 	mov	r2,zero
 400a0f0:	24c00017 	ldw	r19,0(r4)
 400a0f4:	21000104 	addi	r4,r4,4
 400a0f8:	d9012315 	stw	r4,1164(sp)
 400a0fc:	9807883a 	mov	r3,r19
 400a100:	003f6e06 	br	4009ebc <__alt_data_end+0xfe009ebc>
 400a104:	d8c12317 	ldw	r3,1164(sp)
 400a108:	9811883a 	mov	r8,r19
 400a10c:	00800c04 	movi	r2,48
 400a110:	1cc00017 	ldw	r19,0(r3)
 400a114:	01010074 	movhi	r4,1025
 400a118:	18c00104 	addi	r3,r3,4
 400a11c:	d8811d05 	stb	r2,1140(sp)
 400a120:	21068d04 	addi	r4,r4,6708
 400a124:	00801e04 	movi	r2,120
 400a128:	d8811d45 	stb	r2,1141(sp)
 400a12c:	d8c12315 	stw	r3,1164(sp)
 400a130:	002b883a 	mov	r21,zero
 400a134:	94800094 	ori	r18,r18,2
 400a138:	d9012715 	stw	r4,1180(sp)
 400a13c:	00800084 	movi	r2,2
 400a140:	9807883a 	mov	r3,r19
 400a144:	003f5d06 	br	4009ebc <__alt_data_end+0xfe009ebc>
 400a148:	d8c12203 	ldbu	r3,1160(sp)
 400a14c:	9080080c 	andi	r2,r18,32
 400a150:	9811883a 	mov	r8,r19
 400a154:	d8c11d85 	stb	r3,1142(sp)
 400a158:	1001b126 	beq	r2,zero,400a820 <___vfiprintf_internal_r+0x1118>
 400a15c:	d9012317 	ldw	r4,1164(sp)
 400a160:	d9412517 	ldw	r5,1172(sp)
 400a164:	20800017 	ldw	r2,0(r4)
 400a168:	2807d7fa 	srai	r3,r5,31
 400a16c:	21000104 	addi	r4,r4,4
 400a170:	d9012315 	stw	r4,1164(sp)
 400a174:	11400015 	stw	r5,0(r2)
 400a178:	10c00115 	stw	r3,4(r2)
 400a17c:	003d9a06 	br	40097e8 <__alt_data_end+0xfe0097e8>
 400a180:	d8812207 	ldb	r2,1160(sp)
 400a184:	1001c41e 	bne	r2,zero,400a898 <___vfiprintf_internal_r+0x1190>
 400a188:	00c00804 	movi	r3,32
 400a18c:	d8c12205 	stb	r3,1160(sp)
 400a190:	b9800007 	ldb	r6,0(r23)
 400a194:	003dbd06 	br	400988c <__alt_data_end+0xfe00988c>
 400a198:	00c00ac4 	movi	r3,43
 400a19c:	d8c12205 	stb	r3,1160(sp)
 400a1a0:	b9800007 	ldb	r6,0(r23)
 400a1a4:	003db906 	br	400988c <__alt_data_end+0xfe00988c>
 400a1a8:	d8c12203 	ldbu	r3,1160(sp)
 400a1ac:	9080080c 	andi	r2,r18,32
 400a1b0:	9811883a 	mov	r8,r19
 400a1b4:	d8c11d85 	stb	r3,1142(sp)
 400a1b8:	d8c12317 	ldw	r3,1164(sp)
 400a1bc:	103e7e1e 	bne	r2,zero,4009bb8 <__alt_data_end+0xfe009bb8>
 400a1c0:	9080040c 	andi	r2,r18,16
 400a1c4:	1001a926 	beq	r2,zero,400a86c <___vfiprintf_internal_r+0x1164>
 400a1c8:	1cc00017 	ldw	r19,0(r3)
 400a1cc:	d9412317 	ldw	r5,1164(sp)
 400a1d0:	982bd7fa 	srai	r21,r19,31
 400a1d4:	29400104 	addi	r5,r5,4
 400a1d8:	d9412315 	stw	r5,1164(sp)
 400a1dc:	a805883a 	mov	r2,r21
 400a1e0:	003e7b06 	br	4009bd0 <__alt_data_end+0xfe009bd0>
 400a1e4:	94800054 	ori	r18,r18,1
 400a1e8:	b9800007 	ldb	r6,0(r23)
 400a1ec:	003da706 	br	400988c <__alt_data_end+0xfe00988c>
 400a1f0:	d8c12203 	ldbu	r3,1160(sp)
 400a1f4:	9811883a 	mov	r8,r19
 400a1f8:	d8c11d85 	stb	r3,1142(sp)
 400a1fc:	30005826 	beq	r6,zero,400a360 <___vfiprintf_internal_r+0xc58>
 400a200:	05400044 	movi	r21,1
 400a204:	d8c10004 	addi	r3,sp,1024
 400a208:	d9810005 	stb	r6,1024(sp)
 400a20c:	d8011d85 	stb	zero,1142(sp)
 400a210:	a829883a 	mov	r20,r21
 400a214:	d8c12215 	stw	r3,1160(sp)
 400a218:	003f1a06 	br	4009e84 <__alt_data_end+0xfe009e84>
 400a21c:	d9012117 	ldw	r4,1156(sp)
 400a220:	d9412017 	ldw	r5,1152(sp)
 400a224:	d9811a04 	addi	r6,sp,1128
 400a228:	d9c12a15 	stw	r7,1192(sp)
 400a22c:	db012b15 	stw	r12,1196(sp)
 400a230:	40095f40 	call	40095f4 <__sprint_r.part.0>
 400a234:	d9c12a17 	ldw	r7,1192(sp)
 400a238:	db012b17 	ldw	r12,1196(sp)
 400a23c:	10004e1e 	bne	r2,zero,400a378 <___vfiprintf_internal_r+0xc70>
 400a240:	d9011b17 	ldw	r4,1132(sp)
 400a244:	d8c11c17 	ldw	r3,1136(sp)
 400a248:	d811883a 	mov	r8,sp
 400a24c:	21400044 	addi	r5,r4,1
 400a250:	003e9d06 	br	4009cc8 <__alt_data_end+0xfe009cc8>
 400a254:	d9411b17 	ldw	r5,1132(sp)
 400a258:	d8c11c17 	ldw	r3,1136(sp)
 400a25c:	28800044 	addi	r2,r5,1
 400a260:	d9011d87 	ldb	r4,1142(sp)
 400a264:	203eb626 	beq	r4,zero,4009d40 <__alt_data_end+0xfe009d40>
 400a268:	01000044 	movi	r4,1
 400a26c:	d9411d84 	addi	r5,sp,1142
 400a270:	1907883a 	add	r3,r3,r4
 400a274:	41400015 	stw	r5,0(r8)
 400a278:	41000115 	stw	r4,4(r8)
 400a27c:	d8c11c15 	stw	r3,1136(sp)
 400a280:	d8811b15 	stw	r2,1132(sp)
 400a284:	014001c4 	movi	r5,7
 400a288:	2880ce16 	blt	r5,r2,400a5c4 <___vfiprintf_internal_r+0xebc>
 400a28c:	100b883a 	mov	r5,r2
 400a290:	42000204 	addi	r8,r8,8
 400a294:	10800044 	addi	r2,r2,1
 400a298:	003ea906 	br	4009d40 <__alt_data_end+0xfe009d40>
 400a29c:	d9012117 	ldw	r4,1156(sp)
 400a2a0:	d9412017 	ldw	r5,1152(sp)
 400a2a4:	d9811a04 	addi	r6,sp,1128
 400a2a8:	40095f40 	call	40095f4 <__sprint_r.part.0>
 400a2ac:	1000321e 	bne	r2,zero,400a378 <___vfiprintf_internal_r+0xc70>
 400a2b0:	d9411b17 	ldw	r5,1132(sp)
 400a2b4:	d8c11c17 	ldw	r3,1136(sp)
 400a2b8:	d811883a 	mov	r8,sp
 400a2bc:	28800044 	addi	r2,r5,1
 400a2c0:	003eba06 	br	4009dac <__alt_data_end+0xfe009dac>
 400a2c4:	10803fcc 	andi	r2,r2,255
 400a2c8:	00c00044 	movi	r3,1
 400a2cc:	10fe4d1e 	bne	r2,r3,4009c04 <__alt_data_end+0xfe009c04>
 400a2d0:	a800021e 	bne	r21,zero,400a2dc <___vfiprintf_internal_r+0xbd4>
 400a2d4:	00800244 	movi	r2,9
 400a2d8:	14c01b2e 	bgeu	r2,r19,400a348 <___vfiprintf_internal_r+0xc40>
 400a2dc:	dc012215 	stw	r16,1160(sp)
 400a2e0:	dd010a04 	addi	r20,sp,1064
 400a2e4:	a821883a 	mov	r16,r21
 400a2e8:	402b883a 	mov	r21,r8
 400a2ec:	9809883a 	mov	r4,r19
 400a2f0:	800b883a 	mov	r5,r16
 400a2f4:	01800284 	movi	r6,10
 400a2f8:	000f883a 	mov	r7,zero
 400a2fc:	400badc0 	call	400badc <__umoddi3>
 400a300:	10800c04 	addi	r2,r2,48
 400a304:	a53fffc4 	addi	r20,r20,-1
 400a308:	9809883a 	mov	r4,r19
 400a30c:	800b883a 	mov	r5,r16
 400a310:	01800284 	movi	r6,10
 400a314:	000f883a 	mov	r7,zero
 400a318:	a0800005 	stb	r2,0(r20)
 400a31c:	400b49c0 	call	400b49c <__udivdi3>
 400a320:	1027883a 	mov	r19,r2
 400a324:	10c4b03a 	or	r2,r2,r3
 400a328:	1821883a 	mov	r16,r3
 400a32c:	103fef1e 	bne	r2,zero,400a2ec <__alt_data_end+0xfe00a2ec>
 400a330:	d9011e17 	ldw	r4,1144(sp)
 400a334:	dc012217 	ldw	r16,1160(sp)
 400a338:	a811883a 	mov	r8,r21
 400a33c:	dd012215 	stw	r20,1160(sp)
 400a340:	2529c83a 	sub	r20,r4,r20
 400a344:	003e4106 	br	4009c4c <__alt_data_end+0xfe009c4c>
 400a348:	9cc00c04 	addi	r19,r19,48
 400a34c:	d8c109c4 	addi	r3,sp,1063
 400a350:	dcc109c5 	stb	r19,1063(sp)
 400a354:	dd012817 	ldw	r20,1184(sp)
 400a358:	d8c12215 	stw	r3,1160(sp)
 400a35c:	003e3b06 	br	4009c4c <__alt_data_end+0xfe009c4c>
 400a360:	d8811c17 	ldw	r2,1136(sp)
 400a364:	10000426 	beq	r2,zero,400a378 <___vfiprintf_internal_r+0xc70>
 400a368:	d9012117 	ldw	r4,1156(sp)
 400a36c:	d9412017 	ldw	r5,1152(sp)
 400a370:	d9811a04 	addi	r6,sp,1128
 400a374:	40095f40 	call	40095f4 <__sprint_r.part.0>
 400a378:	d9412017 	ldw	r5,1152(sp)
 400a37c:	2880030b 	ldhu	r2,12(r5)
 400a380:	1080100c 	andi	r2,r2,64
 400a384:	103ddc1e 	bne	r2,zero,4009af8 <__alt_data_end+0xfe009af8>
 400a388:	d8812517 	ldw	r2,1172(sp)
 400a38c:	003ddb06 	br	4009afc <__alt_data_end+0xfe009afc>
 400a390:	1801061e 	bne	r3,zero,400a7ac <___vfiprintf_internal_r+0x10a4>
 400a394:	d8c12217 	ldw	r3,1160(sp)
 400a398:	00800044 	movi	r2,1
 400a39c:	dd000115 	stw	r20,4(sp)
 400a3a0:	d8c00015 	stw	r3,0(sp)
 400a3a4:	dd011c15 	stw	r20,1136(sp)
 400a3a8:	d8811b15 	stw	r2,1132(sp)
 400a3ac:	a007883a 	mov	r3,r20
 400a3b0:	d811883a 	mov	r8,sp
 400a3b4:	42000204 	addi	r8,r8,8
 400a3b8:	9480010c 	andi	r18,r18,4
 400a3bc:	90003426 	beq	r18,zero,400a490 <___vfiprintf_internal_r+0xd88>
 400a3c0:	d9412417 	ldw	r5,1168(sp)
 400a3c4:	2d65c83a 	sub	r18,r5,r21
 400a3c8:	0480310e 	bge	zero,r18,400a490 <___vfiprintf_internal_r+0xd88>
 400a3cc:	04000404 	movi	r16,16
 400a3d0:	8481ad0e 	bge	r16,r18,400aa88 <___vfiprintf_internal_r+0x1380>
 400a3d4:	01410074 	movhi	r5,1025
 400a3d8:	2946f204 	addi	r5,r5,7112
 400a3dc:	d9011b17 	ldw	r4,1132(sp)
 400a3e0:	d9412615 	stw	r5,1176(sp)
 400a3e4:	04c001c4 	movi	r19,7
 400a3e8:	dd012117 	ldw	r20,1156(sp)
 400a3ec:	dd812017 	ldw	r22,1152(sp)
 400a3f0:	00000506 	br	400a408 <___vfiprintf_internal_r+0xd00>
 400a3f4:	21400084 	addi	r5,r4,2
 400a3f8:	42000204 	addi	r8,r8,8
 400a3fc:	1009883a 	mov	r4,r2
 400a400:	94bffc04 	addi	r18,r18,-16
 400a404:	84800d0e 	bge	r16,r18,400a43c <___vfiprintf_internal_r+0xd34>
 400a408:	18c00404 	addi	r3,r3,16
 400a40c:	20800044 	addi	r2,r4,1
 400a410:	47000015 	stw	fp,0(r8)
 400a414:	44000115 	stw	r16,4(r8)
 400a418:	d8c11c15 	stw	r3,1136(sp)
 400a41c:	d8811b15 	stw	r2,1132(sp)
 400a420:	98bff40e 	bge	r19,r2,400a3f4 <__alt_data_end+0xfe00a3f4>
 400a424:	1800291e 	bne	r3,zero,400a4cc <___vfiprintf_internal_r+0xdc4>
 400a428:	94bffc04 	addi	r18,r18,-16
 400a42c:	0009883a 	mov	r4,zero
 400a430:	01400044 	movi	r5,1
 400a434:	d811883a 	mov	r8,sp
 400a438:	84bff316 	blt	r16,r18,400a408 <__alt_data_end+0xfe00a408>
 400a43c:	d8812617 	ldw	r2,1176(sp)
 400a440:	1c87883a 	add	r3,r3,r18
 400a444:	44800115 	stw	r18,4(r8)
 400a448:	40800015 	stw	r2,0(r8)
 400a44c:	d8c11c15 	stw	r3,1136(sp)
 400a450:	d9411b15 	stw	r5,1132(sp)
 400a454:	008001c4 	movi	r2,7
 400a458:	11400d0e 	bge	r2,r5,400a490 <___vfiprintf_internal_r+0xd88>
 400a45c:	1800061e 	bne	r3,zero,400a478 <___vfiprintf_internal_r+0xd70>
 400a460:	d8c12417 	ldw	r3,1168(sp)
 400a464:	a8c12e16 	blt	r21,r3,400a920 <___vfiprintf_internal_r+0x1218>
 400a468:	d9012517 	ldw	r4,1172(sp)
 400a46c:	2549883a 	add	r4,r4,r21
 400a470:	d9012515 	stw	r4,1172(sp)
 400a474:	00001206 	br	400a4c0 <___vfiprintf_internal_r+0xdb8>
 400a478:	d9012117 	ldw	r4,1156(sp)
 400a47c:	d9412017 	ldw	r5,1152(sp)
 400a480:	d9811a04 	addi	r6,sp,1128
 400a484:	40095f40 	call	40095f4 <__sprint_r.part.0>
 400a488:	103fbb1e 	bne	r2,zero,400a378 <__alt_data_end+0xfe00a378>
 400a48c:	d8c11c17 	ldw	r3,1136(sp)
 400a490:	d8812417 	ldw	r2,1168(sp)
 400a494:	a880010e 	bge	r21,r2,400a49c <___vfiprintf_internal_r+0xd94>
 400a498:	102b883a 	mov	r21,r2
 400a49c:	d9012517 	ldw	r4,1172(sp)
 400a4a0:	2549883a 	add	r4,r4,r21
 400a4a4:	d9012515 	stw	r4,1172(sp)
 400a4a8:	18000526 	beq	r3,zero,400a4c0 <___vfiprintf_internal_r+0xdb8>
 400a4ac:	d9012117 	ldw	r4,1156(sp)
 400a4b0:	d9412017 	ldw	r5,1152(sp)
 400a4b4:	d9811a04 	addi	r6,sp,1128
 400a4b8:	40095f40 	call	40095f4 <__sprint_r.part.0>
 400a4bc:	103fae1e 	bne	r2,zero,400a378 <__alt_data_end+0xfe00a378>
 400a4c0:	d8011b15 	stw	zero,1132(sp)
 400a4c4:	d811883a 	mov	r8,sp
 400a4c8:	003cc706 	br	40097e8 <__alt_data_end+0xfe0097e8>
 400a4cc:	a009883a 	mov	r4,r20
 400a4d0:	b00b883a 	mov	r5,r22
 400a4d4:	d9811a04 	addi	r6,sp,1128
 400a4d8:	40095f40 	call	40095f4 <__sprint_r.part.0>
 400a4dc:	103fa61e 	bne	r2,zero,400a378 <__alt_data_end+0xfe00a378>
 400a4e0:	d9011b17 	ldw	r4,1132(sp)
 400a4e4:	d8c11c17 	ldw	r3,1136(sp)
 400a4e8:	d811883a 	mov	r8,sp
 400a4ec:	21400044 	addi	r5,r4,1
 400a4f0:	003fc306 	br	400a400 <__alt_data_end+0xfe00a400>
 400a4f4:	d9012417 	ldw	r4,1168(sp)
 400a4f8:	256dc83a 	sub	r22,r4,r21
 400a4fc:	05be1f0e 	bge	zero,r22,4009d7c <__alt_data_end+0xfe009d7c>
 400a500:	04c00404 	movi	r19,16
 400a504:	9d81720e 	bge	r19,r22,400aad0 <___vfiprintf_internal_r+0x13c8>
 400a508:	00810074 	movhi	r2,1025
 400a50c:	1086ee04 	addi	r2,r2,7096
 400a510:	d8812615 	stw	r2,1176(sp)
 400a514:	028001c4 	movi	r10,7
 400a518:	00000506 	br	400a530 <___vfiprintf_internal_r+0xe28>
 400a51c:	29000084 	addi	r4,r5,2
 400a520:	42000204 	addi	r8,r8,8
 400a524:	100b883a 	mov	r5,r2
 400a528:	b5bffc04 	addi	r22,r22,-16
 400a52c:	9d800d0e 	bge	r19,r22,400a564 <___vfiprintf_internal_r+0xe5c>
 400a530:	18c00404 	addi	r3,r3,16
 400a534:	28800044 	addi	r2,r5,1
 400a538:	44400015 	stw	r17,0(r8)
 400a53c:	44c00115 	stw	r19,4(r8)
 400a540:	d8c11c15 	stw	r3,1136(sp)
 400a544:	d8811b15 	stw	r2,1132(sp)
 400a548:	50bff40e 	bge	r10,r2,400a51c <__alt_data_end+0xfe00a51c>
 400a54c:	1800111e 	bne	r3,zero,400a594 <___vfiprintf_internal_r+0xe8c>
 400a550:	b5bffc04 	addi	r22,r22,-16
 400a554:	000b883a 	mov	r5,zero
 400a558:	01000044 	movi	r4,1
 400a55c:	d811883a 	mov	r8,sp
 400a560:	9dbff316 	blt	r19,r22,400a530 <__alt_data_end+0xfe00a530>
 400a564:	d9412617 	ldw	r5,1176(sp)
 400a568:	1d87883a 	add	r3,r3,r22
 400a56c:	45800115 	stw	r22,4(r8)
 400a570:	41400015 	stw	r5,0(r8)
 400a574:	d8c11c15 	stw	r3,1136(sp)
 400a578:	d9011b15 	stw	r4,1132(sp)
 400a57c:	008001c4 	movi	r2,7
 400a580:	11008516 	blt	r2,r4,400a798 <___vfiprintf_internal_r+0x1090>
 400a584:	42000204 	addi	r8,r8,8
 400a588:	20800044 	addi	r2,r4,1
 400a58c:	200b883a 	mov	r5,r4
 400a590:	003dfa06 	br	4009d7c <__alt_data_end+0xfe009d7c>
 400a594:	d9012117 	ldw	r4,1156(sp)
 400a598:	d9412017 	ldw	r5,1152(sp)
 400a59c:	d9811a04 	addi	r6,sp,1128
 400a5a0:	da812a15 	stw	r10,1192(sp)
 400a5a4:	40095f40 	call	40095f4 <__sprint_r.part.0>
 400a5a8:	da812a17 	ldw	r10,1192(sp)
 400a5ac:	103f721e 	bne	r2,zero,400a378 <__alt_data_end+0xfe00a378>
 400a5b0:	d9411b17 	ldw	r5,1132(sp)
 400a5b4:	d8c11c17 	ldw	r3,1136(sp)
 400a5b8:	d811883a 	mov	r8,sp
 400a5bc:	29000044 	addi	r4,r5,1
 400a5c0:	003fd906 	br	400a528 <__alt_data_end+0xfe00a528>
 400a5c4:	1800681e 	bne	r3,zero,400a768 <___vfiprintf_internal_r+0x1060>
 400a5c8:	50004d26 	beq	r10,zero,400a700 <___vfiprintf_internal_r+0xff8>
 400a5cc:	d8811d04 	addi	r2,sp,1140
 400a5d0:	00c00084 	movi	r3,2
 400a5d4:	d8800015 	stw	r2,0(sp)
 400a5d8:	d8c00115 	stw	r3,4(sp)
 400a5dc:	2005883a 	mov	r2,r4
 400a5e0:	d811883a 	mov	r8,sp
 400a5e4:	003de006 	br	4009d68 <__alt_data_end+0xfe009d68>
 400a5e8:	1800551e 	bne	r3,zero,400a740 <___vfiprintf_internal_r+0x1038>
 400a5ec:	000b883a 	mov	r5,zero
 400a5f0:	00800044 	movi	r2,1
 400a5f4:	d811883a 	mov	r8,sp
 400a5f8:	003dde06 	br	4009d74 <__alt_data_end+0xfe009d74>
 400a5fc:	10803fcc 	andi	r2,r2,255
 400a600:	1000191e 	bne	r2,zero,400a668 <___vfiprintf_internal_r+0xf60>
 400a604:	9080004c 	andi	r2,r18,1
 400a608:	10001726 	beq	r2,zero,400a668 <___vfiprintf_internal_r+0xf60>
 400a60c:	00800c04 	movi	r2,48
 400a610:	d8c109c4 	addi	r3,sp,1063
 400a614:	d88109c5 	stb	r2,1063(sp)
 400a618:	dd012817 	ldw	r20,1184(sp)
 400a61c:	d8c12215 	stw	r3,1160(sp)
 400a620:	003d8a06 	br	4009c4c <__alt_data_end+0xfe009c4c>
 400a624:	d9012717 	ldw	r4,1180(sp)
 400a628:	dd010a04 	addi	r20,sp,1064
 400a62c:	988003cc 	andi	r2,r19,15
 400a630:	a806973a 	slli	r3,r21,28
 400a634:	2085883a 	add	r2,r4,r2
 400a638:	9826d13a 	srli	r19,r19,4
 400a63c:	10800003 	ldbu	r2,0(r2)
 400a640:	a82ad13a 	srli	r21,r21,4
 400a644:	a53fffc4 	addi	r20,r20,-1
 400a648:	1ce6b03a 	or	r19,r3,r19
 400a64c:	a0800005 	stb	r2,0(r20)
 400a650:	9d44b03a 	or	r2,r19,r21
 400a654:	103ff51e 	bne	r2,zero,400a62c <__alt_data_end+0xfe00a62c>
 400a658:	d9411e17 	ldw	r5,1144(sp)
 400a65c:	dd012215 	stw	r20,1160(sp)
 400a660:	2d29c83a 	sub	r20,r5,r20
 400a664:	003d7906 	br	4009c4c <__alt_data_end+0xfe009c4c>
 400a668:	d8c10a04 	addi	r3,sp,1064
 400a66c:	d8c12215 	stw	r3,1160(sp)
 400a670:	003d7606 	br	4009c4c <__alt_data_end+0xfe009c4c>
 400a674:	18009e1e 	bne	r3,zero,400a8f0 <___vfiprintf_internal_r+0x11e8>
 400a678:	d8811d87 	ldb	r2,1142(sp)
 400a67c:	10005f26 	beq	r2,zero,400a7fc <___vfiprintf_internal_r+0x10f4>
 400a680:	00c00044 	movi	r3,1
 400a684:	d9011d84 	addi	r4,sp,1142
 400a688:	1805883a 	mov	r2,r3
 400a68c:	d9000015 	stw	r4,0(sp)
 400a690:	d8c00115 	stw	r3,4(sp)
 400a694:	d811883a 	mov	r8,sp
 400a698:	003efc06 	br	400a28c <__alt_data_end+0xfe00a28c>
 400a69c:	d9412417 	ldw	r5,1168(sp)
 400a6a0:	d811883a 	mov	r8,sp
 400a6a4:	2d65c83a 	sub	r18,r5,r21
 400a6a8:	04bf4816 	blt	zero,r18,400a3cc <__alt_data_end+0xfe00a3cc>
 400a6ac:	003f6c06 	br	400a460 <__alt_data_end+0xfe00a460>
 400a6b0:	b829883a 	mov	r20,r23
 400a6b4:	003c6906 	br	400985c <__alt_data_end+0xfe00985c>
 400a6b8:	d9012117 	ldw	r4,1156(sp)
 400a6bc:	d9412017 	ldw	r5,1152(sp)
 400a6c0:	d9811a04 	addi	r6,sp,1128
 400a6c4:	40095f40 	call	40095f4 <__sprint_r.part.0>
 400a6c8:	103f2b1e 	bne	r2,zero,400a378 <__alt_data_end+0xfe00a378>
 400a6cc:	d8c11c17 	ldw	r3,1136(sp)
 400a6d0:	d811883a 	mov	r8,sp
 400a6d4:	003f3806 	br	400a3b8 <__alt_data_end+0xfe00a3b8>
 400a6d8:	00800084 	movi	r2,2
 400a6dc:	9d46b03a 	or	r3,r19,r21
 400a6e0:	003df606 	br	4009ebc <__alt_data_end+0xfe009ebc>
 400a6e4:	d9012117 	ldw	r4,1156(sp)
 400a6e8:	d9412017 	ldw	r5,1152(sp)
 400a6ec:	d9811a04 	addi	r6,sp,1128
 400a6f0:	40095f40 	call	40095f4 <__sprint_r.part.0>
 400a6f4:	103f201e 	bne	r2,zero,400a378 <__alt_data_end+0xfe00a378>
 400a6f8:	d811883a 	mov	r8,sp
 400a6fc:	003cc606 	br	4009a18 <__alt_data_end+0xfe009a18>
 400a700:	000b883a 	mov	r5,zero
 400a704:	2005883a 	mov	r2,r4
 400a708:	d811883a 	mov	r8,sp
 400a70c:	003d9906 	br	4009d74 <__alt_data_end+0xfe009d74>
 400a710:	10803fcc 	andi	r2,r2,255
 400a714:	1080201c 	xori	r2,r2,128
 400a718:	10bfe004 	addi	r2,r2,-128
 400a71c:	01000c04 	movi	r4,48
 400a720:	1100b226 	beq	r2,r4,400a9ec <___vfiprintf_internal_r+0x12e4>
 400a724:	d9412217 	ldw	r5,1160(sp)
 400a728:	d8811e17 	ldw	r2,1144(sp)
 400a72c:	193fffc5 	stb	r4,-1(r3)
 400a730:	297fffc4 	addi	r5,r5,-1
 400a734:	d9412215 	stw	r5,1160(sp)
 400a738:	1169c83a 	sub	r20,r2,r5
 400a73c:	003d4306 	br	4009c4c <__alt_data_end+0xfe009c4c>
 400a740:	d9012117 	ldw	r4,1156(sp)
 400a744:	d9412017 	ldw	r5,1152(sp)
 400a748:	d9811a04 	addi	r6,sp,1128
 400a74c:	40095f40 	call	40095f4 <__sprint_r.part.0>
 400a750:	103f091e 	bne	r2,zero,400a378 <__alt_data_end+0xfe00a378>
 400a754:	d9411b17 	ldw	r5,1132(sp)
 400a758:	d8c11c17 	ldw	r3,1136(sp)
 400a75c:	d811883a 	mov	r8,sp
 400a760:	28800044 	addi	r2,r5,1
 400a764:	003d8306 	br	4009d74 <__alt_data_end+0xfe009d74>
 400a768:	d9012117 	ldw	r4,1156(sp)
 400a76c:	d9412017 	ldw	r5,1152(sp)
 400a770:	d9811a04 	addi	r6,sp,1128
 400a774:	da812a15 	stw	r10,1192(sp)
 400a778:	40095f40 	call	40095f4 <__sprint_r.part.0>
 400a77c:	da812a17 	ldw	r10,1192(sp)
 400a780:	103efd1e 	bne	r2,zero,400a378 <__alt_data_end+0xfe00a378>
 400a784:	d9411b17 	ldw	r5,1132(sp)
 400a788:	d8c11c17 	ldw	r3,1136(sp)
 400a78c:	d811883a 	mov	r8,sp
 400a790:	28800044 	addi	r2,r5,1
 400a794:	003d6a06 	br	4009d40 <__alt_data_end+0xfe009d40>
 400a798:	1800a01e 	bne	r3,zero,400aa1c <___vfiprintf_internal_r+0x1314>
 400a79c:	000b883a 	mov	r5,zero
 400a7a0:	00800044 	movi	r2,1
 400a7a4:	d811883a 	mov	r8,sp
 400a7a8:	003d7406 	br	4009d7c <__alt_data_end+0xfe009d7c>
 400a7ac:	d9012117 	ldw	r4,1156(sp)
 400a7b0:	d9412017 	ldw	r5,1152(sp)
 400a7b4:	d9811a04 	addi	r6,sp,1128
 400a7b8:	40095f40 	call	40095f4 <__sprint_r.part.0>
 400a7bc:	103eee1e 	bne	r2,zero,400a378 <__alt_data_end+0xfe00a378>
 400a7c0:	d8811b17 	ldw	r2,1132(sp)
 400a7c4:	d8c11c17 	ldw	r3,1136(sp)
 400a7c8:	d811883a 	mov	r8,sp
 400a7cc:	10800044 	addi	r2,r2,1
 400a7d0:	003d8f06 	br	4009e10 <__alt_data_end+0xfe009e10>
 400a7d4:	04e7c83a 	sub	r19,zero,r19
 400a7d8:	9804c03a 	cmpne	r2,r19,zero
 400a7dc:	056bc83a 	sub	r21,zero,r21
 400a7e0:	a8abc83a 	sub	r21,r21,r2
 400a7e4:	05800b44 	movi	r22,45
 400a7e8:	dd811d85 	stb	r22,1142(sp)
 400a7ec:	8029883a 	mov	r20,r16
 400a7f0:	00800044 	movi	r2,1
 400a7f4:	9d46b03a 	or	r3,r19,r21
 400a7f8:	003cfa06 	br	4009be4 <__alt_data_end+0xfe009be4>
 400a7fc:	000b883a 	mov	r5,zero
 400a800:	00800044 	movi	r2,1
 400a804:	d811883a 	mov	r8,sp
 400a808:	503d5a26 	beq	r10,zero,4009d74 <__alt_data_end+0xfe009d74>
 400a80c:	00c00084 	movi	r3,2
 400a810:	d9011d04 	addi	r4,sp,1140
 400a814:	d9000015 	stw	r4,0(sp)
 400a818:	d8c00115 	stw	r3,4(sp)
 400a81c:	003d5206 	br	4009d68 <__alt_data_end+0xfe009d68>
 400a820:	9080040c 	andi	r2,r18,16
 400a824:	1000421e 	bne	r2,zero,400a930 <___vfiprintf_internal_r+0x1228>
 400a828:	9480100c 	andi	r18,r18,64
 400a82c:	90009c26 	beq	r18,zero,400aaa0 <___vfiprintf_internal_r+0x1398>
 400a830:	d9412317 	ldw	r5,1164(sp)
 400a834:	d8c12517 	ldw	r3,1172(sp)
 400a838:	28800017 	ldw	r2,0(r5)
 400a83c:	29400104 	addi	r5,r5,4
 400a840:	d9412315 	stw	r5,1164(sp)
 400a844:	10c0000d 	sth	r3,0(r2)
 400a848:	003be706 	br	40097e8 <__alt_data_end+0xfe0097e8>
 400a84c:	90c0100c 	andi	r3,r18,64
 400a850:	18003e26 	beq	r3,zero,400a94c <___vfiprintf_internal_r+0x1244>
 400a854:	d8c12317 	ldw	r3,1164(sp)
 400a858:	14c0000b 	ldhu	r19,0(r2)
 400a85c:	002b883a 	mov	r21,zero
 400a860:	18c00104 	addi	r3,r3,4
 400a864:	d8c12315 	stw	r3,1164(sp)
 400a868:	003db706 	br	4009f48 <__alt_data_end+0xfe009f48>
 400a86c:	9080100c 	andi	r2,r18,64
 400a870:	10004c26 	beq	r2,zero,400a9a4 <___vfiprintf_internal_r+0x129c>
 400a874:	1cc0000f 	ldh	r19,0(r3)
 400a878:	d8812317 	ldw	r2,1164(sp)
 400a87c:	982bd7fa 	srai	r21,r19,31
 400a880:	10800104 	addi	r2,r2,4
 400a884:	d8812315 	stw	r2,1164(sp)
 400a888:	a805883a 	mov	r2,r21
 400a88c:	003cd006 	br	4009bd0 <__alt_data_end+0xfe009bd0>
 400a890:	00800084 	movi	r2,2
 400a894:	003d8906 	br	4009ebc <__alt_data_end+0xfe009ebc>
 400a898:	b9800007 	ldb	r6,0(r23)
 400a89c:	003bfb06 	br	400988c <__alt_data_end+0xfe00988c>
 400a8a0:	9080100c 	andi	r2,r18,64
 400a8a4:	10003726 	beq	r2,zero,400a984 <___vfiprintf_internal_r+0x127c>
 400a8a8:	d9412317 	ldw	r5,1164(sp)
 400a8ac:	002b883a 	mov	r21,zero
 400a8b0:	0005883a 	mov	r2,zero
 400a8b4:	2cc0000b 	ldhu	r19,0(r5)
 400a8b8:	29400104 	addi	r5,r5,4
 400a8bc:	d9412315 	stw	r5,1164(sp)
 400a8c0:	9807883a 	mov	r3,r19
 400a8c4:	003d7d06 	br	4009ebc <__alt_data_end+0xfe009ebc>
 400a8c8:	9080100c 	andi	r2,r18,64
 400a8cc:	10002526 	beq	r2,zero,400a964 <___vfiprintf_internal_r+0x125c>
 400a8d0:	d8812317 	ldw	r2,1164(sp)
 400a8d4:	002b883a 	mov	r21,zero
 400a8d8:	14c0000b 	ldhu	r19,0(r2)
 400a8dc:	10800104 	addi	r2,r2,4
 400a8e0:	d8812315 	stw	r2,1164(sp)
 400a8e4:	9807883a 	mov	r3,r19
 400a8e8:	00800044 	movi	r2,1
 400a8ec:	003d7306 	br	4009ebc <__alt_data_end+0xfe009ebc>
 400a8f0:	d9012117 	ldw	r4,1156(sp)
 400a8f4:	d9412017 	ldw	r5,1152(sp)
 400a8f8:	d9811a04 	addi	r6,sp,1128
 400a8fc:	da812a15 	stw	r10,1192(sp)
 400a900:	40095f40 	call	40095f4 <__sprint_r.part.0>
 400a904:	da812a17 	ldw	r10,1192(sp)
 400a908:	103e9b1e 	bne	r2,zero,400a378 <__alt_data_end+0xfe00a378>
 400a90c:	d9411b17 	ldw	r5,1132(sp)
 400a910:	d8c11c17 	ldw	r3,1136(sp)
 400a914:	d811883a 	mov	r8,sp
 400a918:	28800044 	addi	r2,r5,1
 400a91c:	003e5006 	br	400a260 <__alt_data_end+0xfe00a260>
 400a920:	182b883a 	mov	r21,r3
 400a924:	003ed006 	br	400a468 <__alt_data_end+0xfe00a468>
 400a928:	8029883a 	mov	r20,r16
 400a92c:	003dc606 	br	400a048 <__alt_data_end+0xfe00a048>
 400a930:	d8c12317 	ldw	r3,1164(sp)
 400a934:	d9012517 	ldw	r4,1172(sp)
 400a938:	18800017 	ldw	r2,0(r3)
 400a93c:	18c00104 	addi	r3,r3,4
 400a940:	d8c12315 	stw	r3,1164(sp)
 400a944:	11000015 	stw	r4,0(r2)
 400a948:	003ba706 	br	40097e8 <__alt_data_end+0xfe0097e8>
 400a94c:	d9012317 	ldw	r4,1164(sp)
 400a950:	14c00017 	ldw	r19,0(r2)
 400a954:	002b883a 	mov	r21,zero
 400a958:	21000104 	addi	r4,r4,4
 400a95c:	d9012315 	stw	r4,1164(sp)
 400a960:	003d7906 	br	4009f48 <__alt_data_end+0xfe009f48>
 400a964:	d8c12317 	ldw	r3,1164(sp)
 400a968:	002b883a 	mov	r21,zero
 400a96c:	00800044 	movi	r2,1
 400a970:	1cc00017 	ldw	r19,0(r3)
 400a974:	18c00104 	addi	r3,r3,4
 400a978:	d8c12315 	stw	r3,1164(sp)
 400a97c:	9807883a 	mov	r3,r19
 400a980:	003d4e06 	br	4009ebc <__alt_data_end+0xfe009ebc>
 400a984:	d8812317 	ldw	r2,1164(sp)
 400a988:	002b883a 	mov	r21,zero
 400a98c:	14c00017 	ldw	r19,0(r2)
 400a990:	10800104 	addi	r2,r2,4
 400a994:	d8812315 	stw	r2,1164(sp)
 400a998:	9807883a 	mov	r3,r19
 400a99c:	0005883a 	mov	r2,zero
 400a9a0:	003d4606 	br	4009ebc <__alt_data_end+0xfe009ebc>
 400a9a4:	1cc00017 	ldw	r19,0(r3)
 400a9a8:	d8c12317 	ldw	r3,1164(sp)
 400a9ac:	982bd7fa 	srai	r21,r19,31
 400a9b0:	18c00104 	addi	r3,r3,4
 400a9b4:	d8c12315 	stw	r3,1164(sp)
 400a9b8:	a805883a 	mov	r2,r21
 400a9bc:	003c8406 	br	4009bd0 <__alt_data_end+0xfe009bd0>
 400a9c0:	01010074 	movhi	r4,1025
 400a9c4:	2106ee04 	addi	r4,r4,7096
 400a9c8:	d9012615 	stw	r4,1176(sp)
 400a9cc:	003d0606 	br	4009de8 <__alt_data_end+0xfe009de8>
 400a9d0:	b9800043 	ldbu	r6,1(r23)
 400a9d4:	94800814 	ori	r18,r18,32
 400a9d8:	bdc00044 	addi	r23,r23,1
 400a9dc:	31803fcc 	andi	r6,r6,255
 400a9e0:	3180201c 	xori	r6,r6,128
 400a9e4:	31bfe004 	addi	r6,r6,-128
 400a9e8:	003ba806 	br	400988c <__alt_data_end+0xfe00988c>
 400a9ec:	d8811e17 	ldw	r2,1144(sp)
 400a9f0:	d8c12217 	ldw	r3,1160(sp)
 400a9f4:	10e9c83a 	sub	r20,r2,r3
 400a9f8:	003c9406 	br	4009c4c <__alt_data_end+0xfe009c4c>
 400a9fc:	da012a15 	stw	r8,1192(sp)
 400aa00:	40022180 	call	4002218 <strlen>
 400aa04:	1029883a 	mov	r20,r2
 400aa08:	dd811d83 	ldbu	r22,1142(sp)
 400aa0c:	dcc12315 	stw	r19,1164(sp)
 400aa10:	0021883a 	mov	r16,zero
 400aa14:	da012a17 	ldw	r8,1192(sp)
 400aa18:	003c8c06 	br	4009c4c <__alt_data_end+0xfe009c4c>
 400aa1c:	d9012117 	ldw	r4,1156(sp)
 400aa20:	d9412017 	ldw	r5,1152(sp)
 400aa24:	d9811a04 	addi	r6,sp,1128
 400aa28:	40095f40 	call	40095f4 <__sprint_r.part.0>
 400aa2c:	103e521e 	bne	r2,zero,400a378 <__alt_data_end+0xfe00a378>
 400aa30:	d9411b17 	ldw	r5,1132(sp)
 400aa34:	d8c11c17 	ldw	r3,1136(sp)
 400aa38:	d811883a 	mov	r8,sp
 400aa3c:	28800044 	addi	r2,r5,1
 400aa40:	003cce06 	br	4009d7c <__alt_data_end+0xfe009d7c>
 400aa44:	01410074 	movhi	r5,1025
 400aa48:	2946f204 	addi	r5,r5,7112
 400aa4c:	d9412615 	stw	r5,1176(sp)
 400aa50:	d9411b17 	ldw	r5,1132(sp)
 400aa54:	29400044 	addi	r5,r5,1
 400aa58:	003cad06 	br	4009d10 <__alt_data_end+0xfe009d10>
 400aa5c:	00800184 	movi	r2,6
 400aa60:	1400012e 	bgeu	r2,r16,400aa68 <___vfiprintf_internal_r+0x1360>
 400aa64:	1021883a 	mov	r16,r2
 400aa68:	8029883a 	mov	r20,r16
 400aa6c:	802b883a 	mov	r21,r16
 400aa70:	80001c16 	blt	r16,zero,400aae4 <___vfiprintf_internal_r+0x13dc>
 400aa74:	00c10074 	movhi	r3,1025
 400aa78:	18c69204 	addi	r3,r3,6728
 400aa7c:	dcc12315 	stw	r19,1164(sp)
 400aa80:	d8c12215 	stw	r3,1160(sp)
 400aa84:	003cff06 	br	4009e84 <__alt_data_end+0xfe009e84>
 400aa88:	d9411b17 	ldw	r5,1132(sp)
 400aa8c:	00810074 	movhi	r2,1025
 400aa90:	1086f204 	addi	r2,r2,7112
 400aa94:	d8812615 	stw	r2,1176(sp)
 400aa98:	29400044 	addi	r5,r5,1
 400aa9c:	003e6706 	br	400a43c <__alt_data_end+0xfe00a43c>
 400aaa0:	d9012317 	ldw	r4,1164(sp)
 400aaa4:	d9412517 	ldw	r5,1172(sp)
 400aaa8:	20800017 	ldw	r2,0(r4)
 400aaac:	21000104 	addi	r4,r4,4
 400aab0:	d9012315 	stw	r4,1164(sp)
 400aab4:	11400015 	stw	r5,0(r2)
 400aab8:	003b4b06 	br	40097e8 <__alt_data_end+0xfe0097e8>
 400aabc:	8029883a 	mov	r20,r16
 400aac0:	dd811d83 	ldbu	r22,1142(sp)
 400aac4:	dcc12315 	stw	r19,1164(sp)
 400aac8:	0021883a 	mov	r16,zero
 400aacc:	003c5f06 	br	4009c4c <__alt_data_end+0xfe009c4c>
 400aad0:	01010074 	movhi	r4,1025
 400aad4:	2106ee04 	addi	r4,r4,7096
 400aad8:	d9012615 	stw	r4,1176(sp)
 400aadc:	1009883a 	mov	r4,r2
 400aae0:	003ea006 	br	400a564 <__alt_data_end+0xfe00a564>
 400aae4:	002b883a 	mov	r21,zero
 400aae8:	003fe206 	br	400aa74 <__alt_data_end+0xfe00aa74>
 400aaec:	d9412317 	ldw	r5,1164(sp)
 400aaf0:	b807883a 	mov	r3,r23
 400aaf4:	102f883a 	mov	r23,r2
 400aaf8:	2c000017 	ldw	r16,0(r5)
 400aafc:	29000104 	addi	r4,r5,4
 400ab00:	d9012315 	stw	r4,1164(sp)
 400ab04:	80000416 	blt	r16,zero,400ab18 <___vfiprintf_internal_r+0x1410>
 400ab08:	19800047 	ldb	r6,1(r3)
 400ab0c:	003b5f06 	br	400988c <__alt_data_end+0xfe00988c>
 400ab10:	043fffc4 	movi	r16,-1
 400ab14:	003bef06 	br	4009ad4 <__alt_data_end+0xfe009ad4>
 400ab18:	043fffc4 	movi	r16,-1
 400ab1c:	19800047 	ldb	r6,1(r3)
 400ab20:	003b5a06 	br	400988c <__alt_data_end+0xfe00988c>
 400ab24:	282b883a 	mov	r21,r5
 400ab28:	003cc706 	br	4009e48 <__alt_data_end+0xfe009e48>

0400ab2c <__vfiprintf_internal>:
 400ab2c:	2007883a 	mov	r3,r4
 400ab30:	01010074 	movhi	r4,1025
 400ab34:	210def04 	addi	r4,r4,14268
 400ab38:	21000017 	ldw	r4,0(r4)
 400ab3c:	2805883a 	mov	r2,r5
 400ab40:	300f883a 	mov	r7,r6
 400ab44:	180b883a 	mov	r5,r3
 400ab48:	100d883a 	mov	r6,r2
 400ab4c:	40097081 	jmpi	4009708 <___vfiprintf_internal_r>

0400ab50 <_write_r>:
 400ab50:	defffd04 	addi	sp,sp,-12
 400ab54:	dc000015 	stw	r16,0(sp)
 400ab58:	04010074 	movhi	r16,1025
 400ab5c:	dc400115 	stw	r17,4(sp)
 400ab60:	8414c004 	addi	r16,r16,21248
 400ab64:	2023883a 	mov	r17,r4
 400ab68:	2809883a 	mov	r4,r5
 400ab6c:	300b883a 	mov	r5,r6
 400ab70:	380d883a 	mov	r6,r7
 400ab74:	dfc00215 	stw	ra,8(sp)
 400ab78:	80000015 	stw	zero,0(r16)
 400ab7c:	400f36c0 	call	400f36c <write>
 400ab80:	00ffffc4 	movi	r3,-1
 400ab84:	10c00526 	beq	r2,r3,400ab9c <_write_r+0x4c>
 400ab88:	dfc00217 	ldw	ra,8(sp)
 400ab8c:	dc400117 	ldw	r17,4(sp)
 400ab90:	dc000017 	ldw	r16,0(sp)
 400ab94:	dec00304 	addi	sp,sp,12
 400ab98:	f800283a 	ret
 400ab9c:	80c00017 	ldw	r3,0(r16)
 400aba0:	183ff926 	beq	r3,zero,400ab88 <__alt_data_end+0xfe00ab88>
 400aba4:	88c00015 	stw	r3,0(r17)
 400aba8:	003ff706 	br	400ab88 <__alt_data_end+0xfe00ab88>

0400abac <_close_r>:
 400abac:	defffd04 	addi	sp,sp,-12
 400abb0:	dc000015 	stw	r16,0(sp)
 400abb4:	04010074 	movhi	r16,1025
 400abb8:	dc400115 	stw	r17,4(sp)
 400abbc:	8414c004 	addi	r16,r16,21248
 400abc0:	2023883a 	mov	r17,r4
 400abc4:	2809883a 	mov	r4,r5
 400abc8:	dfc00215 	stw	ra,8(sp)
 400abcc:	80000015 	stw	zero,0(r16)
 400abd0:	400ea980 	call	400ea98 <close>
 400abd4:	00ffffc4 	movi	r3,-1
 400abd8:	10c00526 	beq	r2,r3,400abf0 <_close_r+0x44>
 400abdc:	dfc00217 	ldw	ra,8(sp)
 400abe0:	dc400117 	ldw	r17,4(sp)
 400abe4:	dc000017 	ldw	r16,0(sp)
 400abe8:	dec00304 	addi	sp,sp,12
 400abec:	f800283a 	ret
 400abf0:	80c00017 	ldw	r3,0(r16)
 400abf4:	183ff926 	beq	r3,zero,400abdc <__alt_data_end+0xfe00abdc>
 400abf8:	88c00015 	stw	r3,0(r17)
 400abfc:	003ff706 	br	400abdc <__alt_data_end+0xfe00abdc>

0400ac00 <_calloc_r>:
 400ac00:	defffe04 	addi	sp,sp,-8
 400ac04:	dc000015 	stw	r16,0(sp)
 400ac08:	2021883a 	mov	r16,r4
 400ac0c:	2809883a 	mov	r4,r5
 400ac10:	300b883a 	mov	r5,r6
 400ac14:	dfc00115 	stw	ra,4(sp)
 400ac18:	400c2240 	call	400c224 <__mulsi3>
 400ac1c:	8009883a 	mov	r4,r16
 400ac20:	100b883a 	mov	r5,r2
 400ac24:	400711c0 	call	400711c <_malloc_r>
 400ac28:	1021883a 	mov	r16,r2
 400ac2c:	10002826 	beq	r2,zero,400acd0 <_calloc_r+0xd0>
 400ac30:	11bfff17 	ldw	r6,-4(r2)
 400ac34:	00bfff04 	movi	r2,-4
 400ac38:	00c00904 	movi	r3,36
 400ac3c:	308c703a 	and	r6,r6,r2
 400ac40:	308d883a 	add	r6,r6,r2
 400ac44:	19801436 	bltu	r3,r6,400ac98 <_calloc_r+0x98>
 400ac48:	008004c4 	movi	r2,19
 400ac4c:	11800936 	bltu	r2,r6,400ac74 <_calloc_r+0x74>
 400ac50:	8005883a 	mov	r2,r16
 400ac54:	10000015 	stw	zero,0(r2)
 400ac58:	10000115 	stw	zero,4(r2)
 400ac5c:	10000215 	stw	zero,8(r2)
 400ac60:	8005883a 	mov	r2,r16
 400ac64:	dfc00117 	ldw	ra,4(sp)
 400ac68:	dc000017 	ldw	r16,0(sp)
 400ac6c:	dec00204 	addi	sp,sp,8
 400ac70:	f800283a 	ret
 400ac74:	80000015 	stw	zero,0(r16)
 400ac78:	80000115 	stw	zero,4(r16)
 400ac7c:	008006c4 	movi	r2,27
 400ac80:	11800d2e 	bgeu	r2,r6,400acb8 <_calloc_r+0xb8>
 400ac84:	80000215 	stw	zero,8(r16)
 400ac88:	80000315 	stw	zero,12(r16)
 400ac8c:	30c00c26 	beq	r6,r3,400acc0 <_calloc_r+0xc0>
 400ac90:	80800404 	addi	r2,r16,16
 400ac94:	003fef06 	br	400ac54 <__alt_data_end+0xfe00ac54>
 400ac98:	8009883a 	mov	r4,r16
 400ac9c:	000b883a 	mov	r5,zero
 400aca0:	4007c400 	call	4007c40 <memset>
 400aca4:	8005883a 	mov	r2,r16
 400aca8:	dfc00117 	ldw	ra,4(sp)
 400acac:	dc000017 	ldw	r16,0(sp)
 400acb0:	dec00204 	addi	sp,sp,8
 400acb4:	f800283a 	ret
 400acb8:	80800204 	addi	r2,r16,8
 400acbc:	003fe506 	br	400ac54 <__alt_data_end+0xfe00ac54>
 400acc0:	80000415 	stw	zero,16(r16)
 400acc4:	80800604 	addi	r2,r16,24
 400acc8:	80000515 	stw	zero,20(r16)
 400accc:	003fe106 	br	400ac54 <__alt_data_end+0xfe00ac54>
 400acd0:	0005883a 	mov	r2,zero
 400acd4:	003fe306 	br	400ac64 <__alt_data_end+0xfe00ac64>

0400acd8 <_fclose_r>:
 400acd8:	28003226 	beq	r5,zero,400ada4 <_fclose_r+0xcc>
 400acdc:	defffc04 	addi	sp,sp,-16
 400ace0:	dc400115 	stw	r17,4(sp)
 400ace4:	2023883a 	mov	r17,r4
 400ace8:	dc000015 	stw	r16,0(sp)
 400acec:	dfc00315 	stw	ra,12(sp)
 400acf0:	dc800215 	stw	r18,8(sp)
 400acf4:	2821883a 	mov	r16,r5
 400acf8:	400641c0 	call	400641c <__sfp_lock_acquire>
 400acfc:	88000226 	beq	r17,zero,400ad08 <_fclose_r+0x30>
 400ad00:	88800e17 	ldw	r2,56(r17)
 400ad04:	10002926 	beq	r2,zero,400adac <_fclose_r+0xd4>
 400ad08:	8080030f 	ldh	r2,12(r16)
 400ad0c:	10002226 	beq	r2,zero,400ad98 <_fclose_r+0xc0>
 400ad10:	8809883a 	mov	r4,r17
 400ad14:	800b883a 	mov	r5,r16
 400ad18:	4005e500 	call	4005e50 <_fflush_r>
 400ad1c:	1025883a 	mov	r18,r2
 400ad20:	80800b17 	ldw	r2,44(r16)
 400ad24:	10000426 	beq	r2,zero,400ad38 <_fclose_r+0x60>
 400ad28:	81400717 	ldw	r5,28(r16)
 400ad2c:	8809883a 	mov	r4,r17
 400ad30:	103ee83a 	callr	r2
 400ad34:	10002616 	blt	r2,zero,400add0 <_fclose_r+0xf8>
 400ad38:	8080030b 	ldhu	r2,12(r16)
 400ad3c:	1080200c 	andi	r2,r2,128
 400ad40:	10001f1e 	bne	r2,zero,400adc0 <_fclose_r+0xe8>
 400ad44:	81400c17 	ldw	r5,48(r16)
 400ad48:	28000526 	beq	r5,zero,400ad60 <_fclose_r+0x88>
 400ad4c:	80801004 	addi	r2,r16,64
 400ad50:	28800226 	beq	r5,r2,400ad5c <_fclose_r+0x84>
 400ad54:	8809883a 	mov	r4,r17
 400ad58:	40065800 	call	4006580 <_free_r>
 400ad5c:	80000c15 	stw	zero,48(r16)
 400ad60:	81401117 	ldw	r5,68(r16)
 400ad64:	28000326 	beq	r5,zero,400ad74 <_fclose_r+0x9c>
 400ad68:	8809883a 	mov	r4,r17
 400ad6c:	40065800 	call	4006580 <_free_r>
 400ad70:	80001115 	stw	zero,68(r16)
 400ad74:	8000030d 	sth	zero,12(r16)
 400ad78:	40064200 	call	4006420 <__sfp_lock_release>
 400ad7c:	9005883a 	mov	r2,r18
 400ad80:	dfc00317 	ldw	ra,12(sp)
 400ad84:	dc800217 	ldw	r18,8(sp)
 400ad88:	dc400117 	ldw	r17,4(sp)
 400ad8c:	dc000017 	ldw	r16,0(sp)
 400ad90:	dec00404 	addi	sp,sp,16
 400ad94:	f800283a 	ret
 400ad98:	40064200 	call	4006420 <__sfp_lock_release>
 400ad9c:	0005883a 	mov	r2,zero
 400ada0:	003ff706 	br	400ad80 <__alt_data_end+0xfe00ad80>
 400ada4:	0005883a 	mov	r2,zero
 400ada8:	f800283a 	ret
 400adac:	8809883a 	mov	r4,r17
 400adb0:	400640c0 	call	400640c <__sinit>
 400adb4:	8080030f 	ldh	r2,12(r16)
 400adb8:	103fd51e 	bne	r2,zero,400ad10 <__alt_data_end+0xfe00ad10>
 400adbc:	003ff606 	br	400ad98 <__alt_data_end+0xfe00ad98>
 400adc0:	81400417 	ldw	r5,16(r16)
 400adc4:	8809883a 	mov	r4,r17
 400adc8:	40065800 	call	4006580 <_free_r>
 400adcc:	003fdd06 	br	400ad44 <__alt_data_end+0xfe00ad44>
 400add0:	04bfffc4 	movi	r18,-1
 400add4:	003fd806 	br	400ad38 <__alt_data_end+0xfe00ad38>

0400add8 <fclose>:
 400add8:	00810074 	movhi	r2,1025
 400addc:	108def04 	addi	r2,r2,14268
 400ade0:	200b883a 	mov	r5,r4
 400ade4:	11000017 	ldw	r4,0(r2)
 400ade8:	400acd81 	jmpi	400acd8 <_fclose_r>

0400adec <_fputwc_r>:
 400adec:	3080030b 	ldhu	r2,12(r6)
 400adf0:	defff804 	addi	sp,sp,-32
 400adf4:	dcc00415 	stw	r19,16(sp)
 400adf8:	dc800315 	stw	r18,12(sp)
 400adfc:	dc000115 	stw	r16,4(sp)
 400ae00:	dfc00715 	stw	ra,28(sp)
 400ae04:	dd400615 	stw	r21,24(sp)
 400ae08:	dd000515 	stw	r20,20(sp)
 400ae0c:	dc400215 	stw	r17,8(sp)
 400ae10:	10c8000c 	andi	r3,r2,8192
 400ae14:	3021883a 	mov	r16,r6
 400ae18:	2027883a 	mov	r19,r4
 400ae1c:	2825883a 	mov	r18,r5
 400ae20:	1800051e 	bne	r3,zero,400ae38 <_fputwc_r+0x4c>
 400ae24:	30c01917 	ldw	r3,100(r6)
 400ae28:	10880014 	ori	r2,r2,8192
 400ae2c:	3080030d 	sth	r2,12(r6)
 400ae30:	18880014 	ori	r2,r3,8192
 400ae34:	30801915 	stw	r2,100(r6)
 400ae38:	4006f0c0 	call	4006f0c <__locale_mb_cur_max>
 400ae3c:	00c00044 	movi	r3,1
 400ae40:	10c03e26 	beq	r2,r3,400af3c <_fputwc_r+0x150>
 400ae44:	9809883a 	mov	r4,r19
 400ae48:	d80b883a 	mov	r5,sp
 400ae4c:	900d883a 	mov	r6,r18
 400ae50:	81c01704 	addi	r7,r16,92
 400ae54:	400b29c0 	call	400b29c <_wcrtomb_r>
 400ae58:	1029883a 	mov	r20,r2
 400ae5c:	00bfffc4 	movi	r2,-1
 400ae60:	a0802026 	beq	r20,r2,400aee4 <_fputwc_r+0xf8>
 400ae64:	d9400003 	ldbu	r5,0(sp)
 400ae68:	a0001c26 	beq	r20,zero,400aedc <_fputwc_r+0xf0>
 400ae6c:	0023883a 	mov	r17,zero
 400ae70:	05400284 	movi	r21,10
 400ae74:	00000906 	br	400ae9c <_fputwc_r+0xb0>
 400ae78:	80800017 	ldw	r2,0(r16)
 400ae7c:	11400005 	stb	r5,0(r2)
 400ae80:	80c00017 	ldw	r3,0(r16)
 400ae84:	18c00044 	addi	r3,r3,1
 400ae88:	80c00015 	stw	r3,0(r16)
 400ae8c:	8c400044 	addi	r17,r17,1
 400ae90:	dc45883a 	add	r2,sp,r17
 400ae94:	8d00112e 	bgeu	r17,r20,400aedc <_fputwc_r+0xf0>
 400ae98:	11400003 	ldbu	r5,0(r2)
 400ae9c:	80c00217 	ldw	r3,8(r16)
 400aea0:	18ffffc4 	addi	r3,r3,-1
 400aea4:	80c00215 	stw	r3,8(r16)
 400aea8:	183ff30e 	bge	r3,zero,400ae78 <__alt_data_end+0xfe00ae78>
 400aeac:	80800617 	ldw	r2,24(r16)
 400aeb0:	18801916 	blt	r3,r2,400af18 <_fputwc_r+0x12c>
 400aeb4:	80800017 	ldw	r2,0(r16)
 400aeb8:	11400005 	stb	r5,0(r2)
 400aebc:	80800017 	ldw	r2,0(r16)
 400aec0:	10c00003 	ldbu	r3,0(r2)
 400aec4:	10800044 	addi	r2,r2,1
 400aec8:	1d402326 	beq	r3,r21,400af58 <_fputwc_r+0x16c>
 400aecc:	80800015 	stw	r2,0(r16)
 400aed0:	8c400044 	addi	r17,r17,1
 400aed4:	dc45883a 	add	r2,sp,r17
 400aed8:	8d3fef36 	bltu	r17,r20,400ae98 <__alt_data_end+0xfe00ae98>
 400aedc:	9005883a 	mov	r2,r18
 400aee0:	00000406 	br	400aef4 <_fputwc_r+0x108>
 400aee4:	80c0030b 	ldhu	r3,12(r16)
 400aee8:	a005883a 	mov	r2,r20
 400aeec:	18c01014 	ori	r3,r3,64
 400aef0:	80c0030d 	sth	r3,12(r16)
 400aef4:	dfc00717 	ldw	ra,28(sp)
 400aef8:	dd400617 	ldw	r21,24(sp)
 400aefc:	dd000517 	ldw	r20,20(sp)
 400af00:	dcc00417 	ldw	r19,16(sp)
 400af04:	dc800317 	ldw	r18,12(sp)
 400af08:	dc400217 	ldw	r17,8(sp)
 400af0c:	dc000117 	ldw	r16,4(sp)
 400af10:	dec00804 	addi	sp,sp,32
 400af14:	f800283a 	ret
 400af18:	9809883a 	mov	r4,r19
 400af1c:	29403fcc 	andi	r5,r5,255
 400af20:	800d883a 	mov	r6,r16
 400af24:	400b12c0 	call	400b12c <__swbuf_r>
 400af28:	10bfffe0 	cmpeqi	r2,r2,-1
 400af2c:	10803fcc 	andi	r2,r2,255
 400af30:	103fd626 	beq	r2,zero,400ae8c <__alt_data_end+0xfe00ae8c>
 400af34:	00bfffc4 	movi	r2,-1
 400af38:	003fee06 	br	400aef4 <__alt_data_end+0xfe00aef4>
 400af3c:	90ffffc4 	addi	r3,r18,-1
 400af40:	01003f84 	movi	r4,254
 400af44:	20ffbf36 	bltu	r4,r3,400ae44 <__alt_data_end+0xfe00ae44>
 400af48:	900b883a 	mov	r5,r18
 400af4c:	dc800005 	stb	r18,0(sp)
 400af50:	1029883a 	mov	r20,r2
 400af54:	003fc506 	br	400ae6c <__alt_data_end+0xfe00ae6c>
 400af58:	9809883a 	mov	r4,r19
 400af5c:	a80b883a 	mov	r5,r21
 400af60:	800d883a 	mov	r6,r16
 400af64:	400b12c0 	call	400b12c <__swbuf_r>
 400af68:	10bfffe0 	cmpeqi	r2,r2,-1
 400af6c:	003fef06 	br	400af2c <__alt_data_end+0xfe00af2c>

0400af70 <fputwc>:
 400af70:	defffc04 	addi	sp,sp,-16
 400af74:	dc000115 	stw	r16,4(sp)
 400af78:	04010074 	movhi	r16,1025
 400af7c:	840def04 	addi	r16,r16,14268
 400af80:	dc400215 	stw	r17,8(sp)
 400af84:	2023883a 	mov	r17,r4
 400af88:	81000017 	ldw	r4,0(r16)
 400af8c:	dfc00315 	stw	ra,12(sp)
 400af90:	280d883a 	mov	r6,r5
 400af94:	20000626 	beq	r4,zero,400afb0 <fputwc+0x40>
 400af98:	20800e17 	ldw	r2,56(r4)
 400af9c:	1000041e 	bne	r2,zero,400afb0 <fputwc+0x40>
 400afa0:	d9400015 	stw	r5,0(sp)
 400afa4:	400640c0 	call	400640c <__sinit>
 400afa8:	81000017 	ldw	r4,0(r16)
 400afac:	d9800017 	ldw	r6,0(sp)
 400afb0:	880b883a 	mov	r5,r17
 400afb4:	dfc00317 	ldw	ra,12(sp)
 400afb8:	dc400217 	ldw	r17,8(sp)
 400afbc:	dc000117 	ldw	r16,4(sp)
 400afc0:	dec00404 	addi	sp,sp,16
 400afc4:	400adec1 	jmpi	400adec <_fputwc_r>

0400afc8 <_fstat_r>:
 400afc8:	defffd04 	addi	sp,sp,-12
 400afcc:	dc000015 	stw	r16,0(sp)
 400afd0:	04010074 	movhi	r16,1025
 400afd4:	dc400115 	stw	r17,4(sp)
 400afd8:	8414c004 	addi	r16,r16,21248
 400afdc:	2023883a 	mov	r17,r4
 400afe0:	2809883a 	mov	r4,r5
 400afe4:	300b883a 	mov	r5,r6
 400afe8:	dfc00215 	stw	ra,8(sp)
 400afec:	80000015 	stw	zero,0(r16)
 400aff0:	400ebec0 	call	400ebec <fstat>
 400aff4:	00ffffc4 	movi	r3,-1
 400aff8:	10c00526 	beq	r2,r3,400b010 <_fstat_r+0x48>
 400affc:	dfc00217 	ldw	ra,8(sp)
 400b000:	dc400117 	ldw	r17,4(sp)
 400b004:	dc000017 	ldw	r16,0(sp)
 400b008:	dec00304 	addi	sp,sp,12
 400b00c:	f800283a 	ret
 400b010:	80c00017 	ldw	r3,0(r16)
 400b014:	183ff926 	beq	r3,zero,400affc <__alt_data_end+0xfe00affc>
 400b018:	88c00015 	stw	r3,0(r17)
 400b01c:	003ff706 	br	400affc <__alt_data_end+0xfe00affc>

0400b020 <_isatty_r>:
 400b020:	defffd04 	addi	sp,sp,-12
 400b024:	dc000015 	stw	r16,0(sp)
 400b028:	04010074 	movhi	r16,1025
 400b02c:	dc400115 	stw	r17,4(sp)
 400b030:	8414c004 	addi	r16,r16,21248
 400b034:	2023883a 	mov	r17,r4
 400b038:	2809883a 	mov	r4,r5
 400b03c:	dfc00215 	stw	ra,8(sp)
 400b040:	80000015 	stw	zero,0(r16)
 400b044:	400ecf40 	call	400ecf4 <isatty>
 400b048:	00ffffc4 	movi	r3,-1
 400b04c:	10c00526 	beq	r2,r3,400b064 <_isatty_r+0x44>
 400b050:	dfc00217 	ldw	ra,8(sp)
 400b054:	dc400117 	ldw	r17,4(sp)
 400b058:	dc000017 	ldw	r16,0(sp)
 400b05c:	dec00304 	addi	sp,sp,12
 400b060:	f800283a 	ret
 400b064:	80c00017 	ldw	r3,0(r16)
 400b068:	183ff926 	beq	r3,zero,400b050 <__alt_data_end+0xfe00b050>
 400b06c:	88c00015 	stw	r3,0(r17)
 400b070:	003ff706 	br	400b050 <__alt_data_end+0xfe00b050>

0400b074 <_lseek_r>:
 400b074:	defffd04 	addi	sp,sp,-12
 400b078:	dc000015 	stw	r16,0(sp)
 400b07c:	04010074 	movhi	r16,1025
 400b080:	dc400115 	stw	r17,4(sp)
 400b084:	8414c004 	addi	r16,r16,21248
 400b088:	2023883a 	mov	r17,r4
 400b08c:	2809883a 	mov	r4,r5
 400b090:	300b883a 	mov	r5,r6
 400b094:	380d883a 	mov	r6,r7
 400b098:	dfc00215 	stw	ra,8(sp)
 400b09c:	80000015 	stw	zero,0(r16)
 400b0a0:	400eed40 	call	400eed4 <lseek>
 400b0a4:	00ffffc4 	movi	r3,-1
 400b0a8:	10c00526 	beq	r2,r3,400b0c0 <_lseek_r+0x4c>
 400b0ac:	dfc00217 	ldw	ra,8(sp)
 400b0b0:	dc400117 	ldw	r17,4(sp)
 400b0b4:	dc000017 	ldw	r16,0(sp)
 400b0b8:	dec00304 	addi	sp,sp,12
 400b0bc:	f800283a 	ret
 400b0c0:	80c00017 	ldw	r3,0(r16)
 400b0c4:	183ff926 	beq	r3,zero,400b0ac <__alt_data_end+0xfe00b0ac>
 400b0c8:	88c00015 	stw	r3,0(r17)
 400b0cc:	003ff706 	br	400b0ac <__alt_data_end+0xfe00b0ac>

0400b0d0 <_read_r>:
 400b0d0:	defffd04 	addi	sp,sp,-12
 400b0d4:	dc000015 	stw	r16,0(sp)
 400b0d8:	04010074 	movhi	r16,1025
 400b0dc:	dc400115 	stw	r17,4(sp)
 400b0e0:	8414c004 	addi	r16,r16,21248
 400b0e4:	2023883a 	mov	r17,r4
 400b0e8:	2809883a 	mov	r4,r5
 400b0ec:	300b883a 	mov	r5,r6
 400b0f0:	380d883a 	mov	r6,r7
 400b0f4:	dfc00215 	stw	ra,8(sp)
 400b0f8:	80000015 	stw	zero,0(r16)
 400b0fc:	400f0b80 	call	400f0b8 <read>
 400b100:	00ffffc4 	movi	r3,-1
 400b104:	10c00526 	beq	r2,r3,400b11c <_read_r+0x4c>
 400b108:	dfc00217 	ldw	ra,8(sp)
 400b10c:	dc400117 	ldw	r17,4(sp)
 400b110:	dc000017 	ldw	r16,0(sp)
 400b114:	dec00304 	addi	sp,sp,12
 400b118:	f800283a 	ret
 400b11c:	80c00017 	ldw	r3,0(r16)
 400b120:	183ff926 	beq	r3,zero,400b108 <__alt_data_end+0xfe00b108>
 400b124:	88c00015 	stw	r3,0(r17)
 400b128:	003ff706 	br	400b108 <__alt_data_end+0xfe00b108>

0400b12c <__swbuf_r>:
 400b12c:	defffc04 	addi	sp,sp,-16
 400b130:	dc800215 	stw	r18,8(sp)
 400b134:	dc400115 	stw	r17,4(sp)
 400b138:	dc000015 	stw	r16,0(sp)
 400b13c:	dfc00315 	stw	ra,12(sp)
 400b140:	2025883a 	mov	r18,r4
 400b144:	2823883a 	mov	r17,r5
 400b148:	3021883a 	mov	r16,r6
 400b14c:	20000226 	beq	r4,zero,400b158 <__swbuf_r+0x2c>
 400b150:	20800e17 	ldw	r2,56(r4)
 400b154:	10004126 	beq	r2,zero,400b25c <__swbuf_r+0x130>
 400b158:	80c00617 	ldw	r3,24(r16)
 400b15c:	8180030b 	ldhu	r6,12(r16)
 400b160:	80c00215 	stw	r3,8(r16)
 400b164:	30c0020c 	andi	r3,r6,8
 400b168:	18003526 	beq	r3,zero,400b240 <__swbuf_r+0x114>
 400b16c:	80c00417 	ldw	r3,16(r16)
 400b170:	18003326 	beq	r3,zero,400b240 <__swbuf_r+0x114>
 400b174:	3088000c 	andi	r2,r6,8192
 400b178:	8c403fcc 	andi	r17,r17,255
 400b17c:	10001726 	beq	r2,zero,400b1dc <__swbuf_r+0xb0>
 400b180:	80800017 	ldw	r2,0(r16)
 400b184:	81000517 	ldw	r4,20(r16)
 400b188:	10c7c83a 	sub	r3,r2,r3
 400b18c:	19001d0e 	bge	r3,r4,400b204 <__swbuf_r+0xd8>
 400b190:	18c00044 	addi	r3,r3,1
 400b194:	81400217 	ldw	r5,8(r16)
 400b198:	11000044 	addi	r4,r2,1
 400b19c:	81000015 	stw	r4,0(r16)
 400b1a0:	297fffc4 	addi	r5,r5,-1
 400b1a4:	81400215 	stw	r5,8(r16)
 400b1a8:	14400005 	stb	r17,0(r2)
 400b1ac:	80800517 	ldw	r2,20(r16)
 400b1b0:	10c01d26 	beq	r2,r3,400b228 <__swbuf_r+0xfc>
 400b1b4:	8080030b 	ldhu	r2,12(r16)
 400b1b8:	1080004c 	andi	r2,r2,1
 400b1bc:	1000181e 	bne	r2,zero,400b220 <__swbuf_r+0xf4>
 400b1c0:	8805883a 	mov	r2,r17
 400b1c4:	dfc00317 	ldw	ra,12(sp)
 400b1c8:	dc800217 	ldw	r18,8(sp)
 400b1cc:	dc400117 	ldw	r17,4(sp)
 400b1d0:	dc000017 	ldw	r16,0(sp)
 400b1d4:	dec00404 	addi	sp,sp,16
 400b1d8:	f800283a 	ret
 400b1dc:	81001917 	ldw	r4,100(r16)
 400b1e0:	00b7ffc4 	movi	r2,-8193
 400b1e4:	31880014 	ori	r6,r6,8192
 400b1e8:	2084703a 	and	r2,r4,r2
 400b1ec:	80801915 	stw	r2,100(r16)
 400b1f0:	80800017 	ldw	r2,0(r16)
 400b1f4:	81000517 	ldw	r4,20(r16)
 400b1f8:	8180030d 	sth	r6,12(r16)
 400b1fc:	10c7c83a 	sub	r3,r2,r3
 400b200:	193fe316 	blt	r3,r4,400b190 <__alt_data_end+0xfe00b190>
 400b204:	9009883a 	mov	r4,r18
 400b208:	800b883a 	mov	r5,r16
 400b20c:	4005e500 	call	4005e50 <_fflush_r>
 400b210:	1000091e 	bne	r2,zero,400b238 <__swbuf_r+0x10c>
 400b214:	80800017 	ldw	r2,0(r16)
 400b218:	00c00044 	movi	r3,1
 400b21c:	003fdd06 	br	400b194 <__alt_data_end+0xfe00b194>
 400b220:	00800284 	movi	r2,10
 400b224:	88bfe61e 	bne	r17,r2,400b1c0 <__alt_data_end+0xfe00b1c0>
 400b228:	9009883a 	mov	r4,r18
 400b22c:	800b883a 	mov	r5,r16
 400b230:	4005e500 	call	4005e50 <_fflush_r>
 400b234:	103fe226 	beq	r2,zero,400b1c0 <__alt_data_end+0xfe00b1c0>
 400b238:	00bfffc4 	movi	r2,-1
 400b23c:	003fe106 	br	400b1c4 <__alt_data_end+0xfe00b1c4>
 400b240:	9009883a 	mov	r4,r18
 400b244:	800b883a 	mov	r5,r16
 400b248:	40043d00 	call	40043d0 <__swsetup_r>
 400b24c:	1000051e 	bne	r2,zero,400b264 <__swbuf_r+0x138>
 400b250:	8180030b 	ldhu	r6,12(r16)
 400b254:	80c00417 	ldw	r3,16(r16)
 400b258:	003fc606 	br	400b174 <__alt_data_end+0xfe00b174>
 400b25c:	400640c0 	call	400640c <__sinit>
 400b260:	003fbd06 	br	400b158 <__alt_data_end+0xfe00b158>
 400b264:	80c0030b 	ldhu	r3,12(r16)
 400b268:	00bfffc4 	movi	r2,-1
 400b26c:	18c01014 	ori	r3,r3,64
 400b270:	80c0030d 	sth	r3,12(r16)
 400b274:	00c00244 	movi	r3,9
 400b278:	90c00015 	stw	r3,0(r18)
 400b27c:	003fd106 	br	400b1c4 <__alt_data_end+0xfe00b1c4>

0400b280 <__swbuf>:
 400b280:	00c10074 	movhi	r3,1025
 400b284:	18cdef04 	addi	r3,r3,14268
 400b288:	2005883a 	mov	r2,r4
 400b28c:	19000017 	ldw	r4,0(r3)
 400b290:	280d883a 	mov	r6,r5
 400b294:	100b883a 	mov	r5,r2
 400b298:	400b12c1 	jmpi	400b12c <__swbuf_r>

0400b29c <_wcrtomb_r>:
 400b29c:	defff604 	addi	sp,sp,-40
 400b2a0:	00810074 	movhi	r2,1025
 400b2a4:	dc800815 	stw	r18,32(sp)
 400b2a8:	dc400715 	stw	r17,28(sp)
 400b2ac:	dc000615 	stw	r16,24(sp)
 400b2b0:	108df304 	addi	r2,r2,14284
 400b2b4:	dfc00915 	stw	ra,36(sp)
 400b2b8:	2021883a 	mov	r16,r4
 400b2bc:	3823883a 	mov	r17,r7
 400b2c0:	14800017 	ldw	r18,0(r2)
 400b2c4:	28001426 	beq	r5,zero,400b318 <_wcrtomb_r+0x7c>
 400b2c8:	d9400415 	stw	r5,16(sp)
 400b2cc:	d9800515 	stw	r6,20(sp)
 400b2d0:	4006f000 	call	4006f00 <__locale_charset>
 400b2d4:	d9400417 	ldw	r5,16(sp)
 400b2d8:	d9800517 	ldw	r6,20(sp)
 400b2dc:	8009883a 	mov	r4,r16
 400b2e0:	dc400015 	stw	r17,0(sp)
 400b2e4:	100f883a 	mov	r7,r2
 400b2e8:	903ee83a 	callr	r18
 400b2ec:	00ffffc4 	movi	r3,-1
 400b2f0:	10c0031e 	bne	r2,r3,400b300 <_wcrtomb_r+0x64>
 400b2f4:	88000015 	stw	zero,0(r17)
 400b2f8:	00c02284 	movi	r3,138
 400b2fc:	80c00015 	stw	r3,0(r16)
 400b300:	dfc00917 	ldw	ra,36(sp)
 400b304:	dc800817 	ldw	r18,32(sp)
 400b308:	dc400717 	ldw	r17,28(sp)
 400b30c:	dc000617 	ldw	r16,24(sp)
 400b310:	dec00a04 	addi	sp,sp,40
 400b314:	f800283a 	ret
 400b318:	4006f000 	call	4006f00 <__locale_charset>
 400b31c:	8009883a 	mov	r4,r16
 400b320:	dc400015 	stw	r17,0(sp)
 400b324:	d9400104 	addi	r5,sp,4
 400b328:	000d883a 	mov	r6,zero
 400b32c:	100f883a 	mov	r7,r2
 400b330:	903ee83a 	callr	r18
 400b334:	003fed06 	br	400b2ec <__alt_data_end+0xfe00b2ec>

0400b338 <wcrtomb>:
 400b338:	defff504 	addi	sp,sp,-44
 400b33c:	dc400515 	stw	r17,20(sp)
 400b340:	dc000415 	stw	r16,16(sp)
 400b344:	dfc00a15 	stw	ra,40(sp)
 400b348:	dd400915 	stw	r21,36(sp)
 400b34c:	dd000815 	stw	r20,32(sp)
 400b350:	dcc00715 	stw	r19,28(sp)
 400b354:	dc800615 	stw	r18,24(sp)
 400b358:	2021883a 	mov	r16,r4
 400b35c:	3023883a 	mov	r17,r6
 400b360:	20001d26 	beq	r4,zero,400b3d8 <wcrtomb+0xa0>
 400b364:	04810074 	movhi	r18,1025
 400b368:	948def04 	addi	r18,r18,14268
 400b36c:	00810074 	movhi	r2,1025
 400b370:	95400017 	ldw	r21,0(r18)
 400b374:	108df304 	addi	r2,r2,14284
 400b378:	15000017 	ldw	r20,0(r2)
 400b37c:	2827883a 	mov	r19,r5
 400b380:	4006f000 	call	4006f00 <__locale_charset>
 400b384:	a809883a 	mov	r4,r21
 400b388:	dc400015 	stw	r17,0(sp)
 400b38c:	800b883a 	mov	r5,r16
 400b390:	980d883a 	mov	r6,r19
 400b394:	100f883a 	mov	r7,r2
 400b398:	a03ee83a 	callr	r20
 400b39c:	00ffffc4 	movi	r3,-1
 400b3a0:	10c0041e 	bne	r2,r3,400b3b4 <wcrtomb+0x7c>
 400b3a4:	90c00017 	ldw	r3,0(r18)
 400b3a8:	01002284 	movi	r4,138
 400b3ac:	88000015 	stw	zero,0(r17)
 400b3b0:	19000015 	stw	r4,0(r3)
 400b3b4:	dfc00a17 	ldw	ra,40(sp)
 400b3b8:	dd400917 	ldw	r21,36(sp)
 400b3bc:	dd000817 	ldw	r20,32(sp)
 400b3c0:	dcc00717 	ldw	r19,28(sp)
 400b3c4:	dc800617 	ldw	r18,24(sp)
 400b3c8:	dc400517 	ldw	r17,20(sp)
 400b3cc:	dc000417 	ldw	r16,16(sp)
 400b3d0:	dec00b04 	addi	sp,sp,44
 400b3d4:	f800283a 	ret
 400b3d8:	04810074 	movhi	r18,1025
 400b3dc:	948def04 	addi	r18,r18,14268
 400b3e0:	00810074 	movhi	r2,1025
 400b3e4:	94c00017 	ldw	r19,0(r18)
 400b3e8:	108df304 	addi	r2,r2,14284
 400b3ec:	14000017 	ldw	r16,0(r2)
 400b3f0:	4006f000 	call	4006f00 <__locale_charset>
 400b3f4:	9809883a 	mov	r4,r19
 400b3f8:	dc400015 	stw	r17,0(sp)
 400b3fc:	d9400104 	addi	r5,sp,4
 400b400:	000d883a 	mov	r6,zero
 400b404:	100f883a 	mov	r7,r2
 400b408:	803ee83a 	callr	r16
 400b40c:	003fe306 	br	400b39c <__alt_data_end+0xfe00b39c>

0400b410 <__ascii_wctomb>:
 400b410:	28000526 	beq	r5,zero,400b428 <__ascii_wctomb+0x18>
 400b414:	00803fc4 	movi	r2,255
 400b418:	11800536 	bltu	r2,r6,400b430 <__ascii_wctomb+0x20>
 400b41c:	29800005 	stb	r6,0(r5)
 400b420:	00800044 	movi	r2,1
 400b424:	f800283a 	ret
 400b428:	0005883a 	mov	r2,zero
 400b42c:	f800283a 	ret
 400b430:	00802284 	movi	r2,138
 400b434:	20800015 	stw	r2,0(r4)
 400b438:	00bfffc4 	movi	r2,-1
 400b43c:	f800283a 	ret

0400b440 <_wctomb_r>:
 400b440:	00810074 	movhi	r2,1025
 400b444:	defff904 	addi	sp,sp,-28
 400b448:	108df304 	addi	r2,r2,14284
 400b44c:	dfc00615 	stw	ra,24(sp)
 400b450:	dc400515 	stw	r17,20(sp)
 400b454:	dc000415 	stw	r16,16(sp)
 400b458:	3823883a 	mov	r17,r7
 400b45c:	14000017 	ldw	r16,0(r2)
 400b460:	d9000115 	stw	r4,4(sp)
 400b464:	d9400215 	stw	r5,8(sp)
 400b468:	d9800315 	stw	r6,12(sp)
 400b46c:	4006f000 	call	4006f00 <__locale_charset>
 400b470:	d9000117 	ldw	r4,4(sp)
 400b474:	d9400217 	ldw	r5,8(sp)
 400b478:	d9800317 	ldw	r6,12(sp)
 400b47c:	dc400015 	stw	r17,0(sp)
 400b480:	100f883a 	mov	r7,r2
 400b484:	803ee83a 	callr	r16
 400b488:	dfc00617 	ldw	ra,24(sp)
 400b48c:	dc400517 	ldw	r17,20(sp)
 400b490:	dc000417 	ldw	r16,16(sp)
 400b494:	dec00704 	addi	sp,sp,28
 400b498:	f800283a 	ret

0400b49c <__udivdi3>:
 400b49c:	defff504 	addi	sp,sp,-44
 400b4a0:	dcc00415 	stw	r19,16(sp)
 400b4a4:	dc000115 	stw	r16,4(sp)
 400b4a8:	dfc00a15 	stw	ra,40(sp)
 400b4ac:	df000915 	stw	fp,36(sp)
 400b4b0:	ddc00815 	stw	r23,32(sp)
 400b4b4:	dd800715 	stw	r22,28(sp)
 400b4b8:	dd400615 	stw	r21,24(sp)
 400b4bc:	dd000515 	stw	r20,20(sp)
 400b4c0:	dc800315 	stw	r18,12(sp)
 400b4c4:	dc400215 	stw	r17,8(sp)
 400b4c8:	2027883a 	mov	r19,r4
 400b4cc:	2821883a 	mov	r16,r5
 400b4d0:	3800471e 	bne	r7,zero,400b5f0 <__udivdi3+0x154>
 400b4d4:	3025883a 	mov	r18,r6
 400b4d8:	2023883a 	mov	r17,r4
 400b4dc:	2980592e 	bgeu	r5,r6,400b644 <__udivdi3+0x1a8>
 400b4e0:	00bfffd4 	movui	r2,65535
 400b4e4:	2829883a 	mov	r20,r5
 400b4e8:	1180b236 	bltu	r2,r6,400b7b4 <__udivdi3+0x318>
 400b4ec:	00803fc4 	movi	r2,255
 400b4f0:	1181622e 	bgeu	r2,r6,400ba7c <__udivdi3+0x5e0>
 400b4f4:	00800204 	movi	r2,8
 400b4f8:	1007883a 	mov	r3,r2
 400b4fc:	3084d83a 	srl	r2,r6,r2
 400b500:	01010074 	movhi	r4,1025
 400b504:	2106f604 	addi	r4,r4,7128
 400b508:	2085883a 	add	r2,r4,r2
 400b50c:	11000003 	ldbu	r4,0(r2)
 400b510:	20c9883a 	add	r4,r4,r3
 400b514:	00c00804 	movi	r3,32
 400b518:	1907c83a 	sub	r3,r3,r4
 400b51c:	18000526 	beq	r3,zero,400b534 <__udivdi3+0x98>
 400b520:	80e0983a 	sll	r16,r16,r3
 400b524:	9908d83a 	srl	r4,r19,r4
 400b528:	30e4983a 	sll	r18,r6,r3
 400b52c:	98e2983a 	sll	r17,r19,r3
 400b530:	8128b03a 	or	r20,r16,r4
 400b534:	902ad43a 	srli	r21,r18,16
 400b538:	a009883a 	mov	r4,r20
 400b53c:	95bfffcc 	andi	r22,r18,65535
 400b540:	a80b883a 	mov	r5,r21
 400b544:	400c21c0 	call	400c21c <__umodsi3>
 400b548:	a009883a 	mov	r4,r20
 400b54c:	a80b883a 	mov	r5,r21
 400b550:	102f883a 	mov	r23,r2
 400b554:	400c2140 	call	400c214 <__udivsi3>
 400b558:	1009883a 	mov	r4,r2
 400b55c:	b00b883a 	mov	r5,r22
 400b560:	1021883a 	mov	r16,r2
 400b564:	400c2240 	call	400c224 <__mulsi3>
 400b568:	b82e943a 	slli	r23,r23,16
 400b56c:	8808d43a 	srli	r4,r17,16
 400b570:	b906b03a 	or	r3,r23,r4
 400b574:	1880052e 	bgeu	r3,r2,400b58c <__udivdi3+0xf0>
 400b578:	1c87883a 	add	r3,r3,r18
 400b57c:	813fffc4 	addi	r4,r16,-1
 400b580:	1c800136 	bltu	r3,r18,400b588 <__udivdi3+0xec>
 400b584:	18815236 	bltu	r3,r2,400bad0 <__udivdi3+0x634>
 400b588:	2021883a 	mov	r16,r4
 400b58c:	18a7c83a 	sub	r19,r3,r2
 400b590:	9809883a 	mov	r4,r19
 400b594:	a80b883a 	mov	r5,r21
 400b598:	400c21c0 	call	400c21c <__umodsi3>
 400b59c:	1029883a 	mov	r20,r2
 400b5a0:	9809883a 	mov	r4,r19
 400b5a4:	a80b883a 	mov	r5,r21
 400b5a8:	a028943a 	slli	r20,r20,16
 400b5ac:	400c2140 	call	400c214 <__udivsi3>
 400b5b0:	1009883a 	mov	r4,r2
 400b5b4:	b00b883a 	mov	r5,r22
 400b5b8:	8c7fffcc 	andi	r17,r17,65535
 400b5bc:	1027883a 	mov	r19,r2
 400b5c0:	a462b03a 	or	r17,r20,r17
 400b5c4:	400c2240 	call	400c224 <__mulsi3>
 400b5c8:	8880052e 	bgeu	r17,r2,400b5e0 <__udivdi3+0x144>
 400b5cc:	8ca3883a 	add	r17,r17,r18
 400b5d0:	98ffffc4 	addi	r3,r19,-1
 400b5d4:	8c811036 	bltu	r17,r18,400ba18 <__udivdi3+0x57c>
 400b5d8:	88810f2e 	bgeu	r17,r2,400ba18 <__udivdi3+0x57c>
 400b5dc:	9cffff84 	addi	r19,r19,-2
 400b5e0:	8020943a 	slli	r16,r16,16
 400b5e4:	0007883a 	mov	r3,zero
 400b5e8:	9c04b03a 	or	r2,r19,r16
 400b5ec:	00006006 	br	400b770 <__udivdi3+0x2d4>
 400b5f0:	29c05d36 	bltu	r5,r7,400b768 <__udivdi3+0x2cc>
 400b5f4:	00bfffd4 	movui	r2,65535
 400b5f8:	11c0692e 	bgeu	r2,r7,400b7a0 <__udivdi3+0x304>
 400b5fc:	00804034 	movhi	r2,256
 400b600:	10bfffc4 	addi	r2,r2,-1
 400b604:	11c10e2e 	bgeu	r2,r7,400ba40 <__udivdi3+0x5a4>
 400b608:	01400604 	movi	r5,24
 400b60c:	2811883a 	mov	r8,r5
 400b610:	394ad83a 	srl	r5,r7,r5
 400b614:	00810074 	movhi	r2,1025
 400b618:	1086f604 	addi	r2,r2,7128
 400b61c:	114b883a 	add	r5,r2,r5
 400b620:	29400003 	ldbu	r5,0(r5)
 400b624:	00c00804 	movi	r3,32
 400b628:	2a0b883a 	add	r5,r5,r8
 400b62c:	196fc83a 	sub	r23,r3,r5
 400b630:	b8006b1e 	bne	r23,zero,400b7e0 <__udivdi3+0x344>
 400b634:	3c011436 	bltu	r7,r16,400ba88 <__udivdi3+0x5ec>
 400b638:	9985403a 	cmpgeu	r2,r19,r6
 400b63c:	0007883a 	mov	r3,zero
 400b640:	00004b06 	br	400b770 <__udivdi3+0x2d4>
 400b644:	3000041e 	bne	r6,zero,400b658 <__udivdi3+0x1bc>
 400b648:	01000044 	movi	r4,1
 400b64c:	000b883a 	mov	r5,zero
 400b650:	400c2140 	call	400c214 <__udivsi3>
 400b654:	1025883a 	mov	r18,r2
 400b658:	00bfffd4 	movui	r2,65535
 400b65c:	14805b2e 	bgeu	r2,r18,400b7cc <__udivdi3+0x330>
 400b660:	00804034 	movhi	r2,256
 400b664:	10bfffc4 	addi	r2,r2,-1
 400b668:	1480fe2e 	bgeu	r2,r18,400ba64 <__udivdi3+0x5c8>
 400b66c:	00800604 	movi	r2,24
 400b670:	1007883a 	mov	r3,r2
 400b674:	9084d83a 	srl	r2,r18,r2
 400b678:	01010074 	movhi	r4,1025
 400b67c:	2106f604 	addi	r4,r4,7128
 400b680:	2085883a 	add	r2,r4,r2
 400b684:	11800003 	ldbu	r6,0(r2)
 400b688:	01c00804 	movi	r7,32
 400b68c:	30c7883a 	add	r3,r6,r3
 400b690:	38cfc83a 	sub	r7,r7,r3
 400b694:	3800a71e 	bne	r7,zero,400b934 <__udivdi3+0x498>
 400b698:	9028d43a 	srli	r20,r18,16
 400b69c:	84a1c83a 	sub	r16,r16,r18
 400b6a0:	957fffcc 	andi	r21,r18,65535
 400b6a4:	00c00044 	movi	r3,1
 400b6a8:	8009883a 	mov	r4,r16
 400b6ac:	a00b883a 	mov	r5,r20
 400b6b0:	d8c00015 	stw	r3,0(sp)
 400b6b4:	400c21c0 	call	400c21c <__umodsi3>
 400b6b8:	8009883a 	mov	r4,r16
 400b6bc:	a00b883a 	mov	r5,r20
 400b6c0:	102d883a 	mov	r22,r2
 400b6c4:	400c2140 	call	400c214 <__udivsi3>
 400b6c8:	1009883a 	mov	r4,r2
 400b6cc:	a80b883a 	mov	r5,r21
 400b6d0:	1021883a 	mov	r16,r2
 400b6d4:	400c2240 	call	400c224 <__mulsi3>
 400b6d8:	b02c943a 	slli	r22,r22,16
 400b6dc:	880ed43a 	srli	r7,r17,16
 400b6e0:	d8c00017 	ldw	r3,0(sp)
 400b6e4:	b1ccb03a 	or	r6,r22,r7
 400b6e8:	3080052e 	bgeu	r6,r2,400b700 <__udivdi3+0x264>
 400b6ec:	348d883a 	add	r6,r6,r18
 400b6f0:	813fffc4 	addi	r4,r16,-1
 400b6f4:	34800136 	bltu	r6,r18,400b6fc <__udivdi3+0x260>
 400b6f8:	3080f236 	bltu	r6,r2,400bac4 <__udivdi3+0x628>
 400b6fc:	2021883a 	mov	r16,r4
 400b700:	30a7c83a 	sub	r19,r6,r2
 400b704:	9809883a 	mov	r4,r19
 400b708:	a00b883a 	mov	r5,r20
 400b70c:	d8c00015 	stw	r3,0(sp)
 400b710:	400c21c0 	call	400c21c <__umodsi3>
 400b714:	102d883a 	mov	r22,r2
 400b718:	9809883a 	mov	r4,r19
 400b71c:	a00b883a 	mov	r5,r20
 400b720:	b02c943a 	slli	r22,r22,16
 400b724:	400c2140 	call	400c214 <__udivsi3>
 400b728:	1009883a 	mov	r4,r2
 400b72c:	a80b883a 	mov	r5,r21
 400b730:	8c7fffcc 	andi	r17,r17,65535
 400b734:	1027883a 	mov	r19,r2
 400b738:	b462b03a 	or	r17,r22,r17
 400b73c:	400c2240 	call	400c224 <__mulsi3>
 400b740:	d8c00017 	ldw	r3,0(sp)
 400b744:	8880052e 	bgeu	r17,r2,400b75c <__udivdi3+0x2c0>
 400b748:	8ca3883a 	add	r17,r17,r18
 400b74c:	993fffc4 	addi	r4,r19,-1
 400b750:	8c80af36 	bltu	r17,r18,400ba10 <__udivdi3+0x574>
 400b754:	8880ae2e 	bgeu	r17,r2,400ba10 <__udivdi3+0x574>
 400b758:	9cffff84 	addi	r19,r19,-2
 400b75c:	8020943a 	slli	r16,r16,16
 400b760:	9c04b03a 	or	r2,r19,r16
 400b764:	00000206 	br	400b770 <__udivdi3+0x2d4>
 400b768:	0007883a 	mov	r3,zero
 400b76c:	0005883a 	mov	r2,zero
 400b770:	dfc00a17 	ldw	ra,40(sp)
 400b774:	df000917 	ldw	fp,36(sp)
 400b778:	ddc00817 	ldw	r23,32(sp)
 400b77c:	dd800717 	ldw	r22,28(sp)
 400b780:	dd400617 	ldw	r21,24(sp)
 400b784:	dd000517 	ldw	r20,20(sp)
 400b788:	dcc00417 	ldw	r19,16(sp)
 400b78c:	dc800317 	ldw	r18,12(sp)
 400b790:	dc400217 	ldw	r17,8(sp)
 400b794:	dc000117 	ldw	r16,4(sp)
 400b798:	dec00b04 	addi	sp,sp,44
 400b79c:	f800283a 	ret
 400b7a0:	00803fc4 	movi	r2,255
 400b7a4:	11c0a92e 	bgeu	r2,r7,400ba4c <__udivdi3+0x5b0>
 400b7a8:	01400204 	movi	r5,8
 400b7ac:	2811883a 	mov	r8,r5
 400b7b0:	003f9706 	br	400b610 <__alt_data_end+0xfe00b610>
 400b7b4:	00804034 	movhi	r2,256
 400b7b8:	10bfffc4 	addi	r2,r2,-1
 400b7bc:	1180a62e 	bgeu	r2,r6,400ba58 <__udivdi3+0x5bc>
 400b7c0:	00800604 	movi	r2,24
 400b7c4:	1007883a 	mov	r3,r2
 400b7c8:	003f4c06 	br	400b4fc <__alt_data_end+0xfe00b4fc>
 400b7cc:	00803fc4 	movi	r2,255
 400b7d0:	1480a72e 	bgeu	r2,r18,400ba70 <__udivdi3+0x5d4>
 400b7d4:	00800204 	movi	r2,8
 400b7d8:	1007883a 	mov	r3,r2
 400b7dc:	003fa506 	br	400b674 <__alt_data_end+0xfe00b674>
 400b7e0:	3178d83a 	srl	fp,r6,r5
 400b7e4:	3dce983a 	sll	r7,r7,r23
 400b7e8:	8168d83a 	srl	r20,r16,r5
 400b7ec:	9950d83a 	srl	r8,r19,r5
 400b7f0:	3f38b03a 	or	fp,r7,fp
 400b7f4:	e024d43a 	srli	r18,fp,16
 400b7f8:	85e0983a 	sll	r16,r16,r23
 400b7fc:	a009883a 	mov	r4,r20
 400b800:	900b883a 	mov	r5,r18
 400b804:	8220b03a 	or	r16,r16,r8
 400b808:	35ea983a 	sll	r21,r6,r23
 400b80c:	400c21c0 	call	400c21c <__umodsi3>
 400b810:	a009883a 	mov	r4,r20
 400b814:	900b883a 	mov	r5,r18
 400b818:	1023883a 	mov	r17,r2
 400b81c:	e5bfffcc 	andi	r22,fp,65535
 400b820:	400c2140 	call	400c214 <__udivsi3>
 400b824:	1009883a 	mov	r4,r2
 400b828:	b00b883a 	mov	r5,r22
 400b82c:	1029883a 	mov	r20,r2
 400b830:	400c2240 	call	400c224 <__mulsi3>
 400b834:	8806943a 	slli	r3,r17,16
 400b838:	8014d43a 	srli	r10,r16,16
 400b83c:	1a92b03a 	or	r9,r3,r10
 400b840:	4880042e 	bgeu	r9,r2,400b854 <__udivdi3+0x3b8>
 400b844:	4f13883a 	add	r9,r9,fp
 400b848:	a0ffffc4 	addi	r3,r20,-1
 400b84c:	4f00952e 	bgeu	r9,fp,400baa4 <__udivdi3+0x608>
 400b850:	1829883a 	mov	r20,r3
 400b854:	48a3c83a 	sub	r17,r9,r2
 400b858:	8809883a 	mov	r4,r17
 400b85c:	900b883a 	mov	r5,r18
 400b860:	400c21c0 	call	400c21c <__umodsi3>
 400b864:	8809883a 	mov	r4,r17
 400b868:	900b883a 	mov	r5,r18
 400b86c:	d8800015 	stw	r2,0(sp)
 400b870:	400c2140 	call	400c214 <__udivsi3>
 400b874:	1009883a 	mov	r4,r2
 400b878:	b00b883a 	mov	r5,r22
 400b87c:	1023883a 	mov	r17,r2
 400b880:	400c2240 	call	400c224 <__mulsi3>
 400b884:	d8c00017 	ldw	r3,0(sp)
 400b888:	823fffcc 	andi	r8,r16,65535
 400b88c:	1806943a 	slli	r3,r3,16
 400b890:	1a20b03a 	or	r16,r3,r8
 400b894:	8080042e 	bgeu	r16,r2,400b8a8 <__udivdi3+0x40c>
 400b898:	8721883a 	add	r16,r16,fp
 400b89c:	88ffffc4 	addi	r3,r17,-1
 400b8a0:	87007c2e 	bgeu	r16,fp,400ba94 <__udivdi3+0x5f8>
 400b8a4:	1823883a 	mov	r17,r3
 400b8a8:	a028943a 	slli	r20,r20,16
 400b8ac:	acbfffcc 	andi	r18,r21,65535
 400b8b0:	900b883a 	mov	r5,r18
 400b8b4:	8d28b03a 	or	r20,r17,r20
 400b8b8:	a022d43a 	srli	r17,r20,16
 400b8bc:	a5bfffcc 	andi	r22,r20,65535
 400b8c0:	b009883a 	mov	r4,r22
 400b8c4:	a82ad43a 	srli	r21,r21,16
 400b8c8:	80a1c83a 	sub	r16,r16,r2
 400b8cc:	400c2240 	call	400c224 <__mulsi3>
 400b8d0:	8809883a 	mov	r4,r17
 400b8d4:	900b883a 	mov	r5,r18
 400b8d8:	1039883a 	mov	fp,r2
 400b8dc:	400c2240 	call	400c224 <__mulsi3>
 400b8e0:	8809883a 	mov	r4,r17
 400b8e4:	a80b883a 	mov	r5,r21
 400b8e8:	1025883a 	mov	r18,r2
 400b8ec:	400c2240 	call	400c224 <__mulsi3>
 400b8f0:	b009883a 	mov	r4,r22
 400b8f4:	a80b883a 	mov	r5,r21
 400b8f8:	1023883a 	mov	r17,r2
 400b8fc:	400c2240 	call	400c224 <__mulsi3>
 400b900:	e006d43a 	srli	r3,fp,16
 400b904:	9085883a 	add	r2,r18,r2
 400b908:	10c7883a 	add	r3,r2,r3
 400b90c:	1c80022e 	bgeu	r3,r18,400b918 <__udivdi3+0x47c>
 400b910:	00800074 	movhi	r2,1
 400b914:	88a3883a 	add	r17,r17,r2
 400b918:	1808d43a 	srli	r4,r3,16
 400b91c:	8909883a 	add	r4,r17,r4
 400b920:	81004436 	bltu	r16,r4,400ba34 <__udivdi3+0x598>
 400b924:	81003e26 	beq	r16,r4,400ba20 <__udivdi3+0x584>
 400b928:	a005883a 	mov	r2,r20
 400b92c:	0007883a 	mov	r3,zero
 400b930:	003f8f06 	br	400b770 <__alt_data_end+0xfe00b770>
 400b934:	91e4983a 	sll	r18,r18,r7
 400b938:	80eed83a 	srl	r23,r16,r3
 400b93c:	81cc983a 	sll	r6,r16,r7
 400b940:	9028d43a 	srli	r20,r18,16
 400b944:	98c6d83a 	srl	r3,r19,r3
 400b948:	b809883a 	mov	r4,r23
 400b94c:	a00b883a 	mov	r5,r20
 400b950:	30ecb03a 	or	r22,r6,r3
 400b954:	99e2983a 	sll	r17,r19,r7
 400b958:	400c21c0 	call	400c21c <__umodsi3>
 400b95c:	b809883a 	mov	r4,r23
 400b960:	a00b883a 	mov	r5,r20
 400b964:	1021883a 	mov	r16,r2
 400b968:	957fffcc 	andi	r21,r18,65535
 400b96c:	400c2140 	call	400c214 <__udivsi3>
 400b970:	a80b883a 	mov	r5,r21
 400b974:	1009883a 	mov	r4,r2
 400b978:	102f883a 	mov	r23,r2
 400b97c:	400c2240 	call	400c224 <__mulsi3>
 400b980:	8020943a 	slli	r16,r16,16
 400b984:	b00ad43a 	srli	r5,r22,16
 400b988:	814cb03a 	or	r6,r16,r5
 400b98c:	3080062e 	bgeu	r6,r2,400b9a8 <__udivdi3+0x50c>
 400b990:	348d883a 	add	r6,r6,r18
 400b994:	b8ffffc4 	addi	r3,r23,-1
 400b998:	34804836 	bltu	r6,r18,400babc <__udivdi3+0x620>
 400b99c:	3080472e 	bgeu	r6,r2,400babc <__udivdi3+0x620>
 400b9a0:	bdffff84 	addi	r23,r23,-2
 400b9a4:	348d883a 	add	r6,r6,r18
 400b9a8:	30a7c83a 	sub	r19,r6,r2
 400b9ac:	9809883a 	mov	r4,r19
 400b9b0:	a00b883a 	mov	r5,r20
 400b9b4:	400c21c0 	call	400c21c <__umodsi3>
 400b9b8:	9809883a 	mov	r4,r19
 400b9bc:	a00b883a 	mov	r5,r20
 400b9c0:	1039883a 	mov	fp,r2
 400b9c4:	400c2140 	call	400c214 <__udivsi3>
 400b9c8:	1009883a 	mov	r4,r2
 400b9cc:	a80b883a 	mov	r5,r21
 400b9d0:	e038943a 	slli	fp,fp,16
 400b9d4:	1027883a 	mov	r19,r2
 400b9d8:	400c2240 	call	400c224 <__mulsi3>
 400b9dc:	b1bfffcc 	andi	r6,r22,65535
 400b9e0:	e18cb03a 	or	r6,fp,r6
 400b9e4:	3080062e 	bgeu	r6,r2,400ba00 <__udivdi3+0x564>
 400b9e8:	348d883a 	add	r6,r6,r18
 400b9ec:	98ffffc4 	addi	r3,r19,-1
 400b9f0:	34803036 	bltu	r6,r18,400bab4 <__udivdi3+0x618>
 400b9f4:	30802f2e 	bgeu	r6,r2,400bab4 <__udivdi3+0x618>
 400b9f8:	9cffff84 	addi	r19,r19,-2
 400b9fc:	348d883a 	add	r6,r6,r18
 400ba00:	b82e943a 	slli	r23,r23,16
 400ba04:	30a1c83a 	sub	r16,r6,r2
 400ba08:	9dc6b03a 	or	r3,r19,r23
 400ba0c:	003f2606 	br	400b6a8 <__alt_data_end+0xfe00b6a8>
 400ba10:	2027883a 	mov	r19,r4
 400ba14:	003f5106 	br	400b75c <__alt_data_end+0xfe00b75c>
 400ba18:	1827883a 	mov	r19,r3
 400ba1c:	003ef006 	br	400b5e0 <__alt_data_end+0xfe00b5e0>
 400ba20:	1808943a 	slli	r4,r3,16
 400ba24:	9dc6983a 	sll	r3,r19,r23
 400ba28:	e73fffcc 	andi	fp,fp,65535
 400ba2c:	2709883a 	add	r4,r4,fp
 400ba30:	193fbd2e 	bgeu	r3,r4,400b928 <__alt_data_end+0xfe00b928>
 400ba34:	a0bfffc4 	addi	r2,r20,-1
 400ba38:	0007883a 	mov	r3,zero
 400ba3c:	003f4c06 	br	400b770 <__alt_data_end+0xfe00b770>
 400ba40:	01400404 	movi	r5,16
 400ba44:	2811883a 	mov	r8,r5
 400ba48:	003ef106 	br	400b610 <__alt_data_end+0xfe00b610>
 400ba4c:	000b883a 	mov	r5,zero
 400ba50:	0011883a 	mov	r8,zero
 400ba54:	003eee06 	br	400b610 <__alt_data_end+0xfe00b610>
 400ba58:	00800404 	movi	r2,16
 400ba5c:	1007883a 	mov	r3,r2
 400ba60:	003ea606 	br	400b4fc <__alt_data_end+0xfe00b4fc>
 400ba64:	00800404 	movi	r2,16
 400ba68:	1007883a 	mov	r3,r2
 400ba6c:	003f0106 	br	400b674 <__alt_data_end+0xfe00b674>
 400ba70:	0005883a 	mov	r2,zero
 400ba74:	0007883a 	mov	r3,zero
 400ba78:	003efe06 	br	400b674 <__alt_data_end+0xfe00b674>
 400ba7c:	0005883a 	mov	r2,zero
 400ba80:	0007883a 	mov	r3,zero
 400ba84:	003e9d06 	br	400b4fc <__alt_data_end+0xfe00b4fc>
 400ba88:	0007883a 	mov	r3,zero
 400ba8c:	00800044 	movi	r2,1
 400ba90:	003f3706 	br	400b770 <__alt_data_end+0xfe00b770>
 400ba94:	80bf832e 	bgeu	r16,r2,400b8a4 <__alt_data_end+0xfe00b8a4>
 400ba98:	8c7fff84 	addi	r17,r17,-2
 400ba9c:	8721883a 	add	r16,r16,fp
 400baa0:	003f8106 	br	400b8a8 <__alt_data_end+0xfe00b8a8>
 400baa4:	48bf6a2e 	bgeu	r9,r2,400b850 <__alt_data_end+0xfe00b850>
 400baa8:	a53fff84 	addi	r20,r20,-2
 400baac:	4f13883a 	add	r9,r9,fp
 400bab0:	003f6806 	br	400b854 <__alt_data_end+0xfe00b854>
 400bab4:	1827883a 	mov	r19,r3
 400bab8:	003fd106 	br	400ba00 <__alt_data_end+0xfe00ba00>
 400babc:	182f883a 	mov	r23,r3
 400bac0:	003fb906 	br	400b9a8 <__alt_data_end+0xfe00b9a8>
 400bac4:	843fff84 	addi	r16,r16,-2
 400bac8:	348d883a 	add	r6,r6,r18
 400bacc:	003f0c06 	br	400b700 <__alt_data_end+0xfe00b700>
 400bad0:	843fff84 	addi	r16,r16,-2
 400bad4:	1c87883a 	add	r3,r3,r18
 400bad8:	003eac06 	br	400b58c <__alt_data_end+0xfe00b58c>

0400badc <__umoddi3>:
 400badc:	defff404 	addi	sp,sp,-48
 400bae0:	dd800815 	stw	r22,32(sp)
 400bae4:	dc400315 	stw	r17,12(sp)
 400bae8:	dc000215 	stw	r16,8(sp)
 400baec:	dfc00b15 	stw	ra,44(sp)
 400baf0:	df000a15 	stw	fp,40(sp)
 400baf4:	ddc00915 	stw	r23,36(sp)
 400baf8:	dd400715 	stw	r21,28(sp)
 400bafc:	dd000615 	stw	r20,24(sp)
 400bb00:	dcc00515 	stw	r19,20(sp)
 400bb04:	dc800415 	stw	r18,16(sp)
 400bb08:	2021883a 	mov	r16,r4
 400bb0c:	2823883a 	mov	r17,r5
 400bb10:	282d883a 	mov	r22,r5
 400bb14:	38003c1e 	bne	r7,zero,400bc08 <__umoddi3+0x12c>
 400bb18:	3027883a 	mov	r19,r6
 400bb1c:	2029883a 	mov	r20,r4
 400bb20:	2980522e 	bgeu	r5,r6,400bc6c <__umoddi3+0x190>
 400bb24:	00bfffd4 	movui	r2,65535
 400bb28:	1180a436 	bltu	r2,r6,400bdbc <__umoddi3+0x2e0>
 400bb2c:	00803fc4 	movi	r2,255
 400bb30:	11815e2e 	bgeu	r2,r6,400c0ac <__umoddi3+0x5d0>
 400bb34:	01400204 	movi	r5,8
 400bb38:	2805883a 	mov	r2,r5
 400bb3c:	314ad83a 	srl	r5,r6,r5
 400bb40:	00c10074 	movhi	r3,1025
 400bb44:	18c6f604 	addi	r3,r3,7128
 400bb48:	194b883a 	add	r5,r3,r5
 400bb4c:	29000003 	ldbu	r4,0(r5)
 400bb50:	2089883a 	add	r4,r4,r2
 400bb54:	00800804 	movi	r2,32
 400bb58:	1105c83a 	sub	r2,r2,r4
 400bb5c:	10010c26 	beq	r2,zero,400bf90 <__umoddi3+0x4b4>
 400bb60:	88a2983a 	sll	r17,r17,r2
 400bb64:	8108d83a 	srl	r4,r16,r4
 400bb68:	30a6983a 	sll	r19,r6,r2
 400bb6c:	80a8983a 	sll	r20,r16,r2
 400bb70:	1025883a 	mov	r18,r2
 400bb74:	892cb03a 	or	r22,r17,r4
 400bb78:	9822d43a 	srli	r17,r19,16
 400bb7c:	b009883a 	mov	r4,r22
 400bb80:	9d7fffcc 	andi	r21,r19,65535
 400bb84:	880b883a 	mov	r5,r17
 400bb88:	400c21c0 	call	400c21c <__umodsi3>
 400bb8c:	b009883a 	mov	r4,r22
 400bb90:	880b883a 	mov	r5,r17
 400bb94:	102f883a 	mov	r23,r2
 400bb98:	400c2140 	call	400c214 <__udivsi3>
 400bb9c:	1009883a 	mov	r4,r2
 400bba0:	a80b883a 	mov	r5,r21
 400bba4:	400c2240 	call	400c224 <__mulsi3>
 400bba8:	b82e943a 	slli	r23,r23,16
 400bbac:	a008d43a 	srli	r4,r20,16
 400bbb0:	b906b03a 	or	r3,r23,r4
 400bbb4:	1880042e 	bgeu	r3,r2,400bbc8 <__umoddi3+0xec>
 400bbb8:	1cc7883a 	add	r3,r3,r19
 400bbbc:	1cc00236 	bltu	r3,r19,400bbc8 <__umoddi3+0xec>
 400bbc0:	1880012e 	bgeu	r3,r2,400bbc8 <__umoddi3+0xec>
 400bbc4:	1cc7883a 	add	r3,r3,r19
 400bbc8:	18a1c83a 	sub	r16,r3,r2
 400bbcc:	8009883a 	mov	r4,r16
 400bbd0:	880b883a 	mov	r5,r17
 400bbd4:	400c21c0 	call	400c21c <__umodsi3>
 400bbd8:	8009883a 	mov	r4,r16
 400bbdc:	880b883a 	mov	r5,r17
 400bbe0:	102d883a 	mov	r22,r2
 400bbe4:	400c2140 	call	400c214 <__udivsi3>
 400bbe8:	1009883a 	mov	r4,r2
 400bbec:	a80b883a 	mov	r5,r21
 400bbf0:	b02c943a 	slli	r22,r22,16
 400bbf4:	400c2240 	call	400c224 <__mulsi3>
 400bbf8:	a13fffcc 	andi	r4,r20,65535
 400bbfc:	b106b03a 	or	r3,r22,r4
 400bc00:	1880572e 	bgeu	r3,r2,400bd60 <__umoddi3+0x284>
 400bc04:	00005206 	br	400bd50 <__umoddi3+0x274>
 400bc08:	29c05936 	bltu	r5,r7,400bd70 <__umoddi3+0x294>
 400bc0c:	00bfffd4 	movui	r2,65535
 400bc10:	11c0652e 	bgeu	r2,r7,400bda8 <__umoddi3+0x2cc>
 400bc14:	00804034 	movhi	r2,256
 400bc18:	10bfffc4 	addi	r2,r2,-1
 400bc1c:	11c1172e 	bgeu	r2,r7,400c07c <__umoddi3+0x5a0>
 400bc20:	01400604 	movi	r5,24
 400bc24:	282b883a 	mov	r21,r5
 400bc28:	394ad83a 	srl	r5,r7,r5
 400bc2c:	00c10074 	movhi	r3,1025
 400bc30:	18c6f604 	addi	r3,r3,7128
 400bc34:	194b883a 	add	r5,r3,r5
 400bc38:	28800003 	ldbu	r2,0(r5)
 400bc3c:	00c00804 	movi	r3,32
 400bc40:	156b883a 	add	r21,r2,r21
 400bc44:	1d69c83a 	sub	r20,r3,r21
 400bc48:	a000671e 	bne	r20,zero,400bde8 <__umoddi3+0x30c>
 400bc4c:	3c400136 	bltu	r7,r17,400bc54 <__umoddi3+0x178>
 400bc50:	81812336 	bltu	r16,r6,400c0e0 <__umoddi3+0x604>
 400bc54:	8185c83a 	sub	r2,r16,r6
 400bc58:	89e3c83a 	sub	r17,r17,r7
 400bc5c:	8087803a 	cmpltu	r3,r16,r2
 400bc60:	88edc83a 	sub	r22,r17,r3
 400bc64:	b007883a 	mov	r3,r22
 400bc68:	00004306 	br	400bd78 <__umoddi3+0x29c>
 400bc6c:	3000041e 	bne	r6,zero,400bc80 <__umoddi3+0x1a4>
 400bc70:	01000044 	movi	r4,1
 400bc74:	000b883a 	mov	r5,zero
 400bc78:	400c2140 	call	400c214 <__udivsi3>
 400bc7c:	1027883a 	mov	r19,r2
 400bc80:	00bfffd4 	movui	r2,65535
 400bc84:	14c0532e 	bgeu	r2,r19,400bdd4 <__umoddi3+0x2f8>
 400bc88:	00804034 	movhi	r2,256
 400bc8c:	10bfffc4 	addi	r2,r2,-1
 400bc90:	14c1032e 	bgeu	r2,r19,400c0a0 <__umoddi3+0x5c4>
 400bc94:	00800604 	movi	r2,24
 400bc98:	1007883a 	mov	r3,r2
 400bc9c:	9884d83a 	srl	r2,r19,r2
 400bca0:	01010074 	movhi	r4,1025
 400bca4:	2106f604 	addi	r4,r4,7128
 400bca8:	2085883a 	add	r2,r4,r2
 400bcac:	11000003 	ldbu	r4,0(r2)
 400bcb0:	00800804 	movi	r2,32
 400bcb4:	20c7883a 	add	r3,r4,r3
 400bcb8:	10c5c83a 	sub	r2,r2,r3
 400bcbc:	1000b61e 	bne	r2,zero,400bf98 <__umoddi3+0x4bc>
 400bcc0:	982ad43a 	srli	r21,r19,16
 400bcc4:	8ce3c83a 	sub	r17,r17,r19
 400bcc8:	9dbfffcc 	andi	r22,r19,65535
 400bccc:	0025883a 	mov	r18,zero
 400bcd0:	8809883a 	mov	r4,r17
 400bcd4:	a80b883a 	mov	r5,r21
 400bcd8:	400c21c0 	call	400c21c <__umodsi3>
 400bcdc:	8809883a 	mov	r4,r17
 400bce0:	a80b883a 	mov	r5,r21
 400bce4:	102f883a 	mov	r23,r2
 400bce8:	400c2140 	call	400c214 <__udivsi3>
 400bcec:	1009883a 	mov	r4,r2
 400bcf0:	b00b883a 	mov	r5,r22
 400bcf4:	400c2240 	call	400c224 <__mulsi3>
 400bcf8:	b82e943a 	slli	r23,r23,16
 400bcfc:	a008d43a 	srli	r4,r20,16
 400bd00:	b906b03a 	or	r3,r23,r4
 400bd04:	1880032e 	bgeu	r3,r2,400bd14 <__umoddi3+0x238>
 400bd08:	1cc7883a 	add	r3,r3,r19
 400bd0c:	1cc00136 	bltu	r3,r19,400bd14 <__umoddi3+0x238>
 400bd10:	1880f136 	bltu	r3,r2,400c0d8 <__umoddi3+0x5fc>
 400bd14:	18a1c83a 	sub	r16,r3,r2
 400bd18:	8009883a 	mov	r4,r16
 400bd1c:	a80b883a 	mov	r5,r21
 400bd20:	400c21c0 	call	400c21c <__umodsi3>
 400bd24:	8009883a 	mov	r4,r16
 400bd28:	a80b883a 	mov	r5,r21
 400bd2c:	1023883a 	mov	r17,r2
 400bd30:	400c2140 	call	400c214 <__udivsi3>
 400bd34:	1009883a 	mov	r4,r2
 400bd38:	b00b883a 	mov	r5,r22
 400bd3c:	8822943a 	slli	r17,r17,16
 400bd40:	400c2240 	call	400c224 <__mulsi3>
 400bd44:	a13fffcc 	andi	r4,r20,65535
 400bd48:	8906b03a 	or	r3,r17,r4
 400bd4c:	1880042e 	bgeu	r3,r2,400bd60 <__umoddi3+0x284>
 400bd50:	1cc7883a 	add	r3,r3,r19
 400bd54:	1cc00236 	bltu	r3,r19,400bd60 <__umoddi3+0x284>
 400bd58:	1880012e 	bgeu	r3,r2,400bd60 <__umoddi3+0x284>
 400bd5c:	1cc7883a 	add	r3,r3,r19
 400bd60:	1887c83a 	sub	r3,r3,r2
 400bd64:	1c84d83a 	srl	r2,r3,r18
 400bd68:	0007883a 	mov	r3,zero
 400bd6c:	00000206 	br	400bd78 <__umoddi3+0x29c>
 400bd70:	2005883a 	mov	r2,r4
 400bd74:	2807883a 	mov	r3,r5
 400bd78:	dfc00b17 	ldw	ra,44(sp)
 400bd7c:	df000a17 	ldw	fp,40(sp)
 400bd80:	ddc00917 	ldw	r23,36(sp)
 400bd84:	dd800817 	ldw	r22,32(sp)
 400bd88:	dd400717 	ldw	r21,28(sp)
 400bd8c:	dd000617 	ldw	r20,24(sp)
 400bd90:	dcc00517 	ldw	r19,20(sp)
 400bd94:	dc800417 	ldw	r18,16(sp)
 400bd98:	dc400317 	ldw	r17,12(sp)
 400bd9c:	dc000217 	ldw	r16,8(sp)
 400bda0:	dec00c04 	addi	sp,sp,48
 400bda4:	f800283a 	ret
 400bda8:	00803fc4 	movi	r2,255
 400bdac:	11c0b02e 	bgeu	r2,r7,400c070 <__umoddi3+0x594>
 400bdb0:	01400204 	movi	r5,8
 400bdb4:	282b883a 	mov	r21,r5
 400bdb8:	003f9b06 	br	400bc28 <__alt_data_end+0xfe00bc28>
 400bdbc:	00804034 	movhi	r2,256
 400bdc0:	10bfffc4 	addi	r2,r2,-1
 400bdc4:	1180b02e 	bgeu	r2,r6,400c088 <__umoddi3+0x5ac>
 400bdc8:	01400604 	movi	r5,24
 400bdcc:	2805883a 	mov	r2,r5
 400bdd0:	003f5a06 	br	400bb3c <__alt_data_end+0xfe00bb3c>
 400bdd4:	00803fc4 	movi	r2,255
 400bdd8:	14c0ae2e 	bgeu	r2,r19,400c094 <__umoddi3+0x5b8>
 400bddc:	00800204 	movi	r2,8
 400bde0:	1007883a 	mov	r3,r2
 400bde4:	003fad06 	br	400bc9c <__alt_data_end+0xfe00bc9c>
 400bde8:	3d0a983a 	sll	r5,r7,r20
 400bdec:	356cd83a 	srl	r22,r6,r21
 400bdf0:	8d78d83a 	srl	fp,r17,r21
 400bdf4:	8d10983a 	sll	r8,r17,r20
 400bdf8:	2dacb03a 	or	r22,r5,r22
 400bdfc:	b02ed43a 	srli	r23,r22,16
 400be00:	8564d83a 	srl	r18,r16,r21
 400be04:	e009883a 	mov	r4,fp
 400be08:	b80b883a 	mov	r5,r23
 400be0c:	44a4b03a 	or	r18,r8,r18
 400be10:	3526983a 	sll	r19,r6,r20
 400be14:	400c21c0 	call	400c21c <__umodsi3>
 400be18:	e009883a 	mov	r4,fp
 400be1c:	b80b883a 	mov	r5,r23
 400be20:	b47fffcc 	andi	r17,r22,65535
 400be24:	d8800015 	stw	r2,0(sp)
 400be28:	400c2140 	call	400c214 <__udivsi3>
 400be2c:	1009883a 	mov	r4,r2
 400be30:	880b883a 	mov	r5,r17
 400be34:	1039883a 	mov	fp,r2
 400be38:	400c2240 	call	400c224 <__mulsi3>
 400be3c:	d9800017 	ldw	r6,0(sp)
 400be40:	9008d43a 	srli	r4,r18,16
 400be44:	8520983a 	sll	r16,r16,r20
 400be48:	300c943a 	slli	r6,r6,16
 400be4c:	3106b03a 	or	r3,r6,r4
 400be50:	1880042e 	bgeu	r3,r2,400be64 <__umoddi3+0x388>
 400be54:	1d87883a 	add	r3,r3,r22
 400be58:	e13fffc4 	addi	r4,fp,-1
 400be5c:	1d809a2e 	bgeu	r3,r22,400c0c8 <__umoddi3+0x5ec>
 400be60:	2039883a 	mov	fp,r4
 400be64:	1887c83a 	sub	r3,r3,r2
 400be68:	1809883a 	mov	r4,r3
 400be6c:	b80b883a 	mov	r5,r23
 400be70:	d8c00115 	stw	r3,4(sp)
 400be74:	400c21c0 	call	400c21c <__umodsi3>
 400be78:	d8c00117 	ldw	r3,4(sp)
 400be7c:	b80b883a 	mov	r5,r23
 400be80:	d8800015 	stw	r2,0(sp)
 400be84:	1809883a 	mov	r4,r3
 400be88:	400c2140 	call	400c214 <__udivsi3>
 400be8c:	880b883a 	mov	r5,r17
 400be90:	1009883a 	mov	r4,r2
 400be94:	102f883a 	mov	r23,r2
 400be98:	400c2240 	call	400c224 <__mulsi3>
 400be9c:	d9800017 	ldw	r6,0(sp)
 400bea0:	947fffcc 	andi	r17,r18,65535
 400bea4:	300c943a 	slli	r6,r6,16
 400bea8:	3464b03a 	or	r18,r6,r17
 400beac:	9080042e 	bgeu	r18,r2,400bec0 <__umoddi3+0x3e4>
 400beb0:	95a5883a 	add	r18,r18,r22
 400beb4:	b8ffffc4 	addi	r3,r23,-1
 400beb8:	95807f2e 	bgeu	r18,r22,400c0b8 <__umoddi3+0x5dc>
 400bebc:	182f883a 	mov	r23,r3
 400bec0:	e038943a 	slli	fp,fp,16
 400bec4:	980cd43a 	srli	r6,r19,16
 400bec8:	98ffffcc 	andi	r3,r19,65535
 400becc:	bf38b03a 	or	fp,r23,fp
 400bed0:	e02ed43a 	srli	r23,fp,16
 400bed4:	e73fffcc 	andi	fp,fp,65535
 400bed8:	180b883a 	mov	r5,r3
 400bedc:	e009883a 	mov	r4,fp
 400bee0:	d9800015 	stw	r6,0(sp)
 400bee4:	d8c00115 	stw	r3,4(sp)
 400bee8:	90a5c83a 	sub	r18,r18,r2
 400beec:	400c2240 	call	400c224 <__mulsi3>
 400bef0:	d8c00117 	ldw	r3,4(sp)
 400bef4:	b809883a 	mov	r4,r23
 400bef8:	1023883a 	mov	r17,r2
 400befc:	180b883a 	mov	r5,r3
 400bf00:	400c2240 	call	400c224 <__mulsi3>
 400bf04:	d9800017 	ldw	r6,0(sp)
 400bf08:	b809883a 	mov	r4,r23
 400bf0c:	d8800115 	stw	r2,4(sp)
 400bf10:	300b883a 	mov	r5,r6
 400bf14:	302f883a 	mov	r23,r6
 400bf18:	400c2240 	call	400c224 <__mulsi3>
 400bf1c:	e009883a 	mov	r4,fp
 400bf20:	b80b883a 	mov	r5,r23
 400bf24:	d8800015 	stw	r2,0(sp)
 400bf28:	400c2240 	call	400c224 <__mulsi3>
 400bf2c:	d8c00117 	ldw	r3,4(sp)
 400bf30:	880cd43a 	srli	r6,r17,16
 400bf34:	d9c00017 	ldw	r7,0(sp)
 400bf38:	1885883a 	add	r2,r3,r2
 400bf3c:	118d883a 	add	r6,r2,r6
 400bf40:	30c0022e 	bgeu	r6,r3,400bf4c <__umoddi3+0x470>
 400bf44:	00800074 	movhi	r2,1
 400bf48:	388f883a 	add	r7,r7,r2
 400bf4c:	3006d43a 	srli	r3,r6,16
 400bf50:	300c943a 	slli	r6,r6,16
 400bf54:	8c7fffcc 	andi	r17,r17,65535
 400bf58:	38c7883a 	add	r3,r7,r3
 400bf5c:	3463883a 	add	r17,r6,r17
 400bf60:	90c03d36 	bltu	r18,r3,400c058 <__umoddi3+0x57c>
 400bf64:	90c06026 	beq	r18,r3,400c0e8 <__umoddi3+0x60c>
 400bf68:	90c9c83a 	sub	r4,r18,r3
 400bf6c:	880f883a 	mov	r7,r17
 400bf70:	81cfc83a 	sub	r7,r16,r7
 400bf74:	81c7803a 	cmpltu	r3,r16,r7
 400bf78:	20c7c83a 	sub	r3,r4,r3
 400bf7c:	1d44983a 	sll	r2,r3,r21
 400bf80:	3d0ed83a 	srl	r7,r7,r20
 400bf84:	1d06d83a 	srl	r3,r3,r20
 400bf88:	11c4b03a 	or	r2,r2,r7
 400bf8c:	003f7a06 	br	400bd78 <__alt_data_end+0xfe00bd78>
 400bf90:	0025883a 	mov	r18,zero
 400bf94:	003ef806 	br	400bb78 <__alt_data_end+0xfe00bb78>
 400bf98:	98a6983a 	sll	r19,r19,r2
 400bf9c:	88e8d83a 	srl	r20,r17,r3
 400bfa0:	80c6d83a 	srl	r3,r16,r3
 400bfa4:	982ad43a 	srli	r21,r19,16
 400bfa8:	88a2983a 	sll	r17,r17,r2
 400bfac:	a009883a 	mov	r4,r20
 400bfb0:	a80b883a 	mov	r5,r21
 400bfb4:	88eeb03a 	or	r23,r17,r3
 400bfb8:	1025883a 	mov	r18,r2
 400bfbc:	400c21c0 	call	400c21c <__umodsi3>
 400bfc0:	a009883a 	mov	r4,r20
 400bfc4:	a80b883a 	mov	r5,r21
 400bfc8:	1023883a 	mov	r17,r2
 400bfcc:	9dbfffcc 	andi	r22,r19,65535
 400bfd0:	400c2140 	call	400c214 <__udivsi3>
 400bfd4:	1009883a 	mov	r4,r2
 400bfd8:	b00b883a 	mov	r5,r22
 400bfdc:	400c2240 	call	400c224 <__mulsi3>
 400bfe0:	8822943a 	slli	r17,r17,16
 400bfe4:	b808d43a 	srli	r4,r23,16
 400bfe8:	84a8983a 	sll	r20,r16,r18
 400bfec:	8906b03a 	or	r3,r17,r4
 400bff0:	1880042e 	bgeu	r3,r2,400c004 <__umoddi3+0x528>
 400bff4:	1cc7883a 	add	r3,r3,r19
 400bff8:	1cc00236 	bltu	r3,r19,400c004 <__umoddi3+0x528>
 400bffc:	1880012e 	bgeu	r3,r2,400c004 <__umoddi3+0x528>
 400c000:	1cc7883a 	add	r3,r3,r19
 400c004:	18a1c83a 	sub	r16,r3,r2
 400c008:	8009883a 	mov	r4,r16
 400c00c:	a80b883a 	mov	r5,r21
 400c010:	400c21c0 	call	400c21c <__umodsi3>
 400c014:	8009883a 	mov	r4,r16
 400c018:	a80b883a 	mov	r5,r21
 400c01c:	1039883a 	mov	fp,r2
 400c020:	400c2140 	call	400c214 <__udivsi3>
 400c024:	1009883a 	mov	r4,r2
 400c028:	b00b883a 	mov	r5,r22
 400c02c:	400c2240 	call	400c224 <__mulsi3>
 400c030:	e006943a 	slli	r3,fp,16
 400c034:	b93fffcc 	andi	r4,r23,65535
 400c038:	1906b03a 	or	r3,r3,r4
 400c03c:	1880042e 	bgeu	r3,r2,400c050 <__umoddi3+0x574>
 400c040:	1cc7883a 	add	r3,r3,r19
 400c044:	1cc00236 	bltu	r3,r19,400c050 <__umoddi3+0x574>
 400c048:	1880012e 	bgeu	r3,r2,400c050 <__umoddi3+0x574>
 400c04c:	1cc7883a 	add	r3,r3,r19
 400c050:	18a3c83a 	sub	r17,r3,r2
 400c054:	003f1e06 	br	400bcd0 <__alt_data_end+0xfe00bcd0>
 400c058:	8ccfc83a 	sub	r7,r17,r19
 400c05c:	1d89c83a 	sub	r4,r3,r22
 400c060:	89e3803a 	cmpltu	r17,r17,r7
 400c064:	2463c83a 	sub	r17,r4,r17
 400c068:	9449c83a 	sub	r4,r18,r17
 400c06c:	003fc006 	br	400bf70 <__alt_data_end+0xfe00bf70>
 400c070:	000b883a 	mov	r5,zero
 400c074:	002b883a 	mov	r21,zero
 400c078:	003eeb06 	br	400bc28 <__alt_data_end+0xfe00bc28>
 400c07c:	01400404 	movi	r5,16
 400c080:	282b883a 	mov	r21,r5
 400c084:	003ee806 	br	400bc28 <__alt_data_end+0xfe00bc28>
 400c088:	01400404 	movi	r5,16
 400c08c:	2805883a 	mov	r2,r5
 400c090:	003eaa06 	br	400bb3c <__alt_data_end+0xfe00bb3c>
 400c094:	0005883a 	mov	r2,zero
 400c098:	0007883a 	mov	r3,zero
 400c09c:	003eff06 	br	400bc9c <__alt_data_end+0xfe00bc9c>
 400c0a0:	00800404 	movi	r2,16
 400c0a4:	1007883a 	mov	r3,r2
 400c0a8:	003efc06 	br	400bc9c <__alt_data_end+0xfe00bc9c>
 400c0ac:	000b883a 	mov	r5,zero
 400c0b0:	0005883a 	mov	r2,zero
 400c0b4:	003ea106 	br	400bb3c <__alt_data_end+0xfe00bb3c>
 400c0b8:	90bf802e 	bgeu	r18,r2,400bebc <__alt_data_end+0xfe00bebc>
 400c0bc:	bdffff84 	addi	r23,r23,-2
 400c0c0:	95a5883a 	add	r18,r18,r22
 400c0c4:	003f7e06 	br	400bec0 <__alt_data_end+0xfe00bec0>
 400c0c8:	18bf652e 	bgeu	r3,r2,400be60 <__alt_data_end+0xfe00be60>
 400c0cc:	e73fff84 	addi	fp,fp,-2
 400c0d0:	1d87883a 	add	r3,r3,r22
 400c0d4:	003f6306 	br	400be64 <__alt_data_end+0xfe00be64>
 400c0d8:	1cc7883a 	add	r3,r3,r19
 400c0dc:	003f0d06 	br	400bd14 <__alt_data_end+0xfe00bd14>
 400c0e0:	8005883a 	mov	r2,r16
 400c0e4:	003edf06 	br	400bc64 <__alt_data_end+0xfe00bc64>
 400c0e8:	847fdb36 	bltu	r16,r17,400c058 <__alt_data_end+0xfe00c058>
 400c0ec:	880f883a 	mov	r7,r17
 400c0f0:	0009883a 	mov	r4,zero
 400c0f4:	003f9e06 	br	400bf70 <__alt_data_end+0xfe00bf70>

0400c0f8 <udivmodsi4>:
 400c0f8:	2900182e 	bgeu	r5,r4,400c15c <udivmodsi4+0x64>
 400c0fc:	28001716 	blt	r5,zero,400c15c <udivmodsi4+0x64>
 400c100:	00800804 	movi	r2,32
 400c104:	00c00044 	movi	r3,1
 400c108:	00000206 	br	400c114 <udivmodsi4+0x1c>
 400c10c:	10001126 	beq	r2,zero,400c154 <udivmodsi4+0x5c>
 400c110:	28000516 	blt	r5,zero,400c128 <udivmodsi4+0x30>
 400c114:	294b883a 	add	r5,r5,r5
 400c118:	10bfffc4 	addi	r2,r2,-1
 400c11c:	18c7883a 	add	r3,r3,r3
 400c120:	293ffa36 	bltu	r5,r4,400c10c <__alt_data_end+0xfe00c10c>
 400c124:	18000b26 	beq	r3,zero,400c154 <udivmodsi4+0x5c>
 400c128:	0005883a 	mov	r2,zero
 400c12c:	21400236 	bltu	r4,r5,400c138 <udivmodsi4+0x40>
 400c130:	2149c83a 	sub	r4,r4,r5
 400c134:	10c4b03a 	or	r2,r2,r3
 400c138:	1806d07a 	srli	r3,r3,1
 400c13c:	280ad07a 	srli	r5,r5,1
 400c140:	183ffa1e 	bne	r3,zero,400c12c <__alt_data_end+0xfe00c12c>
 400c144:	3000011e 	bne	r6,zero,400c14c <udivmodsi4+0x54>
 400c148:	f800283a 	ret
 400c14c:	2005883a 	mov	r2,r4
 400c150:	f800283a 	ret
 400c154:	0005883a 	mov	r2,zero
 400c158:	003ffa06 	br	400c144 <__alt_data_end+0xfe00c144>
 400c15c:	00c00044 	movi	r3,1
 400c160:	003ff106 	br	400c128 <__alt_data_end+0xfe00c128>

0400c164 <__divsi3>:
 400c164:	defffe04 	addi	sp,sp,-8
 400c168:	dfc00115 	stw	ra,4(sp)
 400c16c:	dc000015 	stw	r16,0(sp)
 400c170:	20000b16 	blt	r4,zero,400c1a0 <__divsi3+0x3c>
 400c174:	0021883a 	mov	r16,zero
 400c178:	28000c16 	blt	r5,zero,400c1ac <__divsi3+0x48>
 400c17c:	000d883a 	mov	r6,zero
 400c180:	400c0f80 	call	400c0f8 <udivmodsi4>
 400c184:	0407c83a 	sub	r3,zero,r16
 400c188:	1884f03a 	xor	r2,r3,r2
 400c18c:	1405883a 	add	r2,r2,r16
 400c190:	dfc00117 	ldw	ra,4(sp)
 400c194:	dc000017 	ldw	r16,0(sp)
 400c198:	dec00204 	addi	sp,sp,8
 400c19c:	f800283a 	ret
 400c1a0:	0109c83a 	sub	r4,zero,r4
 400c1a4:	04000044 	movi	r16,1
 400c1a8:	283ff40e 	bge	r5,zero,400c17c <__alt_data_end+0xfe00c17c>
 400c1ac:	014bc83a 	sub	r5,zero,r5
 400c1b0:	8400005c 	xori	r16,r16,1
 400c1b4:	003ff106 	br	400c17c <__alt_data_end+0xfe00c17c>

0400c1b8 <__modsi3>:
 400c1b8:	defffd04 	addi	sp,sp,-12
 400c1bc:	dfc00215 	stw	ra,8(sp)
 400c1c0:	dc400115 	stw	r17,4(sp)
 400c1c4:	dc000015 	stw	r16,0(sp)
 400c1c8:	20000c16 	blt	r4,zero,400c1fc <__modsi3+0x44>
 400c1cc:	0023883a 	mov	r17,zero
 400c1d0:	0021883a 	mov	r16,zero
 400c1d4:	28000d16 	blt	r5,zero,400c20c <__modsi3+0x54>
 400c1d8:	01800044 	movi	r6,1
 400c1dc:	400c0f80 	call	400c0f8 <udivmodsi4>
 400c1e0:	1404f03a 	xor	r2,r2,r16
 400c1e4:	8885883a 	add	r2,r17,r2
 400c1e8:	dfc00217 	ldw	ra,8(sp)
 400c1ec:	dc400117 	ldw	r17,4(sp)
 400c1f0:	dc000017 	ldw	r16,0(sp)
 400c1f4:	dec00304 	addi	sp,sp,12
 400c1f8:	f800283a 	ret
 400c1fc:	0109c83a 	sub	r4,zero,r4
 400c200:	04400044 	movi	r17,1
 400c204:	043fffc4 	movi	r16,-1
 400c208:	283ff30e 	bge	r5,zero,400c1d8 <__alt_data_end+0xfe00c1d8>
 400c20c:	014bc83a 	sub	r5,zero,r5
 400c210:	003ff106 	br	400c1d8 <__alt_data_end+0xfe00c1d8>

0400c214 <__udivsi3>:
 400c214:	000d883a 	mov	r6,zero
 400c218:	400c0f81 	jmpi	400c0f8 <udivmodsi4>

0400c21c <__umodsi3>:
 400c21c:	01800044 	movi	r6,1
 400c220:	400c0f81 	jmpi	400c0f8 <udivmodsi4>

0400c224 <__mulsi3>:
 400c224:	0005883a 	mov	r2,zero
 400c228:	20000726 	beq	r4,zero,400c248 <__mulsi3+0x24>
 400c22c:	20c0004c 	andi	r3,r4,1
 400c230:	2008d07a 	srli	r4,r4,1
 400c234:	18000126 	beq	r3,zero,400c23c <__mulsi3+0x18>
 400c238:	1145883a 	add	r2,r2,r5
 400c23c:	294b883a 	add	r5,r5,r5
 400c240:	203ffa1e 	bne	r4,zero,400c22c <__alt_data_end+0xfe00c22c>
 400c244:	f800283a 	ret
 400c248:	f800283a 	ret

0400c24c <__adddf3>:
 400c24c:	02000434 	movhi	r8,16
 400c250:	423fffc4 	addi	r8,r8,-1
 400c254:	defffb04 	addi	sp,sp,-20
 400c258:	2a12703a 	and	r9,r5,r8
 400c25c:	2806d7fa 	srli	r3,r5,31
 400c260:	3a10703a 	and	r8,r7,r8
 400c264:	3804d53a 	srli	r2,r7,20
 400c268:	3014d77a 	srli	r10,r6,29
 400c26c:	dc000015 	stw	r16,0(sp)
 400c270:	481290fa 	slli	r9,r9,3
 400c274:	2820d53a 	srli	r16,r5,20
 400c278:	401090fa 	slli	r8,r8,3
 400c27c:	200ad77a 	srli	r5,r4,29
 400c280:	380ed7fa 	srli	r7,r7,31
 400c284:	dc800215 	stw	r18,8(sp)
 400c288:	dc400115 	stw	r17,4(sp)
 400c28c:	dfc00415 	stw	ra,16(sp)
 400c290:	dcc00315 	stw	r19,12(sp)
 400c294:	1c803fcc 	andi	r18,r3,255
 400c298:	8401ffcc 	andi	r16,r16,2047
 400c29c:	494ab03a 	or	r5,r9,r5
 400c2a0:	202290fa 	slli	r17,r4,3
 400c2a4:	1081ffcc 	andi	r2,r2,2047
 400c2a8:	4290b03a 	or	r8,r8,r10
 400c2ac:	300c90fa 	slli	r6,r6,3
 400c2b0:	91c07026 	beq	r18,r7,400c474 <__adddf3+0x228>
 400c2b4:	8087c83a 	sub	r3,r16,r2
 400c2b8:	00c0b30e 	bge	zero,r3,400c588 <__adddf3+0x33c>
 400c2bc:	10002a1e 	bne	r2,zero,400c368 <__adddf3+0x11c>
 400c2c0:	4184b03a 	or	r2,r8,r6
 400c2c4:	1000991e 	bne	r2,zero,400c52c <__adddf3+0x2e0>
 400c2c8:	888001cc 	andi	r2,r17,7
 400c2cc:	10005b26 	beq	r2,zero,400c43c <__adddf3+0x1f0>
 400c2d0:	88c003cc 	andi	r3,r17,15
 400c2d4:	00800104 	movi	r2,4
 400c2d8:	18805826 	beq	r3,r2,400c43c <__adddf3+0x1f0>
 400c2dc:	89800104 	addi	r6,r17,4
 400c2e0:	3463803a 	cmpltu	r17,r6,r17
 400c2e4:	2c4b883a 	add	r5,r5,r17
 400c2e8:	2880202c 	andhi	r2,r5,128
 400c2ec:	9007883a 	mov	r3,r18
 400c2f0:	3023883a 	mov	r17,r6
 400c2f4:	10005426 	beq	r2,zero,400c448 <__adddf3+0x1fc>
 400c2f8:	84000044 	addi	r16,r16,1
 400c2fc:	0081ffc4 	movi	r2,2047
 400c300:	8080c126 	beq	r16,r2,400c608 <__adddf3+0x3bc>
 400c304:	013fe034 	movhi	r4,65408
 400c308:	213fffc4 	addi	r4,r4,-1
 400c30c:	290a703a 	and	r5,r5,r4
 400c310:	2804977a 	slli	r2,r5,29
 400c314:	280a927a 	slli	r5,r5,9
 400c318:	8822d0fa 	srli	r17,r17,3
 400c31c:	8401ffcc 	andi	r16,r16,2047
 400c320:	2808d33a 	srli	r4,r5,12
 400c324:	1444b03a 	or	r2,r2,r17
 400c328:	8401ffcc 	andi	r16,r16,2047
 400c32c:	800a953a 	slli	r5,r16,20
 400c330:	18c03fcc 	andi	r3,r3,255
 400c334:	04000434 	movhi	r16,16
 400c338:	180697fa 	slli	r3,r3,31
 400c33c:	843fffc4 	addi	r16,r16,-1
 400c340:	2420703a 	and	r16,r4,r16
 400c344:	8160b03a 	or	r16,r16,r5
 400c348:	80c6b03a 	or	r3,r16,r3
 400c34c:	dfc00417 	ldw	ra,16(sp)
 400c350:	dcc00317 	ldw	r19,12(sp)
 400c354:	dc800217 	ldw	r18,8(sp)
 400c358:	dc400117 	ldw	r17,4(sp)
 400c35c:	dc000017 	ldw	r16,0(sp)
 400c360:	dec00504 	addi	sp,sp,20
 400c364:	f800283a 	ret
 400c368:	0081ffc4 	movi	r2,2047
 400c36c:	80bfd626 	beq	r16,r2,400c2c8 <__alt_data_end+0xfe00c2c8>
 400c370:	42002034 	orhi	r8,r8,128
 400c374:	00800e04 	movi	r2,56
 400c378:	10c0a616 	blt	r2,r3,400c614 <__adddf3+0x3c8>
 400c37c:	008007c4 	movi	r2,31
 400c380:	10c0c916 	blt	r2,r3,400c6a8 <__adddf3+0x45c>
 400c384:	00800804 	movi	r2,32
 400c388:	10c5c83a 	sub	r2,r2,r3
 400c38c:	408e983a 	sll	r7,r8,r2
 400c390:	30c8d83a 	srl	r4,r6,r3
 400c394:	3084983a 	sll	r2,r6,r2
 400c398:	40c6d83a 	srl	r3,r8,r3
 400c39c:	390cb03a 	or	r6,r7,r4
 400c3a0:	1004c03a 	cmpne	r2,r2,zero
 400c3a4:	308cb03a 	or	r6,r6,r2
 400c3a8:	898dc83a 	sub	r6,r17,r6
 400c3ac:	89a3803a 	cmpltu	r17,r17,r6
 400c3b0:	28cbc83a 	sub	r5,r5,r3
 400c3b4:	2c4bc83a 	sub	r5,r5,r17
 400c3b8:	3023883a 	mov	r17,r6
 400c3bc:	2880202c 	andhi	r2,r5,128
 400c3c0:	10006d26 	beq	r2,zero,400c578 <__adddf3+0x32c>
 400c3c4:	04c02034 	movhi	r19,128
 400c3c8:	9cffffc4 	addi	r19,r19,-1
 400c3cc:	2ce6703a 	and	r19,r5,r19
 400c3d0:	98007e26 	beq	r19,zero,400c5cc <__adddf3+0x380>
 400c3d4:	9809883a 	mov	r4,r19
 400c3d8:	400e9e40 	call	400e9e4 <__clzsi2>
 400c3dc:	10fffe04 	addi	r3,r2,-8
 400c3e0:	010007c4 	movi	r4,31
 400c3e4:	20c07f16 	blt	r4,r3,400c5e4 <__adddf3+0x398>
 400c3e8:	01400a04 	movi	r5,40
 400c3ec:	2885c83a 	sub	r2,r5,r2
 400c3f0:	888ad83a 	srl	r5,r17,r2
 400c3f4:	98e6983a 	sll	r19,r19,r3
 400c3f8:	88e2983a 	sll	r17,r17,r3
 400c3fc:	2ce6b03a 	or	r19,r5,r19
 400c400:	1c007c16 	blt	r3,r16,400c5f4 <__adddf3+0x3a8>
 400c404:	1c21c83a 	sub	r16,r3,r16
 400c408:	81400044 	addi	r5,r16,1
 400c40c:	00c007c4 	movi	r3,31
 400c410:	19409816 	blt	r3,r5,400c674 <__adddf3+0x428>
 400c414:	1c21c83a 	sub	r16,r3,r16
 400c418:	8c08983a 	sll	r4,r17,r16
 400c41c:	8946d83a 	srl	r3,r17,r5
 400c420:	9c20983a 	sll	r16,r19,r16
 400c424:	2008c03a 	cmpne	r4,r4,zero
 400c428:	994ad83a 	srl	r5,r19,r5
 400c42c:	1c06b03a 	or	r3,r3,r16
 400c430:	1922b03a 	or	r17,r3,r4
 400c434:	0021883a 	mov	r16,zero
 400c438:	003fa306 	br	400c2c8 <__alt_data_end+0xfe00c2c8>
 400c43c:	2880202c 	andhi	r2,r5,128
 400c440:	9007883a 	mov	r3,r18
 400c444:	103fac1e 	bne	r2,zero,400c2f8 <__alt_data_end+0xfe00c2f8>
 400c448:	2804977a 	slli	r2,r5,29
 400c44c:	8822d0fa 	srli	r17,r17,3
 400c450:	0101ffc4 	movi	r4,2047
 400c454:	280ad0fa 	srli	r5,r5,3
 400c458:	1444b03a 	or	r2,r2,r17
 400c45c:	81002c26 	beq	r16,r4,400c510 <__adddf3+0x2c4>
 400c460:	8120703a 	and	r16,r16,r4
 400c464:	01000434 	movhi	r4,16
 400c468:	213fffc4 	addi	r4,r4,-1
 400c46c:	2908703a 	and	r4,r5,r4
 400c470:	003fad06 	br	400c328 <__alt_data_end+0xfe00c328>
 400c474:	8089c83a 	sub	r4,r16,r2
 400c478:	01006a0e 	bge	zero,r4,400c624 <__adddf3+0x3d8>
 400c47c:	10003326 	beq	r2,zero,400c54c <__adddf3+0x300>
 400c480:	0081ffc4 	movi	r2,2047
 400c484:	80bf9026 	beq	r16,r2,400c2c8 <__alt_data_end+0xfe00c2c8>
 400c488:	42002034 	orhi	r8,r8,128
 400c48c:	00800e04 	movi	r2,56
 400c490:	1100b116 	blt	r2,r4,400c758 <__adddf3+0x50c>
 400c494:	008007c4 	movi	r2,31
 400c498:	1100e216 	blt	r2,r4,400c824 <__adddf3+0x5d8>
 400c49c:	00800804 	movi	r2,32
 400c4a0:	1105c83a 	sub	r2,r2,r4
 400c4a4:	4092983a 	sll	r9,r8,r2
 400c4a8:	310ed83a 	srl	r7,r6,r4
 400c4ac:	3084983a 	sll	r2,r6,r2
 400c4b0:	4110d83a 	srl	r8,r8,r4
 400c4b4:	49ccb03a 	or	r6,r9,r7
 400c4b8:	1004c03a 	cmpne	r2,r2,zero
 400c4bc:	308cb03a 	or	r6,r6,r2
 400c4c0:	344d883a 	add	r6,r6,r17
 400c4c4:	3463803a 	cmpltu	r17,r6,r17
 400c4c8:	414b883a 	add	r5,r8,r5
 400c4cc:	2c4b883a 	add	r5,r5,r17
 400c4d0:	3023883a 	mov	r17,r6
 400c4d4:	2880202c 	andhi	r2,r5,128
 400c4d8:	10002726 	beq	r2,zero,400c578 <__adddf3+0x32c>
 400c4dc:	84000044 	addi	r16,r16,1
 400c4e0:	0081ffc4 	movi	r2,2047
 400c4e4:	8080ae26 	beq	r16,r2,400c7a0 <__adddf3+0x554>
 400c4e8:	00bfe034 	movhi	r2,65408
 400c4ec:	10bfffc4 	addi	r2,r2,-1
 400c4f0:	288a703a 	and	r5,r5,r2
 400c4f4:	880cd07a 	srli	r6,r17,1
 400c4f8:	280897fa 	slli	r4,r5,31
 400c4fc:	88c0004c 	andi	r3,r17,1
 400c500:	30e2b03a 	or	r17,r6,r3
 400c504:	280ad07a 	srli	r5,r5,1
 400c508:	8922b03a 	or	r17,r17,r4
 400c50c:	003f6e06 	br	400c2c8 <__alt_data_end+0xfe00c2c8>
 400c510:	1148b03a 	or	r4,r2,r5
 400c514:	20003c26 	beq	r4,zero,400c608 <__adddf3+0x3bc>
 400c518:	29000234 	orhi	r4,r5,8
 400c51c:	01400434 	movhi	r5,16
 400c520:	297fffc4 	addi	r5,r5,-1
 400c524:	2148703a 	and	r4,r4,r5
 400c528:	003f7f06 	br	400c328 <__alt_data_end+0xfe00c328>
 400c52c:	18ffffc4 	addi	r3,r3,-1
 400c530:	18004d1e 	bne	r3,zero,400c668 <__adddf3+0x41c>
 400c534:	898dc83a 	sub	r6,r17,r6
 400c538:	89a3803a 	cmpltu	r17,r17,r6
 400c53c:	2a0bc83a 	sub	r5,r5,r8
 400c540:	2c4bc83a 	sub	r5,r5,r17
 400c544:	3023883a 	mov	r17,r6
 400c548:	003f9c06 	br	400c3bc <__alt_data_end+0xfe00c3bc>
 400c54c:	4184b03a 	or	r2,r8,r6
 400c550:	103f5d26 	beq	r2,zero,400c2c8 <__alt_data_end+0xfe00c2c8>
 400c554:	213fffc4 	addi	r4,r4,-1
 400c558:	203fd926 	beq	r4,zero,400c4c0 <__alt_data_end+0xfe00c4c0>
 400c55c:	0081ffc4 	movi	r2,2047
 400c560:	80bfca1e 	bne	r16,r2,400c48c <__alt_data_end+0xfe00c48c>
 400c564:	003f5806 	br	400c2c8 <__alt_data_end+0xfe00c2c8>
 400c568:	10c8b03a 	or	r4,r2,r3
 400c56c:	20008b26 	beq	r4,zero,400c79c <__adddf3+0x550>
 400c570:	100b883a 	mov	r5,r2
 400c574:	1823883a 	mov	r17,r3
 400c578:	888001cc 	andi	r2,r17,7
 400c57c:	103f541e 	bne	r2,zero,400c2d0 <__alt_data_end+0xfe00c2d0>
 400c580:	9007883a 	mov	r3,r18
 400c584:	003fb006 	br	400c448 <__alt_data_end+0xfe00c448>
 400c588:	1800531e 	bne	r3,zero,400c6d8 <__adddf3+0x48c>
 400c58c:	80800044 	addi	r2,r16,1
 400c590:	1081ffcc 	andi	r2,r2,2047
 400c594:	00c00044 	movi	r3,1
 400c598:	1880990e 	bge	r3,r2,400c800 <__adddf3+0x5b4>
 400c59c:	8985c83a 	sub	r2,r17,r6
 400c5a0:	8887803a 	cmpltu	r3,r17,r2
 400c5a4:	2a27c83a 	sub	r19,r5,r8
 400c5a8:	98e7c83a 	sub	r19,r19,r3
 400c5ac:	98c0202c 	andhi	r3,r19,128
 400c5b0:	18006226 	beq	r3,zero,400c73c <__adddf3+0x4f0>
 400c5b4:	3463c83a 	sub	r17,r6,r17
 400c5b8:	4151c83a 	sub	r8,r8,r5
 400c5bc:	344d803a 	cmpltu	r6,r6,r17
 400c5c0:	41a7c83a 	sub	r19,r8,r6
 400c5c4:	3825883a 	mov	r18,r7
 400c5c8:	983f821e 	bne	r19,zero,400c3d4 <__alt_data_end+0xfe00c3d4>
 400c5cc:	8809883a 	mov	r4,r17
 400c5d0:	400e9e40 	call	400e9e4 <__clzsi2>
 400c5d4:	10800804 	addi	r2,r2,32
 400c5d8:	10fffe04 	addi	r3,r2,-8
 400c5dc:	010007c4 	movi	r4,31
 400c5e0:	20ff810e 	bge	r4,r3,400c3e8 <__alt_data_end+0xfe00c3e8>
 400c5e4:	14fff604 	addi	r19,r2,-40
 400c5e8:	8ce6983a 	sll	r19,r17,r19
 400c5ec:	0023883a 	mov	r17,zero
 400c5f0:	1c3f840e 	bge	r3,r16,400c404 <__alt_data_end+0xfe00c404>
 400c5f4:	017fe034 	movhi	r5,65408
 400c5f8:	297fffc4 	addi	r5,r5,-1
 400c5fc:	80e1c83a 	sub	r16,r16,r3
 400c600:	994a703a 	and	r5,r19,r5
 400c604:	003f3006 	br	400c2c8 <__alt_data_end+0xfe00c2c8>
 400c608:	0009883a 	mov	r4,zero
 400c60c:	0005883a 	mov	r2,zero
 400c610:	003f4506 	br	400c328 <__alt_data_end+0xfe00c328>
 400c614:	418cb03a 	or	r6,r8,r6
 400c618:	300cc03a 	cmpne	r6,r6,zero
 400c61c:	0007883a 	mov	r3,zero
 400c620:	003f6106 	br	400c3a8 <__alt_data_end+0xfe00c3a8>
 400c624:	2000921e 	bne	r4,zero,400c870 <__adddf3+0x624>
 400c628:	80800044 	addi	r2,r16,1
 400c62c:	11c1ffcc 	andi	r7,r2,2047
 400c630:	01000044 	movi	r4,1
 400c634:	21c0610e 	bge	r4,r7,400c7bc <__adddf3+0x570>
 400c638:	0101ffc4 	movi	r4,2047
 400c63c:	1100a326 	beq	r2,r4,400c8cc <__adddf3+0x680>
 400c640:	344d883a 	add	r6,r6,r17
 400c644:	3463803a 	cmpltu	r17,r6,r17
 400c648:	414b883a 	add	r5,r8,r5
 400c64c:	2c4b883a 	add	r5,r5,r17
 400c650:	282297fa 	slli	r17,r5,31
 400c654:	300cd07a 	srli	r6,r6,1
 400c658:	280ad07a 	srli	r5,r5,1
 400c65c:	1021883a 	mov	r16,r2
 400c660:	89a2b03a 	or	r17,r17,r6
 400c664:	003f1806 	br	400c2c8 <__alt_data_end+0xfe00c2c8>
 400c668:	0081ffc4 	movi	r2,2047
 400c66c:	80bf411e 	bne	r16,r2,400c374 <__alt_data_end+0xfe00c374>
 400c670:	003f1506 	br	400c2c8 <__alt_data_end+0xfe00c2c8>
 400c674:	80bff844 	addi	r2,r16,-31
 400c678:	00c00804 	movi	r3,32
 400c67c:	9884d83a 	srl	r2,r19,r2
 400c680:	28c04a26 	beq	r5,r3,400c7ac <__adddf3+0x560>
 400c684:	00c00fc4 	movi	r3,63
 400c688:	1c21c83a 	sub	r16,r3,r16
 400c68c:	9c26983a 	sll	r19,r19,r16
 400c690:	9c62b03a 	or	r17,r19,r17
 400c694:	8822c03a 	cmpne	r17,r17,zero
 400c698:	88a2b03a 	or	r17,r17,r2
 400c69c:	000b883a 	mov	r5,zero
 400c6a0:	0021883a 	mov	r16,zero
 400c6a4:	003fb406 	br	400c578 <__alt_data_end+0xfe00c578>
 400c6a8:	18bff804 	addi	r2,r3,-32
 400c6ac:	01000804 	movi	r4,32
 400c6b0:	4084d83a 	srl	r2,r8,r2
 400c6b4:	19003f26 	beq	r3,r4,400c7b4 <__adddf3+0x568>
 400c6b8:	01001004 	movi	r4,64
 400c6bc:	20c7c83a 	sub	r3,r4,r3
 400c6c0:	40d0983a 	sll	r8,r8,r3
 400c6c4:	418cb03a 	or	r6,r8,r6
 400c6c8:	300cc03a 	cmpne	r6,r6,zero
 400c6cc:	308cb03a 	or	r6,r6,r2
 400c6d0:	0007883a 	mov	r3,zero
 400c6d4:	003f3406 	br	400c3a8 <__alt_data_end+0xfe00c3a8>
 400c6d8:	80002326 	beq	r16,zero,400c768 <__adddf3+0x51c>
 400c6dc:	0101ffc4 	movi	r4,2047
 400c6e0:	11005e26 	beq	r2,r4,400c85c <__adddf3+0x610>
 400c6e4:	00c7c83a 	sub	r3,zero,r3
 400c6e8:	29402034 	orhi	r5,r5,128
 400c6ec:	01000e04 	movi	r4,56
 400c6f0:	20c07216 	blt	r4,r3,400c8bc <__adddf3+0x670>
 400c6f4:	010007c4 	movi	r4,31
 400c6f8:	20c0ce16 	blt	r4,r3,400ca34 <__adddf3+0x7e8>
 400c6fc:	01000804 	movi	r4,32
 400c700:	20c9c83a 	sub	r4,r4,r3
 400c704:	2914983a 	sll	r10,r5,r4
 400c708:	88d2d83a 	srl	r9,r17,r3
 400c70c:	8908983a 	sll	r4,r17,r4
 400c710:	28c6d83a 	srl	r3,r5,r3
 400c714:	5262b03a 	or	r17,r10,r9
 400c718:	2008c03a 	cmpne	r4,r4,zero
 400c71c:	8922b03a 	or	r17,r17,r4
 400c720:	3463c83a 	sub	r17,r6,r17
 400c724:	40c7c83a 	sub	r3,r8,r3
 400c728:	344d803a 	cmpltu	r6,r6,r17
 400c72c:	198bc83a 	sub	r5,r3,r6
 400c730:	1021883a 	mov	r16,r2
 400c734:	3825883a 	mov	r18,r7
 400c738:	003f2006 	br	400c3bc <__alt_data_end+0xfe00c3bc>
 400c73c:	9886b03a 	or	r3,r19,r2
 400c740:	1800141e 	bne	r3,zero,400c794 <__adddf3+0x548>
 400c744:	0007883a 	mov	r3,zero
 400c748:	000b883a 	mov	r5,zero
 400c74c:	0023883a 	mov	r17,zero
 400c750:	0021883a 	mov	r16,zero
 400c754:	003f3c06 	br	400c448 <__alt_data_end+0xfe00c448>
 400c758:	418cb03a 	or	r6,r8,r6
 400c75c:	300cc03a 	cmpne	r6,r6,zero
 400c760:	0011883a 	mov	r8,zero
 400c764:	003f5606 	br	400c4c0 <__alt_data_end+0xfe00c4c0>
 400c768:	2c48b03a 	or	r4,r5,r17
 400c76c:	20003b26 	beq	r4,zero,400c85c <__adddf3+0x610>
 400c770:	00c6303a 	nor	r3,zero,r3
 400c774:	1800371e 	bne	r3,zero,400c854 <__adddf3+0x608>
 400c778:	3463c83a 	sub	r17,r6,r17
 400c77c:	414bc83a 	sub	r5,r8,r5
 400c780:	344d803a 	cmpltu	r6,r6,r17
 400c784:	298bc83a 	sub	r5,r5,r6
 400c788:	1021883a 	mov	r16,r2
 400c78c:	3825883a 	mov	r18,r7
 400c790:	003f0a06 	br	400c3bc <__alt_data_end+0xfe00c3bc>
 400c794:	1023883a 	mov	r17,r2
 400c798:	003f0d06 	br	400c3d0 <__alt_data_end+0xfe00c3d0>
 400c79c:	0007883a 	mov	r3,zero
 400c7a0:	000b883a 	mov	r5,zero
 400c7a4:	0023883a 	mov	r17,zero
 400c7a8:	003f2706 	br	400c448 <__alt_data_end+0xfe00c448>
 400c7ac:	0027883a 	mov	r19,zero
 400c7b0:	003fb706 	br	400c690 <__alt_data_end+0xfe00c690>
 400c7b4:	0011883a 	mov	r8,zero
 400c7b8:	003fc206 	br	400c6c4 <__alt_data_end+0xfe00c6c4>
 400c7bc:	2c44b03a 	or	r2,r5,r17
 400c7c0:	8000871e 	bne	r16,zero,400c9e0 <__adddf3+0x794>
 400c7c4:	1000b126 	beq	r2,zero,400ca8c <__adddf3+0x840>
 400c7c8:	4184b03a 	or	r2,r8,r6
 400c7cc:	103ebe26 	beq	r2,zero,400c2c8 <__alt_data_end+0xfe00c2c8>
 400c7d0:	3445883a 	add	r2,r6,r17
 400c7d4:	1463803a 	cmpltu	r17,r2,r17
 400c7d8:	414b883a 	add	r5,r8,r5
 400c7dc:	2c4b883a 	add	r5,r5,r17
 400c7e0:	28c0202c 	andhi	r3,r5,128
 400c7e4:	1023883a 	mov	r17,r2
 400c7e8:	183f6326 	beq	r3,zero,400c578 <__alt_data_end+0xfe00c578>
 400c7ec:	00bfe034 	movhi	r2,65408
 400c7f0:	10bfffc4 	addi	r2,r2,-1
 400c7f4:	2021883a 	mov	r16,r4
 400c7f8:	288a703a 	and	r5,r5,r2
 400c7fc:	003eb206 	br	400c2c8 <__alt_data_end+0xfe00c2c8>
 400c800:	2c44b03a 	or	r2,r5,r17
 400c804:	8000251e 	bne	r16,zero,400c89c <__adddf3+0x650>
 400c808:	10004b1e 	bne	r2,zero,400c938 <__adddf3+0x6ec>
 400c80c:	4184b03a 	or	r2,r8,r6
 400c810:	103fe226 	beq	r2,zero,400c79c <__alt_data_end+0xfe00c79c>
 400c814:	400b883a 	mov	r5,r8
 400c818:	3023883a 	mov	r17,r6
 400c81c:	3825883a 	mov	r18,r7
 400c820:	003ea906 	br	400c2c8 <__alt_data_end+0xfe00c2c8>
 400c824:	20bff804 	addi	r2,r4,-32
 400c828:	01c00804 	movi	r7,32
 400c82c:	4084d83a 	srl	r2,r8,r2
 400c830:	21c07e26 	beq	r4,r7,400ca2c <__adddf3+0x7e0>
 400c834:	01c01004 	movi	r7,64
 400c838:	3909c83a 	sub	r4,r7,r4
 400c83c:	4110983a 	sll	r8,r8,r4
 400c840:	418cb03a 	or	r6,r8,r6
 400c844:	300cc03a 	cmpne	r6,r6,zero
 400c848:	308cb03a 	or	r6,r6,r2
 400c84c:	0011883a 	mov	r8,zero
 400c850:	003f1b06 	br	400c4c0 <__alt_data_end+0xfe00c4c0>
 400c854:	0101ffc4 	movi	r4,2047
 400c858:	113fa41e 	bne	r2,r4,400c6ec <__alt_data_end+0xfe00c6ec>
 400c85c:	400b883a 	mov	r5,r8
 400c860:	3023883a 	mov	r17,r6
 400c864:	1021883a 	mov	r16,r2
 400c868:	3825883a 	mov	r18,r7
 400c86c:	003e9606 	br	400c2c8 <__alt_data_end+0xfe00c2c8>
 400c870:	80001a1e 	bne	r16,zero,400c8dc <__adddf3+0x690>
 400c874:	2c4eb03a 	or	r7,r5,r17
 400c878:	38005526 	beq	r7,zero,400c9d0 <__adddf3+0x784>
 400c87c:	0108303a 	nor	r4,zero,r4
 400c880:	2000511e 	bne	r4,zero,400c9c8 <__adddf3+0x77c>
 400c884:	89a3883a 	add	r17,r17,r6
 400c888:	414b883a 	add	r5,r8,r5
 400c88c:	898d803a 	cmpltu	r6,r17,r6
 400c890:	298b883a 	add	r5,r5,r6
 400c894:	1021883a 	mov	r16,r2
 400c898:	003f0e06 	br	400c4d4 <__alt_data_end+0xfe00c4d4>
 400c89c:	1000341e 	bne	r2,zero,400c970 <__adddf3+0x724>
 400c8a0:	4184b03a 	or	r2,r8,r6
 400c8a4:	10006f26 	beq	r2,zero,400ca64 <__adddf3+0x818>
 400c8a8:	400b883a 	mov	r5,r8
 400c8ac:	3023883a 	mov	r17,r6
 400c8b0:	3825883a 	mov	r18,r7
 400c8b4:	0401ffc4 	movi	r16,2047
 400c8b8:	003e8306 	br	400c2c8 <__alt_data_end+0xfe00c2c8>
 400c8bc:	2c62b03a 	or	r17,r5,r17
 400c8c0:	8822c03a 	cmpne	r17,r17,zero
 400c8c4:	0007883a 	mov	r3,zero
 400c8c8:	003f9506 	br	400c720 <__alt_data_end+0xfe00c720>
 400c8cc:	1021883a 	mov	r16,r2
 400c8d0:	000b883a 	mov	r5,zero
 400c8d4:	0023883a 	mov	r17,zero
 400c8d8:	003edb06 	br	400c448 <__alt_data_end+0xfe00c448>
 400c8dc:	01c1ffc4 	movi	r7,2047
 400c8e0:	11c03b26 	beq	r2,r7,400c9d0 <__adddf3+0x784>
 400c8e4:	0109c83a 	sub	r4,zero,r4
 400c8e8:	29402034 	orhi	r5,r5,128
 400c8ec:	01c00e04 	movi	r7,56
 400c8f0:	39006216 	blt	r7,r4,400ca7c <__adddf3+0x830>
 400c8f4:	01c007c4 	movi	r7,31
 400c8f8:	39006b16 	blt	r7,r4,400caa8 <__adddf3+0x85c>
 400c8fc:	01c00804 	movi	r7,32
 400c900:	390fc83a 	sub	r7,r7,r4
 400c904:	29d4983a 	sll	r10,r5,r7
 400c908:	8912d83a 	srl	r9,r17,r4
 400c90c:	89ce983a 	sll	r7,r17,r7
 400c910:	2908d83a 	srl	r4,r5,r4
 400c914:	5262b03a 	or	r17,r10,r9
 400c918:	380ac03a 	cmpne	r5,r7,zero
 400c91c:	8962b03a 	or	r17,r17,r5
 400c920:	89a3883a 	add	r17,r17,r6
 400c924:	2211883a 	add	r8,r4,r8
 400c928:	898d803a 	cmpltu	r6,r17,r6
 400c92c:	418b883a 	add	r5,r8,r6
 400c930:	1021883a 	mov	r16,r2
 400c934:	003ee706 	br	400c4d4 <__alt_data_end+0xfe00c4d4>
 400c938:	4184b03a 	or	r2,r8,r6
 400c93c:	103e6226 	beq	r2,zero,400c2c8 <__alt_data_end+0xfe00c2c8>
 400c940:	8987c83a 	sub	r3,r17,r6
 400c944:	88c9803a 	cmpltu	r4,r17,r3
 400c948:	2a05c83a 	sub	r2,r5,r8
 400c94c:	1105c83a 	sub	r2,r2,r4
 400c950:	1100202c 	andhi	r4,r2,128
 400c954:	203f0426 	beq	r4,zero,400c568 <__alt_data_end+0xfe00c568>
 400c958:	3463c83a 	sub	r17,r6,r17
 400c95c:	414bc83a 	sub	r5,r8,r5
 400c960:	344d803a 	cmpltu	r6,r6,r17
 400c964:	298bc83a 	sub	r5,r5,r6
 400c968:	3825883a 	mov	r18,r7
 400c96c:	003e5606 	br	400c2c8 <__alt_data_end+0xfe00c2c8>
 400c970:	4184b03a 	or	r2,r8,r6
 400c974:	10002b26 	beq	r2,zero,400ca24 <__adddf3+0x7d8>
 400c978:	2804d0fa 	srli	r2,r5,3
 400c97c:	8822d0fa 	srli	r17,r17,3
 400c980:	280a977a 	slli	r5,r5,29
 400c984:	10c0022c 	andhi	r3,r2,8
 400c988:	2c62b03a 	or	r17,r5,r17
 400c98c:	18000826 	beq	r3,zero,400c9b0 <__adddf3+0x764>
 400c990:	4008d0fa 	srli	r4,r8,3
 400c994:	20c0022c 	andhi	r3,r4,8
 400c998:	1800051e 	bne	r3,zero,400c9b0 <__adddf3+0x764>
 400c99c:	300cd0fa 	srli	r6,r6,3
 400c9a0:	4010977a 	slli	r8,r8,29
 400c9a4:	2005883a 	mov	r2,r4
 400c9a8:	3825883a 	mov	r18,r7
 400c9ac:	41a2b03a 	or	r17,r8,r6
 400c9b0:	880ad77a 	srli	r5,r17,29
 400c9b4:	100490fa 	slli	r2,r2,3
 400c9b8:	882290fa 	slli	r17,r17,3
 400c9bc:	0401ffc4 	movi	r16,2047
 400c9c0:	288ab03a 	or	r5,r5,r2
 400c9c4:	003e4006 	br	400c2c8 <__alt_data_end+0xfe00c2c8>
 400c9c8:	01c1ffc4 	movi	r7,2047
 400c9cc:	11ffc71e 	bne	r2,r7,400c8ec <__alt_data_end+0xfe00c8ec>
 400c9d0:	400b883a 	mov	r5,r8
 400c9d4:	3023883a 	mov	r17,r6
 400c9d8:	1021883a 	mov	r16,r2
 400c9dc:	003e3a06 	br	400c2c8 <__alt_data_end+0xfe00c2c8>
 400c9e0:	10002d26 	beq	r2,zero,400ca98 <__adddf3+0x84c>
 400c9e4:	4184b03a 	or	r2,r8,r6
 400c9e8:	10000e26 	beq	r2,zero,400ca24 <__adddf3+0x7d8>
 400c9ec:	2804d0fa 	srli	r2,r5,3
 400c9f0:	8822d0fa 	srli	r17,r17,3
 400c9f4:	280a977a 	slli	r5,r5,29
 400c9f8:	10c0022c 	andhi	r3,r2,8
 400c9fc:	2c62b03a 	or	r17,r5,r17
 400ca00:	183feb26 	beq	r3,zero,400c9b0 <__alt_data_end+0xfe00c9b0>
 400ca04:	4008d0fa 	srli	r4,r8,3
 400ca08:	20c0022c 	andhi	r3,r4,8
 400ca0c:	183fe81e 	bne	r3,zero,400c9b0 <__alt_data_end+0xfe00c9b0>
 400ca10:	300cd0fa 	srli	r6,r6,3
 400ca14:	4010977a 	slli	r8,r8,29
 400ca18:	2005883a 	mov	r2,r4
 400ca1c:	41a2b03a 	or	r17,r8,r6
 400ca20:	003fe306 	br	400c9b0 <__alt_data_end+0xfe00c9b0>
 400ca24:	0401ffc4 	movi	r16,2047
 400ca28:	003e2706 	br	400c2c8 <__alt_data_end+0xfe00c2c8>
 400ca2c:	0011883a 	mov	r8,zero
 400ca30:	003f8306 	br	400c840 <__alt_data_end+0xfe00c840>
 400ca34:	193ff804 	addi	r4,r3,-32
 400ca38:	02400804 	movi	r9,32
 400ca3c:	2908d83a 	srl	r4,r5,r4
 400ca40:	1a402526 	beq	r3,r9,400cad8 <__adddf3+0x88c>
 400ca44:	02401004 	movi	r9,64
 400ca48:	48c7c83a 	sub	r3,r9,r3
 400ca4c:	28ca983a 	sll	r5,r5,r3
 400ca50:	2c62b03a 	or	r17,r5,r17
 400ca54:	8822c03a 	cmpne	r17,r17,zero
 400ca58:	8922b03a 	or	r17,r17,r4
 400ca5c:	0007883a 	mov	r3,zero
 400ca60:	003f2f06 	br	400c720 <__alt_data_end+0xfe00c720>
 400ca64:	01402034 	movhi	r5,128
 400ca68:	0007883a 	mov	r3,zero
 400ca6c:	297fffc4 	addi	r5,r5,-1
 400ca70:	047ffe04 	movi	r17,-8
 400ca74:	0401ffc4 	movi	r16,2047
 400ca78:	003e7306 	br	400c448 <__alt_data_end+0xfe00c448>
 400ca7c:	2c62b03a 	or	r17,r5,r17
 400ca80:	8822c03a 	cmpne	r17,r17,zero
 400ca84:	0009883a 	mov	r4,zero
 400ca88:	003fa506 	br	400c920 <__alt_data_end+0xfe00c920>
 400ca8c:	400b883a 	mov	r5,r8
 400ca90:	3023883a 	mov	r17,r6
 400ca94:	003e0c06 	br	400c2c8 <__alt_data_end+0xfe00c2c8>
 400ca98:	400b883a 	mov	r5,r8
 400ca9c:	3023883a 	mov	r17,r6
 400caa0:	0401ffc4 	movi	r16,2047
 400caa4:	003e0806 	br	400c2c8 <__alt_data_end+0xfe00c2c8>
 400caa8:	21fff804 	addi	r7,r4,-32
 400caac:	02400804 	movi	r9,32
 400cab0:	29ced83a 	srl	r7,r5,r7
 400cab4:	22400a26 	beq	r4,r9,400cae0 <__adddf3+0x894>
 400cab8:	02401004 	movi	r9,64
 400cabc:	4909c83a 	sub	r4,r9,r4
 400cac0:	290a983a 	sll	r5,r5,r4
 400cac4:	2c62b03a 	or	r17,r5,r17
 400cac8:	8822c03a 	cmpne	r17,r17,zero
 400cacc:	89e2b03a 	or	r17,r17,r7
 400cad0:	0009883a 	mov	r4,zero
 400cad4:	003f9206 	br	400c920 <__alt_data_end+0xfe00c920>
 400cad8:	000b883a 	mov	r5,zero
 400cadc:	003fdc06 	br	400ca50 <__alt_data_end+0xfe00ca50>
 400cae0:	000b883a 	mov	r5,zero
 400cae4:	003ff706 	br	400cac4 <__alt_data_end+0xfe00cac4>

0400cae8 <__divdf3>:
 400cae8:	defff004 	addi	sp,sp,-64
 400caec:	dc800815 	stw	r18,32(sp)
 400caf0:	2824d53a 	srli	r18,r5,20
 400caf4:	dd800c15 	stw	r22,48(sp)
 400caf8:	282cd7fa 	srli	r22,r5,31
 400cafc:	dc000615 	stw	r16,24(sp)
 400cb00:	04000434 	movhi	r16,16
 400cb04:	df000e15 	stw	fp,56(sp)
 400cb08:	dd000a15 	stw	r20,40(sp)
 400cb0c:	dcc00915 	stw	r19,36(sp)
 400cb10:	dc400715 	stw	r17,28(sp)
 400cb14:	843fffc4 	addi	r16,r16,-1
 400cb18:	dfc00f15 	stw	ra,60(sp)
 400cb1c:	ddc00d15 	stw	r23,52(sp)
 400cb20:	dd400b15 	stw	r21,44(sp)
 400cb24:	9481ffcc 	andi	r18,r18,2047
 400cb28:	2029883a 	mov	r20,r4
 400cb2c:	2027883a 	mov	r19,r4
 400cb30:	2c22703a 	and	r17,r5,r16
 400cb34:	b7003fcc 	andi	fp,r22,255
 400cb38:	90005e26 	beq	r18,zero,400ccb4 <__divdf3+0x1cc>
 400cb3c:	0081ffc4 	movi	r2,2047
 400cb40:	90803526 	beq	r18,r2,400cc18 <__divdf3+0x130>
 400cb44:	8c000434 	orhi	r16,r17,16
 400cb48:	2004d77a 	srli	r2,r4,29
 400cb4c:	802090fa 	slli	r16,r16,3
 400cb50:	202690fa 	slli	r19,r4,3
 400cb54:	94bf0044 	addi	r18,r18,-1023
 400cb58:	80a2b03a 	or	r17,r16,r2
 400cb5c:	0029883a 	mov	r20,zero
 400cb60:	0011883a 	mov	r8,zero
 400cb64:	380ad53a 	srli	r5,r7,20
 400cb68:	382ed7fa 	srli	r23,r7,31
 400cb6c:	04000434 	movhi	r16,16
 400cb70:	843fffc4 	addi	r16,r16,-1
 400cb74:	2941ffcc 	andi	r5,r5,2047
 400cb78:	302b883a 	mov	r21,r6
 400cb7c:	3c20703a 	and	r16,r7,r16
 400cb80:	ba403fcc 	andi	r9,r23,255
 400cb84:	28006726 	beq	r5,zero,400cd24 <__divdf3+0x23c>
 400cb88:	0081ffc4 	movi	r2,2047
 400cb8c:	28805f26 	beq	r5,r2,400cd0c <__divdf3+0x224>
 400cb90:	84000434 	orhi	r16,r16,16
 400cb94:	3004d77a 	srli	r2,r6,29
 400cb98:	802090fa 	slli	r16,r16,3
 400cb9c:	302a90fa 	slli	r21,r6,3
 400cba0:	297f0044 	addi	r5,r5,-1023
 400cba4:	80a0b03a 	or	r16,r16,r2
 400cba8:	000f883a 	mov	r7,zero
 400cbac:	3d06b03a 	or	r3,r7,r20
 400cbb0:	180690ba 	slli	r3,r3,2
 400cbb4:	00810074 	movhi	r2,1025
 400cbb8:	10b2f604 	addi	r2,r2,-13352
 400cbbc:	1885883a 	add	r2,r3,r2
 400cbc0:	10800017 	ldw	r2,0(r2)
 400cbc4:	b5c8f03a 	xor	r4,r22,r23
 400cbc8:	200d883a 	mov	r6,r4
 400cbcc:	25003fcc 	andi	r20,r4,255
 400cbd0:	9165c83a 	sub	r18,r18,r5
 400cbd4:	1000683a 	jmp	r2
 400cbd8:	0400ce20 	cmpeqi	r16,zero,824
 400cbdc:	0400cc50 	cmplti	r16,zero,817
 400cbe0:	0400cde4 	muli	r16,zero,823
 400cbe4:	0400cc34 	movhi	r16,816
 400cbe8:	0400cde4 	muli	r16,zero,823
 400cbec:	0400cdb8 	rdprs	r16,zero,822
 400cbf0:	0400cde4 	muli	r16,zero,823
 400cbf4:	0400cc34 	movhi	r16,816
 400cbf8:	0400cc50 	cmplti	r16,zero,817
 400cbfc:	0400cc50 	cmplti	r16,zero,817
 400cc00:	0400cdb8 	rdprs	r16,zero,822
 400cc04:	0400cc34 	movhi	r16,816
 400cc08:	0400cc44 	movi	r16,817
 400cc0c:	0400cc44 	movi	r16,817
 400cc10:	0400cc44 	movi	r16,817
 400cc14:	0400cdf4 	movhi	r16,823
 400cc18:	8904b03a 	or	r2,r17,r4
 400cc1c:	1000631e 	bne	r2,zero,400cdac <__divdf3+0x2c4>
 400cc20:	05000204 	movi	r20,8
 400cc24:	0023883a 	mov	r17,zero
 400cc28:	0027883a 	mov	r19,zero
 400cc2c:	02000084 	movi	r8,2
 400cc30:	003fcc06 	br	400cb64 <__alt_data_end+0xfe00cb64>
 400cc34:	8023883a 	mov	r17,r16
 400cc38:	a827883a 	mov	r19,r21
 400cc3c:	4839883a 	mov	fp,r9
 400cc40:	3811883a 	mov	r8,r7
 400cc44:	00800084 	movi	r2,2
 400cc48:	4081531e 	bne	r8,r2,400d198 <__divdf3+0x6b0>
 400cc4c:	e029883a 	mov	r20,fp
 400cc50:	a180004c 	andi	r6,r20,1
 400cc54:	0201ffc4 	movi	r8,2047
 400cc58:	000b883a 	mov	r5,zero
 400cc5c:	0027883a 	mov	r19,zero
 400cc60:	4010953a 	slli	r8,r8,20
 400cc64:	30c03fcc 	andi	r3,r6,255
 400cc68:	04000434 	movhi	r16,16
 400cc6c:	180697fa 	slli	r3,r3,31
 400cc70:	843fffc4 	addi	r16,r16,-1
 400cc74:	2c20703a 	and	r16,r5,r16
 400cc78:	8220b03a 	or	r16,r16,r8
 400cc7c:	80c6b03a 	or	r3,r16,r3
 400cc80:	9805883a 	mov	r2,r19
 400cc84:	dfc00f17 	ldw	ra,60(sp)
 400cc88:	df000e17 	ldw	fp,56(sp)
 400cc8c:	ddc00d17 	ldw	r23,52(sp)
 400cc90:	dd800c17 	ldw	r22,48(sp)
 400cc94:	dd400b17 	ldw	r21,44(sp)
 400cc98:	dd000a17 	ldw	r20,40(sp)
 400cc9c:	dcc00917 	ldw	r19,36(sp)
 400cca0:	dc800817 	ldw	r18,32(sp)
 400cca4:	dc400717 	ldw	r17,28(sp)
 400cca8:	dc000617 	ldw	r16,24(sp)
 400ccac:	dec01004 	addi	sp,sp,64
 400ccb0:	f800283a 	ret
 400ccb4:	8904b03a 	or	r2,r17,r4
 400ccb8:	10003726 	beq	r2,zero,400cd98 <__divdf3+0x2b0>
 400ccbc:	88014d26 	beq	r17,zero,400d1f4 <__divdf3+0x70c>
 400ccc0:	8809883a 	mov	r4,r17
 400ccc4:	d9800215 	stw	r6,8(sp)
 400ccc8:	d9c00515 	stw	r7,20(sp)
 400cccc:	400e9e40 	call	400e9e4 <__clzsi2>
 400ccd0:	d9800217 	ldw	r6,8(sp)
 400ccd4:	d9c00517 	ldw	r7,20(sp)
 400ccd8:	1007883a 	mov	r3,r2
 400ccdc:	01000a04 	movi	r4,40
 400cce0:	1cfffe04 	addi	r19,r3,-8
 400cce4:	20c9c83a 	sub	r4,r4,r3
 400cce8:	8cca983a 	sll	r5,r17,r19
 400ccec:	a108d83a 	srl	r4,r20,r4
 400ccf0:	a4e6983a 	sll	r19,r20,r19
 400ccf4:	2162b03a 	or	r17,r4,r5
 400ccf8:	04bf0344 	movi	r18,-1011
 400ccfc:	90e5c83a 	sub	r18,r18,r3
 400cd00:	0029883a 	mov	r20,zero
 400cd04:	0011883a 	mov	r8,zero
 400cd08:	003f9606 	br	400cb64 <__alt_data_end+0xfe00cb64>
 400cd0c:	8184b03a 	or	r2,r16,r6
 400cd10:	10001f1e 	bne	r2,zero,400cd90 <__divdf3+0x2a8>
 400cd14:	0021883a 	mov	r16,zero
 400cd18:	002b883a 	mov	r21,zero
 400cd1c:	01c00084 	movi	r7,2
 400cd20:	003fa206 	br	400cbac <__alt_data_end+0xfe00cbac>
 400cd24:	8184b03a 	or	r2,r16,r6
 400cd28:	10001526 	beq	r2,zero,400cd80 <__divdf3+0x298>
 400cd2c:	80013d26 	beq	r16,zero,400d224 <__divdf3+0x73c>
 400cd30:	8009883a 	mov	r4,r16
 400cd34:	d9800215 	stw	r6,8(sp)
 400cd38:	da000315 	stw	r8,12(sp)
 400cd3c:	da400415 	stw	r9,16(sp)
 400cd40:	400e9e40 	call	400e9e4 <__clzsi2>
 400cd44:	d9800217 	ldw	r6,8(sp)
 400cd48:	da000317 	ldw	r8,12(sp)
 400cd4c:	da400417 	ldw	r9,16(sp)
 400cd50:	1007883a 	mov	r3,r2
 400cd54:	01000a04 	movi	r4,40
 400cd58:	1d7ffe04 	addi	r21,r3,-8
 400cd5c:	20c9c83a 	sub	r4,r4,r3
 400cd60:	8560983a 	sll	r16,r16,r21
 400cd64:	3108d83a 	srl	r4,r6,r4
 400cd68:	356a983a 	sll	r21,r6,r21
 400cd6c:	2420b03a 	or	r16,r4,r16
 400cd70:	017f0344 	movi	r5,-1011
 400cd74:	28cbc83a 	sub	r5,r5,r3
 400cd78:	000f883a 	mov	r7,zero
 400cd7c:	003f8b06 	br	400cbac <__alt_data_end+0xfe00cbac>
 400cd80:	0021883a 	mov	r16,zero
 400cd84:	002b883a 	mov	r21,zero
 400cd88:	01c00044 	movi	r7,1
 400cd8c:	003f8706 	br	400cbac <__alt_data_end+0xfe00cbac>
 400cd90:	01c000c4 	movi	r7,3
 400cd94:	003f8506 	br	400cbac <__alt_data_end+0xfe00cbac>
 400cd98:	05000104 	movi	r20,4
 400cd9c:	0023883a 	mov	r17,zero
 400cda0:	0027883a 	mov	r19,zero
 400cda4:	02000044 	movi	r8,1
 400cda8:	003f6e06 	br	400cb64 <__alt_data_end+0xfe00cb64>
 400cdac:	05000304 	movi	r20,12
 400cdb0:	020000c4 	movi	r8,3
 400cdb4:	003f6b06 	br	400cb64 <__alt_data_end+0xfe00cb64>
 400cdb8:	01400434 	movhi	r5,16
 400cdbc:	000d883a 	mov	r6,zero
 400cdc0:	297fffc4 	addi	r5,r5,-1
 400cdc4:	04ffffc4 	movi	r19,-1
 400cdc8:	0201ffc4 	movi	r8,2047
 400cdcc:	003fa406 	br	400cc60 <__alt_data_end+0xfe00cc60>
 400cdd0:	043f0084 	movi	r16,-1022
 400cdd4:	84a1c83a 	sub	r16,r16,r18
 400cdd8:	00800e04 	movi	r2,56
 400cddc:	14014d0e 	bge	r2,r16,400d314 <__divdf3+0x82c>
 400cde0:	a180004c 	andi	r6,r20,1
 400cde4:	0011883a 	mov	r8,zero
 400cde8:	000b883a 	mov	r5,zero
 400cdec:	0027883a 	mov	r19,zero
 400cdf0:	003f9b06 	br	400cc60 <__alt_data_end+0xfe00cc60>
 400cdf4:	8880022c 	andhi	r2,r17,8
 400cdf8:	1000f026 	beq	r2,zero,400d1bc <__divdf3+0x6d4>
 400cdfc:	8080022c 	andhi	r2,r16,8
 400ce00:	1000ee1e 	bne	r2,zero,400d1bc <__divdf3+0x6d4>
 400ce04:	00800434 	movhi	r2,16
 400ce08:	81400234 	orhi	r5,r16,8
 400ce0c:	10bfffc4 	addi	r2,r2,-1
 400ce10:	b80d883a 	mov	r6,r23
 400ce14:	288a703a 	and	r5,r5,r2
 400ce18:	a827883a 	mov	r19,r21
 400ce1c:	003fea06 	br	400cdc8 <__alt_data_end+0xfe00cdc8>
 400ce20:	84411c36 	bltu	r16,r17,400d294 <__divdf3+0x7ac>
 400ce24:	8c011a26 	beq	r17,r16,400d290 <__divdf3+0x7a8>
 400ce28:	94bfffc4 	addi	r18,r18,-1
 400ce2c:	dcc00015 	stw	r19,0(sp)
 400ce30:	8811883a 	mov	r8,r17
 400ce34:	002d883a 	mov	r22,zero
 400ce38:	a80cd63a 	srli	r6,r21,24
 400ce3c:	8020923a 	slli	r16,r16,8
 400ce40:	a82a923a 	slli	r21,r21,8
 400ce44:	4009883a 	mov	r4,r8
 400ce48:	342eb03a 	or	r23,r6,r16
 400ce4c:	dd400115 	stw	r21,4(sp)
 400ce50:	b82ad43a 	srli	r21,r23,16
 400ce54:	da000315 	stw	r8,12(sp)
 400ce58:	bcffffcc 	andi	r19,r23,65535
 400ce5c:	a80b883a 	mov	r5,r21
 400ce60:	400c2140 	call	400c214 <__udivsi3>
 400ce64:	1009883a 	mov	r4,r2
 400ce68:	980b883a 	mov	r5,r19
 400ce6c:	1023883a 	mov	r17,r2
 400ce70:	400c2240 	call	400c224 <__mulsi3>
 400ce74:	da000317 	ldw	r8,12(sp)
 400ce78:	a80b883a 	mov	r5,r21
 400ce7c:	1039883a 	mov	fp,r2
 400ce80:	4009883a 	mov	r4,r8
 400ce84:	400c21c0 	call	400c21c <__umodsi3>
 400ce88:	d8c00017 	ldw	r3,0(sp)
 400ce8c:	1004943a 	slli	r2,r2,16
 400ce90:	1810d43a 	srli	r8,r3,16
 400ce94:	120eb03a 	or	r7,r2,r8
 400ce98:	3f00062e 	bgeu	r7,fp,400ceb4 <__divdf3+0x3cc>
 400ce9c:	3dcf883a 	add	r7,r7,r23
 400cea0:	88bfffc4 	addi	r2,r17,-1
 400cea4:	3dc10a36 	bltu	r7,r23,400d2d0 <__divdf3+0x7e8>
 400cea8:	3f01092e 	bgeu	r7,fp,400d2d0 <__divdf3+0x7e8>
 400ceac:	8c7fff84 	addi	r17,r17,-2
 400ceb0:	3dcf883a 	add	r7,r7,r23
 400ceb4:	3f39c83a 	sub	fp,r7,fp
 400ceb8:	e009883a 	mov	r4,fp
 400cebc:	a80b883a 	mov	r5,r21
 400cec0:	400c2140 	call	400c214 <__udivsi3>
 400cec4:	1009883a 	mov	r4,r2
 400cec8:	980b883a 	mov	r5,r19
 400cecc:	1021883a 	mov	r16,r2
 400ced0:	400c2240 	call	400c224 <__mulsi3>
 400ced4:	e009883a 	mov	r4,fp
 400ced8:	a80b883a 	mov	r5,r21
 400cedc:	d8800315 	stw	r2,12(sp)
 400cee0:	400c21c0 	call	400c21c <__umodsi3>
 400cee4:	d9000017 	ldw	r4,0(sp)
 400cee8:	1004943a 	slli	r2,r2,16
 400ceec:	da000317 	ldw	r8,12(sp)
 400cef0:	20ffffcc 	andi	r3,r4,65535
 400cef4:	10ceb03a 	or	r7,r2,r3
 400cef8:	3a00062e 	bgeu	r7,r8,400cf14 <__divdf3+0x42c>
 400cefc:	3dcf883a 	add	r7,r7,r23
 400cf00:	80bfffc4 	addi	r2,r16,-1
 400cf04:	3dc0f036 	bltu	r7,r23,400d2c8 <__divdf3+0x7e0>
 400cf08:	3a00ef2e 	bgeu	r7,r8,400d2c8 <__divdf3+0x7e0>
 400cf0c:	843fff84 	addi	r16,r16,-2
 400cf10:	3dcf883a 	add	r7,r7,r23
 400cf14:	d8c00117 	ldw	r3,4(sp)
 400cf18:	8822943a 	slli	r17,r17,16
 400cf1c:	3a0fc83a 	sub	r7,r7,r8
 400cf20:	1806d43a 	srli	r3,r3,16
 400cf24:	8462b03a 	or	r17,r16,r17
 400cf28:	8affffcc 	andi	r11,r17,65535
 400cf2c:	d8c00015 	stw	r3,0(sp)
 400cf30:	d8c00117 	ldw	r3,4(sp)
 400cf34:	8820d43a 	srli	r16,r17,16
 400cf38:	5809883a 	mov	r4,r11
 400cf3c:	1f3fffcc 	andi	fp,r3,65535
 400cf40:	e00b883a 	mov	r5,fp
 400cf44:	d9c00515 	stw	r7,20(sp)
 400cf48:	dac00215 	stw	r11,8(sp)
 400cf4c:	400c2240 	call	400c224 <__mulsi3>
 400cf50:	8009883a 	mov	r4,r16
 400cf54:	e00b883a 	mov	r5,fp
 400cf58:	d8800415 	stw	r2,16(sp)
 400cf5c:	400c2240 	call	400c224 <__mulsi3>
 400cf60:	d9400017 	ldw	r5,0(sp)
 400cf64:	8009883a 	mov	r4,r16
 400cf68:	d8800315 	stw	r2,12(sp)
 400cf6c:	400c2240 	call	400c224 <__mulsi3>
 400cf70:	dac00217 	ldw	r11,8(sp)
 400cf74:	d9400017 	ldw	r5,0(sp)
 400cf78:	d8800215 	stw	r2,8(sp)
 400cf7c:	5809883a 	mov	r4,r11
 400cf80:	400c2240 	call	400c224 <__mulsi3>
 400cf84:	da400417 	ldw	r9,16(sp)
 400cf88:	da800317 	ldw	r10,12(sp)
 400cf8c:	d9c00517 	ldw	r7,20(sp)
 400cf90:	480ad43a 	srli	r5,r9,16
 400cf94:	5085883a 	add	r2,r10,r2
 400cf98:	db000217 	ldw	r12,8(sp)
 400cf9c:	1151883a 	add	r8,r2,r5
 400cfa0:	4280022e 	bgeu	r8,r10,400cfac <__divdf3+0x4c4>
 400cfa4:	00800074 	movhi	r2,1
 400cfa8:	6099883a 	add	r12,r12,r2
 400cfac:	400ad43a 	srli	r5,r8,16
 400cfb0:	4010943a 	slli	r8,r8,16
 400cfb4:	4c3fffcc 	andi	r16,r9,65535
 400cfb8:	6149883a 	add	r4,r12,r5
 400cfbc:	4411883a 	add	r8,r8,r16
 400cfc0:	3900a736 	bltu	r7,r4,400d260 <__divdf3+0x778>
 400cfc4:	3900c426 	beq	r7,r4,400d2d8 <__divdf3+0x7f0>
 400cfc8:	3909c83a 	sub	r4,r7,r4
 400cfcc:	b221c83a 	sub	r16,r22,r8
 400cfd0:	b42d803a 	cmpltu	r22,r22,r16
 400cfd4:	25adc83a 	sub	r22,r4,r22
 400cfd8:	b5c0c626 	beq	r22,r23,400d2f4 <__divdf3+0x80c>
 400cfdc:	b009883a 	mov	r4,r22
 400cfe0:	a80b883a 	mov	r5,r21
 400cfe4:	400c2140 	call	400c214 <__udivsi3>
 400cfe8:	1009883a 	mov	r4,r2
 400cfec:	980b883a 	mov	r5,r19
 400cff0:	d8800315 	stw	r2,12(sp)
 400cff4:	400c2240 	call	400c224 <__mulsi3>
 400cff8:	a80b883a 	mov	r5,r21
 400cffc:	b009883a 	mov	r4,r22
 400d000:	d8800415 	stw	r2,16(sp)
 400d004:	400c21c0 	call	400c21c <__umodsi3>
 400d008:	1004943a 	slli	r2,r2,16
 400d00c:	800ed43a 	srli	r7,r16,16
 400d010:	da400417 	ldw	r9,16(sp)
 400d014:	da000317 	ldw	r8,12(sp)
 400d018:	11cab03a 	or	r5,r2,r7
 400d01c:	2a40062e 	bgeu	r5,r9,400d038 <__divdf3+0x550>
 400d020:	2dcb883a 	add	r5,r5,r23
 400d024:	40bfffc4 	addi	r2,r8,-1
 400d028:	2dc0b436 	bltu	r5,r23,400d2fc <__divdf3+0x814>
 400d02c:	2a40b32e 	bgeu	r5,r9,400d2fc <__divdf3+0x814>
 400d030:	423fff84 	addi	r8,r8,-2
 400d034:	2dcb883a 	add	r5,r5,r23
 400d038:	2a6dc83a 	sub	r22,r5,r9
 400d03c:	b009883a 	mov	r4,r22
 400d040:	a80b883a 	mov	r5,r21
 400d044:	da000315 	stw	r8,12(sp)
 400d048:	400c2140 	call	400c214 <__udivsi3>
 400d04c:	980b883a 	mov	r5,r19
 400d050:	1009883a 	mov	r4,r2
 400d054:	d8800415 	stw	r2,16(sp)
 400d058:	400c2240 	call	400c224 <__mulsi3>
 400d05c:	b009883a 	mov	r4,r22
 400d060:	a80b883a 	mov	r5,r21
 400d064:	1027883a 	mov	r19,r2
 400d068:	400c21c0 	call	400c21c <__umodsi3>
 400d06c:	1004943a 	slli	r2,r2,16
 400d070:	843fffcc 	andi	r16,r16,65535
 400d074:	da000317 	ldw	r8,12(sp)
 400d078:	140eb03a 	or	r7,r2,r16
 400d07c:	da400417 	ldw	r9,16(sp)
 400d080:	3cc0062e 	bgeu	r7,r19,400d09c <__divdf3+0x5b4>
 400d084:	3dcf883a 	add	r7,r7,r23
 400d088:	48bfffc4 	addi	r2,r9,-1
 400d08c:	3dc09d36 	bltu	r7,r23,400d304 <__divdf3+0x81c>
 400d090:	3cc09c2e 	bgeu	r7,r19,400d304 <__divdf3+0x81c>
 400d094:	4a7fff84 	addi	r9,r9,-2
 400d098:	3dcf883a 	add	r7,r7,r23
 400d09c:	4010943a 	slli	r8,r8,16
 400d0a0:	3cebc83a 	sub	r21,r7,r19
 400d0a4:	e00b883a 	mov	r5,fp
 400d0a8:	4a26b03a 	or	r19,r9,r8
 400d0ac:	99ffffcc 	andi	r7,r19,65535
 400d0b0:	9820d43a 	srli	r16,r19,16
 400d0b4:	3809883a 	mov	r4,r7
 400d0b8:	d9c00515 	stw	r7,20(sp)
 400d0bc:	400c2240 	call	400c224 <__mulsi3>
 400d0c0:	8009883a 	mov	r4,r16
 400d0c4:	e00b883a 	mov	r5,fp
 400d0c8:	102d883a 	mov	r22,r2
 400d0cc:	400c2240 	call	400c224 <__mulsi3>
 400d0d0:	d9400017 	ldw	r5,0(sp)
 400d0d4:	8009883a 	mov	r4,r16
 400d0d8:	1039883a 	mov	fp,r2
 400d0dc:	400c2240 	call	400c224 <__mulsi3>
 400d0e0:	d9c00517 	ldw	r7,20(sp)
 400d0e4:	d9400017 	ldw	r5,0(sp)
 400d0e8:	1021883a 	mov	r16,r2
 400d0ec:	3809883a 	mov	r4,r7
 400d0f0:	400c2240 	call	400c224 <__mulsi3>
 400d0f4:	b008d43a 	srli	r4,r22,16
 400d0f8:	e085883a 	add	r2,fp,r2
 400d0fc:	1109883a 	add	r4,r2,r4
 400d100:	2700022e 	bgeu	r4,fp,400d10c <__divdf3+0x624>
 400d104:	00800074 	movhi	r2,1
 400d108:	80a1883a 	add	r16,r16,r2
 400d10c:	200ad43a 	srli	r5,r4,16
 400d110:	2008943a 	slli	r4,r4,16
 400d114:	b5bfffcc 	andi	r22,r22,65535
 400d118:	8145883a 	add	r2,r16,r5
 400d11c:	2589883a 	add	r4,r4,r22
 400d120:	a8802c36 	bltu	r21,r2,400d1d4 <__divdf3+0x6ec>
 400d124:	a880a426 	beq	r21,r2,400d3b8 <__divdf3+0x8d0>
 400d128:	9cc00054 	ori	r19,r19,1
 400d12c:	9200ffc4 	addi	r8,r18,1023
 400d130:	023f270e 	bge	zero,r8,400cdd0 <__alt_data_end+0xfe00cdd0>
 400d134:	988001cc 	andi	r2,r19,7
 400d138:	10000726 	beq	r2,zero,400d158 <__divdf3+0x670>
 400d13c:	990003cc 	andi	r4,r19,15
 400d140:	00800104 	movi	r2,4
 400d144:	20800426 	beq	r4,r2,400d158 <__divdf3+0x670>
 400d148:	9885883a 	add	r2,r19,r2
 400d14c:	14e7803a 	cmpltu	r19,r2,r19
 400d150:	8ce3883a 	add	r17,r17,r19
 400d154:	1027883a 	mov	r19,r2
 400d158:	8880402c 	andhi	r2,r17,256
 400d15c:	10000426 	beq	r2,zero,400d170 <__divdf3+0x688>
 400d160:	00bfc034 	movhi	r2,65280
 400d164:	10bfffc4 	addi	r2,r2,-1
 400d168:	92010004 	addi	r8,r18,1024
 400d16c:	88a2703a 	and	r17,r17,r2
 400d170:	0081ff84 	movi	r2,2046
 400d174:	123eb616 	blt	r2,r8,400cc50 <__alt_data_end+0xfe00cc50>
 400d178:	9826d0fa 	srli	r19,r19,3
 400d17c:	8804977a 	slli	r2,r17,29
 400d180:	8820927a 	slli	r16,r17,9
 400d184:	4201ffcc 	andi	r8,r8,2047
 400d188:	14e6b03a 	or	r19,r2,r19
 400d18c:	800ad33a 	srli	r5,r16,12
 400d190:	a180004c 	andi	r6,r20,1
 400d194:	003eb206 	br	400cc60 <__alt_data_end+0xfe00cc60>
 400d198:	008000c4 	movi	r2,3
 400d19c:	4080ac26 	beq	r8,r2,400d450 <__divdf3+0x968>
 400d1a0:	00800044 	movi	r2,1
 400d1a4:	4080591e 	bne	r8,r2,400d30c <__divdf3+0x824>
 400d1a8:	e00d883a 	mov	r6,fp
 400d1ac:	0011883a 	mov	r8,zero
 400d1b0:	000b883a 	mov	r5,zero
 400d1b4:	0027883a 	mov	r19,zero
 400d1b8:	003ea906 	br	400cc60 <__alt_data_end+0xfe00cc60>
 400d1bc:	00800434 	movhi	r2,16
 400d1c0:	89400234 	orhi	r5,r17,8
 400d1c4:	10bfffc4 	addi	r2,r2,-1
 400d1c8:	b00d883a 	mov	r6,r22
 400d1cc:	288a703a 	and	r5,r5,r2
 400d1d0:	003efd06 	br	400cdc8 <__alt_data_end+0xfe00cdc8>
 400d1d4:	adcf883a 	add	r7,r21,r23
 400d1d8:	997fffc4 	addi	r5,r19,-1
 400d1dc:	3dc0412e 	bgeu	r7,r23,400d2e4 <__divdf3+0x7fc>
 400d1e0:	2827883a 	mov	r19,r5
 400d1e4:	38bfd01e 	bne	r7,r2,400d128 <__alt_data_end+0xfe00d128>
 400d1e8:	d8c00117 	ldw	r3,4(sp)
 400d1ec:	193fce1e 	bne	r3,r4,400d128 <__alt_data_end+0xfe00d128>
 400d1f0:	003fce06 	br	400d12c <__alt_data_end+0xfe00d12c>
 400d1f4:	d9800215 	stw	r6,8(sp)
 400d1f8:	d9c00515 	stw	r7,20(sp)
 400d1fc:	400e9e40 	call	400e9e4 <__clzsi2>
 400d200:	10c00804 	addi	r3,r2,32
 400d204:	010009c4 	movi	r4,39
 400d208:	d9800217 	ldw	r6,8(sp)
 400d20c:	d9c00517 	ldw	r7,20(sp)
 400d210:	20feb20e 	bge	r4,r3,400ccdc <__alt_data_end+0xfe00ccdc>
 400d214:	117ffe04 	addi	r5,r2,-8
 400d218:	a162983a 	sll	r17,r20,r5
 400d21c:	0027883a 	mov	r19,zero
 400d220:	003eb506 	br	400ccf8 <__alt_data_end+0xfe00ccf8>
 400d224:	3009883a 	mov	r4,r6
 400d228:	d9800215 	stw	r6,8(sp)
 400d22c:	da000315 	stw	r8,12(sp)
 400d230:	da400415 	stw	r9,16(sp)
 400d234:	400e9e40 	call	400e9e4 <__clzsi2>
 400d238:	10c00804 	addi	r3,r2,32
 400d23c:	010009c4 	movi	r4,39
 400d240:	d9800217 	ldw	r6,8(sp)
 400d244:	da000317 	ldw	r8,12(sp)
 400d248:	da400417 	ldw	r9,16(sp)
 400d24c:	20fec10e 	bge	r4,r3,400cd54 <__alt_data_end+0xfe00cd54>
 400d250:	10bffe04 	addi	r2,r2,-8
 400d254:	a8a0983a 	sll	r16,r21,r2
 400d258:	002b883a 	mov	r21,zero
 400d25c:	003ec406 	br	400cd70 <__alt_data_end+0xfe00cd70>
 400d260:	d8c00117 	ldw	r3,4(sp)
 400d264:	b0ed883a 	add	r22,r22,r3
 400d268:	b0c5803a 	cmpltu	r2,r22,r3
 400d26c:	15c5883a 	add	r2,r2,r23
 400d270:	11cf883a 	add	r7,r2,r7
 400d274:	88bfffc4 	addi	r2,r17,-1
 400d278:	b9c00d2e 	bgeu	r23,r7,400d2b0 <__divdf3+0x7c8>
 400d27c:	39003f36 	bltu	r7,r4,400d37c <__divdf3+0x894>
 400d280:	21c06a26 	beq	r4,r7,400d42c <__divdf3+0x944>
 400d284:	3909c83a 	sub	r4,r7,r4
 400d288:	1023883a 	mov	r17,r2
 400d28c:	003f4f06 	br	400cfcc <__alt_data_end+0xfe00cfcc>
 400d290:	9d7ee536 	bltu	r19,r21,400ce28 <__alt_data_end+0xfe00ce28>
 400d294:	982ed07a 	srli	r23,r19,1
 400d298:	880497fa 	slli	r2,r17,31
 400d29c:	8810d07a 	srli	r8,r17,1
 400d2a0:	982c97fa 	slli	r22,r19,31
 400d2a4:	b884b03a 	or	r2,r23,r2
 400d2a8:	d8800015 	stw	r2,0(sp)
 400d2ac:	003ee206 	br	400ce38 <__alt_data_end+0xfe00ce38>
 400d2b0:	3dfff41e 	bne	r7,r23,400d284 <__alt_data_end+0xfe00d284>
 400d2b4:	d8c00117 	ldw	r3,4(sp)
 400d2b8:	b0fff02e 	bgeu	r22,r3,400d27c <__alt_data_end+0xfe00d27c>
 400d2bc:	b909c83a 	sub	r4,r23,r4
 400d2c0:	1023883a 	mov	r17,r2
 400d2c4:	003f4106 	br	400cfcc <__alt_data_end+0xfe00cfcc>
 400d2c8:	1021883a 	mov	r16,r2
 400d2cc:	003f1106 	br	400cf14 <__alt_data_end+0xfe00cf14>
 400d2d0:	1023883a 	mov	r17,r2
 400d2d4:	003ef706 	br	400ceb4 <__alt_data_end+0xfe00ceb4>
 400d2d8:	b23fe136 	bltu	r22,r8,400d260 <__alt_data_end+0xfe00d260>
 400d2dc:	0009883a 	mov	r4,zero
 400d2e0:	003f3a06 	br	400cfcc <__alt_data_end+0xfe00cfcc>
 400d2e4:	38802c36 	bltu	r7,r2,400d398 <__divdf3+0x8b0>
 400d2e8:	11c05326 	beq	r2,r7,400d438 <__divdf3+0x950>
 400d2ec:	2827883a 	mov	r19,r5
 400d2f0:	003f8d06 	br	400d128 <__alt_data_end+0xfe00d128>
 400d2f4:	04ffffc4 	movi	r19,-1
 400d2f8:	003f8c06 	br	400d12c <__alt_data_end+0xfe00d12c>
 400d2fc:	1011883a 	mov	r8,r2
 400d300:	003f4d06 	br	400d038 <__alt_data_end+0xfe00d038>
 400d304:	1013883a 	mov	r9,r2
 400d308:	003f6406 	br	400d09c <__alt_data_end+0xfe00d09c>
 400d30c:	e029883a 	mov	r20,fp
 400d310:	003f8606 	br	400d12c <__alt_data_end+0xfe00d12c>
 400d314:	008007c4 	movi	r2,31
 400d318:	14002a16 	blt	r2,r16,400d3c4 <__divdf3+0x8dc>
 400d31c:	91410784 	addi	r5,r18,1054
 400d320:	9c0cd83a 	srl	r6,r19,r16
 400d324:	8948983a 	sll	r4,r17,r5
 400d328:	9944983a 	sll	r2,r19,r5
 400d32c:	8c20d83a 	srl	r16,r17,r16
 400d330:	3108b03a 	or	r4,r6,r4
 400d334:	1004c03a 	cmpne	r2,r2,zero
 400d338:	2084b03a 	or	r2,r4,r2
 400d33c:	110001cc 	andi	r4,r2,7
 400d340:	20000726 	beq	r4,zero,400d360 <__divdf3+0x878>
 400d344:	114003cc 	andi	r5,r2,15
 400d348:	01000104 	movi	r4,4
 400d34c:	29000426 	beq	r5,r4,400d360 <__divdf3+0x878>
 400d350:	11000104 	addi	r4,r2,4
 400d354:	2085803a 	cmpltu	r2,r4,r2
 400d358:	80a1883a 	add	r16,r16,r2
 400d35c:	2005883a 	mov	r2,r4
 400d360:	8100202c 	andhi	r4,r16,128
 400d364:	20002d26 	beq	r4,zero,400d41c <__divdf3+0x934>
 400d368:	a180004c 	andi	r6,r20,1
 400d36c:	02000044 	movi	r8,1
 400d370:	000b883a 	mov	r5,zero
 400d374:	0027883a 	mov	r19,zero
 400d378:	003e3906 	br	400cc60 <__alt_data_end+0xfe00cc60>
 400d37c:	d8c00117 	ldw	r3,4(sp)
 400d380:	8c7fff84 	addi	r17,r17,-2
 400d384:	b0ed883a 	add	r22,r22,r3
 400d388:	b0c5803a 	cmpltu	r2,r22,r3
 400d38c:	15c5883a 	add	r2,r2,r23
 400d390:	11cf883a 	add	r7,r2,r7
 400d394:	003f0c06 	br	400cfc8 <__alt_data_end+0xfe00cfc8>
 400d398:	d8c00117 	ldw	r3,4(sp)
 400d39c:	997fff84 	addi	r5,r19,-2
 400d3a0:	18d1883a 	add	r8,r3,r3
 400d3a4:	40c7803a 	cmpltu	r3,r8,r3
 400d3a8:	1dcd883a 	add	r6,r3,r23
 400d3ac:	398f883a 	add	r7,r7,r6
 400d3b0:	da000115 	stw	r8,4(sp)
 400d3b4:	003f8a06 	br	400d1e0 <__alt_data_end+0xfe00d1e0>
 400d3b8:	203f861e 	bne	r4,zero,400d1d4 <__alt_data_end+0xfe00d1d4>
 400d3bc:	d8000115 	stw	zero,4(sp)
 400d3c0:	003f8906 	br	400d1e8 <__alt_data_end+0xfe00d1e8>
 400d3c4:	00bef884 	movi	r2,-1054
 400d3c8:	1485c83a 	sub	r2,r2,r18
 400d3cc:	01000804 	movi	r4,32
 400d3d0:	8884d83a 	srl	r2,r17,r2
 400d3d4:	81001c26 	beq	r16,r4,400d448 <__divdf3+0x960>
 400d3d8:	91010f84 	addi	r4,r18,1086
 400d3dc:	8908983a 	sll	r4,r17,r4
 400d3e0:	24c8b03a 	or	r4,r4,r19
 400d3e4:	2008c03a 	cmpne	r4,r4,zero
 400d3e8:	2084b03a 	or	r2,r4,r2
 400d3ec:	140001cc 	andi	r16,r2,7
 400d3f0:	8000061e 	bne	r16,zero,400d40c <__divdf3+0x924>
 400d3f4:	000b883a 	mov	r5,zero
 400d3f8:	1004d0fa 	srli	r2,r2,3
 400d3fc:	a180004c 	andi	r6,r20,1
 400d400:	0011883a 	mov	r8,zero
 400d404:	1426b03a 	or	r19,r2,r16
 400d408:	003e1506 	br	400cc60 <__alt_data_end+0xfe00cc60>
 400d40c:	114003cc 	andi	r5,r2,15
 400d410:	01000104 	movi	r4,4
 400d414:	0021883a 	mov	r16,zero
 400d418:	293fcd1e 	bne	r5,r4,400d350 <__alt_data_end+0xfe00d350>
 400d41c:	800a927a 	slli	r5,r16,9
 400d420:	8020977a 	slli	r16,r16,29
 400d424:	280ad33a 	srli	r5,r5,12
 400d428:	003ff306 	br	400d3f8 <__alt_data_end+0xfe00d3f8>
 400d42c:	b23fd336 	bltu	r22,r8,400d37c <__alt_data_end+0xfe00d37c>
 400d430:	1023883a 	mov	r17,r2
 400d434:	003fa906 	br	400d2dc <__alt_data_end+0xfe00d2dc>
 400d438:	d8c00117 	ldw	r3,4(sp)
 400d43c:	193fd636 	bltu	r3,r4,400d398 <__alt_data_end+0xfe00d398>
 400d440:	2827883a 	mov	r19,r5
 400d444:	003f6806 	br	400d1e8 <__alt_data_end+0xfe00d1e8>
 400d448:	0009883a 	mov	r4,zero
 400d44c:	003fe406 	br	400d3e0 <__alt_data_end+0xfe00d3e0>
 400d450:	00800434 	movhi	r2,16
 400d454:	89400234 	orhi	r5,r17,8
 400d458:	10bfffc4 	addi	r2,r2,-1
 400d45c:	e00d883a 	mov	r6,fp
 400d460:	288a703a 	and	r5,r5,r2
 400d464:	003e5806 	br	400cdc8 <__alt_data_end+0xfe00cdc8>

0400d468 <__eqdf2>:
 400d468:	2804d53a 	srli	r2,r5,20
 400d46c:	3806d53a 	srli	r3,r7,20
 400d470:	02000434 	movhi	r8,16
 400d474:	423fffc4 	addi	r8,r8,-1
 400d478:	1081ffcc 	andi	r2,r2,2047
 400d47c:	0241ffc4 	movi	r9,2047
 400d480:	2a14703a 	and	r10,r5,r8
 400d484:	18c1ffcc 	andi	r3,r3,2047
 400d488:	3a10703a 	and	r8,r7,r8
 400d48c:	280ad7fa 	srli	r5,r5,31
 400d490:	380ed7fa 	srli	r7,r7,31
 400d494:	12400f26 	beq	r2,r9,400d4d4 <__eqdf2+0x6c>
 400d498:	0241ffc4 	movi	r9,2047
 400d49c:	1a400326 	beq	r3,r9,400d4ac <__eqdf2+0x44>
 400d4a0:	10c00526 	beq	r2,r3,400d4b8 <__eqdf2+0x50>
 400d4a4:	00800044 	movi	r2,1
 400d4a8:	f800283a 	ret
 400d4ac:	4192b03a 	or	r9,r8,r6
 400d4b0:	483ffc1e 	bne	r9,zero,400d4a4 <__alt_data_end+0xfe00d4a4>
 400d4b4:	10fffb1e 	bne	r2,r3,400d4a4 <__alt_data_end+0xfe00d4a4>
 400d4b8:	523ffa1e 	bne	r10,r8,400d4a4 <__alt_data_end+0xfe00d4a4>
 400d4bc:	21bff91e 	bne	r4,r6,400d4a4 <__alt_data_end+0xfe00d4a4>
 400d4c0:	29c00826 	beq	r5,r7,400d4e4 <__eqdf2+0x7c>
 400d4c4:	103ff71e 	bne	r2,zero,400d4a4 <__alt_data_end+0xfe00d4a4>
 400d4c8:	5104b03a 	or	r2,r10,r4
 400d4cc:	1004c03a 	cmpne	r2,r2,zero
 400d4d0:	f800283a 	ret
 400d4d4:	5112b03a 	or	r9,r10,r4
 400d4d8:	483fef26 	beq	r9,zero,400d498 <__alt_data_end+0xfe00d498>
 400d4dc:	00800044 	movi	r2,1
 400d4e0:	f800283a 	ret
 400d4e4:	0005883a 	mov	r2,zero
 400d4e8:	f800283a 	ret

0400d4ec <__gedf2>:
 400d4ec:	2804d53a 	srli	r2,r5,20
 400d4f0:	3806d53a 	srli	r3,r7,20
 400d4f4:	02000434 	movhi	r8,16
 400d4f8:	423fffc4 	addi	r8,r8,-1
 400d4fc:	0241ffc4 	movi	r9,2047
 400d500:	1081ffcc 	andi	r2,r2,2047
 400d504:	2a14703a 	and	r10,r5,r8
 400d508:	1a46703a 	and	r3,r3,r9
 400d50c:	3a10703a 	and	r8,r7,r8
 400d510:	280ad7fa 	srli	r5,r5,31
 400d514:	380ed7fa 	srli	r7,r7,31
 400d518:	12400b26 	beq	r2,r9,400d548 <__gedf2+0x5c>
 400d51c:	1a401626 	beq	r3,r9,400d578 <__gedf2+0x8c>
 400d520:	10000c1e 	bne	r2,zero,400d554 <__gedf2+0x68>
 400d524:	5112b03a 	or	r9,r10,r4
 400d528:	4813003a 	cmpeq	r9,r9,zero
 400d52c:	4817883a 	mov	r11,r9
 400d530:	18000c1e 	bne	r3,zero,400d564 <__gedf2+0x78>
 400d534:	4198b03a 	or	r12,r8,r6
 400d538:	60000a1e 	bne	r12,zero,400d564 <__gedf2+0x78>
 400d53c:	48001326 	beq	r9,zero,400d58c <__gedf2+0xa0>
 400d540:	0005883a 	mov	r2,zero
 400d544:	f800283a 	ret
 400d548:	5112b03a 	or	r9,r10,r4
 400d54c:	4800191e 	bne	r9,zero,400d5b4 <__gedf2+0xc8>
 400d550:	18800926 	beq	r3,r2,400d578 <__gedf2+0x8c>
 400d554:	18000b1e 	bne	r3,zero,400d584 <__gedf2+0x98>
 400d558:	4192b03a 	or	r9,r8,r6
 400d55c:	0017883a 	mov	r11,zero
 400d560:	48000a26 	beq	r9,zero,400d58c <__gedf2+0xa0>
 400d564:	39c03fcc 	andi	r7,r7,255
 400d568:	58000726 	beq	r11,zero,400d588 <__gedf2+0x9c>
 400d56c:	3800081e 	bne	r7,zero,400d590 <__gedf2+0xa4>
 400d570:	00bfffc4 	movi	r2,-1
 400d574:	f800283a 	ret
 400d578:	4192b03a 	or	r9,r8,r6
 400d57c:	48000d1e 	bne	r9,zero,400d5b4 <__gedf2+0xc8>
 400d580:	103fe826 	beq	r2,zero,400d524 <__alt_data_end+0xfe00d524>
 400d584:	39c03fcc 	andi	r7,r7,255
 400d588:	29c00326 	beq	r5,r7,400d598 <__gedf2+0xac>
 400d58c:	283ff81e 	bne	r5,zero,400d570 <__alt_data_end+0xfe00d570>
 400d590:	00800044 	movi	r2,1
 400d594:	f800283a 	ret
 400d598:	18bffc16 	blt	r3,r2,400d58c <__alt_data_end+0xfe00d58c>
 400d59c:	10c00316 	blt	r2,r3,400d5ac <__gedf2+0xc0>
 400d5a0:	42bffa36 	bltu	r8,r10,400d58c <__alt_data_end+0xfe00d58c>
 400d5a4:	52000526 	beq	r10,r8,400d5bc <__gedf2+0xd0>
 400d5a8:	523fe52e 	bgeu	r10,r8,400d540 <__alt_data_end+0xfe00d540>
 400d5ac:	283ff026 	beq	r5,zero,400d570 <__alt_data_end+0xfe00d570>
 400d5b0:	003ff706 	br	400d590 <__alt_data_end+0xfe00d590>
 400d5b4:	00bfff84 	movi	r2,-2
 400d5b8:	f800283a 	ret
 400d5bc:	313ff336 	bltu	r6,r4,400d58c <__alt_data_end+0xfe00d58c>
 400d5c0:	21bfdf2e 	bgeu	r4,r6,400d540 <__alt_data_end+0xfe00d540>
 400d5c4:	283fea26 	beq	r5,zero,400d570 <__alt_data_end+0xfe00d570>
 400d5c8:	003ff106 	br	400d590 <__alt_data_end+0xfe00d590>

0400d5cc <__ledf2>:
 400d5cc:	2804d53a 	srli	r2,r5,20
 400d5d0:	3810d53a 	srli	r8,r7,20
 400d5d4:	00c00434 	movhi	r3,16
 400d5d8:	18ffffc4 	addi	r3,r3,-1
 400d5dc:	0241ffc4 	movi	r9,2047
 400d5e0:	1081ffcc 	andi	r2,r2,2047
 400d5e4:	28d4703a 	and	r10,r5,r3
 400d5e8:	4250703a 	and	r8,r8,r9
 400d5ec:	38c6703a 	and	r3,r7,r3
 400d5f0:	280ad7fa 	srli	r5,r5,31
 400d5f4:	380ed7fa 	srli	r7,r7,31
 400d5f8:	12400b26 	beq	r2,r9,400d628 <__ledf2+0x5c>
 400d5fc:	42401926 	beq	r8,r9,400d664 <__ledf2+0x98>
 400d600:	10000c1e 	bne	r2,zero,400d634 <__ledf2+0x68>
 400d604:	5112b03a 	or	r9,r10,r4
 400d608:	4813003a 	cmpeq	r9,r9,zero
 400d60c:	4817883a 	mov	r11,r9
 400d610:	40000f26 	beq	r8,zero,400d650 <__ledf2+0x84>
 400d614:	39c03fcc 	andi	r7,r7,255
 400d618:	58001826 	beq	r11,zero,400d67c <__ledf2+0xb0>
 400d61c:	38000a1e 	bne	r7,zero,400d648 <__ledf2+0x7c>
 400d620:	00bfffc4 	movi	r2,-1
 400d624:	f800283a 	ret
 400d628:	5112b03a 	or	r9,r10,r4
 400d62c:	48000f1e 	bne	r9,zero,400d66c <__ledf2+0xa0>
 400d630:	40800c26 	beq	r8,r2,400d664 <__ledf2+0x98>
 400d634:	4000101e 	bne	r8,zero,400d678 <__ledf2+0xac>
 400d638:	1992b03a 	or	r9,r3,r6
 400d63c:	0017883a 	mov	r11,zero
 400d640:	483ff41e 	bne	r9,zero,400d614 <__alt_data_end+0xfe00d614>
 400d644:	283ff61e 	bne	r5,zero,400d620 <__alt_data_end+0xfe00d620>
 400d648:	00800044 	movi	r2,1
 400d64c:	f800283a 	ret
 400d650:	1998b03a 	or	r12,r3,r6
 400d654:	603fef1e 	bne	r12,zero,400d614 <__alt_data_end+0xfe00d614>
 400d658:	483ffa26 	beq	r9,zero,400d644 <__alt_data_end+0xfe00d644>
 400d65c:	0005883a 	mov	r2,zero
 400d660:	f800283a 	ret
 400d664:	1992b03a 	or	r9,r3,r6
 400d668:	48000226 	beq	r9,zero,400d674 <__ledf2+0xa8>
 400d66c:	00800084 	movi	r2,2
 400d670:	f800283a 	ret
 400d674:	103fe326 	beq	r2,zero,400d604 <__alt_data_end+0xfe00d604>
 400d678:	39c03fcc 	andi	r7,r7,255
 400d67c:	29fff11e 	bne	r5,r7,400d644 <__alt_data_end+0xfe00d644>
 400d680:	40bff016 	blt	r8,r2,400d644 <__alt_data_end+0xfe00d644>
 400d684:	12000316 	blt	r2,r8,400d694 <__ledf2+0xc8>
 400d688:	1abfee36 	bltu	r3,r10,400d644 <__alt_data_end+0xfe00d644>
 400d68c:	50c00326 	beq	r10,r3,400d69c <__ledf2+0xd0>
 400d690:	50fff22e 	bgeu	r10,r3,400d65c <__alt_data_end+0xfe00d65c>
 400d694:	283fe226 	beq	r5,zero,400d620 <__alt_data_end+0xfe00d620>
 400d698:	003feb06 	br	400d648 <__alt_data_end+0xfe00d648>
 400d69c:	313fe936 	bltu	r6,r4,400d644 <__alt_data_end+0xfe00d644>
 400d6a0:	21bfee2e 	bgeu	r4,r6,400d65c <__alt_data_end+0xfe00d65c>
 400d6a4:	283fde26 	beq	r5,zero,400d620 <__alt_data_end+0xfe00d620>
 400d6a8:	003fe706 	br	400d648 <__alt_data_end+0xfe00d648>

0400d6ac <__muldf3>:
 400d6ac:	deffee04 	addi	sp,sp,-72
 400d6b0:	dd000c15 	stw	r20,48(sp)
 400d6b4:	2828d53a 	srli	r20,r5,20
 400d6b8:	dd400d15 	stw	r21,52(sp)
 400d6bc:	282ad7fa 	srli	r21,r5,31
 400d6c0:	dc000815 	stw	r16,32(sp)
 400d6c4:	04000434 	movhi	r16,16
 400d6c8:	ddc00f15 	stw	r23,60(sp)
 400d6cc:	dcc00b15 	stw	r19,44(sp)
 400d6d0:	dc800a15 	stw	r18,40(sp)
 400d6d4:	843fffc4 	addi	r16,r16,-1
 400d6d8:	dfc01115 	stw	ra,68(sp)
 400d6dc:	df001015 	stw	fp,64(sp)
 400d6e0:	dd800e15 	stw	r22,56(sp)
 400d6e4:	dc400915 	stw	r17,36(sp)
 400d6e8:	a501ffcc 	andi	r20,r20,2047
 400d6ec:	2025883a 	mov	r18,r4
 400d6f0:	202f883a 	mov	r23,r4
 400d6f4:	2c20703a 	and	r16,r5,r16
 400d6f8:	a827883a 	mov	r19,r21
 400d6fc:	aa403fcc 	andi	r9,r21,255
 400d700:	a0005926 	beq	r20,zero,400d868 <__muldf3+0x1bc>
 400d704:	0081ffc4 	movi	r2,2047
 400d708:	a0803426 	beq	r20,r2,400d7dc <__muldf3+0x130>
 400d70c:	84000434 	orhi	r16,r16,16
 400d710:	2004d77a 	srli	r2,r4,29
 400d714:	802090fa 	slli	r16,r16,3
 400d718:	202e90fa 	slli	r23,r4,3
 400d71c:	a53f0044 	addi	r20,r20,-1023
 400d720:	80a0b03a 	or	r16,r16,r2
 400d724:	000b883a 	mov	r5,zero
 400d728:	0039883a 	mov	fp,zero
 400d72c:	3806d53a 	srli	r3,r7,20
 400d730:	382cd7fa 	srli	r22,r7,31
 400d734:	00800434 	movhi	r2,16
 400d738:	10bfffc4 	addi	r2,r2,-1
 400d73c:	18c1ffcc 	andi	r3,r3,2047
 400d740:	3025883a 	mov	r18,r6
 400d744:	38a2703a 	and	r17,r7,r2
 400d748:	b2803fcc 	andi	r10,r22,255
 400d74c:	18006426 	beq	r3,zero,400d8e0 <__muldf3+0x234>
 400d750:	0081ffc4 	movi	r2,2047
 400d754:	18805c26 	beq	r3,r2,400d8c8 <__muldf3+0x21c>
 400d758:	8c400434 	orhi	r17,r17,16
 400d75c:	3004d77a 	srli	r2,r6,29
 400d760:	882290fa 	slli	r17,r17,3
 400d764:	302490fa 	slli	r18,r6,3
 400d768:	18ff0044 	addi	r3,r3,-1023
 400d76c:	88a2b03a 	or	r17,r17,r2
 400d770:	000f883a 	mov	r7,zero
 400d774:	394ab03a 	or	r5,r7,r5
 400d778:	280a90ba 	slli	r5,r5,2
 400d77c:	00810074 	movhi	r2,1025
 400d780:	10b5e704 	addi	r2,r2,-10340
 400d784:	288b883a 	add	r5,r5,r2
 400d788:	28800017 	ldw	r2,0(r5)
 400d78c:	a0c7883a 	add	r3,r20,r3
 400d790:	b54cf03a 	xor	r6,r22,r21
 400d794:	1a000044 	addi	r8,r3,1
 400d798:	1000683a 	jmp	r2
 400d79c:	0400d9e0 	cmpeqi	r16,zero,871
 400d7a0:	0400d9cc 	andi	r16,zero,871
 400d7a4:	0400d9cc 	andi	r16,zero,871
 400d7a8:	0400d9b8 	rdprs	r16,zero,870
 400d7ac:	0400d7f8 	rdprs	r16,zero,863
 400d7b0:	0400d7f8 	rdprs	r16,zero,863
 400d7b4:	0400d9a0 	cmpeqi	r16,zero,870
 400d7b8:	0400d9b8 	rdprs	r16,zero,870
 400d7bc:	0400d7f8 	rdprs	r16,zero,863
 400d7c0:	0400d9a0 	cmpeqi	r16,zero,870
 400d7c4:	0400d7f8 	rdprs	r16,zero,863
 400d7c8:	0400d9b8 	rdprs	r16,zero,870
 400d7cc:	0400d7fc 	xorhi	r16,zero,863
 400d7d0:	0400d7fc 	xorhi	r16,zero,863
 400d7d4:	0400d7fc 	xorhi	r16,zero,863
 400d7d8:	0400dd1c 	xori	r16,zero,884
 400d7dc:	8104b03a 	or	r2,r16,r4
 400d7e0:	10006c1e 	bne	r2,zero,400d994 <__muldf3+0x2e8>
 400d7e4:	01400204 	movi	r5,8
 400d7e8:	0021883a 	mov	r16,zero
 400d7ec:	002f883a 	mov	r23,zero
 400d7f0:	07000084 	movi	fp,2
 400d7f4:	003fcd06 	br	400d72c <__alt_data_end+0xfe00d72c>
 400d7f8:	3013883a 	mov	r9,r6
 400d7fc:	00800084 	movi	r2,2
 400d800:	e080501e 	bne	fp,r2,400d944 <__muldf3+0x298>
 400d804:	4cc0004c 	andi	r19,r9,1
 400d808:	0101ffc4 	movi	r4,2047
 400d80c:	0021883a 	mov	r16,zero
 400d810:	002f883a 	mov	r23,zero
 400d814:	2008953a 	slli	r4,r4,20
 400d818:	98c03fcc 	andi	r3,r19,255
 400d81c:	04400434 	movhi	r17,16
 400d820:	8c7fffc4 	addi	r17,r17,-1
 400d824:	180697fa 	slli	r3,r3,31
 400d828:	8460703a 	and	r16,r16,r17
 400d82c:	8120b03a 	or	r16,r16,r4
 400d830:	80c6b03a 	or	r3,r16,r3
 400d834:	b805883a 	mov	r2,r23
 400d838:	dfc01117 	ldw	ra,68(sp)
 400d83c:	df001017 	ldw	fp,64(sp)
 400d840:	ddc00f17 	ldw	r23,60(sp)
 400d844:	dd800e17 	ldw	r22,56(sp)
 400d848:	dd400d17 	ldw	r21,52(sp)
 400d84c:	dd000c17 	ldw	r20,48(sp)
 400d850:	dcc00b17 	ldw	r19,44(sp)
 400d854:	dc800a17 	ldw	r18,40(sp)
 400d858:	dc400917 	ldw	r17,36(sp)
 400d85c:	dc000817 	ldw	r16,32(sp)
 400d860:	dec01204 	addi	sp,sp,72
 400d864:	f800283a 	ret
 400d868:	8104b03a 	or	r2,r16,r4
 400d86c:	10004426 	beq	r2,zero,400d980 <__muldf3+0x2d4>
 400d870:	80014b26 	beq	r16,zero,400dda0 <__muldf3+0x6f4>
 400d874:	8009883a 	mov	r4,r16
 400d878:	d9800715 	stw	r6,28(sp)
 400d87c:	d9c00215 	stw	r7,8(sp)
 400d880:	da400415 	stw	r9,16(sp)
 400d884:	400e9e40 	call	400e9e4 <__clzsi2>
 400d888:	d9800717 	ldw	r6,28(sp)
 400d88c:	d9c00217 	ldw	r7,8(sp)
 400d890:	da400417 	ldw	r9,16(sp)
 400d894:	1007883a 	mov	r3,r2
 400d898:	01000a04 	movi	r4,40
 400d89c:	1dfffe04 	addi	r23,r3,-8
 400d8a0:	20c9c83a 	sub	r4,r4,r3
 400d8a4:	85e0983a 	sll	r16,r16,r23
 400d8a8:	9108d83a 	srl	r4,r18,r4
 400d8ac:	95ee983a 	sll	r23,r18,r23
 400d8b0:	2420b03a 	or	r16,r4,r16
 400d8b4:	053f0344 	movi	r20,-1011
 400d8b8:	a0e9c83a 	sub	r20,r20,r3
 400d8bc:	000b883a 	mov	r5,zero
 400d8c0:	0039883a 	mov	fp,zero
 400d8c4:	003f9906 	br	400d72c <__alt_data_end+0xfe00d72c>
 400d8c8:	8984b03a 	or	r2,r17,r6
 400d8cc:	10002a1e 	bne	r2,zero,400d978 <__muldf3+0x2cc>
 400d8d0:	0023883a 	mov	r17,zero
 400d8d4:	0025883a 	mov	r18,zero
 400d8d8:	01c00084 	movi	r7,2
 400d8dc:	003fa506 	br	400d774 <__alt_data_end+0xfe00d774>
 400d8e0:	8984b03a 	or	r2,r17,r6
 400d8e4:	10002026 	beq	r2,zero,400d968 <__muldf3+0x2bc>
 400d8e8:	88011c26 	beq	r17,zero,400dd5c <__muldf3+0x6b0>
 400d8ec:	8809883a 	mov	r4,r17
 400d8f0:	d9400215 	stw	r5,8(sp)
 400d8f4:	d9800715 	stw	r6,28(sp)
 400d8f8:	da400415 	stw	r9,16(sp)
 400d8fc:	da800315 	stw	r10,12(sp)
 400d900:	400e9e40 	call	400e9e4 <__clzsi2>
 400d904:	d9400217 	ldw	r5,8(sp)
 400d908:	d9800717 	ldw	r6,28(sp)
 400d90c:	da400417 	ldw	r9,16(sp)
 400d910:	da800317 	ldw	r10,12(sp)
 400d914:	1007883a 	mov	r3,r2
 400d918:	01000a04 	movi	r4,40
 400d91c:	1cbffe04 	addi	r18,r3,-8
 400d920:	20c9c83a 	sub	r4,r4,r3
 400d924:	8ca2983a 	sll	r17,r17,r18
 400d928:	3108d83a 	srl	r4,r6,r4
 400d92c:	34a4983a 	sll	r18,r6,r18
 400d930:	2462b03a 	or	r17,r4,r17
 400d934:	00bf0344 	movi	r2,-1011
 400d938:	10c7c83a 	sub	r3,r2,r3
 400d93c:	000f883a 	mov	r7,zero
 400d940:	003f8c06 	br	400d774 <__alt_data_end+0xfe00d774>
 400d944:	008000c4 	movi	r2,3
 400d948:	e0816d26 	beq	fp,r2,400df00 <__muldf3+0x854>
 400d94c:	00800044 	movi	r2,1
 400d950:	e081321e 	bne	fp,r2,400de1c <__muldf3+0x770>
 400d954:	48a6703a 	and	r19,r9,r2
 400d958:	0009883a 	mov	r4,zero
 400d95c:	0021883a 	mov	r16,zero
 400d960:	002f883a 	mov	r23,zero
 400d964:	003fab06 	br	400d814 <__alt_data_end+0xfe00d814>
 400d968:	0023883a 	mov	r17,zero
 400d96c:	0025883a 	mov	r18,zero
 400d970:	01c00044 	movi	r7,1
 400d974:	003f7f06 	br	400d774 <__alt_data_end+0xfe00d774>
 400d978:	01c000c4 	movi	r7,3
 400d97c:	003f7d06 	br	400d774 <__alt_data_end+0xfe00d774>
 400d980:	01400104 	movi	r5,4
 400d984:	0021883a 	mov	r16,zero
 400d988:	002f883a 	mov	r23,zero
 400d98c:	07000044 	movi	fp,1
 400d990:	003f6606 	br	400d72c <__alt_data_end+0xfe00d72c>
 400d994:	01400304 	movi	r5,12
 400d998:	070000c4 	movi	fp,3
 400d99c:	003f6306 	br	400d72c <__alt_data_end+0xfe00d72c>
 400d9a0:	04000434 	movhi	r16,16
 400d9a4:	0027883a 	mov	r19,zero
 400d9a8:	843fffc4 	addi	r16,r16,-1
 400d9ac:	05ffffc4 	movi	r23,-1
 400d9b0:	0101ffc4 	movi	r4,2047
 400d9b4:	003f9706 	br	400d814 <__alt_data_end+0xfe00d814>
 400d9b8:	8821883a 	mov	r16,r17
 400d9bc:	902f883a 	mov	r23,r18
 400d9c0:	5013883a 	mov	r9,r10
 400d9c4:	3839883a 	mov	fp,r7
 400d9c8:	003f8c06 	br	400d7fc <__alt_data_end+0xfe00d7fc>
 400d9cc:	8821883a 	mov	r16,r17
 400d9d0:	902f883a 	mov	r23,r18
 400d9d4:	3013883a 	mov	r9,r6
 400d9d8:	3839883a 	mov	fp,r7
 400d9dc:	003f8706 	br	400d7fc <__alt_data_end+0xfe00d7fc>
 400d9e0:	b82ad43a 	srli	r21,r23,16
 400d9e4:	9038d43a 	srli	fp,r18,16
 400d9e8:	bdffffcc 	andi	r23,r23,65535
 400d9ec:	94bfffcc 	andi	r18,r18,65535
 400d9f0:	9009883a 	mov	r4,r18
 400d9f4:	b80b883a 	mov	r5,r23
 400d9f8:	d8c00515 	stw	r3,20(sp)
 400d9fc:	d9800715 	stw	r6,28(sp)
 400da00:	da000615 	stw	r8,24(sp)
 400da04:	400c2240 	call	400c224 <__mulsi3>
 400da08:	9009883a 	mov	r4,r18
 400da0c:	a80b883a 	mov	r5,r21
 400da10:	1029883a 	mov	r20,r2
 400da14:	400c2240 	call	400c224 <__mulsi3>
 400da18:	e009883a 	mov	r4,fp
 400da1c:	a80b883a 	mov	r5,r21
 400da20:	102d883a 	mov	r22,r2
 400da24:	400c2240 	call	400c224 <__mulsi3>
 400da28:	e009883a 	mov	r4,fp
 400da2c:	b80b883a 	mov	r5,r23
 400da30:	1027883a 	mov	r19,r2
 400da34:	400c2240 	call	400c224 <__mulsi3>
 400da38:	a008d43a 	srli	r4,r20,16
 400da3c:	b085883a 	add	r2,r22,r2
 400da40:	d8c00517 	ldw	r3,20(sp)
 400da44:	110f883a 	add	r7,r2,r4
 400da48:	d9800717 	ldw	r6,28(sp)
 400da4c:	da000617 	ldw	r8,24(sp)
 400da50:	3d80022e 	bgeu	r7,r22,400da5c <__muldf3+0x3b0>
 400da54:	00800074 	movhi	r2,1
 400da58:	98a7883a 	add	r19,r19,r2
 400da5c:	3804943a 	slli	r2,r7,16
 400da60:	380ed43a 	srli	r7,r7,16
 400da64:	882cd43a 	srli	r22,r17,16
 400da68:	a53fffcc 	andi	r20,r20,65535
 400da6c:	8c7fffcc 	andi	r17,r17,65535
 400da70:	1529883a 	add	r20,r2,r20
 400da74:	8809883a 	mov	r4,r17
 400da78:	b80b883a 	mov	r5,r23
 400da7c:	d8c00515 	stw	r3,20(sp)
 400da80:	d9800715 	stw	r6,28(sp)
 400da84:	da000615 	stw	r8,24(sp)
 400da88:	d9c00015 	stw	r7,0(sp)
 400da8c:	dd000115 	stw	r20,4(sp)
 400da90:	400c2240 	call	400c224 <__mulsi3>
 400da94:	a80b883a 	mov	r5,r21
 400da98:	8809883a 	mov	r4,r17
 400da9c:	d8800415 	stw	r2,16(sp)
 400daa0:	400c2240 	call	400c224 <__mulsi3>
 400daa4:	a80b883a 	mov	r5,r21
 400daa8:	b009883a 	mov	r4,r22
 400daac:	1029883a 	mov	r20,r2
 400dab0:	400c2240 	call	400c224 <__mulsi3>
 400dab4:	b009883a 	mov	r4,r22
 400dab8:	b80b883a 	mov	r5,r23
 400dabc:	102b883a 	mov	r21,r2
 400dac0:	400c2240 	call	400c224 <__mulsi3>
 400dac4:	da400417 	ldw	r9,16(sp)
 400dac8:	a085883a 	add	r2,r20,r2
 400dacc:	d8c00517 	ldw	r3,20(sp)
 400dad0:	4808d43a 	srli	r4,r9,16
 400dad4:	d9800717 	ldw	r6,28(sp)
 400dad8:	da000617 	ldw	r8,24(sp)
 400dadc:	1109883a 	add	r4,r2,r4
 400dae0:	2500022e 	bgeu	r4,r20,400daec <__muldf3+0x440>
 400dae4:	00800074 	movhi	r2,1
 400dae8:	a8ab883a 	add	r21,r21,r2
 400daec:	200e943a 	slli	r7,r4,16
 400daf0:	2004d43a 	srli	r2,r4,16
 400daf4:	802ed43a 	srli	r23,r16,16
 400daf8:	843fffcc 	andi	r16,r16,65535
 400dafc:	4d3fffcc 	andi	r20,r9,65535
 400db00:	9009883a 	mov	r4,r18
 400db04:	800b883a 	mov	r5,r16
 400db08:	3d29883a 	add	r20,r7,r20
 400db0c:	d8c00515 	stw	r3,20(sp)
 400db10:	d9800715 	stw	r6,28(sp)
 400db14:	da000615 	stw	r8,24(sp)
 400db18:	a8ab883a 	add	r21,r21,r2
 400db1c:	400c2240 	call	400c224 <__mulsi3>
 400db20:	9009883a 	mov	r4,r18
 400db24:	b80b883a 	mov	r5,r23
 400db28:	d8800315 	stw	r2,12(sp)
 400db2c:	400c2240 	call	400c224 <__mulsi3>
 400db30:	e009883a 	mov	r4,fp
 400db34:	b80b883a 	mov	r5,r23
 400db38:	1025883a 	mov	r18,r2
 400db3c:	400c2240 	call	400c224 <__mulsi3>
 400db40:	e009883a 	mov	r4,fp
 400db44:	800b883a 	mov	r5,r16
 400db48:	d8800215 	stw	r2,8(sp)
 400db4c:	400c2240 	call	400c224 <__mulsi3>
 400db50:	da800317 	ldw	r10,12(sp)
 400db54:	d9400017 	ldw	r5,0(sp)
 400db58:	9085883a 	add	r2,r18,r2
 400db5c:	5008d43a 	srli	r4,r10,16
 400db60:	a153883a 	add	r9,r20,r5
 400db64:	d8c00517 	ldw	r3,20(sp)
 400db68:	1109883a 	add	r4,r2,r4
 400db6c:	d9800717 	ldw	r6,28(sp)
 400db70:	da000617 	ldw	r8,24(sp)
 400db74:	dac00217 	ldw	r11,8(sp)
 400db78:	2480022e 	bgeu	r4,r18,400db84 <__muldf3+0x4d8>
 400db7c:	00800074 	movhi	r2,1
 400db80:	5897883a 	add	r11,r11,r2
 400db84:	200e943a 	slli	r7,r4,16
 400db88:	2038d43a 	srli	fp,r4,16
 400db8c:	52bfffcc 	andi	r10,r10,65535
 400db90:	3a8f883a 	add	r7,r7,r10
 400db94:	8809883a 	mov	r4,r17
 400db98:	800b883a 	mov	r5,r16
 400db9c:	d8c00515 	stw	r3,20(sp)
 400dba0:	d9800715 	stw	r6,28(sp)
 400dba4:	d9c00215 	stw	r7,8(sp)
 400dba8:	da000615 	stw	r8,24(sp)
 400dbac:	da400415 	stw	r9,16(sp)
 400dbb0:	5f39883a 	add	fp,r11,fp
 400dbb4:	400c2240 	call	400c224 <__mulsi3>
 400dbb8:	8809883a 	mov	r4,r17
 400dbbc:	b80b883a 	mov	r5,r23
 400dbc0:	1025883a 	mov	r18,r2
 400dbc4:	400c2240 	call	400c224 <__mulsi3>
 400dbc8:	b009883a 	mov	r4,r22
 400dbcc:	b80b883a 	mov	r5,r23
 400dbd0:	d8800315 	stw	r2,12(sp)
 400dbd4:	400c2240 	call	400c224 <__mulsi3>
 400dbd8:	b009883a 	mov	r4,r22
 400dbdc:	800b883a 	mov	r5,r16
 400dbe0:	1023883a 	mov	r17,r2
 400dbe4:	400c2240 	call	400c224 <__mulsi3>
 400dbe8:	da800317 	ldw	r10,12(sp)
 400dbec:	9008d43a 	srli	r4,r18,16
 400dbf0:	d8c00517 	ldw	r3,20(sp)
 400dbf4:	5085883a 	add	r2,r10,r2
 400dbf8:	1109883a 	add	r4,r2,r4
 400dbfc:	d9800717 	ldw	r6,28(sp)
 400dc00:	d9c00217 	ldw	r7,8(sp)
 400dc04:	da000617 	ldw	r8,24(sp)
 400dc08:	da400417 	ldw	r9,16(sp)
 400dc0c:	2280022e 	bgeu	r4,r10,400dc18 <__muldf3+0x56c>
 400dc10:	00800074 	movhi	r2,1
 400dc14:	88a3883a 	add	r17,r17,r2
 400dc18:	2004943a 	slli	r2,r4,16
 400dc1c:	94bfffcc 	andi	r18,r18,65535
 400dc20:	4ce7883a 	add	r19,r9,r19
 400dc24:	14a5883a 	add	r18,r2,r18
 400dc28:	9d29803a 	cmpltu	r20,r19,r20
 400dc2c:	9565883a 	add	r18,r18,r21
 400dc30:	9505883a 	add	r2,r18,r20
 400dc34:	99e7883a 	add	r19,r19,r7
 400dc38:	99cf803a 	cmpltu	r7,r19,r7
 400dc3c:	e08b883a 	add	r5,fp,r2
 400dc40:	2008d43a 	srli	r4,r4,16
 400dc44:	29ef883a 	add	r23,r5,r7
 400dc48:	1529803a 	cmpltu	r20,r2,r20
 400dc4c:	956b803a 	cmpltu	r21,r18,r21
 400dc50:	b9cf803a 	cmpltu	r7,r23,r7
 400dc54:	a564b03a 	or	r18,r20,r21
 400dc58:	2f39803a 	cmpltu	fp,r5,fp
 400dc5c:	9125883a 	add	r18,r18,r4
 400dc60:	3f38b03a 	or	fp,r7,fp
 400dc64:	9725883a 	add	r18,r18,fp
 400dc68:	9804927a 	slli	r2,r19,9
 400dc6c:	9463883a 	add	r17,r18,r17
 400dc70:	d9000117 	ldw	r4,4(sp)
 400dc74:	b820d5fa 	srli	r16,r23,23
 400dc78:	8822927a 	slli	r17,r17,9
 400dc7c:	9826d5fa 	srli	r19,r19,23
 400dc80:	1104b03a 	or	r2,r2,r4
 400dc84:	b82e927a 	slli	r23,r23,9
 400dc88:	1004c03a 	cmpne	r2,r2,zero
 400dc8c:	8c20b03a 	or	r16,r17,r16
 400dc90:	14e6b03a 	or	r19,r2,r19
 400dc94:	8080402c 	andhi	r2,r16,256
 400dc98:	9deeb03a 	or	r23,r19,r23
 400dc9c:	10000726 	beq	r2,zero,400dcbc <__muldf3+0x610>
 400dca0:	b804d07a 	srli	r2,r23,1
 400dca4:	800697fa 	slli	r3,r16,31
 400dca8:	bdc0004c 	andi	r23,r23,1
 400dcac:	8020d07a 	srli	r16,r16,1
 400dcb0:	b8aeb03a 	or	r23,r23,r2
 400dcb4:	b8eeb03a 	or	r23,r23,r3
 400dcb8:	4007883a 	mov	r3,r8
 400dcbc:	1900ffc4 	addi	r4,r3,1023
 400dcc0:	01004d0e 	bge	zero,r4,400ddf8 <__muldf3+0x74c>
 400dcc4:	b88001cc 	andi	r2,r23,7
 400dcc8:	10000726 	beq	r2,zero,400dce8 <__muldf3+0x63c>
 400dccc:	b94003cc 	andi	r5,r23,15
 400dcd0:	00800104 	movi	r2,4
 400dcd4:	28800426 	beq	r5,r2,400dce8 <__muldf3+0x63c>
 400dcd8:	b885883a 	add	r2,r23,r2
 400dcdc:	15ef803a 	cmpltu	r23,r2,r23
 400dce0:	85e1883a 	add	r16,r16,r23
 400dce4:	102f883a 	mov	r23,r2
 400dce8:	8080402c 	andhi	r2,r16,256
 400dcec:	10000426 	beq	r2,zero,400dd00 <__muldf3+0x654>
 400dcf0:	00bfc034 	movhi	r2,65280
 400dcf4:	10bfffc4 	addi	r2,r2,-1
 400dcf8:	19010004 	addi	r4,r3,1024
 400dcfc:	80a0703a 	and	r16,r16,r2
 400dd00:	0081ff84 	movi	r2,2046
 400dd04:	1100340e 	bge	r2,r4,400ddd8 <__muldf3+0x72c>
 400dd08:	34c0004c 	andi	r19,r6,1
 400dd0c:	0101ffc4 	movi	r4,2047
 400dd10:	0021883a 	mov	r16,zero
 400dd14:	002f883a 	mov	r23,zero
 400dd18:	003ebe06 	br	400d814 <__alt_data_end+0xfe00d814>
 400dd1c:	8080022c 	andhi	r2,r16,8
 400dd20:	10000926 	beq	r2,zero,400dd48 <__muldf3+0x69c>
 400dd24:	8880022c 	andhi	r2,r17,8
 400dd28:	1000071e 	bne	r2,zero,400dd48 <__muldf3+0x69c>
 400dd2c:	00800434 	movhi	r2,16
 400dd30:	8c000234 	orhi	r16,r17,8
 400dd34:	10bfffc4 	addi	r2,r2,-1
 400dd38:	b027883a 	mov	r19,r22
 400dd3c:	80a0703a 	and	r16,r16,r2
 400dd40:	902f883a 	mov	r23,r18
 400dd44:	003f1a06 	br	400d9b0 <__alt_data_end+0xfe00d9b0>
 400dd48:	00800434 	movhi	r2,16
 400dd4c:	84000234 	orhi	r16,r16,8
 400dd50:	10bfffc4 	addi	r2,r2,-1
 400dd54:	80a0703a 	and	r16,r16,r2
 400dd58:	003f1506 	br	400d9b0 <__alt_data_end+0xfe00d9b0>
 400dd5c:	3009883a 	mov	r4,r6
 400dd60:	d9400215 	stw	r5,8(sp)
 400dd64:	d9800715 	stw	r6,28(sp)
 400dd68:	da400415 	stw	r9,16(sp)
 400dd6c:	da800315 	stw	r10,12(sp)
 400dd70:	400e9e40 	call	400e9e4 <__clzsi2>
 400dd74:	10c00804 	addi	r3,r2,32
 400dd78:	010009c4 	movi	r4,39
 400dd7c:	d9400217 	ldw	r5,8(sp)
 400dd80:	d9800717 	ldw	r6,28(sp)
 400dd84:	da400417 	ldw	r9,16(sp)
 400dd88:	da800317 	ldw	r10,12(sp)
 400dd8c:	20fee20e 	bge	r4,r3,400d918 <__alt_data_end+0xfe00d918>
 400dd90:	147ffe04 	addi	r17,r2,-8
 400dd94:	9462983a 	sll	r17,r18,r17
 400dd98:	0025883a 	mov	r18,zero
 400dd9c:	003ee506 	br	400d934 <__alt_data_end+0xfe00d934>
 400dda0:	d9800715 	stw	r6,28(sp)
 400dda4:	d9c00215 	stw	r7,8(sp)
 400dda8:	da400415 	stw	r9,16(sp)
 400ddac:	400e9e40 	call	400e9e4 <__clzsi2>
 400ddb0:	10c00804 	addi	r3,r2,32
 400ddb4:	010009c4 	movi	r4,39
 400ddb8:	d9800717 	ldw	r6,28(sp)
 400ddbc:	d9c00217 	ldw	r7,8(sp)
 400ddc0:	da400417 	ldw	r9,16(sp)
 400ddc4:	20feb40e 	bge	r4,r3,400d898 <__alt_data_end+0xfe00d898>
 400ddc8:	143ffe04 	addi	r16,r2,-8
 400ddcc:	9420983a 	sll	r16,r18,r16
 400ddd0:	002f883a 	mov	r23,zero
 400ddd4:	003eb706 	br	400d8b4 <__alt_data_end+0xfe00d8b4>
 400ddd8:	8004977a 	slli	r2,r16,29
 400dddc:	b82ed0fa 	srli	r23,r23,3
 400dde0:	8020927a 	slli	r16,r16,9
 400dde4:	2101ffcc 	andi	r4,r4,2047
 400dde8:	15eeb03a 	or	r23,r2,r23
 400ddec:	8020d33a 	srli	r16,r16,12
 400ddf0:	34c0004c 	andi	r19,r6,1
 400ddf4:	003e8706 	br	400d814 <__alt_data_end+0xfe00d814>
 400ddf8:	00bf0084 	movi	r2,-1022
 400ddfc:	10c5c83a 	sub	r2,r2,r3
 400de00:	01000e04 	movi	r4,56
 400de04:	2080080e 	bge	r4,r2,400de28 <__muldf3+0x77c>
 400de08:	34c0004c 	andi	r19,r6,1
 400de0c:	0009883a 	mov	r4,zero
 400de10:	0021883a 	mov	r16,zero
 400de14:	002f883a 	mov	r23,zero
 400de18:	003e7e06 	br	400d814 <__alt_data_end+0xfe00d814>
 400de1c:	4007883a 	mov	r3,r8
 400de20:	480d883a 	mov	r6,r9
 400de24:	003fa506 	br	400dcbc <__alt_data_end+0xfe00dcbc>
 400de28:	010007c4 	movi	r4,31
 400de2c:	20801816 	blt	r4,r2,400de90 <__muldf3+0x7e4>
 400de30:	18c10784 	addi	r3,r3,1054
 400de34:	80c8983a 	sll	r4,r16,r3
 400de38:	b88ad83a 	srl	r5,r23,r2
 400de3c:	b8c6983a 	sll	r3,r23,r3
 400de40:	80a0d83a 	srl	r16,r16,r2
 400de44:	2908b03a 	or	r4,r5,r4
 400de48:	1804c03a 	cmpne	r2,r3,zero
 400de4c:	2088b03a 	or	r4,r4,r2
 400de50:	208001cc 	andi	r2,r4,7
 400de54:	10000726 	beq	r2,zero,400de74 <__muldf3+0x7c8>
 400de58:	20c003cc 	andi	r3,r4,15
 400de5c:	00800104 	movi	r2,4
 400de60:	18800426 	beq	r3,r2,400de74 <__muldf3+0x7c8>
 400de64:	20c00104 	addi	r3,r4,4
 400de68:	1905803a 	cmpltu	r2,r3,r4
 400de6c:	80a1883a 	add	r16,r16,r2
 400de70:	1809883a 	mov	r4,r3
 400de74:	8080202c 	andhi	r2,r16,128
 400de78:	10001b26 	beq	r2,zero,400dee8 <__muldf3+0x83c>
 400de7c:	34c0004c 	andi	r19,r6,1
 400de80:	01000044 	movi	r4,1
 400de84:	0021883a 	mov	r16,zero
 400de88:	002f883a 	mov	r23,zero
 400de8c:	003e6106 	br	400d814 <__alt_data_end+0xfe00d814>
 400de90:	013ef884 	movi	r4,-1054
 400de94:	20c9c83a 	sub	r4,r4,r3
 400de98:	01400804 	movi	r5,32
 400de9c:	8108d83a 	srl	r4,r16,r4
 400dea0:	11401526 	beq	r2,r5,400def8 <__muldf3+0x84c>
 400dea4:	18c10f84 	addi	r3,r3,1086
 400dea8:	80e0983a 	sll	r16,r16,r3
 400deac:	85eeb03a 	or	r23,r16,r23
 400deb0:	b804c03a 	cmpne	r2,r23,zero
 400deb4:	1108b03a 	or	r4,r2,r4
 400deb8:	20c001cc 	andi	r3,r4,7
 400debc:	1800061e 	bne	r3,zero,400ded8 <__muldf3+0x82c>
 400dec0:	0021883a 	mov	r16,zero
 400dec4:	202ed0fa 	srli	r23,r4,3
 400dec8:	34c0004c 	andi	r19,r6,1
 400decc:	0009883a 	mov	r4,zero
 400ded0:	b8eeb03a 	or	r23,r23,r3
 400ded4:	003e4f06 	br	400d814 <__alt_data_end+0xfe00d814>
 400ded8:	20c003cc 	andi	r3,r4,15
 400dedc:	00800104 	movi	r2,4
 400dee0:	0021883a 	mov	r16,zero
 400dee4:	18bfdf1e 	bne	r3,r2,400de64 <__alt_data_end+0xfe00de64>
 400dee8:	8004927a 	slli	r2,r16,9
 400deec:	8006977a 	slli	r3,r16,29
 400def0:	1020d33a 	srli	r16,r2,12
 400def4:	003ff306 	br	400dec4 <__alt_data_end+0xfe00dec4>
 400def8:	0021883a 	mov	r16,zero
 400defc:	003feb06 	br	400deac <__alt_data_end+0xfe00deac>
 400df00:	00800434 	movhi	r2,16
 400df04:	84000234 	orhi	r16,r16,8
 400df08:	10bfffc4 	addi	r2,r2,-1
 400df0c:	4cc0004c 	andi	r19,r9,1
 400df10:	80a0703a 	and	r16,r16,r2
 400df14:	003ea606 	br	400d9b0 <__alt_data_end+0xfe00d9b0>

0400df18 <__subdf3>:
 400df18:	00c00434 	movhi	r3,16
 400df1c:	18ffffc4 	addi	r3,r3,-1
 400df20:	defffb04 	addi	sp,sp,-20
 400df24:	28d2703a 	and	r9,r5,r3
 400df28:	3814d53a 	srli	r10,r7,20
 400df2c:	38c6703a 	and	r3,r7,r3
 400df30:	3004d77a 	srli	r2,r6,29
 400df34:	dc800215 	stw	r18,8(sp)
 400df38:	dc000015 	stw	r16,0(sp)
 400df3c:	2824d7fa 	srli	r18,r5,31
 400df40:	2820d53a 	srli	r16,r5,20
 400df44:	481290fa 	slli	r9,r9,3
 400df48:	200ad77a 	srli	r5,r4,29
 400df4c:	180690fa 	slli	r3,r3,3
 400df50:	dc400115 	stw	r17,4(sp)
 400df54:	dfc00415 	stw	ra,16(sp)
 400df58:	202290fa 	slli	r17,r4,3
 400df5c:	dcc00315 	stw	r19,12(sp)
 400df60:	5281ffcc 	andi	r10,r10,2047
 400df64:	0101ffc4 	movi	r4,2047
 400df68:	9011883a 	mov	r8,r18
 400df6c:	8401ffcc 	andi	r16,r16,2047
 400df70:	94803fcc 	andi	r18,r18,255
 400df74:	494ab03a 	or	r5,r9,r5
 400df78:	380ed7fa 	srli	r7,r7,31
 400df7c:	1886b03a 	or	r3,r3,r2
 400df80:	300c90fa 	slli	r6,r6,3
 400df84:	51009026 	beq	r10,r4,400e1c8 <__subdf3+0x2b0>
 400df88:	39c0005c 	xori	r7,r7,1
 400df8c:	8285c83a 	sub	r2,r16,r10
 400df90:	91c06f26 	beq	r18,r7,400e150 <__subdf3+0x238>
 400df94:	0080b10e 	bge	zero,r2,400e25c <__subdf3+0x344>
 400df98:	50002a1e 	bne	r10,zero,400e044 <__subdf3+0x12c>
 400df9c:	1988b03a 	or	r4,r3,r6
 400dfa0:	2000941e 	bne	r4,zero,400e1f4 <__subdf3+0x2dc>
 400dfa4:	888001cc 	andi	r2,r17,7
 400dfa8:	10005b26 	beq	r2,zero,400e118 <__subdf3+0x200>
 400dfac:	88c003cc 	andi	r3,r17,15
 400dfb0:	00800104 	movi	r2,4
 400dfb4:	18805826 	beq	r3,r2,400e118 <__subdf3+0x200>
 400dfb8:	88c00104 	addi	r3,r17,4
 400dfbc:	1c63803a 	cmpltu	r17,r3,r17
 400dfc0:	2c4b883a 	add	r5,r5,r17
 400dfc4:	2880202c 	andhi	r2,r5,128
 400dfc8:	9200004c 	andi	r8,r18,1
 400dfcc:	1823883a 	mov	r17,r3
 400dfd0:	10005426 	beq	r2,zero,400e124 <__subdf3+0x20c>
 400dfd4:	84000044 	addi	r16,r16,1
 400dfd8:	0081ffc4 	movi	r2,2047
 400dfdc:	8080bf26 	beq	r16,r2,400e2dc <__subdf3+0x3c4>
 400dfe0:	013fe034 	movhi	r4,65408
 400dfe4:	213fffc4 	addi	r4,r4,-1
 400dfe8:	290a703a 	and	r5,r5,r4
 400dfec:	2804977a 	slli	r2,r5,29
 400dff0:	280a927a 	slli	r5,r5,9
 400dff4:	8822d0fa 	srli	r17,r17,3
 400dff8:	8401ffcc 	andi	r16,r16,2047
 400dffc:	2808d33a 	srli	r4,r5,12
 400e000:	1444b03a 	or	r2,r2,r17
 400e004:	8401ffcc 	andi	r16,r16,2047
 400e008:	800a953a 	slli	r5,r16,20
 400e00c:	40c03fcc 	andi	r3,r8,255
 400e010:	04000434 	movhi	r16,16
 400e014:	180697fa 	slli	r3,r3,31
 400e018:	843fffc4 	addi	r16,r16,-1
 400e01c:	2420703a 	and	r16,r4,r16
 400e020:	8160b03a 	or	r16,r16,r5
 400e024:	80c6b03a 	or	r3,r16,r3
 400e028:	dfc00417 	ldw	ra,16(sp)
 400e02c:	dcc00317 	ldw	r19,12(sp)
 400e030:	dc800217 	ldw	r18,8(sp)
 400e034:	dc400117 	ldw	r17,4(sp)
 400e038:	dc000017 	ldw	r16,0(sp)
 400e03c:	dec00504 	addi	sp,sp,20
 400e040:	f800283a 	ret
 400e044:	0101ffc4 	movi	r4,2047
 400e048:	813fd626 	beq	r16,r4,400dfa4 <__alt_data_end+0xfe00dfa4>
 400e04c:	18c02034 	orhi	r3,r3,128
 400e050:	01000e04 	movi	r4,56
 400e054:	2080a416 	blt	r4,r2,400e2e8 <__subdf3+0x3d0>
 400e058:	010007c4 	movi	r4,31
 400e05c:	2080c716 	blt	r4,r2,400e37c <__subdf3+0x464>
 400e060:	01000804 	movi	r4,32
 400e064:	2089c83a 	sub	r4,r4,r2
 400e068:	1910983a 	sll	r8,r3,r4
 400e06c:	308ed83a 	srl	r7,r6,r2
 400e070:	3108983a 	sll	r4,r6,r4
 400e074:	1884d83a 	srl	r2,r3,r2
 400e078:	41ccb03a 	or	r6,r8,r7
 400e07c:	2008c03a 	cmpne	r4,r4,zero
 400e080:	310cb03a 	or	r6,r6,r4
 400e084:	898dc83a 	sub	r6,r17,r6
 400e088:	89a3803a 	cmpltu	r17,r17,r6
 400e08c:	288bc83a 	sub	r5,r5,r2
 400e090:	2c4bc83a 	sub	r5,r5,r17
 400e094:	3023883a 	mov	r17,r6
 400e098:	2880202c 	andhi	r2,r5,128
 400e09c:	10006b26 	beq	r2,zero,400e24c <__subdf3+0x334>
 400e0a0:	04c02034 	movhi	r19,128
 400e0a4:	9cffffc4 	addi	r19,r19,-1
 400e0a8:	2ce6703a 	and	r19,r5,r19
 400e0ac:	98007c26 	beq	r19,zero,400e2a0 <__subdf3+0x388>
 400e0b0:	9809883a 	mov	r4,r19
 400e0b4:	400e9e40 	call	400e9e4 <__clzsi2>
 400e0b8:	10fffe04 	addi	r3,r2,-8
 400e0bc:	010007c4 	movi	r4,31
 400e0c0:	20c07d16 	blt	r4,r3,400e2b8 <__subdf3+0x3a0>
 400e0c4:	01400a04 	movi	r5,40
 400e0c8:	2885c83a 	sub	r2,r5,r2
 400e0cc:	888ad83a 	srl	r5,r17,r2
 400e0d0:	98e6983a 	sll	r19,r19,r3
 400e0d4:	88e2983a 	sll	r17,r17,r3
 400e0d8:	2ce6b03a 	or	r19,r5,r19
 400e0dc:	1c007a16 	blt	r3,r16,400e2c8 <__subdf3+0x3b0>
 400e0e0:	1c21c83a 	sub	r16,r3,r16
 400e0e4:	81400044 	addi	r5,r16,1
 400e0e8:	00c007c4 	movi	r3,31
 400e0ec:	19409616 	blt	r3,r5,400e348 <__subdf3+0x430>
 400e0f0:	1c21c83a 	sub	r16,r3,r16
 400e0f4:	8c08983a 	sll	r4,r17,r16
 400e0f8:	8946d83a 	srl	r3,r17,r5
 400e0fc:	9c20983a 	sll	r16,r19,r16
 400e100:	2008c03a 	cmpne	r4,r4,zero
 400e104:	994ad83a 	srl	r5,r19,r5
 400e108:	1c06b03a 	or	r3,r3,r16
 400e10c:	1922b03a 	or	r17,r3,r4
 400e110:	0021883a 	mov	r16,zero
 400e114:	003fa306 	br	400dfa4 <__alt_data_end+0xfe00dfa4>
 400e118:	2880202c 	andhi	r2,r5,128
 400e11c:	9200004c 	andi	r8,r18,1
 400e120:	103fac1e 	bne	r2,zero,400dfd4 <__alt_data_end+0xfe00dfd4>
 400e124:	2804977a 	slli	r2,r5,29
 400e128:	8822d0fa 	srli	r17,r17,3
 400e12c:	00c1ffc4 	movi	r3,2047
 400e130:	280ad0fa 	srli	r5,r5,3
 400e134:	1444b03a 	or	r2,r2,r17
 400e138:	80c02726 	beq	r16,r3,400e1d8 <__subdf3+0x2c0>
 400e13c:	01000434 	movhi	r4,16
 400e140:	213fffc4 	addi	r4,r4,-1
 400e144:	80e0703a 	and	r16,r16,r3
 400e148:	2908703a 	and	r4,r5,r4
 400e14c:	003fad06 	br	400e004 <__alt_data_end+0xfe00e004>
 400e150:	0080690e 	bge	zero,r2,400e2f8 <__subdf3+0x3e0>
 400e154:	50002f26 	beq	r10,zero,400e214 <__subdf3+0x2fc>
 400e158:	0101ffc4 	movi	r4,2047
 400e15c:	813f9126 	beq	r16,r4,400dfa4 <__alt_data_end+0xfe00dfa4>
 400e160:	18c02034 	orhi	r3,r3,128
 400e164:	01000e04 	movi	r4,56
 400e168:	2080b00e 	bge	r4,r2,400e42c <__subdf3+0x514>
 400e16c:	198cb03a 	or	r6,r3,r6
 400e170:	300ec03a 	cmpne	r7,r6,zero
 400e174:	0005883a 	mov	r2,zero
 400e178:	3c4f883a 	add	r7,r7,r17
 400e17c:	3c63803a 	cmpltu	r17,r7,r17
 400e180:	114b883a 	add	r5,r2,r5
 400e184:	2c4b883a 	add	r5,r5,r17
 400e188:	3823883a 	mov	r17,r7
 400e18c:	2880202c 	andhi	r2,r5,128
 400e190:	10002e26 	beq	r2,zero,400e24c <__subdf3+0x334>
 400e194:	84000044 	addi	r16,r16,1
 400e198:	0081ffc4 	movi	r2,2047
 400e19c:	8080de26 	beq	r16,r2,400e518 <__subdf3+0x600>
 400e1a0:	00bfe034 	movhi	r2,65408
 400e1a4:	10bfffc4 	addi	r2,r2,-1
 400e1a8:	288a703a 	and	r5,r5,r2
 400e1ac:	880cd07a 	srli	r6,r17,1
 400e1b0:	280897fa 	slli	r4,r5,31
 400e1b4:	88c0004c 	andi	r3,r17,1
 400e1b8:	30e2b03a 	or	r17,r6,r3
 400e1bc:	280ad07a 	srli	r5,r5,1
 400e1c0:	8922b03a 	or	r17,r17,r4
 400e1c4:	003f7706 	br	400dfa4 <__alt_data_end+0xfe00dfa4>
 400e1c8:	1984b03a 	or	r2,r3,r6
 400e1cc:	103f6e26 	beq	r2,zero,400df88 <__alt_data_end+0xfe00df88>
 400e1d0:	39c03fcc 	andi	r7,r7,255
 400e1d4:	003f6d06 	br	400df8c <__alt_data_end+0xfe00df8c>
 400e1d8:	1146b03a 	or	r3,r2,r5
 400e1dc:	18003f26 	beq	r3,zero,400e2dc <__subdf3+0x3c4>
 400e1e0:	00c00434 	movhi	r3,16
 400e1e4:	29000234 	orhi	r4,r5,8
 400e1e8:	18ffffc4 	addi	r3,r3,-1
 400e1ec:	20c8703a 	and	r4,r4,r3
 400e1f0:	003f8406 	br	400e004 <__alt_data_end+0xfe00e004>
 400e1f4:	10bfffc4 	addi	r2,r2,-1
 400e1f8:	1000501e 	bne	r2,zero,400e33c <__subdf3+0x424>
 400e1fc:	898fc83a 	sub	r7,r17,r6
 400e200:	89e3803a 	cmpltu	r17,r17,r7
 400e204:	28cbc83a 	sub	r5,r5,r3
 400e208:	2c4bc83a 	sub	r5,r5,r17
 400e20c:	3823883a 	mov	r17,r7
 400e210:	003fa106 	br	400e098 <__alt_data_end+0xfe00e098>
 400e214:	1988b03a 	or	r4,r3,r6
 400e218:	203f6226 	beq	r4,zero,400dfa4 <__alt_data_end+0xfe00dfa4>
 400e21c:	10bfffc4 	addi	r2,r2,-1
 400e220:	10009b1e 	bne	r2,zero,400e490 <__subdf3+0x578>
 400e224:	344d883a 	add	r6,r6,r17
 400e228:	3463803a 	cmpltu	r17,r6,r17
 400e22c:	194b883a 	add	r5,r3,r5
 400e230:	2c4b883a 	add	r5,r5,r17
 400e234:	3023883a 	mov	r17,r6
 400e238:	003fd406 	br	400e18c <__alt_data_end+0xfe00e18c>
 400e23c:	1106b03a 	or	r3,r2,r4
 400e240:	1800b426 	beq	r3,zero,400e514 <__subdf3+0x5fc>
 400e244:	100b883a 	mov	r5,r2
 400e248:	2023883a 	mov	r17,r4
 400e24c:	888001cc 	andi	r2,r17,7
 400e250:	103f561e 	bne	r2,zero,400dfac <__alt_data_end+0xfe00dfac>
 400e254:	9200004c 	andi	r8,r18,1
 400e258:	003fb206 	br	400e124 <__alt_data_end+0xfe00e124>
 400e25c:	1000531e 	bne	r2,zero,400e3ac <__subdf3+0x494>
 400e260:	80800044 	addi	r2,r16,1
 400e264:	1081ffcc 	andi	r2,r2,2047
 400e268:	01000044 	movi	r4,1
 400e26c:	2080a00e 	bge	r4,r2,400e4f0 <__subdf3+0x5d8>
 400e270:	8985c83a 	sub	r2,r17,r6
 400e274:	8889803a 	cmpltu	r4,r17,r2
 400e278:	28e7c83a 	sub	r19,r5,r3
 400e27c:	9927c83a 	sub	r19,r19,r4
 400e280:	9900202c 	andhi	r4,r19,128
 400e284:	20006226 	beq	r4,zero,400e410 <__subdf3+0x4f8>
 400e288:	3463c83a 	sub	r17,r6,r17
 400e28c:	194bc83a 	sub	r5,r3,r5
 400e290:	344d803a 	cmpltu	r6,r6,r17
 400e294:	29a7c83a 	sub	r19,r5,r6
 400e298:	3825883a 	mov	r18,r7
 400e29c:	983f841e 	bne	r19,zero,400e0b0 <__alt_data_end+0xfe00e0b0>
 400e2a0:	8809883a 	mov	r4,r17
 400e2a4:	400e9e40 	call	400e9e4 <__clzsi2>
 400e2a8:	10800804 	addi	r2,r2,32
 400e2ac:	10fffe04 	addi	r3,r2,-8
 400e2b0:	010007c4 	movi	r4,31
 400e2b4:	20ff830e 	bge	r4,r3,400e0c4 <__alt_data_end+0xfe00e0c4>
 400e2b8:	14fff604 	addi	r19,r2,-40
 400e2bc:	8ce6983a 	sll	r19,r17,r19
 400e2c0:	0023883a 	mov	r17,zero
 400e2c4:	1c3f860e 	bge	r3,r16,400e0e0 <__alt_data_end+0xfe00e0e0>
 400e2c8:	017fe034 	movhi	r5,65408
 400e2cc:	297fffc4 	addi	r5,r5,-1
 400e2d0:	80e1c83a 	sub	r16,r16,r3
 400e2d4:	994a703a 	and	r5,r19,r5
 400e2d8:	003f3206 	br	400dfa4 <__alt_data_end+0xfe00dfa4>
 400e2dc:	0009883a 	mov	r4,zero
 400e2e0:	0005883a 	mov	r2,zero
 400e2e4:	003f4706 	br	400e004 <__alt_data_end+0xfe00e004>
 400e2e8:	198cb03a 	or	r6,r3,r6
 400e2ec:	300cc03a 	cmpne	r6,r6,zero
 400e2f0:	0005883a 	mov	r2,zero
 400e2f4:	003f6306 	br	400e084 <__alt_data_end+0xfe00e084>
 400e2f8:	10009d1e 	bne	r2,zero,400e570 <__subdf3+0x658>
 400e2fc:	81c00044 	addi	r7,r16,1
 400e300:	3881ffcc 	andi	r2,r7,2047
 400e304:	02400044 	movi	r9,1
 400e308:	4880680e 	bge	r9,r2,400e4ac <__subdf3+0x594>
 400e30c:	0081ffc4 	movi	r2,2047
 400e310:	3880ae26 	beq	r7,r2,400e5cc <__subdf3+0x6b4>
 400e314:	344d883a 	add	r6,r6,r17
 400e318:	3463803a 	cmpltu	r17,r6,r17
 400e31c:	194b883a 	add	r5,r3,r5
 400e320:	2c4b883a 	add	r5,r5,r17
 400e324:	282297fa 	slli	r17,r5,31
 400e328:	300cd07a 	srli	r6,r6,1
 400e32c:	280ad07a 	srli	r5,r5,1
 400e330:	3821883a 	mov	r16,r7
 400e334:	89a2b03a 	or	r17,r17,r6
 400e338:	003f1a06 	br	400dfa4 <__alt_data_end+0xfe00dfa4>
 400e33c:	0101ffc4 	movi	r4,2047
 400e340:	813f431e 	bne	r16,r4,400e050 <__alt_data_end+0xfe00e050>
 400e344:	003f1706 	br	400dfa4 <__alt_data_end+0xfe00dfa4>
 400e348:	80bff844 	addi	r2,r16,-31
 400e34c:	00c00804 	movi	r3,32
 400e350:	9884d83a 	srl	r2,r19,r2
 400e354:	28c05126 	beq	r5,r3,400e49c <__subdf3+0x584>
 400e358:	00c00fc4 	movi	r3,63
 400e35c:	1c21c83a 	sub	r16,r3,r16
 400e360:	9c26983a 	sll	r19,r19,r16
 400e364:	9c62b03a 	or	r17,r19,r17
 400e368:	8822c03a 	cmpne	r17,r17,zero
 400e36c:	88a2b03a 	or	r17,r17,r2
 400e370:	000b883a 	mov	r5,zero
 400e374:	0021883a 	mov	r16,zero
 400e378:	003fb406 	br	400e24c <__alt_data_end+0xfe00e24c>
 400e37c:	113ff804 	addi	r4,r2,-32
 400e380:	01c00804 	movi	r7,32
 400e384:	1908d83a 	srl	r4,r3,r4
 400e388:	11c04626 	beq	r2,r7,400e4a4 <__subdf3+0x58c>
 400e38c:	01c01004 	movi	r7,64
 400e390:	3885c83a 	sub	r2,r7,r2
 400e394:	1884983a 	sll	r2,r3,r2
 400e398:	118cb03a 	or	r6,r2,r6
 400e39c:	300cc03a 	cmpne	r6,r6,zero
 400e3a0:	310cb03a 	or	r6,r6,r4
 400e3a4:	0005883a 	mov	r2,zero
 400e3a8:	003f3606 	br	400e084 <__alt_data_end+0xfe00e084>
 400e3ac:	80002b26 	beq	r16,zero,400e45c <__subdf3+0x544>
 400e3b0:	0101ffc4 	movi	r4,2047
 400e3b4:	51006926 	beq	r10,r4,400e55c <__subdf3+0x644>
 400e3b8:	0085c83a 	sub	r2,zero,r2
 400e3bc:	29402034 	orhi	r5,r5,128
 400e3c0:	01000e04 	movi	r4,56
 400e3c4:	20807d16 	blt	r4,r2,400e5bc <__subdf3+0x6a4>
 400e3c8:	010007c4 	movi	r4,31
 400e3cc:	2080d916 	blt	r4,r2,400e734 <__subdf3+0x81c>
 400e3d0:	01000804 	movi	r4,32
 400e3d4:	2089c83a 	sub	r4,r4,r2
 400e3d8:	2912983a 	sll	r9,r5,r4
 400e3dc:	8890d83a 	srl	r8,r17,r2
 400e3e0:	8908983a 	sll	r4,r17,r4
 400e3e4:	2884d83a 	srl	r2,r5,r2
 400e3e8:	4a22b03a 	or	r17,r9,r8
 400e3ec:	2008c03a 	cmpne	r4,r4,zero
 400e3f0:	8922b03a 	or	r17,r17,r4
 400e3f4:	3463c83a 	sub	r17,r6,r17
 400e3f8:	1885c83a 	sub	r2,r3,r2
 400e3fc:	344d803a 	cmpltu	r6,r6,r17
 400e400:	118bc83a 	sub	r5,r2,r6
 400e404:	5021883a 	mov	r16,r10
 400e408:	3825883a 	mov	r18,r7
 400e40c:	003f2206 	br	400e098 <__alt_data_end+0xfe00e098>
 400e410:	9886b03a 	or	r3,r19,r2
 400e414:	18001c1e 	bne	r3,zero,400e488 <__subdf3+0x570>
 400e418:	0011883a 	mov	r8,zero
 400e41c:	000b883a 	mov	r5,zero
 400e420:	0023883a 	mov	r17,zero
 400e424:	0021883a 	mov	r16,zero
 400e428:	003f3e06 	br	400e124 <__alt_data_end+0xfe00e124>
 400e42c:	010007c4 	movi	r4,31
 400e430:	20803c16 	blt	r4,r2,400e524 <__subdf3+0x60c>
 400e434:	01000804 	movi	r4,32
 400e438:	2089c83a 	sub	r4,r4,r2
 400e43c:	1912983a 	sll	r9,r3,r4
 400e440:	308ed83a 	srl	r7,r6,r2
 400e444:	3108983a 	sll	r4,r6,r4
 400e448:	1884d83a 	srl	r2,r3,r2
 400e44c:	49ceb03a 	or	r7,r9,r7
 400e450:	2008c03a 	cmpne	r4,r4,zero
 400e454:	390eb03a 	or	r7,r7,r4
 400e458:	003f4706 	br	400e178 <__alt_data_end+0xfe00e178>
 400e45c:	2c48b03a 	or	r4,r5,r17
 400e460:	20003e26 	beq	r4,zero,400e55c <__subdf3+0x644>
 400e464:	0084303a 	nor	r2,zero,r2
 400e468:	10003a1e 	bne	r2,zero,400e554 <__subdf3+0x63c>
 400e46c:	3463c83a 	sub	r17,r6,r17
 400e470:	194bc83a 	sub	r5,r3,r5
 400e474:	344d803a 	cmpltu	r6,r6,r17
 400e478:	298bc83a 	sub	r5,r5,r6
 400e47c:	5021883a 	mov	r16,r10
 400e480:	3825883a 	mov	r18,r7
 400e484:	003f0406 	br	400e098 <__alt_data_end+0xfe00e098>
 400e488:	1023883a 	mov	r17,r2
 400e48c:	003f0706 	br	400e0ac <__alt_data_end+0xfe00e0ac>
 400e490:	0101ffc4 	movi	r4,2047
 400e494:	813f331e 	bne	r16,r4,400e164 <__alt_data_end+0xfe00e164>
 400e498:	003ec206 	br	400dfa4 <__alt_data_end+0xfe00dfa4>
 400e49c:	0027883a 	mov	r19,zero
 400e4a0:	003fb006 	br	400e364 <__alt_data_end+0xfe00e364>
 400e4a4:	0005883a 	mov	r2,zero
 400e4a8:	003fbb06 	br	400e398 <__alt_data_end+0xfe00e398>
 400e4ac:	2c44b03a 	or	r2,r5,r17
 400e4b0:	80008b1e 	bne	r16,zero,400e6e0 <__subdf3+0x7c8>
 400e4b4:	1000b526 	beq	r2,zero,400e78c <__subdf3+0x874>
 400e4b8:	1984b03a 	or	r2,r3,r6
 400e4bc:	103eb926 	beq	r2,zero,400dfa4 <__alt_data_end+0xfe00dfa4>
 400e4c0:	3449883a 	add	r4,r6,r17
 400e4c4:	2463803a 	cmpltu	r17,r4,r17
 400e4c8:	194b883a 	add	r5,r3,r5
 400e4cc:	2c4b883a 	add	r5,r5,r17
 400e4d0:	2880202c 	andhi	r2,r5,128
 400e4d4:	2023883a 	mov	r17,r4
 400e4d8:	103f5c26 	beq	r2,zero,400e24c <__alt_data_end+0xfe00e24c>
 400e4dc:	00bfe034 	movhi	r2,65408
 400e4e0:	10bfffc4 	addi	r2,r2,-1
 400e4e4:	4821883a 	mov	r16,r9
 400e4e8:	288a703a 	and	r5,r5,r2
 400e4ec:	003ead06 	br	400dfa4 <__alt_data_end+0xfe00dfa4>
 400e4f0:	2c44b03a 	or	r2,r5,r17
 400e4f4:	8000291e 	bne	r16,zero,400e59c <__subdf3+0x684>
 400e4f8:	10004f1e 	bne	r2,zero,400e638 <__subdf3+0x720>
 400e4fc:	1984b03a 	or	r2,r3,r6
 400e500:	10000426 	beq	r2,zero,400e514 <__subdf3+0x5fc>
 400e504:	180b883a 	mov	r5,r3
 400e508:	3023883a 	mov	r17,r6
 400e50c:	3825883a 	mov	r18,r7
 400e510:	003ea406 	br	400dfa4 <__alt_data_end+0xfe00dfa4>
 400e514:	0011883a 	mov	r8,zero
 400e518:	000b883a 	mov	r5,zero
 400e51c:	0023883a 	mov	r17,zero
 400e520:	003f0006 	br	400e124 <__alt_data_end+0xfe00e124>
 400e524:	11fff804 	addi	r7,r2,-32
 400e528:	19c8d83a 	srl	r4,r3,r7
 400e52c:	01c00804 	movi	r7,32
 400e530:	11c07e26 	beq	r2,r7,400e72c <__subdf3+0x814>
 400e534:	01c01004 	movi	r7,64
 400e538:	3885c83a 	sub	r2,r7,r2
 400e53c:	1884983a 	sll	r2,r3,r2
 400e540:	118cb03a 	or	r6,r2,r6
 400e544:	300ec03a 	cmpne	r7,r6,zero
 400e548:	390eb03a 	or	r7,r7,r4
 400e54c:	0005883a 	mov	r2,zero
 400e550:	003f0906 	br	400e178 <__alt_data_end+0xfe00e178>
 400e554:	0101ffc4 	movi	r4,2047
 400e558:	513f991e 	bne	r10,r4,400e3c0 <__alt_data_end+0xfe00e3c0>
 400e55c:	180b883a 	mov	r5,r3
 400e560:	3023883a 	mov	r17,r6
 400e564:	5021883a 	mov	r16,r10
 400e568:	3825883a 	mov	r18,r7
 400e56c:	003e8d06 	br	400dfa4 <__alt_data_end+0xfe00dfa4>
 400e570:	80001a1e 	bne	r16,zero,400e5dc <__subdf3+0x6c4>
 400e574:	2c48b03a 	or	r4,r5,r17
 400e578:	20005526 	beq	r4,zero,400e6d0 <__subdf3+0x7b8>
 400e57c:	0084303a 	nor	r2,zero,r2
 400e580:	1000511e 	bne	r2,zero,400e6c8 <__subdf3+0x7b0>
 400e584:	89a3883a 	add	r17,r17,r6
 400e588:	194b883a 	add	r5,r3,r5
 400e58c:	898d803a 	cmpltu	r6,r17,r6
 400e590:	298b883a 	add	r5,r5,r6
 400e594:	5021883a 	mov	r16,r10
 400e598:	003efc06 	br	400e18c <__alt_data_end+0xfe00e18c>
 400e59c:	1000341e 	bne	r2,zero,400e670 <__subdf3+0x758>
 400e5a0:	1984b03a 	or	r2,r3,r6
 400e5a4:	10006f26 	beq	r2,zero,400e764 <__subdf3+0x84c>
 400e5a8:	180b883a 	mov	r5,r3
 400e5ac:	3023883a 	mov	r17,r6
 400e5b0:	3825883a 	mov	r18,r7
 400e5b4:	0401ffc4 	movi	r16,2047
 400e5b8:	003e7a06 	br	400dfa4 <__alt_data_end+0xfe00dfa4>
 400e5bc:	2c62b03a 	or	r17,r5,r17
 400e5c0:	8822c03a 	cmpne	r17,r17,zero
 400e5c4:	0005883a 	mov	r2,zero
 400e5c8:	003f8a06 	br	400e3f4 <__alt_data_end+0xfe00e3f4>
 400e5cc:	3821883a 	mov	r16,r7
 400e5d0:	000b883a 	mov	r5,zero
 400e5d4:	0023883a 	mov	r17,zero
 400e5d8:	003ed206 	br	400e124 <__alt_data_end+0xfe00e124>
 400e5dc:	0101ffc4 	movi	r4,2047
 400e5e0:	51003b26 	beq	r10,r4,400e6d0 <__subdf3+0x7b8>
 400e5e4:	0085c83a 	sub	r2,zero,r2
 400e5e8:	29402034 	orhi	r5,r5,128
 400e5ec:	01000e04 	movi	r4,56
 400e5f0:	20806216 	blt	r4,r2,400e77c <__subdf3+0x864>
 400e5f4:	010007c4 	movi	r4,31
 400e5f8:	20806b16 	blt	r4,r2,400e7a8 <__subdf3+0x890>
 400e5fc:	01000804 	movi	r4,32
 400e600:	2089c83a 	sub	r4,r4,r2
 400e604:	2912983a 	sll	r9,r5,r4
 400e608:	888ed83a 	srl	r7,r17,r2
 400e60c:	8908983a 	sll	r4,r17,r4
 400e610:	2884d83a 	srl	r2,r5,r2
 400e614:	49e2b03a 	or	r17,r9,r7
 400e618:	2008c03a 	cmpne	r4,r4,zero
 400e61c:	8922b03a 	or	r17,r17,r4
 400e620:	89a3883a 	add	r17,r17,r6
 400e624:	10c5883a 	add	r2,r2,r3
 400e628:	898d803a 	cmpltu	r6,r17,r6
 400e62c:	118b883a 	add	r5,r2,r6
 400e630:	5021883a 	mov	r16,r10
 400e634:	003ed506 	br	400e18c <__alt_data_end+0xfe00e18c>
 400e638:	1984b03a 	or	r2,r3,r6
 400e63c:	103e5926 	beq	r2,zero,400dfa4 <__alt_data_end+0xfe00dfa4>
 400e640:	8989c83a 	sub	r4,r17,r6
 400e644:	8911803a 	cmpltu	r8,r17,r4
 400e648:	28c5c83a 	sub	r2,r5,r3
 400e64c:	1205c83a 	sub	r2,r2,r8
 400e650:	1200202c 	andhi	r8,r2,128
 400e654:	403ef926 	beq	r8,zero,400e23c <__alt_data_end+0xfe00e23c>
 400e658:	3463c83a 	sub	r17,r6,r17
 400e65c:	194bc83a 	sub	r5,r3,r5
 400e660:	344d803a 	cmpltu	r6,r6,r17
 400e664:	298bc83a 	sub	r5,r5,r6
 400e668:	3825883a 	mov	r18,r7
 400e66c:	003e4d06 	br	400dfa4 <__alt_data_end+0xfe00dfa4>
 400e670:	1984b03a 	or	r2,r3,r6
 400e674:	10002b26 	beq	r2,zero,400e724 <__subdf3+0x80c>
 400e678:	2808d0fa 	srli	r4,r5,3
 400e67c:	8822d0fa 	srli	r17,r17,3
 400e680:	280a977a 	slli	r5,r5,29
 400e684:	2080022c 	andhi	r2,r4,8
 400e688:	2c62b03a 	or	r17,r5,r17
 400e68c:	10000826 	beq	r2,zero,400e6b0 <__subdf3+0x798>
 400e690:	1810d0fa 	srli	r8,r3,3
 400e694:	4080022c 	andhi	r2,r8,8
 400e698:	1000051e 	bne	r2,zero,400e6b0 <__subdf3+0x798>
 400e69c:	300cd0fa 	srli	r6,r6,3
 400e6a0:	1804977a 	slli	r2,r3,29
 400e6a4:	4009883a 	mov	r4,r8
 400e6a8:	3825883a 	mov	r18,r7
 400e6ac:	11a2b03a 	or	r17,r2,r6
 400e6b0:	880ad77a 	srli	r5,r17,29
 400e6b4:	200890fa 	slli	r4,r4,3
 400e6b8:	882290fa 	slli	r17,r17,3
 400e6bc:	0401ffc4 	movi	r16,2047
 400e6c0:	290ab03a 	or	r5,r5,r4
 400e6c4:	003e3706 	br	400dfa4 <__alt_data_end+0xfe00dfa4>
 400e6c8:	0101ffc4 	movi	r4,2047
 400e6cc:	513fc71e 	bne	r10,r4,400e5ec <__alt_data_end+0xfe00e5ec>
 400e6d0:	180b883a 	mov	r5,r3
 400e6d4:	3023883a 	mov	r17,r6
 400e6d8:	5021883a 	mov	r16,r10
 400e6dc:	003e3106 	br	400dfa4 <__alt_data_end+0xfe00dfa4>
 400e6e0:	10002d26 	beq	r2,zero,400e798 <__subdf3+0x880>
 400e6e4:	1984b03a 	or	r2,r3,r6
 400e6e8:	10000e26 	beq	r2,zero,400e724 <__subdf3+0x80c>
 400e6ec:	2808d0fa 	srli	r4,r5,3
 400e6f0:	8822d0fa 	srli	r17,r17,3
 400e6f4:	280a977a 	slli	r5,r5,29
 400e6f8:	2080022c 	andhi	r2,r4,8
 400e6fc:	2c62b03a 	or	r17,r5,r17
 400e700:	103feb26 	beq	r2,zero,400e6b0 <__alt_data_end+0xfe00e6b0>
 400e704:	180ed0fa 	srli	r7,r3,3
 400e708:	3880022c 	andhi	r2,r7,8
 400e70c:	103fe81e 	bne	r2,zero,400e6b0 <__alt_data_end+0xfe00e6b0>
 400e710:	300cd0fa 	srli	r6,r6,3
 400e714:	1804977a 	slli	r2,r3,29
 400e718:	3809883a 	mov	r4,r7
 400e71c:	11a2b03a 	or	r17,r2,r6
 400e720:	003fe306 	br	400e6b0 <__alt_data_end+0xfe00e6b0>
 400e724:	0401ffc4 	movi	r16,2047
 400e728:	003e1e06 	br	400dfa4 <__alt_data_end+0xfe00dfa4>
 400e72c:	0005883a 	mov	r2,zero
 400e730:	003f8306 	br	400e540 <__alt_data_end+0xfe00e540>
 400e734:	113ff804 	addi	r4,r2,-32
 400e738:	02000804 	movi	r8,32
 400e73c:	2908d83a 	srl	r4,r5,r4
 400e740:	12002526 	beq	r2,r8,400e7d8 <__subdf3+0x8c0>
 400e744:	02001004 	movi	r8,64
 400e748:	4085c83a 	sub	r2,r8,r2
 400e74c:	288a983a 	sll	r5,r5,r2
 400e750:	2c62b03a 	or	r17,r5,r17
 400e754:	8822c03a 	cmpne	r17,r17,zero
 400e758:	8922b03a 	or	r17,r17,r4
 400e75c:	0005883a 	mov	r2,zero
 400e760:	003f2406 	br	400e3f4 <__alt_data_end+0xfe00e3f4>
 400e764:	01402034 	movhi	r5,128
 400e768:	0011883a 	mov	r8,zero
 400e76c:	297fffc4 	addi	r5,r5,-1
 400e770:	047ffe04 	movi	r17,-8
 400e774:	0401ffc4 	movi	r16,2047
 400e778:	003e6a06 	br	400e124 <__alt_data_end+0xfe00e124>
 400e77c:	2c62b03a 	or	r17,r5,r17
 400e780:	8822c03a 	cmpne	r17,r17,zero
 400e784:	0005883a 	mov	r2,zero
 400e788:	003fa506 	br	400e620 <__alt_data_end+0xfe00e620>
 400e78c:	180b883a 	mov	r5,r3
 400e790:	3023883a 	mov	r17,r6
 400e794:	003e0306 	br	400dfa4 <__alt_data_end+0xfe00dfa4>
 400e798:	180b883a 	mov	r5,r3
 400e79c:	3023883a 	mov	r17,r6
 400e7a0:	0401ffc4 	movi	r16,2047
 400e7a4:	003dff06 	br	400dfa4 <__alt_data_end+0xfe00dfa4>
 400e7a8:	113ff804 	addi	r4,r2,-32
 400e7ac:	01c00804 	movi	r7,32
 400e7b0:	2908d83a 	srl	r4,r5,r4
 400e7b4:	11c00a26 	beq	r2,r7,400e7e0 <__subdf3+0x8c8>
 400e7b8:	01c01004 	movi	r7,64
 400e7bc:	3885c83a 	sub	r2,r7,r2
 400e7c0:	288a983a 	sll	r5,r5,r2
 400e7c4:	2c62b03a 	or	r17,r5,r17
 400e7c8:	8822c03a 	cmpne	r17,r17,zero
 400e7cc:	8922b03a 	or	r17,r17,r4
 400e7d0:	0005883a 	mov	r2,zero
 400e7d4:	003f9206 	br	400e620 <__alt_data_end+0xfe00e620>
 400e7d8:	000b883a 	mov	r5,zero
 400e7dc:	003fdc06 	br	400e750 <__alt_data_end+0xfe00e750>
 400e7e0:	000b883a 	mov	r5,zero
 400e7e4:	003ff706 	br	400e7c4 <__alt_data_end+0xfe00e7c4>

0400e7e8 <__fixdfsi>:
 400e7e8:	2806d53a 	srli	r3,r5,20
 400e7ec:	00800434 	movhi	r2,16
 400e7f0:	10bfffc4 	addi	r2,r2,-1
 400e7f4:	18c1ffcc 	andi	r3,r3,2047
 400e7f8:	0180ff84 	movi	r6,1022
 400e7fc:	2884703a 	and	r2,r5,r2
 400e800:	280ad7fa 	srli	r5,r5,31
 400e804:	30c0130e 	bge	r6,r3,400e854 <__fixdfsi+0x6c>
 400e808:	01810744 	movi	r6,1053
 400e80c:	30c00d16 	blt	r6,r3,400e844 <__fixdfsi+0x5c>
 400e810:	01810cc4 	movi	r6,1075
 400e814:	30cdc83a 	sub	r6,r6,r3
 400e818:	01c007c4 	movi	r7,31
 400e81c:	10800434 	orhi	r2,r2,16
 400e820:	39800e0e 	bge	r7,r6,400e85c <__fixdfsi+0x74>
 400e824:	010104c4 	movi	r4,1043
 400e828:	20c7c83a 	sub	r3,r4,r3
 400e82c:	10c6d83a 	srl	r3,r2,r3
 400e830:	29403fcc 	andi	r5,r5,255
 400e834:	0145c83a 	sub	r2,zero,r5
 400e838:	1884f03a 	xor	r2,r3,r2
 400e83c:	1145883a 	add	r2,r2,r5
 400e840:	f800283a 	ret
 400e844:	00a00034 	movhi	r2,32768
 400e848:	10bfffc4 	addi	r2,r2,-1
 400e84c:	2885883a 	add	r2,r5,r2
 400e850:	f800283a 	ret
 400e854:	0005883a 	mov	r2,zero
 400e858:	f800283a 	ret
 400e85c:	18fefb44 	addi	r3,r3,-1043
 400e860:	2188d83a 	srl	r4,r4,r6
 400e864:	10c6983a 	sll	r3,r2,r3
 400e868:	20c6b03a 	or	r3,r4,r3
 400e86c:	003ff006 	br	400e830 <__alt_data_end+0xfe00e830>

0400e870 <__floatsidf>:
 400e870:	defffd04 	addi	sp,sp,-12
 400e874:	dc400115 	stw	r17,4(sp)
 400e878:	dfc00215 	stw	ra,8(sp)
 400e87c:	dc000015 	stw	r16,0(sp)
 400e880:	2023883a 	mov	r17,r4
 400e884:	20001426 	beq	r4,zero,400e8d8 <__floatsidf+0x68>
 400e888:	2020d7fa 	srli	r16,r4,31
 400e88c:	80000126 	beq	r16,zero,400e894 <__floatsidf+0x24>
 400e890:	0123c83a 	sub	r17,zero,r4
 400e894:	8809883a 	mov	r4,r17
 400e898:	400e9e40 	call	400e9e4 <__clzsi2>
 400e89c:	01410784 	movi	r5,1054
 400e8a0:	00c00284 	movi	r3,10
 400e8a4:	288bc83a 	sub	r5,r5,r2
 400e8a8:	18801c16 	blt	r3,r2,400e91c <__floatsidf+0xac>
 400e8ac:	00c002c4 	movi	r3,11
 400e8b0:	1887c83a 	sub	r3,r3,r2
 400e8b4:	88c8d83a 	srl	r4,r17,r3
 400e8b8:	00c00434 	movhi	r3,16
 400e8bc:	18ffffc4 	addi	r3,r3,-1
 400e8c0:	10800544 	addi	r2,r2,21
 400e8c4:	20c8703a 	and	r4,r4,r3
 400e8c8:	8884983a 	sll	r2,r17,r2
 400e8cc:	28c1ffcc 	andi	r3,r5,2047
 400e8d0:	800d883a 	mov	r6,r16
 400e8d4:	00000406 	br	400e8e8 <__floatsidf+0x78>
 400e8d8:	000d883a 	mov	r6,zero
 400e8dc:	0007883a 	mov	r3,zero
 400e8e0:	0009883a 	mov	r4,zero
 400e8e4:	0005883a 	mov	r2,zero
 400e8e8:	180a953a 	slli	r5,r3,20
 400e8ec:	31803fcc 	andi	r6,r6,255
 400e8f0:	00c00434 	movhi	r3,16
 400e8f4:	300c97fa 	slli	r6,r6,31
 400e8f8:	18ffffc4 	addi	r3,r3,-1
 400e8fc:	20c6703a 	and	r3,r4,r3
 400e900:	1946b03a 	or	r3,r3,r5
 400e904:	1986b03a 	or	r3,r3,r6
 400e908:	dfc00217 	ldw	ra,8(sp)
 400e90c:	dc400117 	ldw	r17,4(sp)
 400e910:	dc000017 	ldw	r16,0(sp)
 400e914:	dec00304 	addi	sp,sp,12
 400e918:	f800283a 	ret
 400e91c:	10fffd44 	addi	r3,r2,-11
 400e920:	88c8983a 	sll	r4,r17,r3
 400e924:	00800434 	movhi	r2,16
 400e928:	10bfffc4 	addi	r2,r2,-1
 400e92c:	2088703a 	and	r4,r4,r2
 400e930:	28c1ffcc 	andi	r3,r5,2047
 400e934:	800d883a 	mov	r6,r16
 400e938:	0005883a 	mov	r2,zero
 400e93c:	003fea06 	br	400e8e8 <__alt_data_end+0xfe00e8e8>

0400e940 <__floatunsidf>:
 400e940:	defffe04 	addi	sp,sp,-8
 400e944:	dc000015 	stw	r16,0(sp)
 400e948:	dfc00115 	stw	ra,4(sp)
 400e94c:	2021883a 	mov	r16,r4
 400e950:	20001026 	beq	r4,zero,400e994 <__floatunsidf+0x54>
 400e954:	400e9e40 	call	400e9e4 <__clzsi2>
 400e958:	01410784 	movi	r5,1054
 400e95c:	100d883a 	mov	r6,r2
 400e960:	288bc83a 	sub	r5,r5,r2
 400e964:	00800284 	movi	r2,10
 400e968:	11801616 	blt	r2,r6,400e9c4 <__floatunsidf+0x84>
 400e96c:	008002c4 	movi	r2,11
 400e970:	1185c83a 	sub	r2,r2,r6
 400e974:	8084d83a 	srl	r2,r16,r2
 400e978:	00c00434 	movhi	r3,16
 400e97c:	31c00544 	addi	r7,r6,21
 400e980:	18ffffc4 	addi	r3,r3,-1
 400e984:	81e0983a 	sll	r16,r16,r7
 400e988:	10cc703a 	and	r6,r2,r3
 400e98c:	2941ffcc 	andi	r5,r5,2047
 400e990:	00000206 	br	400e99c <__floatunsidf+0x5c>
 400e994:	000b883a 	mov	r5,zero
 400e998:	000d883a 	mov	r6,zero
 400e99c:	280a953a 	slli	r5,r5,20
 400e9a0:	00c00434 	movhi	r3,16
 400e9a4:	18ffffc4 	addi	r3,r3,-1
 400e9a8:	30c6703a 	and	r3,r6,r3
 400e9ac:	8005883a 	mov	r2,r16
 400e9b0:	1946b03a 	or	r3,r3,r5
 400e9b4:	dfc00117 	ldw	ra,4(sp)
 400e9b8:	dc000017 	ldw	r16,0(sp)
 400e9bc:	dec00204 	addi	sp,sp,8
 400e9c0:	f800283a 	ret
 400e9c4:	31bffd44 	addi	r6,r6,-11
 400e9c8:	818c983a 	sll	r6,r16,r6
 400e9cc:	00800434 	movhi	r2,16
 400e9d0:	10bfffc4 	addi	r2,r2,-1
 400e9d4:	2941ffcc 	andi	r5,r5,2047
 400e9d8:	0021883a 	mov	r16,zero
 400e9dc:	308c703a 	and	r6,r6,r2
 400e9e0:	003fee06 	br	400e99c <__alt_data_end+0xfe00e99c>

0400e9e4 <__clzsi2>:
 400e9e4:	00bfffd4 	movui	r2,65535
 400e9e8:	11000b36 	bltu	r2,r4,400ea18 <__clzsi2+0x34>
 400e9ec:	00803fc4 	movi	r2,255
 400e9f0:	1100122e 	bgeu	r2,r4,400ea3c <__clzsi2+0x58>
 400e9f4:	00c00204 	movi	r3,8
 400e9f8:	01400604 	movi	r5,24
 400e9fc:	20c8d83a 	srl	r4,r4,r3
 400ea00:	00810074 	movhi	r2,1025
 400ea04:	1086f604 	addi	r2,r2,7128
 400ea08:	1109883a 	add	r4,r2,r4
 400ea0c:	20800003 	ldbu	r2,0(r4)
 400ea10:	2885c83a 	sub	r2,r5,r2
 400ea14:	f800283a 	ret
 400ea18:	00804034 	movhi	r2,256
 400ea1c:	10bfffc4 	addi	r2,r2,-1
 400ea20:	11000336 	bltu	r2,r4,400ea30 <__clzsi2+0x4c>
 400ea24:	00c00404 	movi	r3,16
 400ea28:	180b883a 	mov	r5,r3
 400ea2c:	003ff306 	br	400e9fc <__alt_data_end+0xfe00e9fc>
 400ea30:	00c00604 	movi	r3,24
 400ea34:	01400204 	movi	r5,8
 400ea38:	003ff006 	br	400e9fc <__alt_data_end+0xfe00e9fc>
 400ea3c:	0007883a 	mov	r3,zero
 400ea40:	01400804 	movi	r5,32
 400ea44:	003fed06 	br	400e9fc <__alt_data_end+0xfe00e9fc>

0400ea48 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400ea48:	defffe04 	addi	sp,sp,-8
 400ea4c:	dfc00115 	stw	ra,4(sp)
 400ea50:	df000015 	stw	fp,0(sp)
 400ea54:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400ea58:	00810074 	movhi	r2,1025
 400ea5c:	108df904 	addi	r2,r2,14308
 400ea60:	10800017 	ldw	r2,0(r2)
 400ea64:	10000526 	beq	r2,zero,400ea7c <alt_get_errno+0x34>
 400ea68:	00810074 	movhi	r2,1025
 400ea6c:	108df904 	addi	r2,r2,14308
 400ea70:	10800017 	ldw	r2,0(r2)
 400ea74:	103ee83a 	callr	r2
 400ea78:	00000206 	br	400ea84 <alt_get_errno+0x3c>
 400ea7c:	00810074 	movhi	r2,1025
 400ea80:	1094c004 	addi	r2,r2,21248
}
 400ea84:	e037883a 	mov	sp,fp
 400ea88:	dfc00117 	ldw	ra,4(sp)
 400ea8c:	df000017 	ldw	fp,0(sp)
 400ea90:	dec00204 	addi	sp,sp,8
 400ea94:	f800283a 	ret

0400ea98 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 400ea98:	defffb04 	addi	sp,sp,-20
 400ea9c:	dfc00415 	stw	ra,16(sp)
 400eaa0:	df000315 	stw	fp,12(sp)
 400eaa4:	df000304 	addi	fp,sp,12
 400eaa8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 400eaac:	e0bfff17 	ldw	r2,-4(fp)
 400eab0:	10000816 	blt	r2,zero,400ead4 <close+0x3c>
 400eab4:	e13fff17 	ldw	r4,-4(fp)
 400eab8:	01400304 	movi	r5,12
 400eabc:	400c2240 	call	400c224 <__mulsi3>
 400eac0:	1007883a 	mov	r3,r2
 400eac4:	00810074 	movhi	r2,1025
 400eac8:	10897604 	addi	r2,r2,9688
 400eacc:	1885883a 	add	r2,r3,r2
 400ead0:	00000106 	br	400ead8 <close+0x40>
 400ead4:	0005883a 	mov	r2,zero
 400ead8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 400eadc:	e0bffd17 	ldw	r2,-12(fp)
 400eae0:	10001926 	beq	r2,zero,400eb48 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 400eae4:	e0bffd17 	ldw	r2,-12(fp)
 400eae8:	10800017 	ldw	r2,0(r2)
 400eaec:	10800417 	ldw	r2,16(r2)
 400eaf0:	10000626 	beq	r2,zero,400eb0c <close+0x74>
 400eaf4:	e0bffd17 	ldw	r2,-12(fp)
 400eaf8:	10800017 	ldw	r2,0(r2)
 400eafc:	10800417 	ldw	r2,16(r2)
 400eb00:	e13ffd17 	ldw	r4,-12(fp)
 400eb04:	103ee83a 	callr	r2
 400eb08:	00000106 	br	400eb10 <close+0x78>
 400eb0c:	0005883a 	mov	r2,zero
 400eb10:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 400eb14:	e13fff17 	ldw	r4,-4(fp)
 400eb18:	400f1bc0 	call	400f1bc <alt_release_fd>
    if (rval < 0)
 400eb1c:	e0bffe17 	ldw	r2,-8(fp)
 400eb20:	1000070e 	bge	r2,zero,400eb40 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 400eb24:	400ea480 	call	400ea48 <alt_get_errno>
 400eb28:	1007883a 	mov	r3,r2
 400eb2c:	e0bffe17 	ldw	r2,-8(fp)
 400eb30:	0085c83a 	sub	r2,zero,r2
 400eb34:	18800015 	stw	r2,0(r3)
      return -1;
 400eb38:	00bfffc4 	movi	r2,-1
 400eb3c:	00000706 	br	400eb5c <close+0xc4>
    }
    return 0;
 400eb40:	0005883a 	mov	r2,zero
 400eb44:	00000506 	br	400eb5c <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400eb48:	400ea480 	call	400ea48 <alt_get_errno>
 400eb4c:	1007883a 	mov	r3,r2
 400eb50:	00801444 	movi	r2,81
 400eb54:	18800015 	stw	r2,0(r3)
    return -1;
 400eb58:	00bfffc4 	movi	r2,-1
  }
}
 400eb5c:	e037883a 	mov	sp,fp
 400eb60:	dfc00117 	ldw	ra,4(sp)
 400eb64:	df000017 	ldw	fp,0(sp)
 400eb68:	dec00204 	addi	sp,sp,8
 400eb6c:	f800283a 	ret

0400eb70 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 400eb70:	defffc04 	addi	sp,sp,-16
 400eb74:	df000315 	stw	fp,12(sp)
 400eb78:	df000304 	addi	fp,sp,12
 400eb7c:	e13ffd15 	stw	r4,-12(fp)
 400eb80:	e17ffe15 	stw	r5,-8(fp)
 400eb84:	e1bfff15 	stw	r6,-4(fp)
  return len;
 400eb88:	e0bfff17 	ldw	r2,-4(fp)
}
 400eb8c:	e037883a 	mov	sp,fp
 400eb90:	df000017 	ldw	fp,0(sp)
 400eb94:	dec00104 	addi	sp,sp,4
 400eb98:	f800283a 	ret

0400eb9c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400eb9c:	defffe04 	addi	sp,sp,-8
 400eba0:	dfc00115 	stw	ra,4(sp)
 400eba4:	df000015 	stw	fp,0(sp)
 400eba8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400ebac:	00810074 	movhi	r2,1025
 400ebb0:	108df904 	addi	r2,r2,14308
 400ebb4:	10800017 	ldw	r2,0(r2)
 400ebb8:	10000526 	beq	r2,zero,400ebd0 <alt_get_errno+0x34>
 400ebbc:	00810074 	movhi	r2,1025
 400ebc0:	108df904 	addi	r2,r2,14308
 400ebc4:	10800017 	ldw	r2,0(r2)
 400ebc8:	103ee83a 	callr	r2
 400ebcc:	00000206 	br	400ebd8 <alt_get_errno+0x3c>
 400ebd0:	00810074 	movhi	r2,1025
 400ebd4:	1094c004 	addi	r2,r2,21248
}
 400ebd8:	e037883a 	mov	sp,fp
 400ebdc:	dfc00117 	ldw	ra,4(sp)
 400ebe0:	df000017 	ldw	fp,0(sp)
 400ebe4:	dec00204 	addi	sp,sp,8
 400ebe8:	f800283a 	ret

0400ebec <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 400ebec:	defffb04 	addi	sp,sp,-20
 400ebf0:	dfc00415 	stw	ra,16(sp)
 400ebf4:	df000315 	stw	fp,12(sp)
 400ebf8:	df000304 	addi	fp,sp,12
 400ebfc:	e13ffe15 	stw	r4,-8(fp)
 400ec00:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400ec04:	e0bffe17 	ldw	r2,-8(fp)
 400ec08:	10000816 	blt	r2,zero,400ec2c <fstat+0x40>
 400ec0c:	e13ffe17 	ldw	r4,-8(fp)
 400ec10:	01400304 	movi	r5,12
 400ec14:	400c2240 	call	400c224 <__mulsi3>
 400ec18:	1007883a 	mov	r3,r2
 400ec1c:	00810074 	movhi	r2,1025
 400ec20:	10897604 	addi	r2,r2,9688
 400ec24:	1885883a 	add	r2,r3,r2
 400ec28:	00000106 	br	400ec30 <fstat+0x44>
 400ec2c:	0005883a 	mov	r2,zero
 400ec30:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 400ec34:	e0bffd17 	ldw	r2,-12(fp)
 400ec38:	10001026 	beq	r2,zero,400ec7c <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 400ec3c:	e0bffd17 	ldw	r2,-12(fp)
 400ec40:	10800017 	ldw	r2,0(r2)
 400ec44:	10800817 	ldw	r2,32(r2)
 400ec48:	10000726 	beq	r2,zero,400ec68 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 400ec4c:	e0bffd17 	ldw	r2,-12(fp)
 400ec50:	10800017 	ldw	r2,0(r2)
 400ec54:	10800817 	ldw	r2,32(r2)
 400ec58:	e13ffd17 	ldw	r4,-12(fp)
 400ec5c:	e17fff17 	ldw	r5,-4(fp)
 400ec60:	103ee83a 	callr	r2
 400ec64:	00000a06 	br	400ec90 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 400ec68:	e0bfff17 	ldw	r2,-4(fp)
 400ec6c:	00c80004 	movi	r3,8192
 400ec70:	10c00115 	stw	r3,4(r2)
      return 0;
 400ec74:	0005883a 	mov	r2,zero
 400ec78:	00000506 	br	400ec90 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400ec7c:	400eb9c0 	call	400eb9c <alt_get_errno>
 400ec80:	1007883a 	mov	r3,r2
 400ec84:	00801444 	movi	r2,81
 400ec88:	18800015 	stw	r2,0(r3)
    return -1;
 400ec8c:	00bfffc4 	movi	r2,-1
  }
}
 400ec90:	e037883a 	mov	sp,fp
 400ec94:	dfc00117 	ldw	ra,4(sp)
 400ec98:	df000017 	ldw	fp,0(sp)
 400ec9c:	dec00204 	addi	sp,sp,8
 400eca0:	f800283a 	ret

0400eca4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400eca4:	defffe04 	addi	sp,sp,-8
 400eca8:	dfc00115 	stw	ra,4(sp)
 400ecac:	df000015 	stw	fp,0(sp)
 400ecb0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400ecb4:	00810074 	movhi	r2,1025
 400ecb8:	108df904 	addi	r2,r2,14308
 400ecbc:	10800017 	ldw	r2,0(r2)
 400ecc0:	10000526 	beq	r2,zero,400ecd8 <alt_get_errno+0x34>
 400ecc4:	00810074 	movhi	r2,1025
 400ecc8:	108df904 	addi	r2,r2,14308
 400eccc:	10800017 	ldw	r2,0(r2)
 400ecd0:	103ee83a 	callr	r2
 400ecd4:	00000206 	br	400ece0 <alt_get_errno+0x3c>
 400ecd8:	00810074 	movhi	r2,1025
 400ecdc:	1094c004 	addi	r2,r2,21248
}
 400ece0:	e037883a 	mov	sp,fp
 400ece4:	dfc00117 	ldw	ra,4(sp)
 400ece8:	df000017 	ldw	fp,0(sp)
 400ecec:	dec00204 	addi	sp,sp,8
 400ecf0:	f800283a 	ret

0400ecf4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 400ecf4:	deffed04 	addi	sp,sp,-76
 400ecf8:	dfc01215 	stw	ra,72(sp)
 400ecfc:	df001115 	stw	fp,68(sp)
 400ed00:	df001104 	addi	fp,sp,68
 400ed04:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400ed08:	e0bfff17 	ldw	r2,-4(fp)
 400ed0c:	10000816 	blt	r2,zero,400ed30 <isatty+0x3c>
 400ed10:	e13fff17 	ldw	r4,-4(fp)
 400ed14:	01400304 	movi	r5,12
 400ed18:	400c2240 	call	400c224 <__mulsi3>
 400ed1c:	1007883a 	mov	r3,r2
 400ed20:	00810074 	movhi	r2,1025
 400ed24:	10897604 	addi	r2,r2,9688
 400ed28:	1885883a 	add	r2,r3,r2
 400ed2c:	00000106 	br	400ed34 <isatty+0x40>
 400ed30:	0005883a 	mov	r2,zero
 400ed34:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 400ed38:	e0bfef17 	ldw	r2,-68(fp)
 400ed3c:	10000e26 	beq	r2,zero,400ed78 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 400ed40:	e0bfef17 	ldw	r2,-68(fp)
 400ed44:	10800017 	ldw	r2,0(r2)
 400ed48:	10800817 	ldw	r2,32(r2)
 400ed4c:	1000021e 	bne	r2,zero,400ed58 <isatty+0x64>
    {
      return 1;
 400ed50:	00800044 	movi	r2,1
 400ed54:	00000d06 	br	400ed8c <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 400ed58:	e0bff004 	addi	r2,fp,-64
 400ed5c:	e13fff17 	ldw	r4,-4(fp)
 400ed60:	100b883a 	mov	r5,r2
 400ed64:	400ebec0 	call	400ebec <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 400ed68:	e0bff117 	ldw	r2,-60(fp)
 400ed6c:	10880020 	cmpeqi	r2,r2,8192
 400ed70:	10803fcc 	andi	r2,r2,255
 400ed74:	00000506 	br	400ed8c <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400ed78:	400eca40 	call	400eca4 <alt_get_errno>
 400ed7c:	1007883a 	mov	r3,r2
 400ed80:	00801444 	movi	r2,81
 400ed84:	18800015 	stw	r2,0(r3)
    return 0;
 400ed88:	0005883a 	mov	r2,zero
  }
}
 400ed8c:	e037883a 	mov	sp,fp
 400ed90:	dfc00117 	ldw	ra,4(sp)
 400ed94:	df000017 	ldw	fp,0(sp)
 400ed98:	dec00204 	addi	sp,sp,8
 400ed9c:	f800283a 	ret

0400eda0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 400eda0:	defffc04 	addi	sp,sp,-16
 400eda4:	df000315 	stw	fp,12(sp)
 400eda8:	df000304 	addi	fp,sp,12
 400edac:	e13ffd15 	stw	r4,-12(fp)
 400edb0:	e17ffe15 	stw	r5,-8(fp)
 400edb4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 400edb8:	e0fffe17 	ldw	r3,-8(fp)
 400edbc:	e0bffd17 	ldw	r2,-12(fp)
 400edc0:	18800c26 	beq	r3,r2,400edf4 <alt_load_section+0x54>
  {
    while( to != end )
 400edc4:	00000806 	br	400ede8 <alt_load_section+0x48>
    {
      *to++ = *from++;
 400edc8:	e0bffe17 	ldw	r2,-8(fp)
 400edcc:	10c00104 	addi	r3,r2,4
 400edd0:	e0fffe15 	stw	r3,-8(fp)
 400edd4:	e0fffd17 	ldw	r3,-12(fp)
 400edd8:	19000104 	addi	r4,r3,4
 400eddc:	e13ffd15 	stw	r4,-12(fp)
 400ede0:	18c00017 	ldw	r3,0(r3)
 400ede4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 400ede8:	e0fffe17 	ldw	r3,-8(fp)
 400edec:	e0bfff17 	ldw	r2,-4(fp)
 400edf0:	18bff51e 	bne	r3,r2,400edc8 <__alt_data_end+0xfe00edc8>
    {
      *to++ = *from++;
    }
  }
}
 400edf4:	e037883a 	mov	sp,fp
 400edf8:	df000017 	ldw	fp,0(sp)
 400edfc:	dec00104 	addi	sp,sp,4
 400ee00:	f800283a 	ret

0400ee04 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 400ee04:	defffe04 	addi	sp,sp,-8
 400ee08:	dfc00115 	stw	ra,4(sp)
 400ee0c:	df000015 	stw	fp,0(sp)
 400ee10:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 400ee14:	01010074 	movhi	r4,1025
 400ee18:	210dfe04 	addi	r4,r4,14328
 400ee1c:	01410074 	movhi	r5,1025
 400ee20:	29474304 	addi	r5,r5,7436
 400ee24:	01810074 	movhi	r6,1025
 400ee28:	318dfe04 	addi	r6,r6,14328
 400ee2c:	400eda00 	call	400eda0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 400ee30:	01010034 	movhi	r4,1024
 400ee34:	21000804 	addi	r4,r4,32
 400ee38:	01410034 	movhi	r5,1024
 400ee3c:	29400804 	addi	r5,r5,32
 400ee40:	01810034 	movhi	r6,1024
 400ee44:	31806f04 	addi	r6,r6,444
 400ee48:	400eda00 	call	400eda0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 400ee4c:	01010074 	movhi	r4,1025
 400ee50:	2104a504 	addi	r4,r4,4756
 400ee54:	01410074 	movhi	r5,1025
 400ee58:	2944a504 	addi	r5,r5,4756
 400ee5c:	01810074 	movhi	r6,1025
 400ee60:	31874304 	addi	r6,r6,7436
 400ee64:	400eda00 	call	400eda0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 400ee68:	40102040 	call	4010204 <alt_dcache_flush_all>
  alt_icache_flush_all();
 400ee6c:	40103cc0 	call	40103cc <alt_icache_flush_all>
}
 400ee70:	e037883a 	mov	sp,fp
 400ee74:	dfc00117 	ldw	ra,4(sp)
 400ee78:	df000017 	ldw	fp,0(sp)
 400ee7c:	dec00204 	addi	sp,sp,8
 400ee80:	f800283a 	ret

0400ee84 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400ee84:	defffe04 	addi	sp,sp,-8
 400ee88:	dfc00115 	stw	ra,4(sp)
 400ee8c:	df000015 	stw	fp,0(sp)
 400ee90:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400ee94:	00810074 	movhi	r2,1025
 400ee98:	108df904 	addi	r2,r2,14308
 400ee9c:	10800017 	ldw	r2,0(r2)
 400eea0:	10000526 	beq	r2,zero,400eeb8 <alt_get_errno+0x34>
 400eea4:	00810074 	movhi	r2,1025
 400eea8:	108df904 	addi	r2,r2,14308
 400eeac:	10800017 	ldw	r2,0(r2)
 400eeb0:	103ee83a 	callr	r2
 400eeb4:	00000206 	br	400eec0 <alt_get_errno+0x3c>
 400eeb8:	00810074 	movhi	r2,1025
 400eebc:	1094c004 	addi	r2,r2,21248
}
 400eec0:	e037883a 	mov	sp,fp
 400eec4:	dfc00117 	ldw	ra,4(sp)
 400eec8:	df000017 	ldw	fp,0(sp)
 400eecc:	dec00204 	addi	sp,sp,8
 400eed0:	f800283a 	ret

0400eed4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 400eed4:	defff904 	addi	sp,sp,-28
 400eed8:	dfc00615 	stw	ra,24(sp)
 400eedc:	df000515 	stw	fp,20(sp)
 400eee0:	df000504 	addi	fp,sp,20
 400eee4:	e13ffd15 	stw	r4,-12(fp)
 400eee8:	e17ffe15 	stw	r5,-8(fp)
 400eeec:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 400eef0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400eef4:	e0bffd17 	ldw	r2,-12(fp)
 400eef8:	10000816 	blt	r2,zero,400ef1c <lseek+0x48>
 400eefc:	e13ffd17 	ldw	r4,-12(fp)
 400ef00:	01400304 	movi	r5,12
 400ef04:	400c2240 	call	400c224 <__mulsi3>
 400ef08:	1007883a 	mov	r3,r2
 400ef0c:	00810074 	movhi	r2,1025
 400ef10:	10897604 	addi	r2,r2,9688
 400ef14:	1885883a 	add	r2,r3,r2
 400ef18:	00000106 	br	400ef20 <lseek+0x4c>
 400ef1c:	0005883a 	mov	r2,zero
 400ef20:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 400ef24:	e0bffc17 	ldw	r2,-16(fp)
 400ef28:	10001026 	beq	r2,zero,400ef6c <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 400ef2c:	e0bffc17 	ldw	r2,-16(fp)
 400ef30:	10800017 	ldw	r2,0(r2)
 400ef34:	10800717 	ldw	r2,28(r2)
 400ef38:	10000926 	beq	r2,zero,400ef60 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 400ef3c:	e0bffc17 	ldw	r2,-16(fp)
 400ef40:	10800017 	ldw	r2,0(r2)
 400ef44:	10800717 	ldw	r2,28(r2)
 400ef48:	e13ffc17 	ldw	r4,-16(fp)
 400ef4c:	e17ffe17 	ldw	r5,-8(fp)
 400ef50:	e1bfff17 	ldw	r6,-4(fp)
 400ef54:	103ee83a 	callr	r2
 400ef58:	e0bffb15 	stw	r2,-20(fp)
 400ef5c:	00000506 	br	400ef74 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 400ef60:	00bfde84 	movi	r2,-134
 400ef64:	e0bffb15 	stw	r2,-20(fp)
 400ef68:	00000206 	br	400ef74 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 400ef6c:	00bfebc4 	movi	r2,-81
 400ef70:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 400ef74:	e0bffb17 	ldw	r2,-20(fp)
 400ef78:	1000070e 	bge	r2,zero,400ef98 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 400ef7c:	400ee840 	call	400ee84 <alt_get_errno>
 400ef80:	1007883a 	mov	r3,r2
 400ef84:	e0bffb17 	ldw	r2,-20(fp)
 400ef88:	0085c83a 	sub	r2,zero,r2
 400ef8c:	18800015 	stw	r2,0(r3)
    rc = -1;
 400ef90:	00bfffc4 	movi	r2,-1
 400ef94:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 400ef98:	e0bffb17 	ldw	r2,-20(fp)
}
 400ef9c:	e037883a 	mov	sp,fp
 400efa0:	dfc00117 	ldw	ra,4(sp)
 400efa4:	df000017 	ldw	fp,0(sp)
 400efa8:	dec00204 	addi	sp,sp,8
 400efac:	f800283a 	ret

0400efb0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 400efb0:	defffd04 	addi	sp,sp,-12
 400efb4:	dfc00215 	stw	ra,8(sp)
 400efb8:	df000115 	stw	fp,4(sp)
 400efbc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 400efc0:	0009883a 	mov	r4,zero
 400efc4:	400f4a40 	call	400f4a4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 400efc8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 400efcc:	400f4d80 	call	400f4d8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 400efd0:	01010074 	movhi	r4,1025
 400efd4:	21073904 	addi	r4,r4,7396
 400efd8:	01410074 	movhi	r5,1025
 400efdc:	29473904 	addi	r5,r5,7396
 400efe0:	01810074 	movhi	r6,1025
 400efe4:	31873904 	addi	r6,r6,7396
 400efe8:	40107980 	call	4010798 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 400efec:	40103140 	call	4010314 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 400eff0:	01010074 	movhi	r4,1025
 400eff4:	2100dc04 	addi	r4,r4,880
 400eff8:	4010ee80 	call	4010ee8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 400effc:	d126d317 	ldw	r4,-25780(gp)
 400f000:	d0e6d417 	ldw	r3,-25776(gp)
 400f004:	d0a6d517 	ldw	r2,-25772(gp)
 400f008:	180b883a 	mov	r5,r3
 400f00c:	100d883a 	mov	r6,r2
 400f010:	400029c0 	call	400029c <main>
 400f014:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 400f018:	01000044 	movi	r4,1
 400f01c:	400ea980 	call	400ea98 <close>
  exit (result);
 400f020:	e13fff17 	ldw	r4,-4(fp)
 400f024:	4010efc0 	call	4010efc <exit>

0400f028 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 400f028:	defffe04 	addi	sp,sp,-8
 400f02c:	df000115 	stw	fp,4(sp)
 400f030:	df000104 	addi	fp,sp,4
 400f034:	e13fff15 	stw	r4,-4(fp)
}
 400f038:	e037883a 	mov	sp,fp
 400f03c:	df000017 	ldw	fp,0(sp)
 400f040:	dec00104 	addi	sp,sp,4
 400f044:	f800283a 	ret

0400f048 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 400f048:	defffe04 	addi	sp,sp,-8
 400f04c:	df000115 	stw	fp,4(sp)
 400f050:	df000104 	addi	fp,sp,4
 400f054:	e13fff15 	stw	r4,-4(fp)
}
 400f058:	e037883a 	mov	sp,fp
 400f05c:	df000017 	ldw	fp,0(sp)
 400f060:	dec00104 	addi	sp,sp,4
 400f064:	f800283a 	ret

0400f068 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400f068:	defffe04 	addi	sp,sp,-8
 400f06c:	dfc00115 	stw	ra,4(sp)
 400f070:	df000015 	stw	fp,0(sp)
 400f074:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400f078:	00810074 	movhi	r2,1025
 400f07c:	108df904 	addi	r2,r2,14308
 400f080:	10800017 	ldw	r2,0(r2)
 400f084:	10000526 	beq	r2,zero,400f09c <alt_get_errno+0x34>
 400f088:	00810074 	movhi	r2,1025
 400f08c:	108df904 	addi	r2,r2,14308
 400f090:	10800017 	ldw	r2,0(r2)
 400f094:	103ee83a 	callr	r2
 400f098:	00000206 	br	400f0a4 <alt_get_errno+0x3c>
 400f09c:	00810074 	movhi	r2,1025
 400f0a0:	1094c004 	addi	r2,r2,21248
}
 400f0a4:	e037883a 	mov	sp,fp
 400f0a8:	dfc00117 	ldw	ra,4(sp)
 400f0ac:	df000017 	ldw	fp,0(sp)
 400f0b0:	dec00204 	addi	sp,sp,8
 400f0b4:	f800283a 	ret

0400f0b8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 400f0b8:	defff904 	addi	sp,sp,-28
 400f0bc:	dfc00615 	stw	ra,24(sp)
 400f0c0:	df000515 	stw	fp,20(sp)
 400f0c4:	df000504 	addi	fp,sp,20
 400f0c8:	e13ffd15 	stw	r4,-12(fp)
 400f0cc:	e17ffe15 	stw	r5,-8(fp)
 400f0d0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400f0d4:	e0bffd17 	ldw	r2,-12(fp)
 400f0d8:	10000816 	blt	r2,zero,400f0fc <read+0x44>
 400f0dc:	e13ffd17 	ldw	r4,-12(fp)
 400f0e0:	01400304 	movi	r5,12
 400f0e4:	400c2240 	call	400c224 <__mulsi3>
 400f0e8:	1007883a 	mov	r3,r2
 400f0ec:	00810074 	movhi	r2,1025
 400f0f0:	10897604 	addi	r2,r2,9688
 400f0f4:	1885883a 	add	r2,r3,r2
 400f0f8:	00000106 	br	400f100 <read+0x48>
 400f0fc:	0005883a 	mov	r2,zero
 400f100:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 400f104:	e0bffb17 	ldw	r2,-20(fp)
 400f108:	10002226 	beq	r2,zero,400f194 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 400f10c:	e0bffb17 	ldw	r2,-20(fp)
 400f110:	10800217 	ldw	r2,8(r2)
 400f114:	108000cc 	andi	r2,r2,3
 400f118:	10800060 	cmpeqi	r2,r2,1
 400f11c:	1000181e 	bne	r2,zero,400f180 <read+0xc8>
        (fd->dev->read))
 400f120:	e0bffb17 	ldw	r2,-20(fp)
 400f124:	10800017 	ldw	r2,0(r2)
 400f128:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 400f12c:	10001426 	beq	r2,zero,400f180 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 400f130:	e0bffb17 	ldw	r2,-20(fp)
 400f134:	10800017 	ldw	r2,0(r2)
 400f138:	10800517 	ldw	r2,20(r2)
 400f13c:	e0ffff17 	ldw	r3,-4(fp)
 400f140:	e13ffb17 	ldw	r4,-20(fp)
 400f144:	e17ffe17 	ldw	r5,-8(fp)
 400f148:	180d883a 	mov	r6,r3
 400f14c:	103ee83a 	callr	r2
 400f150:	e0bffc15 	stw	r2,-16(fp)
 400f154:	e0bffc17 	ldw	r2,-16(fp)
 400f158:	1000070e 	bge	r2,zero,400f178 <read+0xc0>
        {
          ALT_ERRNO = -rval;
 400f15c:	400f0680 	call	400f068 <alt_get_errno>
 400f160:	1007883a 	mov	r3,r2
 400f164:	e0bffc17 	ldw	r2,-16(fp)
 400f168:	0085c83a 	sub	r2,zero,r2
 400f16c:	18800015 	stw	r2,0(r3)
          return -1;
 400f170:	00bfffc4 	movi	r2,-1
 400f174:	00000c06 	br	400f1a8 <read+0xf0>
        }
        return rval;
 400f178:	e0bffc17 	ldw	r2,-16(fp)
 400f17c:	00000a06 	br	400f1a8 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 400f180:	400f0680 	call	400f068 <alt_get_errno>
 400f184:	1007883a 	mov	r3,r2
 400f188:	00800344 	movi	r2,13
 400f18c:	18800015 	stw	r2,0(r3)
 400f190:	00000406 	br	400f1a4 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 400f194:	400f0680 	call	400f068 <alt_get_errno>
 400f198:	1007883a 	mov	r3,r2
 400f19c:	00801444 	movi	r2,81
 400f1a0:	18800015 	stw	r2,0(r3)
  }
  return -1;
 400f1a4:	00bfffc4 	movi	r2,-1
}
 400f1a8:	e037883a 	mov	sp,fp
 400f1ac:	dfc00117 	ldw	ra,4(sp)
 400f1b0:	df000017 	ldw	fp,0(sp)
 400f1b4:	dec00204 	addi	sp,sp,8
 400f1b8:	f800283a 	ret

0400f1bc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 400f1bc:	defffc04 	addi	sp,sp,-16
 400f1c0:	dfc00315 	stw	ra,12(sp)
 400f1c4:	df000215 	stw	fp,8(sp)
 400f1c8:	dc000115 	stw	r16,4(sp)
 400f1cc:	df000204 	addi	fp,sp,8
 400f1d0:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 400f1d4:	e0bffe17 	ldw	r2,-8(fp)
 400f1d8:	108000d0 	cmplti	r2,r2,3
 400f1dc:	1000111e 	bne	r2,zero,400f224 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 400f1e0:	04010074 	movhi	r16,1025
 400f1e4:	84097604 	addi	r16,r16,9688
 400f1e8:	e0bffe17 	ldw	r2,-8(fp)
 400f1ec:	1009883a 	mov	r4,r2
 400f1f0:	01400304 	movi	r5,12
 400f1f4:	400c2240 	call	400c224 <__mulsi3>
 400f1f8:	8085883a 	add	r2,r16,r2
 400f1fc:	10800204 	addi	r2,r2,8
 400f200:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 400f204:	04010074 	movhi	r16,1025
 400f208:	84097604 	addi	r16,r16,9688
 400f20c:	e0bffe17 	ldw	r2,-8(fp)
 400f210:	1009883a 	mov	r4,r2
 400f214:	01400304 	movi	r5,12
 400f218:	400c2240 	call	400c224 <__mulsi3>
 400f21c:	8085883a 	add	r2,r16,r2
 400f220:	10000015 	stw	zero,0(r2)
  }
}
 400f224:	e6ffff04 	addi	sp,fp,-4
 400f228:	dfc00217 	ldw	ra,8(sp)
 400f22c:	df000117 	ldw	fp,4(sp)
 400f230:	dc000017 	ldw	r16,0(sp)
 400f234:	dec00304 	addi	sp,sp,12
 400f238:	f800283a 	ret

0400f23c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 400f23c:	defff904 	addi	sp,sp,-28
 400f240:	df000615 	stw	fp,24(sp)
 400f244:	df000604 	addi	fp,sp,24
 400f248:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400f24c:	0005303a 	rdctl	r2,status
 400f250:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400f254:	e0fffc17 	ldw	r3,-16(fp)
 400f258:	00bfff84 	movi	r2,-2
 400f25c:	1884703a 	and	r2,r3,r2
 400f260:	1001703a 	wrctl	status,r2
  
  return context;
 400f264:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 400f268:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 400f26c:	d0a00c17 	ldw	r2,-32720(gp)
 400f270:	10c000c4 	addi	r3,r2,3
 400f274:	00bfff04 	movi	r2,-4
 400f278:	1884703a 	and	r2,r3,r2
 400f27c:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 400f280:	d0e00c17 	ldw	r3,-32720(gp)
 400f284:	e0bfff17 	ldw	r2,-4(fp)
 400f288:	1887883a 	add	r3,r3,r2
 400f28c:	00818034 	movhi	r2,1536
 400f290:	10800004 	addi	r2,r2,0
 400f294:	10c0062e 	bgeu	r2,r3,400f2b0 <sbrk+0x74>
 400f298:	e0bffa17 	ldw	r2,-24(fp)
 400f29c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400f2a0:	e0bffd17 	ldw	r2,-12(fp)
 400f2a4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 400f2a8:	00bfffc4 	movi	r2,-1
 400f2ac:	00000b06 	br	400f2dc <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 400f2b0:	d0a00c17 	ldw	r2,-32720(gp)
 400f2b4:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 400f2b8:	d0e00c17 	ldw	r3,-32720(gp)
 400f2bc:	e0bfff17 	ldw	r2,-4(fp)
 400f2c0:	1885883a 	add	r2,r3,r2
 400f2c4:	d0a00c15 	stw	r2,-32720(gp)
 400f2c8:	e0bffa17 	ldw	r2,-24(fp)
 400f2cc:	e0bffe15 	stw	r2,-8(fp)
 400f2d0:	e0bffe17 	ldw	r2,-8(fp)
 400f2d4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 400f2d8:	e0bffb17 	ldw	r2,-20(fp)
} 
 400f2dc:	e037883a 	mov	sp,fp
 400f2e0:	df000017 	ldw	fp,0(sp)
 400f2e4:	dec00104 	addi	sp,sp,4
 400f2e8:	f800283a 	ret

0400f2ec <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 400f2ec:	defffd04 	addi	sp,sp,-12
 400f2f0:	dfc00215 	stw	ra,8(sp)
 400f2f4:	df000115 	stw	fp,4(sp)
 400f2f8:	df000104 	addi	fp,sp,4
 400f2fc:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 400f300:	e13fff17 	ldw	r4,-4(fp)
 400f304:	40100ac0 	call	40100ac <alt_busy_sleep>
}
 400f308:	e037883a 	mov	sp,fp
 400f30c:	dfc00117 	ldw	ra,4(sp)
 400f310:	df000017 	ldw	fp,0(sp)
 400f314:	dec00204 	addi	sp,sp,8
 400f318:	f800283a 	ret

0400f31c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400f31c:	defffe04 	addi	sp,sp,-8
 400f320:	dfc00115 	stw	ra,4(sp)
 400f324:	df000015 	stw	fp,0(sp)
 400f328:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400f32c:	00810074 	movhi	r2,1025
 400f330:	108df904 	addi	r2,r2,14308
 400f334:	10800017 	ldw	r2,0(r2)
 400f338:	10000526 	beq	r2,zero,400f350 <alt_get_errno+0x34>
 400f33c:	00810074 	movhi	r2,1025
 400f340:	108df904 	addi	r2,r2,14308
 400f344:	10800017 	ldw	r2,0(r2)
 400f348:	103ee83a 	callr	r2
 400f34c:	00000206 	br	400f358 <alt_get_errno+0x3c>
 400f350:	00810074 	movhi	r2,1025
 400f354:	1094c004 	addi	r2,r2,21248
}
 400f358:	e037883a 	mov	sp,fp
 400f35c:	dfc00117 	ldw	ra,4(sp)
 400f360:	df000017 	ldw	fp,0(sp)
 400f364:	dec00204 	addi	sp,sp,8
 400f368:	f800283a 	ret

0400f36c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 400f36c:	defff904 	addi	sp,sp,-28
 400f370:	dfc00615 	stw	ra,24(sp)
 400f374:	df000515 	stw	fp,20(sp)
 400f378:	df000504 	addi	fp,sp,20
 400f37c:	e13ffd15 	stw	r4,-12(fp)
 400f380:	e17ffe15 	stw	r5,-8(fp)
 400f384:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400f388:	e0bffd17 	ldw	r2,-12(fp)
 400f38c:	10000816 	blt	r2,zero,400f3b0 <write+0x44>
 400f390:	e13ffd17 	ldw	r4,-12(fp)
 400f394:	01400304 	movi	r5,12
 400f398:	400c2240 	call	400c224 <__mulsi3>
 400f39c:	1007883a 	mov	r3,r2
 400f3a0:	00810074 	movhi	r2,1025
 400f3a4:	10897604 	addi	r2,r2,9688
 400f3a8:	1885883a 	add	r2,r3,r2
 400f3ac:	00000106 	br	400f3b4 <write+0x48>
 400f3b0:	0005883a 	mov	r2,zero
 400f3b4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 400f3b8:	e0bffb17 	ldw	r2,-20(fp)
 400f3bc:	10002126 	beq	r2,zero,400f444 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 400f3c0:	e0bffb17 	ldw	r2,-20(fp)
 400f3c4:	10800217 	ldw	r2,8(r2)
 400f3c8:	108000cc 	andi	r2,r2,3
 400f3cc:	10001826 	beq	r2,zero,400f430 <write+0xc4>
 400f3d0:	e0bffb17 	ldw	r2,-20(fp)
 400f3d4:	10800017 	ldw	r2,0(r2)
 400f3d8:	10800617 	ldw	r2,24(r2)
 400f3dc:	10001426 	beq	r2,zero,400f430 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 400f3e0:	e0bffb17 	ldw	r2,-20(fp)
 400f3e4:	10800017 	ldw	r2,0(r2)
 400f3e8:	10800617 	ldw	r2,24(r2)
 400f3ec:	e0ffff17 	ldw	r3,-4(fp)
 400f3f0:	e13ffb17 	ldw	r4,-20(fp)
 400f3f4:	e17ffe17 	ldw	r5,-8(fp)
 400f3f8:	180d883a 	mov	r6,r3
 400f3fc:	103ee83a 	callr	r2
 400f400:	e0bffc15 	stw	r2,-16(fp)
 400f404:	e0bffc17 	ldw	r2,-16(fp)
 400f408:	1000070e 	bge	r2,zero,400f428 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 400f40c:	400f31c0 	call	400f31c <alt_get_errno>
 400f410:	1007883a 	mov	r3,r2
 400f414:	e0bffc17 	ldw	r2,-16(fp)
 400f418:	0085c83a 	sub	r2,zero,r2
 400f41c:	18800015 	stw	r2,0(r3)
        return -1;
 400f420:	00bfffc4 	movi	r2,-1
 400f424:	00000c06 	br	400f458 <write+0xec>
      }
      return rval;
 400f428:	e0bffc17 	ldw	r2,-16(fp)
 400f42c:	00000a06 	br	400f458 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 400f430:	400f31c0 	call	400f31c <alt_get_errno>
 400f434:	1007883a 	mov	r3,r2
 400f438:	00800344 	movi	r2,13
 400f43c:	18800015 	stw	r2,0(r3)
 400f440:	00000406 	br	400f454 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 400f444:	400f31c0 	call	400f31c <alt_get_errno>
 400f448:	1007883a 	mov	r3,r2
 400f44c:	00801444 	movi	r2,81
 400f450:	18800015 	stw	r2,0(r3)
  }
  return -1;
 400f454:	00bfffc4 	movi	r2,-1
}
 400f458:	e037883a 	mov	sp,fp
 400f45c:	dfc00117 	ldw	ra,4(sp)
 400f460:	df000017 	ldw	fp,0(sp)
 400f464:	dec00204 	addi	sp,sp,8
 400f468:	f800283a 	ret

0400f46c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 400f46c:	defffd04 	addi	sp,sp,-12
 400f470:	dfc00215 	stw	ra,8(sp)
 400f474:	df000115 	stw	fp,4(sp)
 400f478:	df000104 	addi	fp,sp,4
 400f47c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 400f480:	e13fff17 	ldw	r4,-4(fp)
 400f484:	01410074 	movhi	r5,1025
 400f488:	294df604 	addi	r5,r5,14296
 400f48c:	40102700 	call	4010270 <alt_dev_llist_insert>
}
 400f490:	e037883a 	mov	sp,fp
 400f494:	dfc00117 	ldw	ra,4(sp)
 400f498:	df000017 	ldw	fp,0(sp)
 400f49c:	dec00204 	addi	sp,sp,8
 400f4a0:	f800283a 	ret

0400f4a4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 400f4a4:	defffd04 	addi	sp,sp,-12
 400f4a8:	dfc00215 	stw	ra,8(sp)
 400f4ac:	df000115 	stw	fp,4(sp)
 400f4b0:	df000104 	addi	fp,sp,4
 400f4b4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
 400f4b8:	4010c500 	call	4010c50 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 400f4bc:	00800044 	movi	r2,1
 400f4c0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 400f4c4:	e037883a 	mov	sp,fp
 400f4c8:	dfc00117 	ldw	ra,4(sp)
 400f4cc:	df000017 	ldw	fp,0(sp)
 400f4d0:	dec00204 	addi	sp,sp,8
 400f4d4:	f800283a 	ret

0400f4d8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 400f4d8:	defffe04 	addi	sp,sp,-8
 400f4dc:	dfc00115 	stw	ra,4(sp)
 400f4e0:	df000015 	stw	fp,0(sp)
 400f4e4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 400f4e8:	01010074 	movhi	r4,1025
 400f4ec:	2109e004 	addi	r4,r4,10112
 400f4f0:	000b883a 	mov	r5,zero
 400f4f4:	000d883a 	mov	r6,zero
 400f4f8:	400f6840 	call	400f684 <altera_avalon_jtag_uart_init>
 400f4fc:	01010074 	movhi	r4,1025
 400f500:	2109d604 	addi	r4,r4,10072
 400f504:	400f46c0 	call	400f46c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 400f508:	0001883a 	nop
}
 400f50c:	e037883a 	mov	sp,fp
 400f510:	dfc00117 	ldw	ra,4(sp)
 400f514:	df000017 	ldw	fp,0(sp)
 400f518:	dec00204 	addi	sp,sp,8
 400f51c:	f800283a 	ret

0400f520 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 400f520:	defffa04 	addi	sp,sp,-24
 400f524:	dfc00515 	stw	ra,20(sp)
 400f528:	df000415 	stw	fp,16(sp)
 400f52c:	df000404 	addi	fp,sp,16
 400f530:	e13ffd15 	stw	r4,-12(fp)
 400f534:	e17ffe15 	stw	r5,-8(fp)
 400f538:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 400f53c:	e0bffd17 	ldw	r2,-12(fp)
 400f540:	10800017 	ldw	r2,0(r2)
 400f544:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 400f548:	e0bffc17 	ldw	r2,-16(fp)
 400f54c:	10c00a04 	addi	r3,r2,40
 400f550:	e0bffd17 	ldw	r2,-12(fp)
 400f554:	10800217 	ldw	r2,8(r2)
 400f558:	1809883a 	mov	r4,r3
 400f55c:	e17ffe17 	ldw	r5,-8(fp)
 400f560:	e1bfff17 	ldw	r6,-4(fp)
 400f564:	100f883a 	mov	r7,r2
 400f568:	400fb480 	call	400fb48 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 400f56c:	e037883a 	mov	sp,fp
 400f570:	dfc00117 	ldw	ra,4(sp)
 400f574:	df000017 	ldw	fp,0(sp)
 400f578:	dec00204 	addi	sp,sp,8
 400f57c:	f800283a 	ret

0400f580 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 400f580:	defffa04 	addi	sp,sp,-24
 400f584:	dfc00515 	stw	ra,20(sp)
 400f588:	df000415 	stw	fp,16(sp)
 400f58c:	df000404 	addi	fp,sp,16
 400f590:	e13ffd15 	stw	r4,-12(fp)
 400f594:	e17ffe15 	stw	r5,-8(fp)
 400f598:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 400f59c:	e0bffd17 	ldw	r2,-12(fp)
 400f5a0:	10800017 	ldw	r2,0(r2)
 400f5a4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 400f5a8:	e0bffc17 	ldw	r2,-16(fp)
 400f5ac:	10c00a04 	addi	r3,r2,40
 400f5b0:	e0bffd17 	ldw	r2,-12(fp)
 400f5b4:	10800217 	ldw	r2,8(r2)
 400f5b8:	1809883a 	mov	r4,r3
 400f5bc:	e17ffe17 	ldw	r5,-8(fp)
 400f5c0:	e1bfff17 	ldw	r6,-4(fp)
 400f5c4:	100f883a 	mov	r7,r2
 400f5c8:	400fd540 	call	400fd54 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 400f5cc:	e037883a 	mov	sp,fp
 400f5d0:	dfc00117 	ldw	ra,4(sp)
 400f5d4:	df000017 	ldw	fp,0(sp)
 400f5d8:	dec00204 	addi	sp,sp,8
 400f5dc:	f800283a 	ret

0400f5e0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 400f5e0:	defffc04 	addi	sp,sp,-16
 400f5e4:	dfc00315 	stw	ra,12(sp)
 400f5e8:	df000215 	stw	fp,8(sp)
 400f5ec:	df000204 	addi	fp,sp,8
 400f5f0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 400f5f4:	e0bfff17 	ldw	r2,-4(fp)
 400f5f8:	10800017 	ldw	r2,0(r2)
 400f5fc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 400f600:	e0bffe17 	ldw	r2,-8(fp)
 400f604:	10c00a04 	addi	r3,r2,40
 400f608:	e0bfff17 	ldw	r2,-4(fp)
 400f60c:	10800217 	ldw	r2,8(r2)
 400f610:	1809883a 	mov	r4,r3
 400f614:	100b883a 	mov	r5,r2
 400f618:	400f9f40 	call	400f9f4 <altera_avalon_jtag_uart_close>
}
 400f61c:	e037883a 	mov	sp,fp
 400f620:	dfc00117 	ldw	ra,4(sp)
 400f624:	df000017 	ldw	fp,0(sp)
 400f628:	dec00204 	addi	sp,sp,8
 400f62c:	f800283a 	ret

0400f630 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 400f630:	defffa04 	addi	sp,sp,-24
 400f634:	dfc00515 	stw	ra,20(sp)
 400f638:	df000415 	stw	fp,16(sp)
 400f63c:	df000404 	addi	fp,sp,16
 400f640:	e13ffd15 	stw	r4,-12(fp)
 400f644:	e17ffe15 	stw	r5,-8(fp)
 400f648:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 400f64c:	e0bffd17 	ldw	r2,-12(fp)
 400f650:	10800017 	ldw	r2,0(r2)
 400f654:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 400f658:	e0bffc17 	ldw	r2,-16(fp)
 400f65c:	10800a04 	addi	r2,r2,40
 400f660:	1009883a 	mov	r4,r2
 400f664:	e17ffe17 	ldw	r5,-8(fp)
 400f668:	e1bfff17 	ldw	r6,-4(fp)
 400f66c:	400fa5c0 	call	400fa5c <altera_avalon_jtag_uart_ioctl>
}
 400f670:	e037883a 	mov	sp,fp
 400f674:	dfc00117 	ldw	ra,4(sp)
 400f678:	df000017 	ldw	fp,0(sp)
 400f67c:	dec00204 	addi	sp,sp,8
 400f680:	f800283a 	ret

0400f684 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 400f684:	defffa04 	addi	sp,sp,-24
 400f688:	dfc00515 	stw	ra,20(sp)
 400f68c:	df000415 	stw	fp,16(sp)
 400f690:	df000404 	addi	fp,sp,16
 400f694:	e13ffd15 	stw	r4,-12(fp)
 400f698:	e17ffe15 	stw	r5,-8(fp)
 400f69c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 400f6a0:	e0bffd17 	ldw	r2,-12(fp)
 400f6a4:	00c00044 	movi	r3,1
 400f6a8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 400f6ac:	e0bffd17 	ldw	r2,-12(fp)
 400f6b0:	10800017 	ldw	r2,0(r2)
 400f6b4:	10800104 	addi	r2,r2,4
 400f6b8:	1007883a 	mov	r3,r2
 400f6bc:	e0bffd17 	ldw	r2,-12(fp)
 400f6c0:	10800817 	ldw	r2,32(r2)
 400f6c4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 400f6c8:	e0fffe17 	ldw	r3,-8(fp)
 400f6cc:	e0bfff17 	ldw	r2,-4(fp)
 400f6d0:	d8000015 	stw	zero,0(sp)
 400f6d4:	1809883a 	mov	r4,r3
 400f6d8:	100b883a 	mov	r5,r2
 400f6dc:	01810074 	movhi	r6,1025
 400f6e0:	31bdd204 	addi	r6,r6,-2232
 400f6e4:	e1fffd17 	ldw	r7,-12(fp)
 400f6e8:	40103e80 	call	40103e8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 400f6ec:	e0bffd17 	ldw	r2,-12(fp)
 400f6f0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 400f6f4:	e0bffd17 	ldw	r2,-12(fp)
 400f6f8:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 400f6fc:	00810074 	movhi	r2,1025
 400f700:	1094c504 	addi	r2,r2,21268
 400f704:	10800017 	ldw	r2,0(r2)
 400f708:	1809883a 	mov	r4,r3
 400f70c:	100b883a 	mov	r5,r2
 400f710:	01810074 	movhi	r6,1025
 400f714:	31be5304 	addi	r6,r6,-1716
 400f718:	e1fffd17 	ldw	r7,-12(fp)
 400f71c:	400ff6c0 	call	400ff6c <alt_alarm_start>
 400f720:	1000040e 	bge	r2,zero,400f734 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 400f724:	e0fffd17 	ldw	r3,-12(fp)
 400f728:	00a00034 	movhi	r2,32768
 400f72c:	10bfffc4 	addi	r2,r2,-1
 400f730:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 400f734:	e037883a 	mov	sp,fp
 400f738:	dfc00117 	ldw	ra,4(sp)
 400f73c:	df000017 	ldw	fp,0(sp)
 400f740:	dec00204 	addi	sp,sp,8
 400f744:	f800283a 	ret

0400f748 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 400f748:	defff804 	addi	sp,sp,-32
 400f74c:	df000715 	stw	fp,28(sp)
 400f750:	df000704 	addi	fp,sp,28
 400f754:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 400f758:	e0bfff17 	ldw	r2,-4(fp)
 400f75c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 400f760:	e0bffb17 	ldw	r2,-20(fp)
 400f764:	10800017 	ldw	r2,0(r2)
 400f768:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 400f76c:	e0bffc17 	ldw	r2,-16(fp)
 400f770:	10800104 	addi	r2,r2,4
 400f774:	10800037 	ldwio	r2,0(r2)
 400f778:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 400f77c:	e0bffd17 	ldw	r2,-12(fp)
 400f780:	1080c00c 	andi	r2,r2,768
 400f784:	1000011e 	bne	r2,zero,400f78c <altera_avalon_jtag_uart_irq+0x44>
      break;
 400f788:	00006c06 	br	400f93c <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 400f78c:	e0bffd17 	ldw	r2,-12(fp)
 400f790:	1080400c 	andi	r2,r2,256
 400f794:	10003426 	beq	r2,zero,400f868 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 400f798:	00800074 	movhi	r2,1
 400f79c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400f7a0:	e0bffb17 	ldw	r2,-20(fp)
 400f7a4:	10800a17 	ldw	r2,40(r2)
 400f7a8:	10800044 	addi	r2,r2,1
 400f7ac:	1081ffcc 	andi	r2,r2,2047
 400f7b0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 400f7b4:	e0bffb17 	ldw	r2,-20(fp)
 400f7b8:	10c00b17 	ldw	r3,44(r2)
 400f7bc:	e0bffe17 	ldw	r2,-8(fp)
 400f7c0:	1880011e 	bne	r3,r2,400f7c8 <altera_avalon_jtag_uart_irq+0x80>
          break;
 400f7c4:	00001606 	br	400f820 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 400f7c8:	e0bffc17 	ldw	r2,-16(fp)
 400f7cc:	10800037 	ldwio	r2,0(r2)
 400f7d0:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 400f7d4:	e0bff917 	ldw	r2,-28(fp)
 400f7d8:	10a0000c 	andi	r2,r2,32768
 400f7dc:	1000011e 	bne	r2,zero,400f7e4 <altera_avalon_jtag_uart_irq+0x9c>
          break;
 400f7e0:	00000f06 	br	400f820 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 400f7e4:	e0bffb17 	ldw	r2,-20(fp)
 400f7e8:	10800a17 	ldw	r2,40(r2)
 400f7ec:	e0fff917 	ldw	r3,-28(fp)
 400f7f0:	1809883a 	mov	r4,r3
 400f7f4:	e0fffb17 	ldw	r3,-20(fp)
 400f7f8:	1885883a 	add	r2,r3,r2
 400f7fc:	10800e04 	addi	r2,r2,56
 400f800:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400f804:	e0bffb17 	ldw	r2,-20(fp)
 400f808:	10800a17 	ldw	r2,40(r2)
 400f80c:	10800044 	addi	r2,r2,1
 400f810:	10c1ffcc 	andi	r3,r2,2047
 400f814:	e0bffb17 	ldw	r2,-20(fp)
 400f818:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 400f81c:	003fe006 	br	400f7a0 <__alt_data_end+0xfe00f7a0>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 400f820:	e0bff917 	ldw	r2,-28(fp)
 400f824:	10bfffec 	andhi	r2,r2,65535
 400f828:	10000f26 	beq	r2,zero,400f868 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 400f82c:	e0bffb17 	ldw	r2,-20(fp)
 400f830:	10c00817 	ldw	r3,32(r2)
 400f834:	00bfff84 	movi	r2,-2
 400f838:	1886703a 	and	r3,r3,r2
 400f83c:	e0bffb17 	ldw	r2,-20(fp)
 400f840:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 400f844:	e0bffc17 	ldw	r2,-16(fp)
 400f848:	10800104 	addi	r2,r2,4
 400f84c:	1007883a 	mov	r3,r2
 400f850:	e0bffb17 	ldw	r2,-20(fp)
 400f854:	10800817 	ldw	r2,32(r2)
 400f858:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 400f85c:	e0bffc17 	ldw	r2,-16(fp)
 400f860:	10800104 	addi	r2,r2,4
 400f864:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 400f868:	e0bffd17 	ldw	r2,-12(fp)
 400f86c:	1080800c 	andi	r2,r2,512
 400f870:	10003126 	beq	r2,zero,400f938 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 400f874:	e0bffd17 	ldw	r2,-12(fp)
 400f878:	1004d43a 	srli	r2,r2,16
 400f87c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 400f880:	00001406 	br	400f8d4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 400f884:	e0bffc17 	ldw	r2,-16(fp)
 400f888:	e0fffb17 	ldw	r3,-20(fp)
 400f88c:	18c00d17 	ldw	r3,52(r3)
 400f890:	e13ffb17 	ldw	r4,-20(fp)
 400f894:	20c7883a 	add	r3,r4,r3
 400f898:	18c20e04 	addi	r3,r3,2104
 400f89c:	18c00003 	ldbu	r3,0(r3)
 400f8a0:	18c03fcc 	andi	r3,r3,255
 400f8a4:	18c0201c 	xori	r3,r3,128
 400f8a8:	18ffe004 	addi	r3,r3,-128
 400f8ac:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400f8b0:	e0bffb17 	ldw	r2,-20(fp)
 400f8b4:	10800d17 	ldw	r2,52(r2)
 400f8b8:	10800044 	addi	r2,r2,1
 400f8bc:	10c1ffcc 	andi	r3,r2,2047
 400f8c0:	e0bffb17 	ldw	r2,-20(fp)
 400f8c4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 400f8c8:	e0bffa17 	ldw	r2,-24(fp)
 400f8cc:	10bfffc4 	addi	r2,r2,-1
 400f8d0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 400f8d4:	e0bffa17 	ldw	r2,-24(fp)
 400f8d8:	10000526 	beq	r2,zero,400f8f0 <altera_avalon_jtag_uart_irq+0x1a8>
 400f8dc:	e0bffb17 	ldw	r2,-20(fp)
 400f8e0:	10c00d17 	ldw	r3,52(r2)
 400f8e4:	e0bffb17 	ldw	r2,-20(fp)
 400f8e8:	10800c17 	ldw	r2,48(r2)
 400f8ec:	18bfe51e 	bne	r3,r2,400f884 <__alt_data_end+0xfe00f884>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 400f8f0:	e0bffa17 	ldw	r2,-24(fp)
 400f8f4:	10001026 	beq	r2,zero,400f938 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 400f8f8:	e0bffb17 	ldw	r2,-20(fp)
 400f8fc:	10c00817 	ldw	r3,32(r2)
 400f900:	00bfff44 	movi	r2,-3
 400f904:	1886703a 	and	r3,r3,r2
 400f908:	e0bffb17 	ldw	r2,-20(fp)
 400f90c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 400f910:	e0bffb17 	ldw	r2,-20(fp)
 400f914:	10800017 	ldw	r2,0(r2)
 400f918:	10800104 	addi	r2,r2,4
 400f91c:	1007883a 	mov	r3,r2
 400f920:	e0bffb17 	ldw	r2,-20(fp)
 400f924:	10800817 	ldw	r2,32(r2)
 400f928:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 400f92c:	e0bffc17 	ldw	r2,-16(fp)
 400f930:	10800104 	addi	r2,r2,4
 400f934:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 400f938:	003f8c06 	br	400f76c <__alt_data_end+0xfe00f76c>
}
 400f93c:	e037883a 	mov	sp,fp
 400f940:	df000017 	ldw	fp,0(sp)
 400f944:	dec00104 	addi	sp,sp,4
 400f948:	f800283a 	ret

0400f94c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 400f94c:	defff804 	addi	sp,sp,-32
 400f950:	df000715 	stw	fp,28(sp)
 400f954:	df000704 	addi	fp,sp,28
 400f958:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 400f95c:	e0bffb17 	ldw	r2,-20(fp)
 400f960:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 400f964:	e0bff917 	ldw	r2,-28(fp)
 400f968:	10800017 	ldw	r2,0(r2)
 400f96c:	10800104 	addi	r2,r2,4
 400f970:	10800037 	ldwio	r2,0(r2)
 400f974:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 400f978:	e0bffa17 	ldw	r2,-24(fp)
 400f97c:	1081000c 	andi	r2,r2,1024
 400f980:	10000b26 	beq	r2,zero,400f9b0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 400f984:	e0bff917 	ldw	r2,-28(fp)
 400f988:	10800017 	ldw	r2,0(r2)
 400f98c:	10800104 	addi	r2,r2,4
 400f990:	1007883a 	mov	r3,r2
 400f994:	e0bff917 	ldw	r2,-28(fp)
 400f998:	10800817 	ldw	r2,32(r2)
 400f99c:	10810014 	ori	r2,r2,1024
 400f9a0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 400f9a4:	e0bff917 	ldw	r2,-28(fp)
 400f9a8:	10000915 	stw	zero,36(r2)
 400f9ac:	00000a06 	br	400f9d8 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 400f9b0:	e0bff917 	ldw	r2,-28(fp)
 400f9b4:	10c00917 	ldw	r3,36(r2)
 400f9b8:	00a00034 	movhi	r2,32768
 400f9bc:	10bfff04 	addi	r2,r2,-4
 400f9c0:	10c00536 	bltu	r2,r3,400f9d8 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 400f9c4:	e0bff917 	ldw	r2,-28(fp)
 400f9c8:	10800917 	ldw	r2,36(r2)
 400f9cc:	10c00044 	addi	r3,r2,1
 400f9d0:	e0bff917 	ldw	r2,-28(fp)
 400f9d4:	10c00915 	stw	r3,36(r2)
 400f9d8:	00810074 	movhi	r2,1025
 400f9dc:	1094c504 	addi	r2,r2,21268
 400f9e0:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 400f9e4:	e037883a 	mov	sp,fp
 400f9e8:	df000017 	ldw	fp,0(sp)
 400f9ec:	dec00104 	addi	sp,sp,4
 400f9f0:	f800283a 	ret

0400f9f4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 400f9f4:	defffd04 	addi	sp,sp,-12
 400f9f8:	df000215 	stw	fp,8(sp)
 400f9fc:	df000204 	addi	fp,sp,8
 400fa00:	e13ffe15 	stw	r4,-8(fp)
 400fa04:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 400fa08:	00000506 	br	400fa20 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 400fa0c:	e0bfff17 	ldw	r2,-4(fp)
 400fa10:	1090000c 	andi	r2,r2,16384
 400fa14:	10000226 	beq	r2,zero,400fa20 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 400fa18:	00bffd44 	movi	r2,-11
 400fa1c:	00000b06 	br	400fa4c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 400fa20:	e0bffe17 	ldw	r2,-8(fp)
 400fa24:	10c00d17 	ldw	r3,52(r2)
 400fa28:	e0bffe17 	ldw	r2,-8(fp)
 400fa2c:	10800c17 	ldw	r2,48(r2)
 400fa30:	18800526 	beq	r3,r2,400fa48 <altera_avalon_jtag_uart_close+0x54>
 400fa34:	e0bffe17 	ldw	r2,-8(fp)
 400fa38:	10c00917 	ldw	r3,36(r2)
 400fa3c:	e0bffe17 	ldw	r2,-8(fp)
 400fa40:	10800117 	ldw	r2,4(r2)
 400fa44:	18bff136 	bltu	r3,r2,400fa0c <__alt_data_end+0xfe00fa0c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 400fa48:	0005883a 	mov	r2,zero
}
 400fa4c:	e037883a 	mov	sp,fp
 400fa50:	df000017 	ldw	fp,0(sp)
 400fa54:	dec00104 	addi	sp,sp,4
 400fa58:	f800283a 	ret

0400fa5c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 400fa5c:	defffa04 	addi	sp,sp,-24
 400fa60:	df000515 	stw	fp,20(sp)
 400fa64:	df000504 	addi	fp,sp,20
 400fa68:	e13ffd15 	stw	r4,-12(fp)
 400fa6c:	e17ffe15 	stw	r5,-8(fp)
 400fa70:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 400fa74:	00bff9c4 	movi	r2,-25
 400fa78:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 400fa7c:	e0bffe17 	ldw	r2,-8(fp)
 400fa80:	10da8060 	cmpeqi	r3,r2,27137
 400fa84:	1800031e 	bne	r3,zero,400fa94 <altera_avalon_jtag_uart_ioctl+0x38>
 400fa88:	109a80a0 	cmpeqi	r2,r2,27138
 400fa8c:	1000191e 	bne	r2,zero,400faf4 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 400fa90:	00002806 	br	400fb34 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 400fa94:	e0bffd17 	ldw	r2,-12(fp)
 400fa98:	10c00117 	ldw	r3,4(r2)
 400fa9c:	00a00034 	movhi	r2,32768
 400faa0:	10bfffc4 	addi	r2,r2,-1
 400faa4:	18801226 	beq	r3,r2,400faf0 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
 400faa8:	e0bfff17 	ldw	r2,-4(fp)
 400faac:	10800017 	ldw	r2,0(r2)
 400fab0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 400fab4:	e0bffc17 	ldw	r2,-16(fp)
 400fab8:	10800090 	cmplti	r2,r2,2
 400fabc:	1000061e 	bne	r2,zero,400fad8 <altera_avalon_jtag_uart_ioctl+0x7c>
 400fac0:	e0fffc17 	ldw	r3,-16(fp)
 400fac4:	00a00034 	movhi	r2,32768
 400fac8:	10bfffc4 	addi	r2,r2,-1
 400facc:	18800226 	beq	r3,r2,400fad8 <altera_avalon_jtag_uart_ioctl+0x7c>
 400fad0:	e0bffc17 	ldw	r2,-16(fp)
 400fad4:	00000206 	br	400fae0 <altera_avalon_jtag_uart_ioctl+0x84>
 400fad8:	00a00034 	movhi	r2,32768
 400fadc:	10bfff84 	addi	r2,r2,-2
 400fae0:	e0fffd17 	ldw	r3,-12(fp)
 400fae4:	18800115 	stw	r2,4(r3)
      rc = 0;
 400fae8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 400faec:	00001106 	br	400fb34 <altera_avalon_jtag_uart_ioctl+0xd8>
 400faf0:	00001006 	br	400fb34 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 400faf4:	e0bffd17 	ldw	r2,-12(fp)
 400faf8:	10c00117 	ldw	r3,4(r2)
 400fafc:	00a00034 	movhi	r2,32768
 400fb00:	10bfffc4 	addi	r2,r2,-1
 400fb04:	18800a26 	beq	r3,r2,400fb30 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 400fb08:	e0bffd17 	ldw	r2,-12(fp)
 400fb0c:	10c00917 	ldw	r3,36(r2)
 400fb10:	e0bffd17 	ldw	r2,-12(fp)
 400fb14:	10800117 	ldw	r2,4(r2)
 400fb18:	1885803a 	cmpltu	r2,r3,r2
 400fb1c:	10c03fcc 	andi	r3,r2,255
 400fb20:	e0bfff17 	ldw	r2,-4(fp)
 400fb24:	10c00015 	stw	r3,0(r2)
      rc = 0;
 400fb28:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 400fb2c:	00000006 	br	400fb30 <altera_avalon_jtag_uart_ioctl+0xd4>
 400fb30:	0001883a 	nop

  default:
    break;
  }

  return rc;
 400fb34:	e0bffb17 	ldw	r2,-20(fp)
}
 400fb38:	e037883a 	mov	sp,fp
 400fb3c:	df000017 	ldw	fp,0(sp)
 400fb40:	dec00104 	addi	sp,sp,4
 400fb44:	f800283a 	ret

0400fb48 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 400fb48:	defff304 	addi	sp,sp,-52
 400fb4c:	dfc00c15 	stw	ra,48(sp)
 400fb50:	df000b15 	stw	fp,44(sp)
 400fb54:	df000b04 	addi	fp,sp,44
 400fb58:	e13ffc15 	stw	r4,-16(fp)
 400fb5c:	e17ffd15 	stw	r5,-12(fp)
 400fb60:	e1bffe15 	stw	r6,-8(fp)
 400fb64:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 400fb68:	e0bffd17 	ldw	r2,-12(fp)
 400fb6c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 400fb70:	00004906 	br	400fc98 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 400fb74:	e0bffc17 	ldw	r2,-16(fp)
 400fb78:	10800a17 	ldw	r2,40(r2)
 400fb7c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 400fb80:	e0bffc17 	ldw	r2,-16(fp)
 400fb84:	10800b17 	ldw	r2,44(r2)
 400fb88:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 400fb8c:	e0fff717 	ldw	r3,-36(fp)
 400fb90:	e0bff817 	ldw	r2,-32(fp)
 400fb94:	18800536 	bltu	r3,r2,400fbac <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 400fb98:	e0fff717 	ldw	r3,-36(fp)
 400fb9c:	e0bff817 	ldw	r2,-32(fp)
 400fba0:	1885c83a 	sub	r2,r3,r2
 400fba4:	e0bff615 	stw	r2,-40(fp)
 400fba8:	00000406 	br	400fbbc <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 400fbac:	00c20004 	movi	r3,2048
 400fbb0:	e0bff817 	ldw	r2,-32(fp)
 400fbb4:	1885c83a 	sub	r2,r3,r2
 400fbb8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 400fbbc:	e0bff617 	ldw	r2,-40(fp)
 400fbc0:	1000011e 	bne	r2,zero,400fbc8 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
 400fbc4:	00001d06 	br	400fc3c <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
 400fbc8:	e0fffe17 	ldw	r3,-8(fp)
 400fbcc:	e0bff617 	ldw	r2,-40(fp)
 400fbd0:	1880022e 	bgeu	r3,r2,400fbdc <altera_avalon_jtag_uart_read+0x94>
        n = space;
 400fbd4:	e0bffe17 	ldw	r2,-8(fp)
 400fbd8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 400fbdc:	e0bff817 	ldw	r2,-32(fp)
 400fbe0:	10800e04 	addi	r2,r2,56
 400fbe4:	e0fffc17 	ldw	r3,-16(fp)
 400fbe8:	1885883a 	add	r2,r3,r2
 400fbec:	e13ff517 	ldw	r4,-44(fp)
 400fbf0:	100b883a 	mov	r5,r2
 400fbf4:	e1bff617 	ldw	r6,-40(fp)
 400fbf8:	40079ac0 	call	40079ac <memcpy>
      ptr   += n;
 400fbfc:	e0fff517 	ldw	r3,-44(fp)
 400fc00:	e0bff617 	ldw	r2,-40(fp)
 400fc04:	1885883a 	add	r2,r3,r2
 400fc08:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 400fc0c:	e0fffe17 	ldw	r3,-8(fp)
 400fc10:	e0bff617 	ldw	r2,-40(fp)
 400fc14:	1885c83a 	sub	r2,r3,r2
 400fc18:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400fc1c:	e0fff817 	ldw	r3,-32(fp)
 400fc20:	e0bff617 	ldw	r2,-40(fp)
 400fc24:	1885883a 	add	r2,r3,r2
 400fc28:	10c1ffcc 	andi	r3,r2,2047
 400fc2c:	e0bffc17 	ldw	r2,-16(fp)
 400fc30:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 400fc34:	e0bffe17 	ldw	r2,-8(fp)
 400fc38:	00bfce16 	blt	zero,r2,400fb74 <__alt_data_end+0xfe00fb74>

    /* If we read any data then return it */
    if (ptr != buffer)
 400fc3c:	e0fff517 	ldw	r3,-44(fp)
 400fc40:	e0bffd17 	ldw	r2,-12(fp)
 400fc44:	18800126 	beq	r3,r2,400fc4c <altera_avalon_jtag_uart_read+0x104>
      break;
 400fc48:	00001506 	br	400fca0 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 400fc4c:	e0bfff17 	ldw	r2,-4(fp)
 400fc50:	1090000c 	andi	r2,r2,16384
 400fc54:	10000126 	beq	r2,zero,400fc5c <altera_avalon_jtag_uart_read+0x114>
      break;
 400fc58:	00001106 	br	400fca0 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 400fc5c:	0001883a 	nop
 400fc60:	e0bffc17 	ldw	r2,-16(fp)
 400fc64:	10c00a17 	ldw	r3,40(r2)
 400fc68:	e0bff717 	ldw	r2,-36(fp)
 400fc6c:	1880051e 	bne	r3,r2,400fc84 <altera_avalon_jtag_uart_read+0x13c>
 400fc70:	e0bffc17 	ldw	r2,-16(fp)
 400fc74:	10c00917 	ldw	r3,36(r2)
 400fc78:	e0bffc17 	ldw	r2,-16(fp)
 400fc7c:	10800117 	ldw	r2,4(r2)
 400fc80:	18bff736 	bltu	r3,r2,400fc60 <__alt_data_end+0xfe00fc60>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 400fc84:	e0bffc17 	ldw	r2,-16(fp)
 400fc88:	10c00a17 	ldw	r3,40(r2)
 400fc8c:	e0bff717 	ldw	r2,-36(fp)
 400fc90:	1880011e 	bne	r3,r2,400fc98 <altera_avalon_jtag_uart_read+0x150>
      break;
 400fc94:	00000206 	br	400fca0 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 400fc98:	e0bffe17 	ldw	r2,-8(fp)
 400fc9c:	00bfb516 	blt	zero,r2,400fb74 <__alt_data_end+0xfe00fb74>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 400fca0:	e0fff517 	ldw	r3,-44(fp)
 400fca4:	e0bffd17 	ldw	r2,-12(fp)
 400fca8:	18801826 	beq	r3,r2,400fd0c <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400fcac:	0005303a 	rdctl	r2,status
 400fcb0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400fcb4:	e0fffa17 	ldw	r3,-24(fp)
 400fcb8:	00bfff84 	movi	r2,-2
 400fcbc:	1884703a 	and	r2,r3,r2
 400fcc0:	1001703a 	wrctl	status,r2
  
  return context;
 400fcc4:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 400fcc8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 400fccc:	e0bffc17 	ldw	r2,-16(fp)
 400fcd0:	10800817 	ldw	r2,32(r2)
 400fcd4:	10c00054 	ori	r3,r2,1
 400fcd8:	e0bffc17 	ldw	r2,-16(fp)
 400fcdc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 400fce0:	e0bffc17 	ldw	r2,-16(fp)
 400fce4:	10800017 	ldw	r2,0(r2)
 400fce8:	10800104 	addi	r2,r2,4
 400fcec:	1007883a 	mov	r3,r2
 400fcf0:	e0bffc17 	ldw	r2,-16(fp)
 400fcf4:	10800817 	ldw	r2,32(r2)
 400fcf8:	18800035 	stwio	r2,0(r3)
 400fcfc:	e0bff917 	ldw	r2,-28(fp)
 400fd00:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400fd04:	e0bffb17 	ldw	r2,-20(fp)
 400fd08:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 400fd0c:	e0fff517 	ldw	r3,-44(fp)
 400fd10:	e0bffd17 	ldw	r2,-12(fp)
 400fd14:	18800426 	beq	r3,r2,400fd28 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
 400fd18:	e0fff517 	ldw	r3,-44(fp)
 400fd1c:	e0bffd17 	ldw	r2,-12(fp)
 400fd20:	1885c83a 	sub	r2,r3,r2
 400fd24:	00000606 	br	400fd40 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
 400fd28:	e0bfff17 	ldw	r2,-4(fp)
 400fd2c:	1090000c 	andi	r2,r2,16384
 400fd30:	10000226 	beq	r2,zero,400fd3c <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
 400fd34:	00bffd44 	movi	r2,-11
 400fd38:	00000106 	br	400fd40 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
 400fd3c:	00bffec4 	movi	r2,-5
}
 400fd40:	e037883a 	mov	sp,fp
 400fd44:	dfc00117 	ldw	ra,4(sp)
 400fd48:	df000017 	ldw	fp,0(sp)
 400fd4c:	dec00204 	addi	sp,sp,8
 400fd50:	f800283a 	ret

0400fd54 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 400fd54:	defff304 	addi	sp,sp,-52
 400fd58:	dfc00c15 	stw	ra,48(sp)
 400fd5c:	df000b15 	stw	fp,44(sp)
 400fd60:	df000b04 	addi	fp,sp,44
 400fd64:	e13ffc15 	stw	r4,-16(fp)
 400fd68:	e17ffd15 	stw	r5,-12(fp)
 400fd6c:	e1bffe15 	stw	r6,-8(fp)
 400fd70:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 400fd74:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 400fd78:	e0bffd17 	ldw	r2,-12(fp)
 400fd7c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 400fd80:	00003806 	br	400fe64 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 400fd84:	e0bffc17 	ldw	r2,-16(fp)
 400fd88:	10800c17 	ldw	r2,48(r2)
 400fd8c:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 400fd90:	e0bffc17 	ldw	r2,-16(fp)
 400fd94:	10800d17 	ldw	r2,52(r2)
 400fd98:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 400fd9c:	e0fff817 	ldw	r3,-32(fp)
 400fda0:	e0bff517 	ldw	r2,-44(fp)
 400fda4:	1880062e 	bgeu	r3,r2,400fdc0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 400fda8:	e0fff517 	ldw	r3,-44(fp)
 400fdac:	e0bff817 	ldw	r2,-32(fp)
 400fdb0:	1885c83a 	sub	r2,r3,r2
 400fdb4:	10bfffc4 	addi	r2,r2,-1
 400fdb8:	e0bff615 	stw	r2,-40(fp)
 400fdbc:	00000b06 	br	400fdec <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 400fdc0:	e0bff517 	ldw	r2,-44(fp)
 400fdc4:	10000526 	beq	r2,zero,400fddc <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 400fdc8:	00c20004 	movi	r3,2048
 400fdcc:	e0bff817 	ldw	r2,-32(fp)
 400fdd0:	1885c83a 	sub	r2,r3,r2
 400fdd4:	e0bff615 	stw	r2,-40(fp)
 400fdd8:	00000406 	br	400fdec <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 400fddc:	00c1ffc4 	movi	r3,2047
 400fde0:	e0bff817 	ldw	r2,-32(fp)
 400fde4:	1885c83a 	sub	r2,r3,r2
 400fde8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 400fdec:	e0bff617 	ldw	r2,-40(fp)
 400fdf0:	1000011e 	bne	r2,zero,400fdf8 <altera_avalon_jtag_uart_write+0xa4>
        break;
 400fdf4:	00001d06 	br	400fe6c <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
 400fdf8:	e0fffe17 	ldw	r3,-8(fp)
 400fdfc:	e0bff617 	ldw	r2,-40(fp)
 400fe00:	1880022e 	bgeu	r3,r2,400fe0c <altera_avalon_jtag_uart_write+0xb8>
        n = count;
 400fe04:	e0bffe17 	ldw	r2,-8(fp)
 400fe08:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 400fe0c:	e0bff817 	ldw	r2,-32(fp)
 400fe10:	10820e04 	addi	r2,r2,2104
 400fe14:	e0fffc17 	ldw	r3,-16(fp)
 400fe18:	1885883a 	add	r2,r3,r2
 400fe1c:	1009883a 	mov	r4,r2
 400fe20:	e17ffd17 	ldw	r5,-12(fp)
 400fe24:	e1bff617 	ldw	r6,-40(fp)
 400fe28:	40079ac0 	call	40079ac <memcpy>
      ptr   += n;
 400fe2c:	e0fffd17 	ldw	r3,-12(fp)
 400fe30:	e0bff617 	ldw	r2,-40(fp)
 400fe34:	1885883a 	add	r2,r3,r2
 400fe38:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 400fe3c:	e0fffe17 	ldw	r3,-8(fp)
 400fe40:	e0bff617 	ldw	r2,-40(fp)
 400fe44:	1885c83a 	sub	r2,r3,r2
 400fe48:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400fe4c:	e0fff817 	ldw	r3,-32(fp)
 400fe50:	e0bff617 	ldw	r2,-40(fp)
 400fe54:	1885883a 	add	r2,r3,r2
 400fe58:	10c1ffcc 	andi	r3,r2,2047
 400fe5c:	e0bffc17 	ldw	r2,-16(fp)
 400fe60:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 400fe64:	e0bffe17 	ldw	r2,-8(fp)
 400fe68:	00bfc616 	blt	zero,r2,400fd84 <__alt_data_end+0xfe00fd84>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400fe6c:	0005303a 	rdctl	r2,status
 400fe70:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400fe74:	e0fffa17 	ldw	r3,-24(fp)
 400fe78:	00bfff84 	movi	r2,-2
 400fe7c:	1884703a 	and	r2,r3,r2
 400fe80:	1001703a 	wrctl	status,r2
  
  return context;
 400fe84:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 400fe88:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 400fe8c:	e0bffc17 	ldw	r2,-16(fp)
 400fe90:	10800817 	ldw	r2,32(r2)
 400fe94:	10c00094 	ori	r3,r2,2
 400fe98:	e0bffc17 	ldw	r2,-16(fp)
 400fe9c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 400fea0:	e0bffc17 	ldw	r2,-16(fp)
 400fea4:	10800017 	ldw	r2,0(r2)
 400fea8:	10800104 	addi	r2,r2,4
 400feac:	1007883a 	mov	r3,r2
 400feb0:	e0bffc17 	ldw	r2,-16(fp)
 400feb4:	10800817 	ldw	r2,32(r2)
 400feb8:	18800035 	stwio	r2,0(r3)
 400febc:	e0bff917 	ldw	r2,-28(fp)
 400fec0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400fec4:	e0bffb17 	ldw	r2,-20(fp)
 400fec8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 400fecc:	e0bffe17 	ldw	r2,-8(fp)
 400fed0:	0080120e 	bge	zero,r2,400ff1c <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
 400fed4:	e0bfff17 	ldw	r2,-4(fp)
 400fed8:	1090000c 	andi	r2,r2,16384
 400fedc:	10000126 	beq	r2,zero,400fee4 <altera_avalon_jtag_uart_write+0x190>
        break;
 400fee0:	00001006 	br	400ff24 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 400fee4:	0001883a 	nop
 400fee8:	e0bffc17 	ldw	r2,-16(fp)
 400feec:	10c00d17 	ldw	r3,52(r2)
 400fef0:	e0bff517 	ldw	r2,-44(fp)
 400fef4:	1880051e 	bne	r3,r2,400ff0c <altera_avalon_jtag_uart_write+0x1b8>
 400fef8:	e0bffc17 	ldw	r2,-16(fp)
 400fefc:	10c00917 	ldw	r3,36(r2)
 400ff00:	e0bffc17 	ldw	r2,-16(fp)
 400ff04:	10800117 	ldw	r2,4(r2)
 400ff08:	18bff736 	bltu	r3,r2,400fee8 <__alt_data_end+0xfe00fee8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 400ff0c:	e0bffc17 	ldw	r2,-16(fp)
 400ff10:	10800917 	ldw	r2,36(r2)
 400ff14:	10000126 	beq	r2,zero,400ff1c <altera_avalon_jtag_uart_write+0x1c8>
         break;
 400ff18:	00000206 	br	400ff24 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
 400ff1c:	e0bffe17 	ldw	r2,-8(fp)
 400ff20:	00bf9716 	blt	zero,r2,400fd80 <__alt_data_end+0xfe00fd80>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 400ff24:	e0fffd17 	ldw	r3,-12(fp)
 400ff28:	e0bff717 	ldw	r2,-36(fp)
 400ff2c:	18800426 	beq	r3,r2,400ff40 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
 400ff30:	e0fffd17 	ldw	r3,-12(fp)
 400ff34:	e0bff717 	ldw	r2,-36(fp)
 400ff38:	1885c83a 	sub	r2,r3,r2
 400ff3c:	00000606 	br	400ff58 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
 400ff40:	e0bfff17 	ldw	r2,-4(fp)
 400ff44:	1090000c 	andi	r2,r2,16384
 400ff48:	10000226 	beq	r2,zero,400ff54 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
 400ff4c:	00bffd44 	movi	r2,-11
 400ff50:	00000106 	br	400ff58 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 400ff54:	00bffec4 	movi	r2,-5
}
 400ff58:	e037883a 	mov	sp,fp
 400ff5c:	dfc00117 	ldw	ra,4(sp)
 400ff60:	df000017 	ldw	fp,0(sp)
 400ff64:	dec00204 	addi	sp,sp,8
 400ff68:	f800283a 	ret

0400ff6c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 400ff6c:	defff504 	addi	sp,sp,-44
 400ff70:	df000a15 	stw	fp,40(sp)
 400ff74:	df000a04 	addi	fp,sp,40
 400ff78:	e13ffc15 	stw	r4,-16(fp)
 400ff7c:	e17ffd15 	stw	r5,-12(fp)
 400ff80:	e1bffe15 	stw	r6,-8(fp)
 400ff84:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 400ff88:	e03ff615 	stw	zero,-40(fp)
 400ff8c:	00810074 	movhi	r2,1025
 400ff90:	1094c504 	addi	r2,r2,21268
 400ff94:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 400ff98:	10003f26 	beq	r2,zero,4010098 <alt_alarm_start+0x12c>
  {
    if (alarm)
 400ff9c:	e0bffc17 	ldw	r2,-16(fp)
 400ffa0:	10003b26 	beq	r2,zero,4010090 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 400ffa4:	e0bffc17 	ldw	r2,-16(fp)
 400ffa8:	e0fffe17 	ldw	r3,-8(fp)
 400ffac:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 400ffb0:	e0bffc17 	ldw	r2,-16(fp)
 400ffb4:	e0ffff17 	ldw	r3,-4(fp)
 400ffb8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400ffbc:	0005303a 	rdctl	r2,status
 400ffc0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400ffc4:	e0fff817 	ldw	r3,-32(fp)
 400ffc8:	00bfff84 	movi	r2,-2
 400ffcc:	1884703a 	and	r2,r3,r2
 400ffd0:	1001703a 	wrctl	status,r2
  
  return context;
 400ffd4:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 400ffd8:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 400ffdc:	00810074 	movhi	r2,1025
 400ffe0:	1094c604 	addi	r2,r2,21272
 400ffe4:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 400ffe8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 400ffec:	e0fffd17 	ldw	r3,-12(fp)
 400fff0:	e0bff617 	ldw	r2,-40(fp)
 400fff4:	1885883a 	add	r2,r3,r2
 400fff8:	10c00044 	addi	r3,r2,1
 400fffc:	e0bffc17 	ldw	r2,-16(fp)
 4010000:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 4010004:	e0bffc17 	ldw	r2,-16(fp)
 4010008:	10c00217 	ldw	r3,8(r2)
 401000c:	e0bff617 	ldw	r2,-40(fp)
 4010010:	1880042e 	bgeu	r3,r2,4010024 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 4010014:	e0bffc17 	ldw	r2,-16(fp)
 4010018:	00c00044 	movi	r3,1
 401001c:	10c00405 	stb	r3,16(r2)
 4010020:	00000206 	br	401002c <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 4010024:	e0bffc17 	ldw	r2,-16(fp)
 4010028:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 401002c:	e0fffc17 	ldw	r3,-16(fp)
 4010030:	00810074 	movhi	r2,1025
 4010034:	108dfc04 	addi	r2,r2,14320
 4010038:	e0bff915 	stw	r2,-28(fp)
 401003c:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4010040:	e0bffa17 	ldw	r2,-24(fp)
 4010044:	e0fff917 	ldw	r3,-28(fp)
 4010048:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 401004c:	e0bff917 	ldw	r2,-28(fp)
 4010050:	10c00017 	ldw	r3,0(r2)
 4010054:	e0bffa17 	ldw	r2,-24(fp)
 4010058:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 401005c:	e0bff917 	ldw	r2,-28(fp)
 4010060:	10800017 	ldw	r2,0(r2)
 4010064:	e0fffa17 	ldw	r3,-24(fp)
 4010068:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 401006c:	e0bff917 	ldw	r2,-28(fp)
 4010070:	e0fffa17 	ldw	r3,-24(fp)
 4010074:	10c00015 	stw	r3,0(r2)
 4010078:	e0bff717 	ldw	r2,-36(fp)
 401007c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4010080:	e0bffb17 	ldw	r2,-20(fp)
 4010084:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 4010088:	0005883a 	mov	r2,zero
 401008c:	00000306 	br	401009c <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 4010090:	00bffa84 	movi	r2,-22
 4010094:	00000106 	br	401009c <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 4010098:	00bfde84 	movi	r2,-134
  }
}
 401009c:	e037883a 	mov	sp,fp
 40100a0:	df000017 	ldw	fp,0(sp)
 40100a4:	dec00104 	addi	sp,sp,4
 40100a8:	f800283a 	ret

040100ac <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 40100ac:	defffa04 	addi	sp,sp,-24
 40100b0:	dfc00515 	stw	ra,20(sp)
 40100b4:	df000415 	stw	fp,16(sp)
 40100b8:	df000404 	addi	fp,sp,16
 40100bc:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 40100c0:	00800244 	movi	r2,9
 40100c4:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 40100c8:	e13ffd17 	ldw	r4,-12(fp)
 40100cc:	014003f4 	movhi	r5,15
 40100d0:	29509004 	addi	r5,r5,16960
 40100d4:	400c2240 	call	400c224 <__mulsi3>
 40100d8:	0100bef4 	movhi	r4,763
 40100dc:	213c2004 	addi	r4,r4,-3968
 40100e0:	100b883a 	mov	r5,r2
 40100e4:	400c2140 	call	400c214 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 40100e8:	01200034 	movhi	r4,32768
 40100ec:	213fffc4 	addi	r4,r4,-1
 40100f0:	100b883a 	mov	r5,r2
 40100f4:	400c2140 	call	400c214 <__udivsi3>
 40100f8:	e13fff17 	ldw	r4,-4(fp)
 40100fc:	100b883a 	mov	r5,r2
 4010100:	400c2140 	call	400c214 <__udivsi3>
 4010104:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 4010108:	e0bffe17 	ldw	r2,-8(fp)
 401010c:	10002a26 	beq	r2,zero,40101b8 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 4010110:	e03ffc15 	stw	zero,-16(fp)
 4010114:	00001706 	br	4010174 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 4010118:	00a00034 	movhi	r2,32768
 401011c:	10bfffc4 	addi	r2,r2,-1
 4010120:	10bfffc4 	addi	r2,r2,-1
 4010124:	103ffe1e 	bne	r2,zero,4010120 <__alt_data_end+0xfe010120>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 4010128:	e13ffd17 	ldw	r4,-12(fp)
 401012c:	014003f4 	movhi	r5,15
 4010130:	29509004 	addi	r5,r5,16960
 4010134:	400c2240 	call	400c224 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 4010138:	0100bef4 	movhi	r4,763
 401013c:	213c2004 	addi	r4,r4,-3968
 4010140:	100b883a 	mov	r5,r2
 4010144:	400c2140 	call	400c214 <__udivsi3>
 4010148:	01200034 	movhi	r4,32768
 401014c:	213fffc4 	addi	r4,r4,-1
 4010150:	100b883a 	mov	r5,r2
 4010154:	400c2140 	call	400c214 <__udivsi3>
 4010158:	1007883a 	mov	r3,r2
 401015c:	e0bfff17 	ldw	r2,-4(fp)
 4010160:	10c5c83a 	sub	r2,r2,r3
 4010164:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 4010168:	e0bffc17 	ldw	r2,-16(fp)
 401016c:	10800044 	addi	r2,r2,1
 4010170:	e0bffc15 	stw	r2,-16(fp)
 4010174:	e0fffc17 	ldw	r3,-16(fp)
 4010178:	e0bffe17 	ldw	r2,-8(fp)
 401017c:	18bfe616 	blt	r3,r2,4010118 <__alt_data_end+0xfe010118>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4010180:	e13ffd17 	ldw	r4,-12(fp)
 4010184:	014003f4 	movhi	r5,15
 4010188:	29509004 	addi	r5,r5,16960
 401018c:	400c2240 	call	400c224 <__mulsi3>
 4010190:	0100bef4 	movhi	r4,763
 4010194:	213c2004 	addi	r4,r4,-3968
 4010198:	100b883a 	mov	r5,r2
 401019c:	400c2140 	call	400c214 <__udivsi3>
 40101a0:	1009883a 	mov	r4,r2
 40101a4:	e17fff17 	ldw	r5,-4(fp)
 40101a8:	400c2240 	call	400c224 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 40101ac:	10bfffc4 	addi	r2,r2,-1
 40101b0:	103ffe1e 	bne	r2,zero,40101ac <__alt_data_end+0xfe0101ac>
 40101b4:	00000d06 	br	40101ec <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 40101b8:	e13ffd17 	ldw	r4,-12(fp)
 40101bc:	014003f4 	movhi	r5,15
 40101c0:	29509004 	addi	r5,r5,16960
 40101c4:	400c2240 	call	400c224 <__mulsi3>
 40101c8:	0100bef4 	movhi	r4,763
 40101cc:	213c2004 	addi	r4,r4,-3968
 40101d0:	100b883a 	mov	r5,r2
 40101d4:	400c2140 	call	400c214 <__udivsi3>
 40101d8:	1009883a 	mov	r4,r2
 40101dc:	e17fff17 	ldw	r5,-4(fp)
 40101e0:	400c2240 	call	400c224 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 40101e4:	10bfffc4 	addi	r2,r2,-1
 40101e8:	00bffe16 	blt	zero,r2,40101e4 <__alt_data_end+0xfe0101e4>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 40101ec:	0005883a 	mov	r2,zero
}
 40101f0:	e037883a 	mov	sp,fp
 40101f4:	dfc00117 	ldw	ra,4(sp)
 40101f8:	df000017 	ldw	fp,0(sp)
 40101fc:	dec00204 	addi	sp,sp,8
 4010200:	f800283a 	ret

04010204 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 4010204:	deffff04 	addi	sp,sp,-4
 4010208:	df000015 	stw	fp,0(sp)
 401020c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 4010210:	e037883a 	mov	sp,fp
 4010214:	df000017 	ldw	fp,0(sp)
 4010218:	dec00104 	addi	sp,sp,4
 401021c:	f800283a 	ret

04010220 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4010220:	defffe04 	addi	sp,sp,-8
 4010224:	dfc00115 	stw	ra,4(sp)
 4010228:	df000015 	stw	fp,0(sp)
 401022c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4010230:	00810074 	movhi	r2,1025
 4010234:	108df904 	addi	r2,r2,14308
 4010238:	10800017 	ldw	r2,0(r2)
 401023c:	10000526 	beq	r2,zero,4010254 <alt_get_errno+0x34>
 4010240:	00810074 	movhi	r2,1025
 4010244:	108df904 	addi	r2,r2,14308
 4010248:	10800017 	ldw	r2,0(r2)
 401024c:	103ee83a 	callr	r2
 4010250:	00000206 	br	401025c <alt_get_errno+0x3c>
 4010254:	00810074 	movhi	r2,1025
 4010258:	1094c004 	addi	r2,r2,21248
}
 401025c:	e037883a 	mov	sp,fp
 4010260:	dfc00117 	ldw	ra,4(sp)
 4010264:	df000017 	ldw	fp,0(sp)
 4010268:	dec00204 	addi	sp,sp,8
 401026c:	f800283a 	ret

04010270 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 4010270:	defffa04 	addi	sp,sp,-24
 4010274:	dfc00515 	stw	ra,20(sp)
 4010278:	df000415 	stw	fp,16(sp)
 401027c:	df000404 	addi	fp,sp,16
 4010280:	e13ffe15 	stw	r4,-8(fp)
 4010284:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 4010288:	e0bffe17 	ldw	r2,-8(fp)
 401028c:	10000326 	beq	r2,zero,401029c <alt_dev_llist_insert+0x2c>
 4010290:	e0bffe17 	ldw	r2,-8(fp)
 4010294:	10800217 	ldw	r2,8(r2)
 4010298:	1000061e 	bne	r2,zero,40102b4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 401029c:	40102200 	call	4010220 <alt_get_errno>
 40102a0:	1007883a 	mov	r3,r2
 40102a4:	00800584 	movi	r2,22
 40102a8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 40102ac:	00bffa84 	movi	r2,-22
 40102b0:	00001306 	br	4010300 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 40102b4:	e0bffe17 	ldw	r2,-8(fp)
 40102b8:	e0ffff17 	ldw	r3,-4(fp)
 40102bc:	e0fffc15 	stw	r3,-16(fp)
 40102c0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 40102c4:	e0bffd17 	ldw	r2,-12(fp)
 40102c8:	e0fffc17 	ldw	r3,-16(fp)
 40102cc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 40102d0:	e0bffc17 	ldw	r2,-16(fp)
 40102d4:	10c00017 	ldw	r3,0(r2)
 40102d8:	e0bffd17 	ldw	r2,-12(fp)
 40102dc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 40102e0:	e0bffc17 	ldw	r2,-16(fp)
 40102e4:	10800017 	ldw	r2,0(r2)
 40102e8:	e0fffd17 	ldw	r3,-12(fp)
 40102ec:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 40102f0:	e0bffc17 	ldw	r2,-16(fp)
 40102f4:	e0fffd17 	ldw	r3,-12(fp)
 40102f8:	10c00015 	stw	r3,0(r2)

  return 0;  
 40102fc:	0005883a 	mov	r2,zero
}
 4010300:	e037883a 	mov	sp,fp
 4010304:	dfc00117 	ldw	ra,4(sp)
 4010308:	df000017 	ldw	fp,0(sp)
 401030c:	dec00204 	addi	sp,sp,8
 4010310:	f800283a 	ret

04010314 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 4010314:	defffd04 	addi	sp,sp,-12
 4010318:	dfc00215 	stw	ra,8(sp)
 401031c:	df000115 	stw	fp,4(sp)
 4010320:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4010324:	00810074 	movhi	r2,1025
 4010328:	1084a404 	addi	r2,r2,4752
 401032c:	e0bfff15 	stw	r2,-4(fp)
 4010330:	00000606 	br	401034c <_do_ctors+0x38>
        (*ctor) (); 
 4010334:	e0bfff17 	ldw	r2,-4(fp)
 4010338:	10800017 	ldw	r2,0(r2)
 401033c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4010340:	e0bfff17 	ldw	r2,-4(fp)
 4010344:	10bfff04 	addi	r2,r2,-4
 4010348:	e0bfff15 	stw	r2,-4(fp)
 401034c:	e0ffff17 	ldw	r3,-4(fp)
 4010350:	00810074 	movhi	r2,1025
 4010354:	1084a504 	addi	r2,r2,4756
 4010358:	18bff62e 	bgeu	r3,r2,4010334 <__alt_data_end+0xfe010334>
        (*ctor) (); 
}
 401035c:	e037883a 	mov	sp,fp
 4010360:	dfc00117 	ldw	ra,4(sp)
 4010364:	df000017 	ldw	fp,0(sp)
 4010368:	dec00204 	addi	sp,sp,8
 401036c:	f800283a 	ret

04010370 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 4010370:	defffd04 	addi	sp,sp,-12
 4010374:	dfc00215 	stw	ra,8(sp)
 4010378:	df000115 	stw	fp,4(sp)
 401037c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4010380:	00810074 	movhi	r2,1025
 4010384:	1084a404 	addi	r2,r2,4752
 4010388:	e0bfff15 	stw	r2,-4(fp)
 401038c:	00000606 	br	40103a8 <_do_dtors+0x38>
        (*dtor) (); 
 4010390:	e0bfff17 	ldw	r2,-4(fp)
 4010394:	10800017 	ldw	r2,0(r2)
 4010398:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 401039c:	e0bfff17 	ldw	r2,-4(fp)
 40103a0:	10bfff04 	addi	r2,r2,-4
 40103a4:	e0bfff15 	stw	r2,-4(fp)
 40103a8:	e0ffff17 	ldw	r3,-4(fp)
 40103ac:	00810074 	movhi	r2,1025
 40103b0:	1084a504 	addi	r2,r2,4756
 40103b4:	18bff62e 	bgeu	r3,r2,4010390 <__alt_data_end+0xfe010390>
        (*dtor) (); 
}
 40103b8:	e037883a 	mov	sp,fp
 40103bc:	dfc00117 	ldw	ra,4(sp)
 40103c0:	df000017 	ldw	fp,0(sp)
 40103c4:	dec00204 	addi	sp,sp,8
 40103c8:	f800283a 	ret

040103cc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 40103cc:	deffff04 	addi	sp,sp,-4
 40103d0:	df000015 	stw	fp,0(sp)
 40103d4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 40103d8:	e037883a 	mov	sp,fp
 40103dc:	df000017 	ldw	fp,0(sp)
 40103e0:	dec00104 	addi	sp,sp,4
 40103e4:	f800283a 	ret

040103e8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 40103e8:	defff904 	addi	sp,sp,-28
 40103ec:	dfc00615 	stw	ra,24(sp)
 40103f0:	df000515 	stw	fp,20(sp)
 40103f4:	df000504 	addi	fp,sp,20
 40103f8:	e13ffc15 	stw	r4,-16(fp)
 40103fc:	e17ffd15 	stw	r5,-12(fp)
 4010400:	e1bffe15 	stw	r6,-8(fp)
 4010404:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 4010408:	e0800217 	ldw	r2,8(fp)
 401040c:	d8800015 	stw	r2,0(sp)
 4010410:	e13ffc17 	ldw	r4,-16(fp)
 4010414:	e17ffd17 	ldw	r5,-12(fp)
 4010418:	e1bffe17 	ldw	r6,-8(fp)
 401041c:	e1ffff17 	ldw	r7,-4(fp)
 4010420:	40105c80 	call	40105c8 <alt_iic_isr_register>
}  
 4010424:	e037883a 	mov	sp,fp
 4010428:	dfc00117 	ldw	ra,4(sp)
 401042c:	df000017 	ldw	fp,0(sp)
 4010430:	dec00204 	addi	sp,sp,8
 4010434:	f800283a 	ret

04010438 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 4010438:	defff904 	addi	sp,sp,-28
 401043c:	df000615 	stw	fp,24(sp)
 4010440:	df000604 	addi	fp,sp,24
 4010444:	e13ffe15 	stw	r4,-8(fp)
 4010448:	e17fff15 	stw	r5,-4(fp)
 401044c:	e0bfff17 	ldw	r2,-4(fp)
 4010450:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4010454:	0005303a 	rdctl	r2,status
 4010458:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401045c:	e0fffb17 	ldw	r3,-20(fp)
 4010460:	00bfff84 	movi	r2,-2
 4010464:	1884703a 	and	r2,r3,r2
 4010468:	1001703a 	wrctl	status,r2
  
  return context;
 401046c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4010470:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 4010474:	e0bffa17 	ldw	r2,-24(fp)
 4010478:	00c00044 	movi	r3,1
 401047c:	1884983a 	sll	r2,r3,r2
 4010480:	1007883a 	mov	r3,r2
 4010484:	00810074 	movhi	r2,1025
 4010488:	1094c404 	addi	r2,r2,21264
 401048c:	10800017 	ldw	r2,0(r2)
 4010490:	1886b03a 	or	r3,r3,r2
 4010494:	00810074 	movhi	r2,1025
 4010498:	1094c404 	addi	r2,r2,21264
 401049c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 40104a0:	00810074 	movhi	r2,1025
 40104a4:	1094c404 	addi	r2,r2,21264
 40104a8:	10800017 	ldw	r2,0(r2)
 40104ac:	100170fa 	wrctl	ienable,r2
 40104b0:	e0bffc17 	ldw	r2,-16(fp)
 40104b4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40104b8:	e0bffd17 	ldw	r2,-12(fp)
 40104bc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 40104c0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 40104c4:	0001883a 	nop
}
 40104c8:	e037883a 	mov	sp,fp
 40104cc:	df000017 	ldw	fp,0(sp)
 40104d0:	dec00104 	addi	sp,sp,4
 40104d4:	f800283a 	ret

040104d8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 40104d8:	defff904 	addi	sp,sp,-28
 40104dc:	df000615 	stw	fp,24(sp)
 40104e0:	df000604 	addi	fp,sp,24
 40104e4:	e13ffe15 	stw	r4,-8(fp)
 40104e8:	e17fff15 	stw	r5,-4(fp)
 40104ec:	e0bfff17 	ldw	r2,-4(fp)
 40104f0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40104f4:	0005303a 	rdctl	r2,status
 40104f8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40104fc:	e0fffb17 	ldw	r3,-20(fp)
 4010500:	00bfff84 	movi	r2,-2
 4010504:	1884703a 	and	r2,r3,r2
 4010508:	1001703a 	wrctl	status,r2
  
  return context;
 401050c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4010510:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 4010514:	e0bffa17 	ldw	r2,-24(fp)
 4010518:	00c00044 	movi	r3,1
 401051c:	1884983a 	sll	r2,r3,r2
 4010520:	0084303a 	nor	r2,zero,r2
 4010524:	1007883a 	mov	r3,r2
 4010528:	00810074 	movhi	r2,1025
 401052c:	1094c404 	addi	r2,r2,21264
 4010530:	10800017 	ldw	r2,0(r2)
 4010534:	1886703a 	and	r3,r3,r2
 4010538:	00810074 	movhi	r2,1025
 401053c:	1094c404 	addi	r2,r2,21264
 4010540:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4010544:	00810074 	movhi	r2,1025
 4010548:	1094c404 	addi	r2,r2,21264
 401054c:	10800017 	ldw	r2,0(r2)
 4010550:	100170fa 	wrctl	ienable,r2
 4010554:	e0bffc17 	ldw	r2,-16(fp)
 4010558:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401055c:	e0bffd17 	ldw	r2,-12(fp)
 4010560:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4010564:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 4010568:	0001883a 	nop
}
 401056c:	e037883a 	mov	sp,fp
 4010570:	df000017 	ldw	fp,0(sp)
 4010574:	dec00104 	addi	sp,sp,4
 4010578:	f800283a 	ret

0401057c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 401057c:	defffc04 	addi	sp,sp,-16
 4010580:	df000315 	stw	fp,12(sp)
 4010584:	df000304 	addi	fp,sp,12
 4010588:	e13ffe15 	stw	r4,-8(fp)
 401058c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 4010590:	000530fa 	rdctl	r2,ienable
 4010594:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 4010598:	e0bfff17 	ldw	r2,-4(fp)
 401059c:	00c00044 	movi	r3,1
 40105a0:	1884983a 	sll	r2,r3,r2
 40105a4:	1007883a 	mov	r3,r2
 40105a8:	e0bffd17 	ldw	r2,-12(fp)
 40105ac:	1884703a 	and	r2,r3,r2
 40105b0:	1004c03a 	cmpne	r2,r2,zero
 40105b4:	10803fcc 	andi	r2,r2,255
}
 40105b8:	e037883a 	mov	sp,fp
 40105bc:	df000017 	ldw	fp,0(sp)
 40105c0:	dec00104 	addi	sp,sp,4
 40105c4:	f800283a 	ret

040105c8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 40105c8:	defff504 	addi	sp,sp,-44
 40105cc:	dfc00a15 	stw	ra,40(sp)
 40105d0:	df000915 	stw	fp,36(sp)
 40105d4:	df000904 	addi	fp,sp,36
 40105d8:	e13ffc15 	stw	r4,-16(fp)
 40105dc:	e17ffd15 	stw	r5,-12(fp)
 40105e0:	e1bffe15 	stw	r6,-8(fp)
 40105e4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 40105e8:	00bffa84 	movi	r2,-22
 40105ec:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 40105f0:	e0bffd17 	ldw	r2,-12(fp)
 40105f4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 40105f8:	e0bff817 	ldw	r2,-32(fp)
 40105fc:	10800808 	cmpgei	r2,r2,32
 4010600:	1000271e 	bne	r2,zero,40106a0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4010604:	0005303a 	rdctl	r2,status
 4010608:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401060c:	e0fffa17 	ldw	r3,-24(fp)
 4010610:	00bfff84 	movi	r2,-2
 4010614:	1884703a 	and	r2,r3,r2
 4010618:	1001703a 	wrctl	status,r2
  
  return context;
 401061c:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 4010620:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 4010624:	00810074 	movhi	r2,1025
 4010628:	1094d104 	addi	r2,r2,21316
 401062c:	e0fff817 	ldw	r3,-32(fp)
 4010630:	180690fa 	slli	r3,r3,3
 4010634:	10c5883a 	add	r2,r2,r3
 4010638:	e0fffe17 	ldw	r3,-8(fp)
 401063c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 4010640:	00810074 	movhi	r2,1025
 4010644:	1094d104 	addi	r2,r2,21316
 4010648:	e0fff817 	ldw	r3,-32(fp)
 401064c:	180690fa 	slli	r3,r3,3
 4010650:	10c5883a 	add	r2,r2,r3
 4010654:	10800104 	addi	r2,r2,4
 4010658:	e0ffff17 	ldw	r3,-4(fp)
 401065c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 4010660:	e0bffe17 	ldw	r2,-8(fp)
 4010664:	10000526 	beq	r2,zero,401067c <alt_iic_isr_register+0xb4>
 4010668:	e0bff817 	ldw	r2,-32(fp)
 401066c:	e13ffc17 	ldw	r4,-16(fp)
 4010670:	100b883a 	mov	r5,r2
 4010674:	40104380 	call	4010438 <alt_ic_irq_enable>
 4010678:	00000406 	br	401068c <alt_iic_isr_register+0xc4>
 401067c:	e0bff817 	ldw	r2,-32(fp)
 4010680:	e13ffc17 	ldw	r4,-16(fp)
 4010684:	100b883a 	mov	r5,r2
 4010688:	40104d80 	call	40104d8 <alt_ic_irq_disable>
 401068c:	e0bff715 	stw	r2,-36(fp)
 4010690:	e0bff917 	ldw	r2,-28(fp)
 4010694:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4010698:	e0bffb17 	ldw	r2,-20(fp)
 401069c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 40106a0:	e0bff717 	ldw	r2,-36(fp)
}
 40106a4:	e037883a 	mov	sp,fp
 40106a8:	dfc00117 	ldw	ra,4(sp)
 40106ac:	df000017 	ldw	fp,0(sp)
 40106b0:	dec00204 	addi	sp,sp,8
 40106b4:	f800283a 	ret

040106b8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 40106b8:	defff804 	addi	sp,sp,-32
 40106bc:	dfc00715 	stw	ra,28(sp)
 40106c0:	df000615 	stw	fp,24(sp)
 40106c4:	dc000515 	stw	r16,20(sp)
 40106c8:	df000604 	addi	fp,sp,24
 40106cc:	e13ffb15 	stw	r4,-20(fp)
 40106d0:	e17ffc15 	stw	r5,-16(fp)
 40106d4:	e1bffd15 	stw	r6,-12(fp)
 40106d8:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 40106dc:	e13ffc17 	ldw	r4,-16(fp)
 40106e0:	e17ffd17 	ldw	r5,-12(fp)
 40106e4:	e1bffe17 	ldw	r6,-8(fp)
 40106e8:	40109540 	call	4010954 <open>
 40106ec:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 40106f0:	e0bffa17 	ldw	r2,-24(fp)
 40106f4:	10002216 	blt	r2,zero,4010780 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 40106f8:	04010074 	movhi	r16,1025
 40106fc:	84097604 	addi	r16,r16,9688
 4010700:	e0bffa17 	ldw	r2,-24(fp)
 4010704:	1009883a 	mov	r4,r2
 4010708:	01400304 	movi	r5,12
 401070c:	400c2240 	call	400c224 <__mulsi3>
 4010710:	8085883a 	add	r2,r16,r2
 4010714:	10c00017 	ldw	r3,0(r2)
 4010718:	e0bffb17 	ldw	r2,-20(fp)
 401071c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 4010720:	04010074 	movhi	r16,1025
 4010724:	84097604 	addi	r16,r16,9688
 4010728:	e0bffa17 	ldw	r2,-24(fp)
 401072c:	1009883a 	mov	r4,r2
 4010730:	01400304 	movi	r5,12
 4010734:	400c2240 	call	400c224 <__mulsi3>
 4010738:	8085883a 	add	r2,r16,r2
 401073c:	10800104 	addi	r2,r2,4
 4010740:	10c00017 	ldw	r3,0(r2)
 4010744:	e0bffb17 	ldw	r2,-20(fp)
 4010748:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 401074c:	04010074 	movhi	r16,1025
 4010750:	84097604 	addi	r16,r16,9688
 4010754:	e0bffa17 	ldw	r2,-24(fp)
 4010758:	1009883a 	mov	r4,r2
 401075c:	01400304 	movi	r5,12
 4010760:	400c2240 	call	400c224 <__mulsi3>
 4010764:	8085883a 	add	r2,r16,r2
 4010768:	10800204 	addi	r2,r2,8
 401076c:	10c00017 	ldw	r3,0(r2)
 4010770:	e0bffb17 	ldw	r2,-20(fp)
 4010774:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 4010778:	e13ffa17 	ldw	r4,-24(fp)
 401077c:	400f1bc0 	call	400f1bc <alt_release_fd>
  }
} 
 4010780:	e6ffff04 	addi	sp,fp,-4
 4010784:	dfc00217 	ldw	ra,8(sp)
 4010788:	df000117 	ldw	fp,4(sp)
 401078c:	dc000017 	ldw	r16,0(sp)
 4010790:	dec00304 	addi	sp,sp,12
 4010794:	f800283a 	ret

04010798 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 4010798:	defffb04 	addi	sp,sp,-20
 401079c:	dfc00415 	stw	ra,16(sp)
 40107a0:	df000315 	stw	fp,12(sp)
 40107a4:	df000304 	addi	fp,sp,12
 40107a8:	e13ffd15 	stw	r4,-12(fp)
 40107ac:	e17ffe15 	stw	r5,-8(fp)
 40107b0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 40107b4:	01010074 	movhi	r4,1025
 40107b8:	21097904 	addi	r4,r4,9700
 40107bc:	e17ffd17 	ldw	r5,-12(fp)
 40107c0:	01800044 	movi	r6,1
 40107c4:	01c07fc4 	movi	r7,511
 40107c8:	40106b80 	call	40106b8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 40107cc:	01010074 	movhi	r4,1025
 40107d0:	21097604 	addi	r4,r4,9688
 40107d4:	e17ffe17 	ldw	r5,-8(fp)
 40107d8:	000d883a 	mov	r6,zero
 40107dc:	01c07fc4 	movi	r7,511
 40107e0:	40106b80 	call	40106b8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 40107e4:	01010074 	movhi	r4,1025
 40107e8:	21097c04 	addi	r4,r4,9712
 40107ec:	e17fff17 	ldw	r5,-4(fp)
 40107f0:	01800044 	movi	r6,1
 40107f4:	01c07fc4 	movi	r7,511
 40107f8:	40106b80 	call	40106b8 <alt_open_fd>
}  
 40107fc:	e037883a 	mov	sp,fp
 4010800:	dfc00117 	ldw	ra,4(sp)
 4010804:	df000017 	ldw	fp,0(sp)
 4010808:	dec00204 	addi	sp,sp,8
 401080c:	f800283a 	ret

04010810 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4010810:	defffe04 	addi	sp,sp,-8
 4010814:	dfc00115 	stw	ra,4(sp)
 4010818:	df000015 	stw	fp,0(sp)
 401081c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4010820:	00810074 	movhi	r2,1025
 4010824:	108df904 	addi	r2,r2,14308
 4010828:	10800017 	ldw	r2,0(r2)
 401082c:	10000526 	beq	r2,zero,4010844 <alt_get_errno+0x34>
 4010830:	00810074 	movhi	r2,1025
 4010834:	108df904 	addi	r2,r2,14308
 4010838:	10800017 	ldw	r2,0(r2)
 401083c:	103ee83a 	callr	r2
 4010840:	00000206 	br	401084c <alt_get_errno+0x3c>
 4010844:	00810074 	movhi	r2,1025
 4010848:	1094c004 	addi	r2,r2,21248
}
 401084c:	e037883a 	mov	sp,fp
 4010850:	dfc00117 	ldw	ra,4(sp)
 4010854:	df000017 	ldw	fp,0(sp)
 4010858:	dec00204 	addi	sp,sp,8
 401085c:	f800283a 	ret

04010860 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 4010860:	defffb04 	addi	sp,sp,-20
 4010864:	dfc00415 	stw	ra,16(sp)
 4010868:	df000315 	stw	fp,12(sp)
 401086c:	dc000215 	stw	r16,8(sp)
 4010870:	df000304 	addi	fp,sp,12
 4010874:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 4010878:	e0bffe17 	ldw	r2,-8(fp)
 401087c:	10800217 	ldw	r2,8(r2)
 4010880:	10d00034 	orhi	r3,r2,16384
 4010884:	e0bffe17 	ldw	r2,-8(fp)
 4010888:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 401088c:	e03ffd15 	stw	zero,-12(fp)
 4010890:	00002306 	br	4010920 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4010894:	04010074 	movhi	r16,1025
 4010898:	84097604 	addi	r16,r16,9688
 401089c:	e0bffd17 	ldw	r2,-12(fp)
 40108a0:	1009883a 	mov	r4,r2
 40108a4:	01400304 	movi	r5,12
 40108a8:	400c2240 	call	400c224 <__mulsi3>
 40108ac:	8085883a 	add	r2,r16,r2
 40108b0:	10c00017 	ldw	r3,0(r2)
 40108b4:	e0bffe17 	ldw	r2,-8(fp)
 40108b8:	10800017 	ldw	r2,0(r2)
 40108bc:	1880151e 	bne	r3,r2,4010914 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 40108c0:	04010074 	movhi	r16,1025
 40108c4:	84097604 	addi	r16,r16,9688
 40108c8:	e0bffd17 	ldw	r2,-12(fp)
 40108cc:	1009883a 	mov	r4,r2
 40108d0:	01400304 	movi	r5,12
 40108d4:	400c2240 	call	400c224 <__mulsi3>
 40108d8:	8085883a 	add	r2,r16,r2
 40108dc:	10800204 	addi	r2,r2,8
 40108e0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 40108e4:	10000b0e 	bge	r2,zero,4010914 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 40108e8:	e13ffd17 	ldw	r4,-12(fp)
 40108ec:	01400304 	movi	r5,12
 40108f0:	400c2240 	call	400c224 <__mulsi3>
 40108f4:	1007883a 	mov	r3,r2
 40108f8:	00810074 	movhi	r2,1025
 40108fc:	10897604 	addi	r2,r2,9688
 4010900:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4010904:	e0bffe17 	ldw	r2,-8(fp)
 4010908:	18800226 	beq	r3,r2,4010914 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 401090c:	00bffcc4 	movi	r2,-13
 4010910:	00000a06 	br	401093c <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4010914:	e0bffd17 	ldw	r2,-12(fp)
 4010918:	10800044 	addi	r2,r2,1
 401091c:	e0bffd15 	stw	r2,-12(fp)
 4010920:	00810074 	movhi	r2,1025
 4010924:	108df804 	addi	r2,r2,14304
 4010928:	10800017 	ldw	r2,0(r2)
 401092c:	1007883a 	mov	r3,r2
 4010930:	e0bffd17 	ldw	r2,-12(fp)
 4010934:	18bfd72e 	bgeu	r3,r2,4010894 <__alt_data_end+0xfe010894>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 4010938:	0005883a 	mov	r2,zero
}
 401093c:	e6ffff04 	addi	sp,fp,-4
 4010940:	dfc00217 	ldw	ra,8(sp)
 4010944:	df000117 	ldw	fp,4(sp)
 4010948:	dc000017 	ldw	r16,0(sp)
 401094c:	dec00304 	addi	sp,sp,12
 4010950:	f800283a 	ret

04010954 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 4010954:	defff604 	addi	sp,sp,-40
 4010958:	dfc00915 	stw	ra,36(sp)
 401095c:	df000815 	stw	fp,32(sp)
 4010960:	df000804 	addi	fp,sp,32
 4010964:	e13ffd15 	stw	r4,-12(fp)
 4010968:	e17ffe15 	stw	r5,-8(fp)
 401096c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 4010970:	00bfffc4 	movi	r2,-1
 4010974:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 4010978:	00bffb44 	movi	r2,-19
 401097c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 4010980:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 4010984:	e13ffd17 	ldw	r4,-12(fp)
 4010988:	01410074 	movhi	r5,1025
 401098c:	294df604 	addi	r5,r5,14296
 4010990:	4010c700 	call	4010c70 <alt_find_dev>
 4010994:	e0bff815 	stw	r2,-32(fp)
 4010998:	e0bff817 	ldw	r2,-32(fp)
 401099c:	1000051e 	bne	r2,zero,40109b4 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 40109a0:	e13ffd17 	ldw	r4,-12(fp)
 40109a4:	4010d000 	call	4010d00 <alt_find_file>
 40109a8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 40109ac:	00800044 	movi	r2,1
 40109b0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 40109b4:	e0bff817 	ldw	r2,-32(fp)
 40109b8:	10002b26 	beq	r2,zero,4010a68 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
 40109bc:	e13ff817 	ldw	r4,-32(fp)
 40109c0:	4010e140 	call	4010e14 <alt_get_fd>
 40109c4:	e0bff915 	stw	r2,-28(fp)
 40109c8:	e0bff917 	ldw	r2,-28(fp)
 40109cc:	1000030e 	bge	r2,zero,40109dc <open+0x88>
    {
      status = index;
 40109d0:	e0bff917 	ldw	r2,-28(fp)
 40109d4:	e0bffa15 	stw	r2,-24(fp)
 40109d8:	00002506 	br	4010a70 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
 40109dc:	e13ff917 	ldw	r4,-28(fp)
 40109e0:	01400304 	movi	r5,12
 40109e4:	400c2240 	call	400c224 <__mulsi3>
 40109e8:	1007883a 	mov	r3,r2
 40109ec:	00810074 	movhi	r2,1025
 40109f0:	10897604 	addi	r2,r2,9688
 40109f4:	1885883a 	add	r2,r3,r2
 40109f8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 40109fc:	e0fffe17 	ldw	r3,-8(fp)
 4010a00:	00900034 	movhi	r2,16384
 4010a04:	10bfffc4 	addi	r2,r2,-1
 4010a08:	1886703a 	and	r3,r3,r2
 4010a0c:	e0bffc17 	ldw	r2,-16(fp)
 4010a10:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 4010a14:	e0bffb17 	ldw	r2,-20(fp)
 4010a18:	1000051e 	bne	r2,zero,4010a30 <open+0xdc>
 4010a1c:	e13ffc17 	ldw	r4,-16(fp)
 4010a20:	40108600 	call	4010860 <alt_file_locked>
 4010a24:	e0bffa15 	stw	r2,-24(fp)
 4010a28:	e0bffa17 	ldw	r2,-24(fp)
 4010a2c:	10001016 	blt	r2,zero,4010a70 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 4010a30:	e0bff817 	ldw	r2,-32(fp)
 4010a34:	10800317 	ldw	r2,12(r2)
 4010a38:	10000826 	beq	r2,zero,4010a5c <open+0x108>
 4010a3c:	e0bff817 	ldw	r2,-32(fp)
 4010a40:	10800317 	ldw	r2,12(r2)
 4010a44:	e13ffc17 	ldw	r4,-16(fp)
 4010a48:	e17ffd17 	ldw	r5,-12(fp)
 4010a4c:	e1bffe17 	ldw	r6,-8(fp)
 4010a50:	e1ffff17 	ldw	r7,-4(fp)
 4010a54:	103ee83a 	callr	r2
 4010a58:	00000106 	br	4010a60 <open+0x10c>
 4010a5c:	0005883a 	mov	r2,zero
 4010a60:	e0bffa15 	stw	r2,-24(fp)
 4010a64:	00000206 	br	4010a70 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 4010a68:	00bffb44 	movi	r2,-19
 4010a6c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 4010a70:	e0bffa17 	ldw	r2,-24(fp)
 4010a74:	1000090e 	bge	r2,zero,4010a9c <open+0x148>
  {
    alt_release_fd (index);  
 4010a78:	e13ff917 	ldw	r4,-28(fp)
 4010a7c:	400f1bc0 	call	400f1bc <alt_release_fd>
    ALT_ERRNO = -status;
 4010a80:	40108100 	call	4010810 <alt_get_errno>
 4010a84:	1007883a 	mov	r3,r2
 4010a88:	e0bffa17 	ldw	r2,-24(fp)
 4010a8c:	0085c83a 	sub	r2,zero,r2
 4010a90:	18800015 	stw	r2,0(r3)
    return -1;
 4010a94:	00bfffc4 	movi	r2,-1
 4010a98:	00000106 	br	4010aa0 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
 4010a9c:	e0bff917 	ldw	r2,-28(fp)
}
 4010aa0:	e037883a 	mov	sp,fp
 4010aa4:	dfc00117 	ldw	ra,4(sp)
 4010aa8:	df000017 	ldw	fp,0(sp)
 4010aac:	dec00204 	addi	sp,sp,8
 4010ab0:	f800283a 	ret

04010ab4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 4010ab4:	defffa04 	addi	sp,sp,-24
 4010ab8:	df000515 	stw	fp,20(sp)
 4010abc:	df000504 	addi	fp,sp,20
 4010ac0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4010ac4:	0005303a 	rdctl	r2,status
 4010ac8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4010acc:	e0fffc17 	ldw	r3,-16(fp)
 4010ad0:	00bfff84 	movi	r2,-2
 4010ad4:	1884703a 	and	r2,r3,r2
 4010ad8:	1001703a 	wrctl	status,r2
  
  return context;
 4010adc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 4010ae0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 4010ae4:	e0bfff17 	ldw	r2,-4(fp)
 4010ae8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 4010aec:	e0bffd17 	ldw	r2,-12(fp)
 4010af0:	10800017 	ldw	r2,0(r2)
 4010af4:	e0fffd17 	ldw	r3,-12(fp)
 4010af8:	18c00117 	ldw	r3,4(r3)
 4010afc:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 4010b00:	e0bffd17 	ldw	r2,-12(fp)
 4010b04:	10800117 	ldw	r2,4(r2)
 4010b08:	e0fffd17 	ldw	r3,-12(fp)
 4010b0c:	18c00017 	ldw	r3,0(r3)
 4010b10:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 4010b14:	e0bffd17 	ldw	r2,-12(fp)
 4010b18:	e0fffd17 	ldw	r3,-12(fp)
 4010b1c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 4010b20:	e0bffd17 	ldw	r2,-12(fp)
 4010b24:	e0fffd17 	ldw	r3,-12(fp)
 4010b28:	10c00015 	stw	r3,0(r2)
 4010b2c:	e0bffb17 	ldw	r2,-20(fp)
 4010b30:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4010b34:	e0bffe17 	ldw	r2,-8(fp)
 4010b38:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 4010b3c:	e037883a 	mov	sp,fp
 4010b40:	df000017 	ldw	fp,0(sp)
 4010b44:	dec00104 	addi	sp,sp,4
 4010b48:	f800283a 	ret

04010b4c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 4010b4c:	defffb04 	addi	sp,sp,-20
 4010b50:	dfc00415 	stw	ra,16(sp)
 4010b54:	df000315 	stw	fp,12(sp)
 4010b58:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 4010b5c:	d0a00e17 	ldw	r2,-32712(gp)
 4010b60:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 4010b64:	d0a6d817 	ldw	r2,-25760(gp)
 4010b68:	10800044 	addi	r2,r2,1
 4010b6c:	d0a6d815 	stw	r2,-25760(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4010b70:	00002e06 	br	4010c2c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 4010b74:	e0bffd17 	ldw	r2,-12(fp)
 4010b78:	10800017 	ldw	r2,0(r2)
 4010b7c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 4010b80:	e0bffd17 	ldw	r2,-12(fp)
 4010b84:	10800403 	ldbu	r2,16(r2)
 4010b88:	10803fcc 	andi	r2,r2,255
 4010b8c:	10000426 	beq	r2,zero,4010ba0 <alt_tick+0x54>
 4010b90:	d0a6d817 	ldw	r2,-25760(gp)
 4010b94:	1000021e 	bne	r2,zero,4010ba0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 4010b98:	e0bffd17 	ldw	r2,-12(fp)
 4010b9c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 4010ba0:	e0bffd17 	ldw	r2,-12(fp)
 4010ba4:	10800217 	ldw	r2,8(r2)
 4010ba8:	d0e6d817 	ldw	r3,-25760(gp)
 4010bac:	18801d36 	bltu	r3,r2,4010c24 <alt_tick+0xd8>
 4010bb0:	e0bffd17 	ldw	r2,-12(fp)
 4010bb4:	10800403 	ldbu	r2,16(r2)
 4010bb8:	10803fcc 	andi	r2,r2,255
 4010bbc:	1000191e 	bne	r2,zero,4010c24 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 4010bc0:	e0bffd17 	ldw	r2,-12(fp)
 4010bc4:	10800317 	ldw	r2,12(r2)
 4010bc8:	e0fffd17 	ldw	r3,-12(fp)
 4010bcc:	18c00517 	ldw	r3,20(r3)
 4010bd0:	1809883a 	mov	r4,r3
 4010bd4:	103ee83a 	callr	r2
 4010bd8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 4010bdc:	e0bfff17 	ldw	r2,-4(fp)
 4010be0:	1000031e 	bne	r2,zero,4010bf0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 4010be4:	e13ffd17 	ldw	r4,-12(fp)
 4010be8:	4010ab40 	call	4010ab4 <alt_alarm_stop>
 4010bec:	00000d06 	br	4010c24 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 4010bf0:	e0bffd17 	ldw	r2,-12(fp)
 4010bf4:	10c00217 	ldw	r3,8(r2)
 4010bf8:	e0bfff17 	ldw	r2,-4(fp)
 4010bfc:	1887883a 	add	r3,r3,r2
 4010c00:	e0bffd17 	ldw	r2,-12(fp)
 4010c04:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 4010c08:	e0bffd17 	ldw	r2,-12(fp)
 4010c0c:	10c00217 	ldw	r3,8(r2)
 4010c10:	d0a6d817 	ldw	r2,-25760(gp)
 4010c14:	1880032e 	bgeu	r3,r2,4010c24 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 4010c18:	e0bffd17 	ldw	r2,-12(fp)
 4010c1c:	00c00044 	movi	r3,1
 4010c20:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 4010c24:	e0bffe17 	ldw	r2,-8(fp)
 4010c28:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4010c2c:	e0fffd17 	ldw	r3,-12(fp)
 4010c30:	d0a00e04 	addi	r2,gp,-32712
 4010c34:	18bfcf1e 	bne	r3,r2,4010b74 <__alt_data_end+0xfe010b74>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 4010c38:	0001883a 	nop
}
 4010c3c:	e037883a 	mov	sp,fp
 4010c40:	dfc00117 	ldw	ra,4(sp)
 4010c44:	df000017 	ldw	fp,0(sp)
 4010c48:	dec00204 	addi	sp,sp,8
 4010c4c:	f800283a 	ret

04010c50 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 4010c50:	deffff04 	addi	sp,sp,-4
 4010c54:	df000015 	stw	fp,0(sp)
 4010c58:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 4010c5c:	000170fa 	wrctl	ienable,zero
}
 4010c60:	e037883a 	mov	sp,fp
 4010c64:	df000017 	ldw	fp,0(sp)
 4010c68:	dec00104 	addi	sp,sp,4
 4010c6c:	f800283a 	ret

04010c70 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 4010c70:	defffa04 	addi	sp,sp,-24
 4010c74:	dfc00515 	stw	ra,20(sp)
 4010c78:	df000415 	stw	fp,16(sp)
 4010c7c:	df000404 	addi	fp,sp,16
 4010c80:	e13ffe15 	stw	r4,-8(fp)
 4010c84:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 4010c88:	e0bfff17 	ldw	r2,-4(fp)
 4010c8c:	10800017 	ldw	r2,0(r2)
 4010c90:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 4010c94:	e13ffe17 	ldw	r4,-8(fp)
 4010c98:	40022180 	call	4002218 <strlen>
 4010c9c:	10800044 	addi	r2,r2,1
 4010ca0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4010ca4:	00000d06 	br	4010cdc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 4010ca8:	e0bffc17 	ldw	r2,-16(fp)
 4010cac:	10c00217 	ldw	r3,8(r2)
 4010cb0:	e0bffd17 	ldw	r2,-12(fp)
 4010cb4:	1809883a 	mov	r4,r3
 4010cb8:	e17ffe17 	ldw	r5,-8(fp)
 4010cbc:	100d883a 	mov	r6,r2
 4010cc0:	4010f340 	call	4010f34 <memcmp>
 4010cc4:	1000021e 	bne	r2,zero,4010cd0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 4010cc8:	e0bffc17 	ldw	r2,-16(fp)
 4010ccc:	00000706 	br	4010cec <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 4010cd0:	e0bffc17 	ldw	r2,-16(fp)
 4010cd4:	10800017 	ldw	r2,0(r2)
 4010cd8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4010cdc:	e0fffc17 	ldw	r3,-16(fp)
 4010ce0:	e0bfff17 	ldw	r2,-4(fp)
 4010ce4:	18bff01e 	bne	r3,r2,4010ca8 <__alt_data_end+0xfe010ca8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 4010ce8:	0005883a 	mov	r2,zero
}
 4010cec:	e037883a 	mov	sp,fp
 4010cf0:	dfc00117 	ldw	ra,4(sp)
 4010cf4:	df000017 	ldw	fp,0(sp)
 4010cf8:	dec00204 	addi	sp,sp,8
 4010cfc:	f800283a 	ret

04010d00 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 4010d00:	defffb04 	addi	sp,sp,-20
 4010d04:	dfc00415 	stw	ra,16(sp)
 4010d08:	df000315 	stw	fp,12(sp)
 4010d0c:	df000304 	addi	fp,sp,12
 4010d10:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 4010d14:	00810074 	movhi	r2,1025
 4010d18:	108df404 	addi	r2,r2,14288
 4010d1c:	10800017 	ldw	r2,0(r2)
 4010d20:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4010d24:	00003106 	br	4010dec <alt_find_file+0xec>
  {
    len = strlen(next->name);
 4010d28:	e0bffd17 	ldw	r2,-12(fp)
 4010d2c:	10800217 	ldw	r2,8(r2)
 4010d30:	1009883a 	mov	r4,r2
 4010d34:	40022180 	call	4002218 <strlen>
 4010d38:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 4010d3c:	e0bffd17 	ldw	r2,-12(fp)
 4010d40:	10c00217 	ldw	r3,8(r2)
 4010d44:	e0bffe17 	ldw	r2,-8(fp)
 4010d48:	10bfffc4 	addi	r2,r2,-1
 4010d4c:	1885883a 	add	r2,r3,r2
 4010d50:	10800003 	ldbu	r2,0(r2)
 4010d54:	10803fcc 	andi	r2,r2,255
 4010d58:	1080201c 	xori	r2,r2,128
 4010d5c:	10bfe004 	addi	r2,r2,-128
 4010d60:	10800bd8 	cmpnei	r2,r2,47
 4010d64:	1000031e 	bne	r2,zero,4010d74 <alt_find_file+0x74>
    {
      len -= 1;
 4010d68:	e0bffe17 	ldw	r2,-8(fp)
 4010d6c:	10bfffc4 	addi	r2,r2,-1
 4010d70:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4010d74:	e0bffe17 	ldw	r2,-8(fp)
 4010d78:	e0ffff17 	ldw	r3,-4(fp)
 4010d7c:	1885883a 	add	r2,r3,r2
 4010d80:	10800003 	ldbu	r2,0(r2)
 4010d84:	10803fcc 	andi	r2,r2,255
 4010d88:	1080201c 	xori	r2,r2,128
 4010d8c:	10bfe004 	addi	r2,r2,-128
 4010d90:	10800be0 	cmpeqi	r2,r2,47
 4010d94:	1000081e 	bne	r2,zero,4010db8 <alt_find_file+0xb8>
 4010d98:	e0bffe17 	ldw	r2,-8(fp)
 4010d9c:	e0ffff17 	ldw	r3,-4(fp)
 4010da0:	1885883a 	add	r2,r3,r2
 4010da4:	10800003 	ldbu	r2,0(r2)
 4010da8:	10803fcc 	andi	r2,r2,255
 4010dac:	1080201c 	xori	r2,r2,128
 4010db0:	10bfe004 	addi	r2,r2,-128
 4010db4:	10000a1e 	bne	r2,zero,4010de0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 4010db8:	e0bffd17 	ldw	r2,-12(fp)
 4010dbc:	10c00217 	ldw	r3,8(r2)
 4010dc0:	e0bffe17 	ldw	r2,-8(fp)
 4010dc4:	1809883a 	mov	r4,r3
 4010dc8:	e17fff17 	ldw	r5,-4(fp)
 4010dcc:	100d883a 	mov	r6,r2
 4010dd0:	4010f340 	call	4010f34 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4010dd4:	1000021e 	bne	r2,zero,4010de0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 4010dd8:	e0bffd17 	ldw	r2,-12(fp)
 4010ddc:	00000806 	br	4010e00 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 4010de0:	e0bffd17 	ldw	r2,-12(fp)
 4010de4:	10800017 	ldw	r2,0(r2)
 4010de8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4010dec:	e0fffd17 	ldw	r3,-12(fp)
 4010df0:	00810074 	movhi	r2,1025
 4010df4:	108df404 	addi	r2,r2,14288
 4010df8:	18bfcb1e 	bne	r3,r2,4010d28 <__alt_data_end+0xfe010d28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 4010dfc:	0005883a 	mov	r2,zero
}
 4010e00:	e037883a 	mov	sp,fp
 4010e04:	dfc00117 	ldw	ra,4(sp)
 4010e08:	df000017 	ldw	fp,0(sp)
 4010e0c:	dec00204 	addi	sp,sp,8
 4010e10:	f800283a 	ret

04010e14 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 4010e14:	defffa04 	addi	sp,sp,-24
 4010e18:	dfc00515 	stw	ra,20(sp)
 4010e1c:	df000415 	stw	fp,16(sp)
 4010e20:	dc000315 	stw	r16,12(sp)
 4010e24:	df000404 	addi	fp,sp,16
 4010e28:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 4010e2c:	00bffa04 	movi	r2,-24
 4010e30:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4010e34:	e03ffc15 	stw	zero,-16(fp)
 4010e38:	00002106 	br	4010ec0 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
 4010e3c:	04010074 	movhi	r16,1025
 4010e40:	84097604 	addi	r16,r16,9688
 4010e44:	e0bffc17 	ldw	r2,-16(fp)
 4010e48:	1009883a 	mov	r4,r2
 4010e4c:	01400304 	movi	r5,12
 4010e50:	400c2240 	call	400c224 <__mulsi3>
 4010e54:	8085883a 	add	r2,r16,r2
 4010e58:	10800017 	ldw	r2,0(r2)
 4010e5c:	1000151e 	bne	r2,zero,4010eb4 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
 4010e60:	04010074 	movhi	r16,1025
 4010e64:	84097604 	addi	r16,r16,9688
 4010e68:	e0bffc17 	ldw	r2,-16(fp)
 4010e6c:	1009883a 	mov	r4,r2
 4010e70:	01400304 	movi	r5,12
 4010e74:	400c2240 	call	400c224 <__mulsi3>
 4010e78:	8085883a 	add	r2,r16,r2
 4010e7c:	e0fffe17 	ldw	r3,-8(fp)
 4010e80:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 4010e84:	00810074 	movhi	r2,1025
 4010e88:	108df804 	addi	r2,r2,14304
 4010e8c:	10c00017 	ldw	r3,0(r2)
 4010e90:	e0bffc17 	ldw	r2,-16(fp)
 4010e94:	1880040e 	bge	r3,r2,4010ea8 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
 4010e98:	00810074 	movhi	r2,1025
 4010e9c:	108df804 	addi	r2,r2,14304
 4010ea0:	e0fffc17 	ldw	r3,-16(fp)
 4010ea4:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 4010ea8:	e0bffc17 	ldw	r2,-16(fp)
 4010eac:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 4010eb0:	00000606 	br	4010ecc <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4010eb4:	e0bffc17 	ldw	r2,-16(fp)
 4010eb8:	10800044 	addi	r2,r2,1
 4010ebc:	e0bffc15 	stw	r2,-16(fp)
 4010ec0:	e0bffc17 	ldw	r2,-16(fp)
 4010ec4:	10800810 	cmplti	r2,r2,32
 4010ec8:	103fdc1e 	bne	r2,zero,4010e3c <__alt_data_end+0xfe010e3c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 4010ecc:	e0bffd17 	ldw	r2,-12(fp)
}
 4010ed0:	e6ffff04 	addi	sp,fp,-4
 4010ed4:	dfc00217 	ldw	ra,8(sp)
 4010ed8:	df000117 	ldw	fp,4(sp)
 4010edc:	dc000017 	ldw	r16,0(sp)
 4010ee0:	dec00304 	addi	sp,sp,12
 4010ee4:	f800283a 	ret

04010ee8 <atexit>:
 4010ee8:	200b883a 	mov	r5,r4
 4010eec:	000d883a 	mov	r6,zero
 4010ef0:	0009883a 	mov	r4,zero
 4010ef4:	000f883a 	mov	r7,zero
 4010ef8:	4010fb01 	jmpi	4010fb0 <__register_exitproc>

04010efc <exit>:
 4010efc:	defffe04 	addi	sp,sp,-8
 4010f00:	000b883a 	mov	r5,zero
 4010f04:	dc000015 	stw	r16,0(sp)
 4010f08:	dfc00115 	stw	ra,4(sp)
 4010f0c:	2021883a 	mov	r16,r4
 4010f10:	40110c40 	call	40110c4 <__call_exitprocs>
 4010f14:	00810074 	movhi	r2,1025
 4010f18:	108dee04 	addi	r2,r2,14264
 4010f1c:	11000017 	ldw	r4,0(r2)
 4010f20:	20800f17 	ldw	r2,60(r4)
 4010f24:	10000126 	beq	r2,zero,4010f2c <exit+0x30>
 4010f28:	103ee83a 	callr	r2
 4010f2c:	8009883a 	mov	r4,r16
 4010f30:	40112580 	call	4011258 <_exit>

04010f34 <memcmp>:
 4010f34:	01c000c4 	movi	r7,3
 4010f38:	3980192e 	bgeu	r7,r6,4010fa0 <memcmp+0x6c>
 4010f3c:	2144b03a 	or	r2,r4,r5
 4010f40:	11c4703a 	and	r2,r2,r7
 4010f44:	10000f26 	beq	r2,zero,4010f84 <memcmp+0x50>
 4010f48:	20800003 	ldbu	r2,0(r4)
 4010f4c:	28c00003 	ldbu	r3,0(r5)
 4010f50:	10c0151e 	bne	r2,r3,4010fa8 <memcmp+0x74>
 4010f54:	31bfff84 	addi	r6,r6,-2
 4010f58:	01ffffc4 	movi	r7,-1
 4010f5c:	00000406 	br	4010f70 <memcmp+0x3c>
 4010f60:	20800003 	ldbu	r2,0(r4)
 4010f64:	28c00003 	ldbu	r3,0(r5)
 4010f68:	31bfffc4 	addi	r6,r6,-1
 4010f6c:	10c00e1e 	bne	r2,r3,4010fa8 <memcmp+0x74>
 4010f70:	21000044 	addi	r4,r4,1
 4010f74:	29400044 	addi	r5,r5,1
 4010f78:	31fff91e 	bne	r6,r7,4010f60 <__alt_data_end+0xfe010f60>
 4010f7c:	0005883a 	mov	r2,zero
 4010f80:	f800283a 	ret
 4010f84:	20c00017 	ldw	r3,0(r4)
 4010f88:	28800017 	ldw	r2,0(r5)
 4010f8c:	1880041e 	bne	r3,r2,4010fa0 <memcmp+0x6c>
 4010f90:	31bfff04 	addi	r6,r6,-4
 4010f94:	21000104 	addi	r4,r4,4
 4010f98:	29400104 	addi	r5,r5,4
 4010f9c:	39bff936 	bltu	r7,r6,4010f84 <__alt_data_end+0xfe010f84>
 4010fa0:	303fe91e 	bne	r6,zero,4010f48 <__alt_data_end+0xfe010f48>
 4010fa4:	003ff506 	br	4010f7c <__alt_data_end+0xfe010f7c>
 4010fa8:	10c5c83a 	sub	r2,r2,r3
 4010fac:	f800283a 	ret

04010fb0 <__register_exitproc>:
 4010fb0:	00810074 	movhi	r2,1025
 4010fb4:	defffa04 	addi	sp,sp,-24
 4010fb8:	108dee04 	addi	r2,r2,14264
 4010fbc:	dc000315 	stw	r16,12(sp)
 4010fc0:	14000017 	ldw	r16,0(r2)
 4010fc4:	dc400415 	stw	r17,16(sp)
 4010fc8:	dfc00515 	stw	ra,20(sp)
 4010fcc:	80805217 	ldw	r2,328(r16)
 4010fd0:	2023883a 	mov	r17,r4
 4010fd4:	10003626 	beq	r2,zero,40110b0 <__register_exitproc+0x100>
 4010fd8:	10c00117 	ldw	r3,4(r2)
 4010fdc:	010007c4 	movi	r4,31
 4010fe0:	20c00e16 	blt	r4,r3,401101c <__register_exitproc+0x6c>
 4010fe4:	1a400044 	addi	r9,r3,1
 4010fe8:	8800211e 	bne	r17,zero,4011070 <__register_exitproc+0xc0>
 4010fec:	18c00084 	addi	r3,r3,2
 4010ff0:	18c7883a 	add	r3,r3,r3
 4010ff4:	18c7883a 	add	r3,r3,r3
 4010ff8:	12400115 	stw	r9,4(r2)
 4010ffc:	10c7883a 	add	r3,r2,r3
 4011000:	19400015 	stw	r5,0(r3)
 4011004:	0005883a 	mov	r2,zero
 4011008:	dfc00517 	ldw	ra,20(sp)
 401100c:	dc400417 	ldw	r17,16(sp)
 4011010:	dc000317 	ldw	r16,12(sp)
 4011014:	dec00604 	addi	sp,sp,24
 4011018:	f800283a 	ret
 401101c:	00800034 	movhi	r2,0
 4011020:	10800004 	addi	r2,r2,0
 4011024:	10002526 	beq	r2,zero,40110bc <__register_exitproc+0x10c>
 4011028:	01006404 	movi	r4,400
 401102c:	d9400015 	stw	r5,0(sp)
 4011030:	d9800115 	stw	r6,4(sp)
 4011034:	d9c00215 	stw	r7,8(sp)
 4011038:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 401103c:	d9400017 	ldw	r5,0(sp)
 4011040:	d9800117 	ldw	r6,4(sp)
 4011044:	d9c00217 	ldw	r7,8(sp)
 4011048:	10001c26 	beq	r2,zero,40110bc <__register_exitproc+0x10c>
 401104c:	80c05217 	ldw	r3,328(r16)
 4011050:	10000115 	stw	zero,4(r2)
 4011054:	02400044 	movi	r9,1
 4011058:	10c00015 	stw	r3,0(r2)
 401105c:	80805215 	stw	r2,328(r16)
 4011060:	10006215 	stw	zero,392(r2)
 4011064:	10006315 	stw	zero,396(r2)
 4011068:	0007883a 	mov	r3,zero
 401106c:	883fdf26 	beq	r17,zero,4010fec <__alt_data_end+0xfe010fec>
 4011070:	18d1883a 	add	r8,r3,r3
 4011074:	4211883a 	add	r8,r8,r8
 4011078:	1211883a 	add	r8,r2,r8
 401107c:	41802215 	stw	r6,136(r8)
 4011080:	01000044 	movi	r4,1
 4011084:	11806217 	ldw	r6,392(r2)
 4011088:	20c8983a 	sll	r4,r4,r3
 401108c:	310cb03a 	or	r6,r6,r4
 4011090:	11806215 	stw	r6,392(r2)
 4011094:	41c04215 	stw	r7,264(r8)
 4011098:	01800084 	movi	r6,2
 401109c:	89bfd31e 	bne	r17,r6,4010fec <__alt_data_end+0xfe010fec>
 40110a0:	11806317 	ldw	r6,396(r2)
 40110a4:	3108b03a 	or	r4,r6,r4
 40110a8:	11006315 	stw	r4,396(r2)
 40110ac:	003fcf06 	br	4010fec <__alt_data_end+0xfe010fec>
 40110b0:	80805304 	addi	r2,r16,332
 40110b4:	80805215 	stw	r2,328(r16)
 40110b8:	003fc706 	br	4010fd8 <__alt_data_end+0xfe010fd8>
 40110bc:	00bfffc4 	movi	r2,-1
 40110c0:	003fd106 	br	4011008 <__alt_data_end+0xfe011008>

040110c4 <__call_exitprocs>:
 40110c4:	00810074 	movhi	r2,1025
 40110c8:	108dee04 	addi	r2,r2,14264
 40110cc:	10800017 	ldw	r2,0(r2)
 40110d0:	defff404 	addi	sp,sp,-48
 40110d4:	dd800815 	stw	r22,32(sp)
 40110d8:	d8800015 	stw	r2,0(sp)
 40110dc:	10805204 	addi	r2,r2,328
 40110e0:	dd000615 	stw	r20,24(sp)
 40110e4:	dc800415 	stw	r18,16(sp)
 40110e8:	dfc00b15 	stw	ra,44(sp)
 40110ec:	df000a15 	stw	fp,40(sp)
 40110f0:	ddc00915 	stw	r23,36(sp)
 40110f4:	dd400715 	stw	r21,28(sp)
 40110f8:	dcc00515 	stw	r19,20(sp)
 40110fc:	dc400315 	stw	r17,12(sp)
 4011100:	dc000215 	stw	r16,8(sp)
 4011104:	2025883a 	mov	r18,r4
 4011108:	2829883a 	mov	r20,r5
 401110c:	d8800115 	stw	r2,4(sp)
 4011110:	05bfffc4 	movi	r22,-1
 4011114:	d8800017 	ldw	r2,0(sp)
 4011118:	14c05217 	ldw	r19,328(r2)
 401111c:	98001d26 	beq	r19,zero,4011194 <__call_exitprocs+0xd0>
 4011120:	dd400117 	ldw	r21,4(sp)
 4011124:	98800117 	ldw	r2,4(r19)
 4011128:	173fffc4 	addi	fp,r2,-1
 401112c:	e0000d16 	blt	fp,zero,4011164 <__call_exitprocs+0xa0>
 4011130:	14000044 	addi	r16,r2,1
 4011134:	8421883a 	add	r16,r16,r16
 4011138:	8421883a 	add	r16,r16,r16
 401113c:	84402004 	addi	r17,r16,128
 4011140:	9c63883a 	add	r17,r19,r17
 4011144:	9c21883a 	add	r16,r19,r16
 4011148:	a0001e26 	beq	r20,zero,40111c4 <__call_exitprocs+0x100>
 401114c:	80804017 	ldw	r2,256(r16)
 4011150:	15001c26 	beq	r2,r20,40111c4 <__call_exitprocs+0x100>
 4011154:	e73fffc4 	addi	fp,fp,-1
 4011158:	843fff04 	addi	r16,r16,-4
 401115c:	8c7fff04 	addi	r17,r17,-4
 4011160:	e5bff91e 	bne	fp,r22,4011148 <__alt_data_end+0xfe011148>
 4011164:	00800034 	movhi	r2,0
 4011168:	10800004 	addi	r2,r2,0
 401116c:	10000926 	beq	r2,zero,4011194 <__call_exitprocs+0xd0>
 4011170:	98800117 	ldw	r2,4(r19)
 4011174:	1000311e 	bne	r2,zero,401123c <__call_exitprocs+0x178>
 4011178:	98800017 	ldw	r2,0(r19)
 401117c:	10003426 	beq	r2,zero,4011250 <__call_exitprocs+0x18c>
 4011180:	9809883a 	mov	r4,r19
 4011184:	a8800015 	stw	r2,0(r21)
 4011188:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 401118c:	acc00017 	ldw	r19,0(r21)
 4011190:	983fe41e 	bne	r19,zero,4011124 <__alt_data_end+0xfe011124>
 4011194:	dfc00b17 	ldw	ra,44(sp)
 4011198:	df000a17 	ldw	fp,40(sp)
 401119c:	ddc00917 	ldw	r23,36(sp)
 40111a0:	dd800817 	ldw	r22,32(sp)
 40111a4:	dd400717 	ldw	r21,28(sp)
 40111a8:	dd000617 	ldw	r20,24(sp)
 40111ac:	dcc00517 	ldw	r19,20(sp)
 40111b0:	dc800417 	ldw	r18,16(sp)
 40111b4:	dc400317 	ldw	r17,12(sp)
 40111b8:	dc000217 	ldw	r16,8(sp)
 40111bc:	dec00c04 	addi	sp,sp,48
 40111c0:	f800283a 	ret
 40111c4:	98800117 	ldw	r2,4(r19)
 40111c8:	80c00017 	ldw	r3,0(r16)
 40111cc:	10bfffc4 	addi	r2,r2,-1
 40111d0:	17001526 	beq	r2,fp,4011228 <__call_exitprocs+0x164>
 40111d4:	80000015 	stw	zero,0(r16)
 40111d8:	183fde26 	beq	r3,zero,4011154 <__alt_data_end+0xfe011154>
 40111dc:	00800044 	movi	r2,1
 40111e0:	1708983a 	sll	r4,r2,fp
 40111e4:	98806217 	ldw	r2,392(r19)
 40111e8:	9dc00117 	ldw	r23,4(r19)
 40111ec:	2084703a 	and	r2,r4,r2
 40111f0:	1000061e 	bne	r2,zero,401120c <__call_exitprocs+0x148>
 40111f4:	183ee83a 	callr	r3
 40111f8:	98800117 	ldw	r2,4(r19)
 40111fc:	15ffc51e 	bne	r2,r23,4011114 <__alt_data_end+0xfe011114>
 4011200:	a8800017 	ldw	r2,0(r21)
 4011204:	14ffd326 	beq	r2,r19,4011154 <__alt_data_end+0xfe011154>
 4011208:	003fc206 	br	4011114 <__alt_data_end+0xfe011114>
 401120c:	98806317 	ldw	r2,396(r19)
 4011210:	2084703a 	and	r2,r4,r2
 4011214:	1000061e 	bne	r2,zero,4011230 <__call_exitprocs+0x16c>
 4011218:	89400017 	ldw	r5,0(r17)
 401121c:	9009883a 	mov	r4,r18
 4011220:	183ee83a 	callr	r3
 4011224:	003ff406 	br	40111f8 <__alt_data_end+0xfe0111f8>
 4011228:	9f000115 	stw	fp,4(r19)
 401122c:	003fea06 	br	40111d8 <__alt_data_end+0xfe0111d8>
 4011230:	89000017 	ldw	r4,0(r17)
 4011234:	183ee83a 	callr	r3
 4011238:	003fef06 	br	40111f8 <__alt_data_end+0xfe0111f8>
 401123c:	98800017 	ldw	r2,0(r19)
 4011240:	982b883a 	mov	r21,r19
 4011244:	1027883a 	mov	r19,r2
 4011248:	983fb61e 	bne	r19,zero,4011124 <__alt_data_end+0xfe011124>
 401124c:	003fd106 	br	4011194 <__alt_data_end+0xfe011194>
 4011250:	0005883a 	mov	r2,zero
 4011254:	003ffa06 	br	4011240 <__alt_data_end+0xfe011240>

04011258 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 4011258:	defffc04 	addi	sp,sp,-16
 401125c:	df000315 	stw	fp,12(sp)
 4011260:	df000304 	addi	fp,sp,12
 4011264:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 4011268:	0001883a 	nop
 401126c:	e0bfff17 	ldw	r2,-4(fp)
 4011270:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
 4011274:	e0bffd17 	ldw	r2,-12(fp)
 4011278:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 401127c:	e0bffe17 	ldw	r2,-8(fp)
 4011280:	10000226 	beq	r2,zero,401128c <_exit+0x34>
    ALT_SIM_FAIL();
 4011284:	002af070 	cmpltui	zero,zero,43969
 4011288:	00000106 	br	4011290 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
 401128c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 4011290:	003fff06 	br	4011290 <__alt_data_end+0xfe011290>
