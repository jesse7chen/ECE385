
lab9.elf:     file format elf32-littlenios2
lab9.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1000022c

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x000027b4 memsz 0x000027b4 flags r-x
    LOAD off    0x000037d4 vaddr 0x100027d4 paddr 0x10004468 align 2**12
         filesz 0x00001c94 memsz 0x00001c94 flags rw-
    LOAD off    0x000060fc vaddr 0x100060fc paddr 0x100060fc align 2**12
         filesz 0x00000000 memsz 0x00000120 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000020c  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002370  1000022c  1000022c  0000122c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000238  1000259c  1000259c  0000359c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c94  100027d4  10004468  000037d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  100060fc  100060fc  000060fc  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00005468  2**0
                  CONTENTS
  7 .sdram        00000000  1000621c  1000621c  00005468  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00005468  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000005b8  00000000  00000000  00005490  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000074b0  00000000  00000000  00005a48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000028fe  00000000  00000000  0000cef8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00002933  00000000  00000000  0000f7f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000b58  00000000  00000000  0001212c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001b59  00000000  00000000  00012c84  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00000817  00000000  00000000  000147dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  00014ff4  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000000b8  00000000  00000000  00015008  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00016cec  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000b  00000000  00000000  00016cef  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00016cfa  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00016cfb  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00016cfc  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00016d00  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00016d04  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  00016d08  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  00016d13  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  00016d1e  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  00016d29  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000026  00000000  00000000  00016d34  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00067a82  00000000  00000000  00016d5a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
1000022c l    d  .text	00000000 .text
1000259c l    d  .rodata	00000000 .rodata
100027d4 l    d  .rwdata	00000000 .rwdata
100060fc l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
1000621c l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lab9_bsp//obj/HAL/src/crt0.o
10000264 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 alt_load.c
10000310 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
1000046c l     F .text	00000038 alt_dev_reg
10002e10 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
10000748 l     F .text	00000204 altera_avalon_jtag_uart_irq
1000094c l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
100010ac l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
100011f0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
1000121c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
100016b4 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
1000180c l     F .text	00000050 alt_get_errno
1000185c l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
10004018 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
10006114 g     O .bss	00000004 alt_instruction_exception_handler
100003f4 g     F .text	00000078 alt_main
1000611c g     O .bss	00000100 alt_irq
10004468 g       *ABS*	00000000 __flash_rwdata_start
10000284 g     F .text	0000001c AddRoundKeys
10001ccc g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
1000259c g     O .rodata	00000100 aes_sbox
10006118 g     O .bss	00000004 errno
10006100 g     O .bss	00000004 alt_argv
100027d4 g     O .rwdata	00000600 gf_mul
100002bc g     F .text	0000001c ShiftRows
1000c43c g       *ABS*	00000000 _gp
10003e98 g     O .rwdata	00000180 alt_fd_list
10001cec g     F .text	00000090 alt_find_dev
100020c8 g     F .text	00000138 memcpy
10001794 g     F .text	00000078 alt_io_redirect
1000259c g       *ABS*	00000000 __DTOR_END__
10001f64 g     F .text	0000009c alt_exception_cause_generated_bad_addr
10000b48 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
1000444c g     O .rwdata	00000004 alt_max_fd
10000268 g     F .text	0000001c KeyExpansion
10004460 g     O .rwdata	00000004 _global_impure_ptr
1000621c g       *ABS*	00000000 __bss_end
100015c4 g     F .text	000000f0 alt_iic_isr_register
10001bc8 g     F .text	00000104 alt_tick
10001578 g     F .text	0000004c alt_ic_irq_enabled
10001b30 g     F .text	00000098 alt_alarm_stop
10006108 g     O .bss	00000004 alt_irq_active
100000fc g     F .exceptions	000000d0 alt_irq_handler
10003e70 g     O .rwdata	00000028 alt_dev_null
100011d4 g     F .text	0000001c alt_dcache_flush_all
10004468 g       *ABS*	00000000 __ram_rwdata_end
10004444 g     O .rwdata	00000008 alt_dev_list
100027d4 g       *ABS*	00000000 __ram_rodata_end
1000621c g       *ABS*	00000000 end
10000684 g     F .text	000000c4 altera_avalon_jtag_uart_init
100001cc g     F .exceptions	00000060 alt_instruction_exception_entry
1000259c g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
10000d54 g     F .text	00000218 altera_avalon_jtag_uart_write
100002d8 g     F .text	0000001c MixColumns
100023ac g     F .text	00000194 __call_exitprocs
1000022c g     F .text	0000003c _start
1000610c g     O .bss	00000004 _alt_tick_rate
10006110 g     O .bss	00000004 _alt_nticks
100004d8 g     F .text	00000048 alt_sys_init
10002298 g     F .text	00000114 __register_exitproc
100009f4 g     F .text	00000068 altera_avalon_jtag_uart_close
10002540 g     F .text	00000028 .hidden __mulsi3
100027d4 g       *ABS*	00000000 __ram_rwdata_start
1000259c g       *ABS*	00000000 __ram_rodata_start
10000520 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
1000269c g     O .rodata	00000100 aes_invsbox
10001e90 g     F .text	000000d4 alt_get_fd
1000204c g     F .text	0000007c memcmp
100005e0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
1000621c g       *ABS*	00000000 __alt_stack_base
10000630 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10001d7c g     F .text	00000114 alt_find_file
1000126c g     F .text	000000a4 alt_dev_llist_insert
100002a0 g     F .text	0000001c SubBytes
100060fc g       *ABS*	00000000 __bss_start
100002f4 g     F .text	0000001c main
10006104 g     O .bss	00000004 alt_envp
10000580 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
10004450 g     O .rwdata	00000004 alt_errno
1000259c g       *ABS*	00000000 __CTOR_END__
1000259c g       *ABS*	00000000 __flash_rodata_start
1000259c g       *ABS*	00000000 __DTOR_LIST__
100004a4 g     F .text	00000034 alt_irq_init
10001ab0 g     F .text	00000080 alt_release_fd
10002000 g     F .text	00000014 atexit
10004464 g     O .rwdata	00000004 _impure_ptr
100060fc g     O .bss	00000004 alt_argc
1000136c g     F .text	0000005c _do_dtors
10000020 g       .exceptions	00000000 alt_irq_entry
1000443c g     O .rwdata	00000008 alt_fs_list
10002dd4 g     O .rwdata	0000003c Rcon
10000020 g       *ABS*	00000000 __ram_exceptions_start
100013e4 g     F .text	00000050 alt_ic_isr_register
10004468 g       *ABS*	00000000 _edata
1000621c g       *ABS*	00000000 _end
1000022c g       *ABS*	00000000 __ram_exceptions_end
10000a5c g     F .text	000000ec altera_avalon_jtag_uart_ioctl
100014d4 g     F .text	000000a4 alt_ic_irq_disable
10002014 g     F .text	00000038 exit
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
10000000 g       *ABS*	00000000 __alt_mem_sdram
10002568 g     F .text	00000034 _exit
10000f6c g     F .text	00000140 alt_alarm_start
10002200 g     F .text	00000098 strlen
10001950 g     F .text	00000160 open
100013c8 g     F .text	0000001c alt_icache_flush_all
10004454 g     O .rwdata	00000004 alt_priority_mask
10001434 g     F .text	000000a0 alt_ic_irq_enable
10004458 g     O .rwdata	00000008 alt_alarm_list
10001310 g     F .text	0000005c _do_ctors
100010fc g     F .text	000000d8 close
10000374 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08408b14 	ori	at,at,556
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000fc0 	call	100000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
1000008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10000098:	00001cc0 	call	100001cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000fc:	defff904 	addi	sp,sp,-28
10000100:	dfc00615 	stw	ra,24(sp)
10000104:	df000515 	stw	fp,20(sp)
10000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1000010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000110:	0005313a 	rdctl	r2,ipending
10000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000124:	00800044 	movi	r2,1
10000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000012c:	e0fffb17 	ldw	r3,-20(fp)
10000130:	e0bffc17 	ldw	r2,-16(fp)
10000134:	1884703a 	and	r2,r3,r2
10000138:	10001426 	beq	r2,zero,1000018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000013c:	00840034 	movhi	r2,4096
10000140:	10984704 	addi	r2,r2,24860
10000144:	e0fffd17 	ldw	r3,-12(fp)
10000148:	180690fa 	slli	r3,r3,3
1000014c:	10c5883a 	add	r2,r2,r3
10000150:	10c00017 	ldw	r3,0(r2)
10000154:	00840034 	movhi	r2,4096
10000158:	10984704 	addi	r2,r2,24860
1000015c:	e13ffd17 	ldw	r4,-12(fp)
10000160:	200890fa 	slli	r4,r4,3
10000164:	1105883a 	add	r2,r2,r4
10000168:	10800104 	addi	r2,r2,4
1000016c:	10800017 	ldw	r2,0(r2)
10000170:	1009883a 	mov	r4,r2
10000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000017c:	0005313a 	rdctl	r2,ipending
10000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000184:	e0bfff17 	ldw	r2,-4(fp)
10000188:	00000706 	br	100001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000018c:	e0bffc17 	ldw	r2,-16(fp)
10000190:	1085883a 	add	r2,r2,r2
10000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000198:	e0bffd17 	ldw	r2,-12(fp)
1000019c:	10800044 	addi	r2,r2,1
100001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a4:	003fe106 	br	1000012c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
100001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
100001ac:	e0bffb17 	ldw	r2,-20(fp)
100001b0:	103fdb1e 	bne	r2,zero,10000120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001b4:	0001883a 	nop
}
100001b8:	e037883a 	mov	sp,fp
100001bc:	dfc00117 	ldw	ra,4(sp)
100001c0:	df000017 	ldw	fp,0(sp)
100001c4:	dec00204 	addi	sp,sp,8
100001c8:	f800283a 	ret

100001cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100001cc:	defffb04 	addi	sp,sp,-20
100001d0:	dfc00415 	stw	ra,16(sp)
100001d4:	df000315 	stw	fp,12(sp)
100001d8:	df000304 	addi	fp,sp,12
100001dc:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
100001e0:	00bfffc4 	movi	r2,-1
100001e4:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
100001e8:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
100001ec:	d0a73617 	ldw	r2,-25384(gp)
100001f0:	10000726 	beq	r2,zero,10000210 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
100001f4:	d0a73617 	ldw	r2,-25384(gp)
100001f8:	e0fffd17 	ldw	r3,-12(fp)
100001fc:	1809883a 	mov	r4,r3
10000200:	e17fff17 	ldw	r5,-4(fp)
10000204:	e1bffe17 	ldw	r6,-8(fp)
10000208:	103ee83a 	callr	r2
1000020c:	00000206 	br	10000218 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10000210:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
10000214:	0005883a 	mov	r2,zero
}
10000218:	e037883a 	mov	sp,fp
1000021c:	dfc00117 	ldw	ra,4(sp)
10000220:	df000017 	ldw	fp,0(sp)
10000224:	dec00204 	addi	sp,sp,8
10000228:	f800283a 	ret

Disassembly of section .text:

1000022c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
1000022c:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000230:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000234:	06840034 	movhi	gp,4096
    ori gp, gp, %lo(_gp)
10000238:	d6b10f14 	ori	gp,gp,50236
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
1000023c:	00840034 	movhi	r2,4096
    ori r2, r2, %lo(__bss_start)
10000240:	10983f14 	ori	r2,r2,24828

    movhi r3, %hi(__bss_end)
10000244:	00c40034 	movhi	r3,4096
    ori r3, r3, %lo(__bss_end)
10000248:	18d88714 	ori	r3,r3,25116

    beq r2, r3, 1f
1000024c:	10c00326 	beq	r2,r3,1000025c <_start+0x30>

0:
    stw zero, (r2)
10000250:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000254:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
10000258:	10fffd36 	bltu	r2,r3,10000250 <__alt_data_end+0xf8000250>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
1000025c:	00003740 	call	10000374 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000260:	00003f40 	call	100003f4 <alt_main>

10000264 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000264:	003fff06 	br	10000264 <__alt_data_end+0xf8000264>

10000268 <KeyExpansion>:

uint Rcon[]={0x01000000,0x02000000,0x04000000,0x08000000,0x10000000,0x20000000,
             0x40000000,0x80000000,0x1b000000,0x36000000,0x6c000000,0xd8000000,
             0xab000000,0x4d000000,0x9a000000};

void KeyExpansion(){
10000268:	deffff04 	addi	sp,sp,-4
1000026c:	df000015 	stw	fp,0(sp)
10000270:	d839883a 	mov	fp,sp

}
10000274:	e037883a 	mov	sp,fp
10000278:	df000017 	ldw	fp,0(sp)
1000027c:	dec00104 	addi	sp,sp,4
10000280:	f800283a 	ret

10000284 <AddRoundKeys>:

void AddRoundKeys(){
10000284:	deffff04 	addi	sp,sp,-4
10000288:	df000015 	stw	fp,0(sp)
1000028c:	d839883a 	mov	fp,sp

}
10000290:	e037883a 	mov	sp,fp
10000294:	df000017 	ldw	fp,0(sp)
10000298:	dec00104 	addi	sp,sp,4
1000029c:	f800283a 	ret

100002a0 <SubBytes>:

void SubBytes(){
100002a0:	deffff04 	addi	sp,sp,-4
100002a4:	df000015 	stw	fp,0(sp)
100002a8:	d839883a 	mov	fp,sp

}
100002ac:	e037883a 	mov	sp,fp
100002b0:	df000017 	ldw	fp,0(sp)
100002b4:	dec00104 	addi	sp,sp,4
100002b8:	f800283a 	ret

100002bc <ShiftRows>:

void ShiftRows(){
100002bc:	deffff04 	addi	sp,sp,-4
100002c0:	df000015 	stw	fp,0(sp)
100002c4:	d839883a 	mov	fp,sp

}
100002c8:	e037883a 	mov	sp,fp
100002cc:	df000017 	ldw	fp,0(sp)
100002d0:	dec00104 	addi	sp,sp,4
100002d4:	f800283a 	ret

100002d8 <MixColumns>:

void MixColumns(){
100002d8:	deffff04 	addi	sp,sp,-4
100002dc:	df000015 	stw	fp,0(sp)
100002e0:	d839883a 	mov	fp,sp

}
100002e4:	e037883a 	mov	sp,fp
100002e8:	df000017 	ldw	fp,0(sp)
100002ec:	dec00104 	addi	sp,sp,4
100002f0:	f800283a 	ret

100002f4 <main>:

int main(){
100002f4:	deffff04 	addi	sp,sp,-4
100002f8:	df000015 	stw	fp,0(sp)
100002fc:	d839883a 	mov	fp,sp

}
10000300:	e037883a 	mov	sp,fp
10000304:	df000017 	ldw	fp,0(sp)
10000308:	dec00104 	addi	sp,sp,4
1000030c:	f800283a 	ret

10000310 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
10000310:	defffc04 	addi	sp,sp,-16
10000314:	df000315 	stw	fp,12(sp)
10000318:	df000304 	addi	fp,sp,12
1000031c:	e13ffd15 	stw	r4,-12(fp)
10000320:	e17ffe15 	stw	r5,-8(fp)
10000324:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
10000328:	e0fffe17 	ldw	r3,-8(fp)
1000032c:	e0bffd17 	ldw	r2,-12(fp)
10000330:	18800c26 	beq	r3,r2,10000364 <alt_load_section+0x54>
  {
    while( to != end )
10000334:	00000806 	br	10000358 <alt_load_section+0x48>
    {
      *to++ = *from++;
10000338:	e0bffe17 	ldw	r2,-8(fp)
1000033c:	10c00104 	addi	r3,r2,4
10000340:	e0fffe15 	stw	r3,-8(fp)
10000344:	e0fffd17 	ldw	r3,-12(fp)
10000348:	19000104 	addi	r4,r3,4
1000034c:	e13ffd15 	stw	r4,-12(fp)
10000350:	18c00017 	ldw	r3,0(r3)
10000354:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
10000358:	e0fffe17 	ldw	r3,-8(fp)
1000035c:	e0bfff17 	ldw	r2,-4(fp)
10000360:	18bff51e 	bne	r3,r2,10000338 <__alt_data_end+0xf8000338>
    {
      *to++ = *from++;
    }
  }
}
10000364:	e037883a 	mov	sp,fp
10000368:	df000017 	ldw	fp,0(sp)
1000036c:	dec00104 	addi	sp,sp,4
10000370:	f800283a 	ret

10000374 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
10000374:	defffe04 	addi	sp,sp,-8
10000378:	dfc00115 	stw	ra,4(sp)
1000037c:	df000015 	stw	fp,0(sp)
10000380:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
10000384:	01040034 	movhi	r4,4096
10000388:	21111a04 	addi	r4,r4,17512
1000038c:	01440034 	movhi	r5,4096
10000390:	2949f504 	addi	r5,r5,10196
10000394:	01840034 	movhi	r6,4096
10000398:	31911a04 	addi	r6,r6,17512
1000039c:	00003100 	call	10000310 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
100003a0:	01040034 	movhi	r4,4096
100003a4:	21000804 	addi	r4,r4,32
100003a8:	01440034 	movhi	r5,4096
100003ac:	29400804 	addi	r5,r5,32
100003b0:	01840034 	movhi	r6,4096
100003b4:	31808b04 	addi	r6,r6,556
100003b8:	00003100 	call	10000310 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
100003bc:	01040034 	movhi	r4,4096
100003c0:	21096704 	addi	r4,r4,9628
100003c4:	01440034 	movhi	r5,4096
100003c8:	29496704 	addi	r5,r5,9628
100003cc:	01840034 	movhi	r6,4096
100003d0:	3189f504 	addi	r6,r6,10196
100003d4:	00003100 	call	10000310 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
100003d8:	00011d40 	call	100011d4 <alt_dcache_flush_all>
  alt_icache_flush_all();
100003dc:	00013c80 	call	100013c8 <alt_icache_flush_all>
}
100003e0:	e037883a 	mov	sp,fp
100003e4:	dfc00117 	ldw	ra,4(sp)
100003e8:	df000017 	ldw	fp,0(sp)
100003ec:	dec00204 	addi	sp,sp,8
100003f0:	f800283a 	ret

100003f4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
100003f4:	defffd04 	addi	sp,sp,-12
100003f8:	dfc00215 	stw	ra,8(sp)
100003fc:	df000115 	stw	fp,4(sp)
10000400:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
10000404:	0009883a 	mov	r4,zero
10000408:	00004a40 	call	100004a4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
1000040c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
10000410:	00004d80 	call	100004d8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
10000414:	01040034 	movhi	r4,4096
10000418:	2109e704 	addi	r4,r4,10140
1000041c:	01440034 	movhi	r5,4096
10000420:	2949e704 	addi	r5,r5,10140
10000424:	01840034 	movhi	r6,4096
10000428:	3189e704 	addi	r6,r6,10140
1000042c:	00017940 	call	10001794 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
10000430:	00013100 	call	10001310 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
10000434:	01040034 	movhi	r4,4096
10000438:	2104db04 	addi	r4,r4,4972
1000043c:	00020000 	call	10002000 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
10000440:	d1273017 	ldw	r4,-25408(gp)
10000444:	d0e73117 	ldw	r3,-25404(gp)
10000448:	d0a73217 	ldw	r2,-25400(gp)
1000044c:	180b883a 	mov	r5,r3
10000450:	100d883a 	mov	r6,r2
10000454:	00002f40 	call	100002f4 <main>
10000458:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1000045c:	01000044 	movi	r4,1
10000460:	00010fc0 	call	100010fc <close>
  exit (result);
10000464:	e13fff17 	ldw	r4,-4(fp)
10000468:	00020140 	call	10002014 <exit>

1000046c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
1000046c:	defffd04 	addi	sp,sp,-12
10000470:	dfc00215 	stw	ra,8(sp)
10000474:	df000115 	stw	fp,4(sp)
10000478:	df000104 	addi	fp,sp,4
1000047c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
10000480:	e13fff17 	ldw	r4,-4(fp)
10000484:	01440034 	movhi	r5,4096
10000488:	29511104 	addi	r5,r5,17476
1000048c:	000126c0 	call	1000126c <alt_dev_llist_insert>
}
10000490:	e037883a 	mov	sp,fp
10000494:	dfc00117 	ldw	ra,4(sp)
10000498:	df000017 	ldw	fp,0(sp)
1000049c:	dec00204 	addi	sp,sp,8
100004a0:	f800283a 	ret

100004a4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
100004a4:	defffd04 	addi	sp,sp,-12
100004a8:	dfc00215 	stw	ra,8(sp)
100004ac:	df000115 	stw	fp,4(sp)
100004b0:	df000104 	addi	fp,sp,4
100004b4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS_SYSTEM, nios_system);
100004b8:	0001ccc0 	call	10001ccc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
100004bc:	00800044 	movi	r2,1
100004c0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
100004c4:	e037883a 	mov	sp,fp
100004c8:	dfc00117 	ldw	ra,4(sp)
100004cc:	df000017 	ldw	fp,0(sp)
100004d0:	dec00204 	addi	sp,sp,8
100004d4:	f800283a 	ret

100004d8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
100004d8:	defffe04 	addi	sp,sp,-8
100004dc:	dfc00115 	stw	ra,4(sp)
100004e0:	df000015 	stw	fp,0(sp)
100004e4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
100004e8:	01040034 	movhi	r4,4096
100004ec:	210b8e04 	addi	r4,r4,11832
100004f0:	000b883a 	mov	r5,zero
100004f4:	01800144 	movi	r6,5
100004f8:	00006840 	call	10000684 <altera_avalon_jtag_uart_init>
100004fc:	01040034 	movhi	r4,4096
10000500:	210b8404 	addi	r4,r4,11792
10000504:	000046c0 	call	1000046c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
10000508:	0001883a 	nop
}
1000050c:	e037883a 	mov	sp,fp
10000510:	dfc00117 	ldw	ra,4(sp)
10000514:	df000017 	ldw	fp,0(sp)
10000518:	dec00204 	addi	sp,sp,8
1000051c:	f800283a 	ret

10000520 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
10000520:	defffa04 	addi	sp,sp,-24
10000524:	dfc00515 	stw	ra,20(sp)
10000528:	df000415 	stw	fp,16(sp)
1000052c:	df000404 	addi	fp,sp,16
10000530:	e13ffd15 	stw	r4,-12(fp)
10000534:	e17ffe15 	stw	r5,-8(fp)
10000538:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000053c:	e0bffd17 	ldw	r2,-12(fp)
10000540:	10800017 	ldw	r2,0(r2)
10000544:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
10000548:	e0bffc17 	ldw	r2,-16(fp)
1000054c:	10c00a04 	addi	r3,r2,40
10000550:	e0bffd17 	ldw	r2,-12(fp)
10000554:	10800217 	ldw	r2,8(r2)
10000558:	1809883a 	mov	r4,r3
1000055c:	e17ffe17 	ldw	r5,-8(fp)
10000560:	e1bfff17 	ldw	r6,-4(fp)
10000564:	100f883a 	mov	r7,r2
10000568:	0000b480 	call	10000b48 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
1000056c:	e037883a 	mov	sp,fp
10000570:	dfc00117 	ldw	ra,4(sp)
10000574:	df000017 	ldw	fp,0(sp)
10000578:	dec00204 	addi	sp,sp,8
1000057c:	f800283a 	ret

10000580 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
10000580:	defffa04 	addi	sp,sp,-24
10000584:	dfc00515 	stw	ra,20(sp)
10000588:	df000415 	stw	fp,16(sp)
1000058c:	df000404 	addi	fp,sp,16
10000590:	e13ffd15 	stw	r4,-12(fp)
10000594:	e17ffe15 	stw	r5,-8(fp)
10000598:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000059c:	e0bffd17 	ldw	r2,-12(fp)
100005a0:	10800017 	ldw	r2,0(r2)
100005a4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
100005a8:	e0bffc17 	ldw	r2,-16(fp)
100005ac:	10c00a04 	addi	r3,r2,40
100005b0:	e0bffd17 	ldw	r2,-12(fp)
100005b4:	10800217 	ldw	r2,8(r2)
100005b8:	1809883a 	mov	r4,r3
100005bc:	e17ffe17 	ldw	r5,-8(fp)
100005c0:	e1bfff17 	ldw	r6,-4(fp)
100005c4:	100f883a 	mov	r7,r2
100005c8:	0000d540 	call	10000d54 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
100005cc:	e037883a 	mov	sp,fp
100005d0:	dfc00117 	ldw	ra,4(sp)
100005d4:	df000017 	ldw	fp,0(sp)
100005d8:	dec00204 	addi	sp,sp,8
100005dc:	f800283a 	ret

100005e0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
100005e0:	defffc04 	addi	sp,sp,-16
100005e4:	dfc00315 	stw	ra,12(sp)
100005e8:	df000215 	stw	fp,8(sp)
100005ec:	df000204 	addi	fp,sp,8
100005f0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
100005f4:	e0bfff17 	ldw	r2,-4(fp)
100005f8:	10800017 	ldw	r2,0(r2)
100005fc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
10000600:	e0bffe17 	ldw	r2,-8(fp)
10000604:	10c00a04 	addi	r3,r2,40
10000608:	e0bfff17 	ldw	r2,-4(fp)
1000060c:	10800217 	ldw	r2,8(r2)
10000610:	1809883a 	mov	r4,r3
10000614:	100b883a 	mov	r5,r2
10000618:	00009f40 	call	100009f4 <altera_avalon_jtag_uart_close>
}
1000061c:	e037883a 	mov	sp,fp
10000620:	dfc00117 	ldw	ra,4(sp)
10000624:	df000017 	ldw	fp,0(sp)
10000628:	dec00204 	addi	sp,sp,8
1000062c:	f800283a 	ret

10000630 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
10000630:	defffa04 	addi	sp,sp,-24
10000634:	dfc00515 	stw	ra,20(sp)
10000638:	df000415 	stw	fp,16(sp)
1000063c:	df000404 	addi	fp,sp,16
10000640:	e13ffd15 	stw	r4,-12(fp)
10000644:	e17ffe15 	stw	r5,-8(fp)
10000648:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
1000064c:	e0bffd17 	ldw	r2,-12(fp)
10000650:	10800017 	ldw	r2,0(r2)
10000654:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
10000658:	e0bffc17 	ldw	r2,-16(fp)
1000065c:	10800a04 	addi	r2,r2,40
10000660:	1009883a 	mov	r4,r2
10000664:	e17ffe17 	ldw	r5,-8(fp)
10000668:	e1bfff17 	ldw	r6,-4(fp)
1000066c:	0000a5c0 	call	10000a5c <altera_avalon_jtag_uart_ioctl>
}
10000670:	e037883a 	mov	sp,fp
10000674:	dfc00117 	ldw	ra,4(sp)
10000678:	df000017 	ldw	fp,0(sp)
1000067c:	dec00204 	addi	sp,sp,8
10000680:	f800283a 	ret

10000684 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
10000684:	defffa04 	addi	sp,sp,-24
10000688:	dfc00515 	stw	ra,20(sp)
1000068c:	df000415 	stw	fp,16(sp)
10000690:	df000404 	addi	fp,sp,16
10000694:	e13ffd15 	stw	r4,-12(fp)
10000698:	e17ffe15 	stw	r5,-8(fp)
1000069c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
100006a0:	e0bffd17 	ldw	r2,-12(fp)
100006a4:	00c00044 	movi	r3,1
100006a8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
100006ac:	e0bffd17 	ldw	r2,-12(fp)
100006b0:	10800017 	ldw	r2,0(r2)
100006b4:	10800104 	addi	r2,r2,4
100006b8:	1007883a 	mov	r3,r2
100006bc:	e0bffd17 	ldw	r2,-12(fp)
100006c0:	10800817 	ldw	r2,32(r2)
100006c4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
100006c8:	e0fffe17 	ldw	r3,-8(fp)
100006cc:	e0bfff17 	ldw	r2,-4(fp)
100006d0:	d8000015 	stw	zero,0(sp)
100006d4:	1809883a 	mov	r4,r3
100006d8:	100b883a 	mov	r5,r2
100006dc:	01840034 	movhi	r6,4096
100006e0:	3181d204 	addi	r6,r6,1864
100006e4:	e1fffd17 	ldw	r7,-12(fp)
100006e8:	00013e40 	call	100013e4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
100006ec:	e0bffd17 	ldw	r2,-12(fp)
100006f0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
100006f4:	e0bffd17 	ldw	r2,-12(fp)
100006f8:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
100006fc:	00840034 	movhi	r2,4096
10000700:	10984304 	addi	r2,r2,24844
10000704:	10800017 	ldw	r2,0(r2)
10000708:	1809883a 	mov	r4,r3
1000070c:	100b883a 	mov	r5,r2
10000710:	01840034 	movhi	r6,4096
10000714:	31825304 	addi	r6,r6,2380
10000718:	e1fffd17 	ldw	r7,-12(fp)
1000071c:	0000f6c0 	call	10000f6c <alt_alarm_start>
10000720:	1000040e 	bge	r2,zero,10000734 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
10000724:	e0fffd17 	ldw	r3,-12(fp)
10000728:	00a00034 	movhi	r2,32768
1000072c:	10bfffc4 	addi	r2,r2,-1
10000730:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
10000734:	e037883a 	mov	sp,fp
10000738:	dfc00117 	ldw	ra,4(sp)
1000073c:	df000017 	ldw	fp,0(sp)
10000740:	dec00204 	addi	sp,sp,8
10000744:	f800283a 	ret

10000748 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
10000748:	defff804 	addi	sp,sp,-32
1000074c:	df000715 	stw	fp,28(sp)
10000750:	df000704 	addi	fp,sp,28
10000754:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
10000758:	e0bfff17 	ldw	r2,-4(fp)
1000075c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
10000760:	e0bffb17 	ldw	r2,-20(fp)
10000764:	10800017 	ldw	r2,0(r2)
10000768:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000076c:	e0bffc17 	ldw	r2,-16(fp)
10000770:	10800104 	addi	r2,r2,4
10000774:	10800037 	ldwio	r2,0(r2)
10000778:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
1000077c:	e0bffd17 	ldw	r2,-12(fp)
10000780:	1080c00c 	andi	r2,r2,768
10000784:	1000011e 	bne	r2,zero,1000078c <altera_avalon_jtag_uart_irq+0x44>
      break;
10000788:	00006c06 	br	1000093c <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
1000078c:	e0bffd17 	ldw	r2,-12(fp)
10000790:	1080400c 	andi	r2,r2,256
10000794:	10003426 	beq	r2,zero,10000868 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
10000798:	00800074 	movhi	r2,1
1000079c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100007a0:	e0bffb17 	ldw	r2,-20(fp)
100007a4:	10800a17 	ldw	r2,40(r2)
100007a8:	10800044 	addi	r2,r2,1
100007ac:	1081ffcc 	andi	r2,r2,2047
100007b0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
100007b4:	e0bffb17 	ldw	r2,-20(fp)
100007b8:	10c00b17 	ldw	r3,44(r2)
100007bc:	e0bffe17 	ldw	r2,-8(fp)
100007c0:	1880011e 	bne	r3,r2,100007c8 <altera_avalon_jtag_uart_irq+0x80>
          break;
100007c4:	00001606 	br	10000820 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
100007c8:	e0bffc17 	ldw	r2,-16(fp)
100007cc:	10800037 	ldwio	r2,0(r2)
100007d0:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
100007d4:	e0bff917 	ldw	r2,-28(fp)
100007d8:	10a0000c 	andi	r2,r2,32768
100007dc:	1000011e 	bne	r2,zero,100007e4 <altera_avalon_jtag_uart_irq+0x9c>
          break;
100007e0:	00000f06 	br	10000820 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
100007e4:	e0bffb17 	ldw	r2,-20(fp)
100007e8:	10800a17 	ldw	r2,40(r2)
100007ec:	e0fff917 	ldw	r3,-28(fp)
100007f0:	1809883a 	mov	r4,r3
100007f4:	e0fffb17 	ldw	r3,-20(fp)
100007f8:	1885883a 	add	r2,r3,r2
100007fc:	10800e04 	addi	r2,r2,56
10000800:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10000804:	e0bffb17 	ldw	r2,-20(fp)
10000808:	10800a17 	ldw	r2,40(r2)
1000080c:	10800044 	addi	r2,r2,1
10000810:	10c1ffcc 	andi	r3,r2,2047
10000814:	e0bffb17 	ldw	r2,-20(fp)
10000818:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
1000081c:	003fe006 	br	100007a0 <__alt_data_end+0xf80007a0>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
10000820:	e0bff917 	ldw	r2,-28(fp)
10000824:	10bfffec 	andhi	r2,r2,65535
10000828:	10000f26 	beq	r2,zero,10000868 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000082c:	e0bffb17 	ldw	r2,-20(fp)
10000830:	10c00817 	ldw	r3,32(r2)
10000834:	00bfff84 	movi	r2,-2
10000838:	1886703a 	and	r3,r3,r2
1000083c:	e0bffb17 	ldw	r2,-20(fp)
10000840:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
10000844:	e0bffc17 	ldw	r2,-16(fp)
10000848:	10800104 	addi	r2,r2,4
1000084c:	1007883a 	mov	r3,r2
10000850:	e0bffb17 	ldw	r2,-20(fp)
10000854:	10800817 	ldw	r2,32(r2)
10000858:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000085c:	e0bffc17 	ldw	r2,-16(fp)
10000860:	10800104 	addi	r2,r2,4
10000864:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
10000868:	e0bffd17 	ldw	r2,-12(fp)
1000086c:	1080800c 	andi	r2,r2,512
10000870:	10003126 	beq	r2,zero,10000938 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
10000874:	e0bffd17 	ldw	r2,-12(fp)
10000878:	1004d43a 	srli	r2,r2,16
1000087c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
10000880:	00001406 	br	100008d4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
10000884:	e0bffc17 	ldw	r2,-16(fp)
10000888:	e0fffb17 	ldw	r3,-20(fp)
1000088c:	18c00d17 	ldw	r3,52(r3)
10000890:	e13ffb17 	ldw	r4,-20(fp)
10000894:	20c7883a 	add	r3,r4,r3
10000898:	18c20e04 	addi	r3,r3,2104
1000089c:	18c00003 	ldbu	r3,0(r3)
100008a0:	18c03fcc 	andi	r3,r3,255
100008a4:	18c0201c 	xori	r3,r3,128
100008a8:	18ffe004 	addi	r3,r3,-128
100008ac:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100008b0:	e0bffb17 	ldw	r2,-20(fp)
100008b4:	10800d17 	ldw	r2,52(r2)
100008b8:	10800044 	addi	r2,r2,1
100008bc:	10c1ffcc 	andi	r3,r2,2047
100008c0:	e0bffb17 	ldw	r2,-20(fp)
100008c4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
100008c8:	e0bffa17 	ldw	r2,-24(fp)
100008cc:	10bfffc4 	addi	r2,r2,-1
100008d0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
100008d4:	e0bffa17 	ldw	r2,-24(fp)
100008d8:	10000526 	beq	r2,zero,100008f0 <altera_avalon_jtag_uart_irq+0x1a8>
100008dc:	e0bffb17 	ldw	r2,-20(fp)
100008e0:	10c00d17 	ldw	r3,52(r2)
100008e4:	e0bffb17 	ldw	r2,-20(fp)
100008e8:	10800c17 	ldw	r2,48(r2)
100008ec:	18bfe51e 	bne	r3,r2,10000884 <__alt_data_end+0xf8000884>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
100008f0:	e0bffa17 	ldw	r2,-24(fp)
100008f4:	10001026 	beq	r2,zero,10000938 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
100008f8:	e0bffb17 	ldw	r2,-20(fp)
100008fc:	10c00817 	ldw	r3,32(r2)
10000900:	00bfff44 	movi	r2,-3
10000904:	1886703a 	and	r3,r3,r2
10000908:	e0bffb17 	ldw	r2,-20(fp)
1000090c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10000910:	e0bffb17 	ldw	r2,-20(fp)
10000914:	10800017 	ldw	r2,0(r2)
10000918:	10800104 	addi	r2,r2,4
1000091c:	1007883a 	mov	r3,r2
10000920:	e0bffb17 	ldw	r2,-20(fp)
10000924:	10800817 	ldw	r2,32(r2)
10000928:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000092c:	e0bffc17 	ldw	r2,-16(fp)
10000930:	10800104 	addi	r2,r2,4
10000934:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
10000938:	003f8c06 	br	1000076c <__alt_data_end+0xf800076c>
}
1000093c:	e037883a 	mov	sp,fp
10000940:	df000017 	ldw	fp,0(sp)
10000944:	dec00104 	addi	sp,sp,4
10000948:	f800283a 	ret

1000094c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
1000094c:	defff804 	addi	sp,sp,-32
10000950:	df000715 	stw	fp,28(sp)
10000954:	df000704 	addi	fp,sp,28
10000958:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
1000095c:	e0bffb17 	ldw	r2,-20(fp)
10000960:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
10000964:	e0bff917 	ldw	r2,-28(fp)
10000968:	10800017 	ldw	r2,0(r2)
1000096c:	10800104 	addi	r2,r2,4
10000970:	10800037 	ldwio	r2,0(r2)
10000974:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
10000978:	e0bffa17 	ldw	r2,-24(fp)
1000097c:	1081000c 	andi	r2,r2,1024
10000980:	10000b26 	beq	r2,zero,100009b0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
10000984:	e0bff917 	ldw	r2,-28(fp)
10000988:	10800017 	ldw	r2,0(r2)
1000098c:	10800104 	addi	r2,r2,4
10000990:	1007883a 	mov	r3,r2
10000994:	e0bff917 	ldw	r2,-28(fp)
10000998:	10800817 	ldw	r2,32(r2)
1000099c:	10810014 	ori	r2,r2,1024
100009a0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
100009a4:	e0bff917 	ldw	r2,-28(fp)
100009a8:	10000915 	stw	zero,36(r2)
100009ac:	00000a06 	br	100009d8 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
100009b0:	e0bff917 	ldw	r2,-28(fp)
100009b4:	10c00917 	ldw	r3,36(r2)
100009b8:	00a00034 	movhi	r2,32768
100009bc:	10bfff04 	addi	r2,r2,-4
100009c0:	10c00536 	bltu	r2,r3,100009d8 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
100009c4:	e0bff917 	ldw	r2,-28(fp)
100009c8:	10800917 	ldw	r2,36(r2)
100009cc:	10c00044 	addi	r3,r2,1
100009d0:	e0bff917 	ldw	r2,-28(fp)
100009d4:	10c00915 	stw	r3,36(r2)
100009d8:	00840034 	movhi	r2,4096
100009dc:	10984304 	addi	r2,r2,24844
100009e0:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
100009e4:	e037883a 	mov	sp,fp
100009e8:	df000017 	ldw	fp,0(sp)
100009ec:	dec00104 	addi	sp,sp,4
100009f0:	f800283a 	ret

100009f4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
100009f4:	defffd04 	addi	sp,sp,-12
100009f8:	df000215 	stw	fp,8(sp)
100009fc:	df000204 	addi	fp,sp,8
10000a00:	e13ffe15 	stw	r4,-8(fp)
10000a04:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10000a08:	00000506 	br	10000a20 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
10000a0c:	e0bfff17 	ldw	r2,-4(fp)
10000a10:	1090000c 	andi	r2,r2,16384
10000a14:	10000226 	beq	r2,zero,10000a20 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
10000a18:	00bffd44 	movi	r2,-11
10000a1c:	00000b06 	br	10000a4c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10000a20:	e0bffe17 	ldw	r2,-8(fp)
10000a24:	10c00d17 	ldw	r3,52(r2)
10000a28:	e0bffe17 	ldw	r2,-8(fp)
10000a2c:	10800c17 	ldw	r2,48(r2)
10000a30:	18800526 	beq	r3,r2,10000a48 <altera_avalon_jtag_uart_close+0x54>
10000a34:	e0bffe17 	ldw	r2,-8(fp)
10000a38:	10c00917 	ldw	r3,36(r2)
10000a3c:	e0bffe17 	ldw	r2,-8(fp)
10000a40:	10800117 	ldw	r2,4(r2)
10000a44:	18bff136 	bltu	r3,r2,10000a0c <__alt_data_end+0xf8000a0c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
10000a48:	0005883a 	mov	r2,zero
}
10000a4c:	e037883a 	mov	sp,fp
10000a50:	df000017 	ldw	fp,0(sp)
10000a54:	dec00104 	addi	sp,sp,4
10000a58:	f800283a 	ret

10000a5c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
10000a5c:	defffa04 	addi	sp,sp,-24
10000a60:	df000515 	stw	fp,20(sp)
10000a64:	df000504 	addi	fp,sp,20
10000a68:	e13ffd15 	stw	r4,-12(fp)
10000a6c:	e17ffe15 	stw	r5,-8(fp)
10000a70:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
10000a74:	00bff9c4 	movi	r2,-25
10000a78:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
10000a7c:	e0bffe17 	ldw	r2,-8(fp)
10000a80:	10da8060 	cmpeqi	r3,r2,27137
10000a84:	1800031e 	bne	r3,zero,10000a94 <altera_avalon_jtag_uart_ioctl+0x38>
10000a88:	109a80a0 	cmpeqi	r2,r2,27138
10000a8c:	1000191e 	bne	r2,zero,10000af4 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
10000a90:	00002806 	br	10000b34 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
10000a94:	e0bffd17 	ldw	r2,-12(fp)
10000a98:	10c00117 	ldw	r3,4(r2)
10000a9c:	00a00034 	movhi	r2,32768
10000aa0:	10bfffc4 	addi	r2,r2,-1
10000aa4:	18801226 	beq	r3,r2,10000af0 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
10000aa8:	e0bfff17 	ldw	r2,-4(fp)
10000aac:	10800017 	ldw	r2,0(r2)
10000ab0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
10000ab4:	e0bffc17 	ldw	r2,-16(fp)
10000ab8:	10800090 	cmplti	r2,r2,2
10000abc:	1000061e 	bne	r2,zero,10000ad8 <altera_avalon_jtag_uart_ioctl+0x7c>
10000ac0:	e0fffc17 	ldw	r3,-16(fp)
10000ac4:	00a00034 	movhi	r2,32768
10000ac8:	10bfffc4 	addi	r2,r2,-1
10000acc:	18800226 	beq	r3,r2,10000ad8 <altera_avalon_jtag_uart_ioctl+0x7c>
10000ad0:	e0bffc17 	ldw	r2,-16(fp)
10000ad4:	00000206 	br	10000ae0 <altera_avalon_jtag_uart_ioctl+0x84>
10000ad8:	00a00034 	movhi	r2,32768
10000adc:	10bfff84 	addi	r2,r2,-2
10000ae0:	e0fffd17 	ldw	r3,-12(fp)
10000ae4:	18800115 	stw	r2,4(r3)
      rc = 0;
10000ae8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10000aec:	00001106 	br	10000b34 <altera_avalon_jtag_uart_ioctl+0xd8>
10000af0:	00001006 	br	10000b34 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
10000af4:	e0bffd17 	ldw	r2,-12(fp)
10000af8:	10c00117 	ldw	r3,4(r2)
10000afc:	00a00034 	movhi	r2,32768
10000b00:	10bfffc4 	addi	r2,r2,-1
10000b04:	18800a26 	beq	r3,r2,10000b30 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
10000b08:	e0bffd17 	ldw	r2,-12(fp)
10000b0c:	10c00917 	ldw	r3,36(r2)
10000b10:	e0bffd17 	ldw	r2,-12(fp)
10000b14:	10800117 	ldw	r2,4(r2)
10000b18:	1885803a 	cmpltu	r2,r3,r2
10000b1c:	10c03fcc 	andi	r3,r2,255
10000b20:	e0bfff17 	ldw	r2,-4(fp)
10000b24:	10c00015 	stw	r3,0(r2)
      rc = 0;
10000b28:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10000b2c:	00000006 	br	10000b30 <altera_avalon_jtag_uart_ioctl+0xd4>
10000b30:	0001883a 	nop

  default:
    break;
  }

  return rc;
10000b34:	e0bffb17 	ldw	r2,-20(fp)
}
10000b38:	e037883a 	mov	sp,fp
10000b3c:	df000017 	ldw	fp,0(sp)
10000b40:	dec00104 	addi	sp,sp,4
10000b44:	f800283a 	ret

10000b48 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
10000b48:	defff304 	addi	sp,sp,-52
10000b4c:	dfc00c15 	stw	ra,48(sp)
10000b50:	df000b15 	stw	fp,44(sp)
10000b54:	df000b04 	addi	fp,sp,44
10000b58:	e13ffc15 	stw	r4,-16(fp)
10000b5c:	e17ffd15 	stw	r5,-12(fp)
10000b60:	e1bffe15 	stw	r6,-8(fp)
10000b64:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
10000b68:	e0bffd17 	ldw	r2,-12(fp)
10000b6c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10000b70:	00004906 	br	10000c98 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
10000b74:	e0bffc17 	ldw	r2,-16(fp)
10000b78:	10800a17 	ldw	r2,40(r2)
10000b7c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
10000b80:	e0bffc17 	ldw	r2,-16(fp)
10000b84:	10800b17 	ldw	r2,44(r2)
10000b88:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
10000b8c:	e0fff717 	ldw	r3,-36(fp)
10000b90:	e0bff817 	ldw	r2,-32(fp)
10000b94:	18800536 	bltu	r3,r2,10000bac <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
10000b98:	e0fff717 	ldw	r3,-36(fp)
10000b9c:	e0bff817 	ldw	r2,-32(fp)
10000ba0:	1885c83a 	sub	r2,r3,r2
10000ba4:	e0bff615 	stw	r2,-40(fp)
10000ba8:	00000406 	br	10000bbc <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
10000bac:	00c20004 	movi	r3,2048
10000bb0:	e0bff817 	ldw	r2,-32(fp)
10000bb4:	1885c83a 	sub	r2,r3,r2
10000bb8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10000bbc:	e0bff617 	ldw	r2,-40(fp)
10000bc0:	1000011e 	bne	r2,zero,10000bc8 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
10000bc4:	00001d06 	br	10000c3c <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
10000bc8:	e0fffe17 	ldw	r3,-8(fp)
10000bcc:	e0bff617 	ldw	r2,-40(fp)
10000bd0:	1880022e 	bgeu	r3,r2,10000bdc <altera_avalon_jtag_uart_read+0x94>
        n = space;
10000bd4:	e0bffe17 	ldw	r2,-8(fp)
10000bd8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
10000bdc:	e0bff817 	ldw	r2,-32(fp)
10000be0:	10800e04 	addi	r2,r2,56
10000be4:	e0fffc17 	ldw	r3,-16(fp)
10000be8:	1885883a 	add	r2,r3,r2
10000bec:	e13ff517 	ldw	r4,-44(fp)
10000bf0:	100b883a 	mov	r5,r2
10000bf4:	e1bff617 	ldw	r6,-40(fp)
10000bf8:	00020c80 	call	100020c8 <memcpy>
      ptr   += n;
10000bfc:	e0fff517 	ldw	r3,-44(fp)
10000c00:	e0bff617 	ldw	r2,-40(fp)
10000c04:	1885883a 	add	r2,r3,r2
10000c08:	e0bff515 	stw	r2,-44(fp)
      space -= n;
10000c0c:	e0fffe17 	ldw	r3,-8(fp)
10000c10:	e0bff617 	ldw	r2,-40(fp)
10000c14:	1885c83a 	sub	r2,r3,r2
10000c18:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10000c1c:	e0fff817 	ldw	r3,-32(fp)
10000c20:	e0bff617 	ldw	r2,-40(fp)
10000c24:	1885883a 	add	r2,r3,r2
10000c28:	10c1ffcc 	andi	r3,r2,2047
10000c2c:	e0bffc17 	ldw	r2,-16(fp)
10000c30:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
10000c34:	e0bffe17 	ldw	r2,-8(fp)
10000c38:	00bfce16 	blt	zero,r2,10000b74 <__alt_data_end+0xf8000b74>

    /* If we read any data then return it */
    if (ptr != buffer)
10000c3c:	e0fff517 	ldw	r3,-44(fp)
10000c40:	e0bffd17 	ldw	r2,-12(fp)
10000c44:	18800126 	beq	r3,r2,10000c4c <altera_avalon_jtag_uart_read+0x104>
      break;
10000c48:	00001506 	br	10000ca0 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
10000c4c:	e0bfff17 	ldw	r2,-4(fp)
10000c50:	1090000c 	andi	r2,r2,16384
10000c54:	10000126 	beq	r2,zero,10000c5c <altera_avalon_jtag_uart_read+0x114>
      break;
10000c58:	00001106 	br	10000ca0 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
10000c5c:	0001883a 	nop
10000c60:	e0bffc17 	ldw	r2,-16(fp)
10000c64:	10c00a17 	ldw	r3,40(r2)
10000c68:	e0bff717 	ldw	r2,-36(fp)
10000c6c:	1880051e 	bne	r3,r2,10000c84 <altera_avalon_jtag_uart_read+0x13c>
10000c70:	e0bffc17 	ldw	r2,-16(fp)
10000c74:	10c00917 	ldw	r3,36(r2)
10000c78:	e0bffc17 	ldw	r2,-16(fp)
10000c7c:	10800117 	ldw	r2,4(r2)
10000c80:	18bff736 	bltu	r3,r2,10000c60 <__alt_data_end+0xf8000c60>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
10000c84:	e0bffc17 	ldw	r2,-16(fp)
10000c88:	10c00a17 	ldw	r3,40(r2)
10000c8c:	e0bff717 	ldw	r2,-36(fp)
10000c90:	1880011e 	bne	r3,r2,10000c98 <altera_avalon_jtag_uart_read+0x150>
      break;
10000c94:	00000206 	br	10000ca0 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10000c98:	e0bffe17 	ldw	r2,-8(fp)
10000c9c:	00bfb516 	blt	zero,r2,10000b74 <__alt_data_end+0xf8000b74>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
10000ca0:	e0fff517 	ldw	r3,-44(fp)
10000ca4:	e0bffd17 	ldw	r2,-12(fp)
10000ca8:	18801826 	beq	r3,r2,10000d0c <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10000cac:	0005303a 	rdctl	r2,status
10000cb0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10000cb4:	e0fffa17 	ldw	r3,-24(fp)
10000cb8:	00bfff84 	movi	r2,-2
10000cbc:	1884703a 	and	r2,r3,r2
10000cc0:	1001703a 	wrctl	status,r2
  
  return context;
10000cc4:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
10000cc8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10000ccc:	e0bffc17 	ldw	r2,-16(fp)
10000cd0:	10800817 	ldw	r2,32(r2)
10000cd4:	10c00054 	ori	r3,r2,1
10000cd8:	e0bffc17 	ldw	r2,-16(fp)
10000cdc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10000ce0:	e0bffc17 	ldw	r2,-16(fp)
10000ce4:	10800017 	ldw	r2,0(r2)
10000ce8:	10800104 	addi	r2,r2,4
10000cec:	1007883a 	mov	r3,r2
10000cf0:	e0bffc17 	ldw	r2,-16(fp)
10000cf4:	10800817 	ldw	r2,32(r2)
10000cf8:	18800035 	stwio	r2,0(r3)
10000cfc:	e0bff917 	ldw	r2,-28(fp)
10000d00:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10000d04:	e0bffb17 	ldw	r2,-20(fp)
10000d08:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
10000d0c:	e0fff517 	ldw	r3,-44(fp)
10000d10:	e0bffd17 	ldw	r2,-12(fp)
10000d14:	18800426 	beq	r3,r2,10000d28 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
10000d18:	e0fff517 	ldw	r3,-44(fp)
10000d1c:	e0bffd17 	ldw	r2,-12(fp)
10000d20:	1885c83a 	sub	r2,r3,r2
10000d24:	00000606 	br	10000d40 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
10000d28:	e0bfff17 	ldw	r2,-4(fp)
10000d2c:	1090000c 	andi	r2,r2,16384
10000d30:	10000226 	beq	r2,zero,10000d3c <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
10000d34:	00bffd44 	movi	r2,-11
10000d38:	00000106 	br	10000d40 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
10000d3c:	00bffec4 	movi	r2,-5
}
10000d40:	e037883a 	mov	sp,fp
10000d44:	dfc00117 	ldw	ra,4(sp)
10000d48:	df000017 	ldw	fp,0(sp)
10000d4c:	dec00204 	addi	sp,sp,8
10000d50:	f800283a 	ret

10000d54 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
10000d54:	defff304 	addi	sp,sp,-52
10000d58:	dfc00c15 	stw	ra,48(sp)
10000d5c:	df000b15 	stw	fp,44(sp)
10000d60:	df000b04 	addi	fp,sp,44
10000d64:	e13ffc15 	stw	r4,-16(fp)
10000d68:	e17ffd15 	stw	r5,-12(fp)
10000d6c:	e1bffe15 	stw	r6,-8(fp)
10000d70:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
10000d74:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
10000d78:	e0bffd17 	ldw	r2,-12(fp)
10000d7c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10000d80:	00003806 	br	10000e64 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
10000d84:	e0bffc17 	ldw	r2,-16(fp)
10000d88:	10800c17 	ldw	r2,48(r2)
10000d8c:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
10000d90:	e0bffc17 	ldw	r2,-16(fp)
10000d94:	10800d17 	ldw	r2,52(r2)
10000d98:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
10000d9c:	e0fff817 	ldw	r3,-32(fp)
10000da0:	e0bff517 	ldw	r2,-44(fp)
10000da4:	1880062e 	bgeu	r3,r2,10000dc0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
10000da8:	e0fff517 	ldw	r3,-44(fp)
10000dac:	e0bff817 	ldw	r2,-32(fp)
10000db0:	1885c83a 	sub	r2,r3,r2
10000db4:	10bfffc4 	addi	r2,r2,-1
10000db8:	e0bff615 	stw	r2,-40(fp)
10000dbc:	00000b06 	br	10000dec <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
10000dc0:	e0bff517 	ldw	r2,-44(fp)
10000dc4:	10000526 	beq	r2,zero,10000ddc <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
10000dc8:	00c20004 	movi	r3,2048
10000dcc:	e0bff817 	ldw	r2,-32(fp)
10000dd0:	1885c83a 	sub	r2,r3,r2
10000dd4:	e0bff615 	stw	r2,-40(fp)
10000dd8:	00000406 	br	10000dec <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
10000ddc:	00c1ffc4 	movi	r3,2047
10000de0:	e0bff817 	ldw	r2,-32(fp)
10000de4:	1885c83a 	sub	r2,r3,r2
10000de8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10000dec:	e0bff617 	ldw	r2,-40(fp)
10000df0:	1000011e 	bne	r2,zero,10000df8 <altera_avalon_jtag_uart_write+0xa4>
        break;
10000df4:	00001d06 	br	10000e6c <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
10000df8:	e0fffe17 	ldw	r3,-8(fp)
10000dfc:	e0bff617 	ldw	r2,-40(fp)
10000e00:	1880022e 	bgeu	r3,r2,10000e0c <altera_avalon_jtag_uart_write+0xb8>
        n = count;
10000e04:	e0bffe17 	ldw	r2,-8(fp)
10000e08:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
10000e0c:	e0bff817 	ldw	r2,-32(fp)
10000e10:	10820e04 	addi	r2,r2,2104
10000e14:	e0fffc17 	ldw	r3,-16(fp)
10000e18:	1885883a 	add	r2,r3,r2
10000e1c:	1009883a 	mov	r4,r2
10000e20:	e17ffd17 	ldw	r5,-12(fp)
10000e24:	e1bff617 	ldw	r6,-40(fp)
10000e28:	00020c80 	call	100020c8 <memcpy>
      ptr   += n;
10000e2c:	e0fffd17 	ldw	r3,-12(fp)
10000e30:	e0bff617 	ldw	r2,-40(fp)
10000e34:	1885883a 	add	r2,r3,r2
10000e38:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
10000e3c:	e0fffe17 	ldw	r3,-8(fp)
10000e40:	e0bff617 	ldw	r2,-40(fp)
10000e44:	1885c83a 	sub	r2,r3,r2
10000e48:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10000e4c:	e0fff817 	ldw	r3,-32(fp)
10000e50:	e0bff617 	ldw	r2,-40(fp)
10000e54:	1885883a 	add	r2,r3,r2
10000e58:	10c1ffcc 	andi	r3,r2,2047
10000e5c:	e0bffc17 	ldw	r2,-16(fp)
10000e60:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10000e64:	e0bffe17 	ldw	r2,-8(fp)
10000e68:	00bfc616 	blt	zero,r2,10000d84 <__alt_data_end+0xf8000d84>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10000e6c:	0005303a 	rdctl	r2,status
10000e70:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10000e74:	e0fffa17 	ldw	r3,-24(fp)
10000e78:	00bfff84 	movi	r2,-2
10000e7c:	1884703a 	and	r2,r3,r2
10000e80:	1001703a 	wrctl	status,r2
  
  return context;
10000e84:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
10000e88:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10000e8c:	e0bffc17 	ldw	r2,-16(fp)
10000e90:	10800817 	ldw	r2,32(r2)
10000e94:	10c00094 	ori	r3,r2,2
10000e98:	e0bffc17 	ldw	r2,-16(fp)
10000e9c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10000ea0:	e0bffc17 	ldw	r2,-16(fp)
10000ea4:	10800017 	ldw	r2,0(r2)
10000ea8:	10800104 	addi	r2,r2,4
10000eac:	1007883a 	mov	r3,r2
10000eb0:	e0bffc17 	ldw	r2,-16(fp)
10000eb4:	10800817 	ldw	r2,32(r2)
10000eb8:	18800035 	stwio	r2,0(r3)
10000ebc:	e0bff917 	ldw	r2,-28(fp)
10000ec0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10000ec4:	e0bffb17 	ldw	r2,-20(fp)
10000ec8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
10000ecc:	e0bffe17 	ldw	r2,-8(fp)
10000ed0:	0080120e 	bge	zero,r2,10000f1c <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
10000ed4:	e0bfff17 	ldw	r2,-4(fp)
10000ed8:	1090000c 	andi	r2,r2,16384
10000edc:	10000126 	beq	r2,zero,10000ee4 <altera_avalon_jtag_uart_write+0x190>
        break;
10000ee0:	00001006 	br	10000f24 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
10000ee4:	0001883a 	nop
10000ee8:	e0bffc17 	ldw	r2,-16(fp)
10000eec:	10c00d17 	ldw	r3,52(r2)
10000ef0:	e0bff517 	ldw	r2,-44(fp)
10000ef4:	1880051e 	bne	r3,r2,10000f0c <altera_avalon_jtag_uart_write+0x1b8>
10000ef8:	e0bffc17 	ldw	r2,-16(fp)
10000efc:	10c00917 	ldw	r3,36(r2)
10000f00:	e0bffc17 	ldw	r2,-16(fp)
10000f04:	10800117 	ldw	r2,4(r2)
10000f08:	18bff736 	bltu	r3,r2,10000ee8 <__alt_data_end+0xf8000ee8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
10000f0c:	e0bffc17 	ldw	r2,-16(fp)
10000f10:	10800917 	ldw	r2,36(r2)
10000f14:	10000126 	beq	r2,zero,10000f1c <altera_avalon_jtag_uart_write+0x1c8>
         break;
10000f18:	00000206 	br	10000f24 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
10000f1c:	e0bffe17 	ldw	r2,-8(fp)
10000f20:	00bf9716 	blt	zero,r2,10000d80 <__alt_data_end+0xf8000d80>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
10000f24:	e0fffd17 	ldw	r3,-12(fp)
10000f28:	e0bff717 	ldw	r2,-36(fp)
10000f2c:	18800426 	beq	r3,r2,10000f40 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
10000f30:	e0fffd17 	ldw	r3,-12(fp)
10000f34:	e0bff717 	ldw	r2,-36(fp)
10000f38:	1885c83a 	sub	r2,r3,r2
10000f3c:	00000606 	br	10000f58 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
10000f40:	e0bfff17 	ldw	r2,-4(fp)
10000f44:	1090000c 	andi	r2,r2,16384
10000f48:	10000226 	beq	r2,zero,10000f54 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
10000f4c:	00bffd44 	movi	r2,-11
10000f50:	00000106 	br	10000f58 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
10000f54:	00bffec4 	movi	r2,-5
}
10000f58:	e037883a 	mov	sp,fp
10000f5c:	dfc00117 	ldw	ra,4(sp)
10000f60:	df000017 	ldw	fp,0(sp)
10000f64:	dec00204 	addi	sp,sp,8
10000f68:	f800283a 	ret

10000f6c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
10000f6c:	defff504 	addi	sp,sp,-44
10000f70:	df000a15 	stw	fp,40(sp)
10000f74:	df000a04 	addi	fp,sp,40
10000f78:	e13ffc15 	stw	r4,-16(fp)
10000f7c:	e17ffd15 	stw	r5,-12(fp)
10000f80:	e1bffe15 	stw	r6,-8(fp)
10000f84:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
10000f88:	e03ff615 	stw	zero,-40(fp)
10000f8c:	00840034 	movhi	r2,4096
10000f90:	10984304 	addi	r2,r2,24844
10000f94:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
10000f98:	10003f26 	beq	r2,zero,10001098 <alt_alarm_start+0x12c>
  {
    if (alarm)
10000f9c:	e0bffc17 	ldw	r2,-16(fp)
10000fa0:	10003b26 	beq	r2,zero,10001090 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
10000fa4:	e0bffc17 	ldw	r2,-16(fp)
10000fa8:	e0fffe17 	ldw	r3,-8(fp)
10000fac:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
10000fb0:	e0bffc17 	ldw	r2,-16(fp)
10000fb4:	e0ffff17 	ldw	r3,-4(fp)
10000fb8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10000fbc:	0005303a 	rdctl	r2,status
10000fc0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10000fc4:	e0fff817 	ldw	r3,-32(fp)
10000fc8:	00bfff84 	movi	r2,-2
10000fcc:	1884703a 	and	r2,r3,r2
10000fd0:	1001703a 	wrctl	status,r2
  
  return context;
10000fd4:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
10000fd8:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
10000fdc:	00840034 	movhi	r2,4096
10000fe0:	10984404 	addi	r2,r2,24848
10000fe4:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
10000fe8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
10000fec:	e0fffd17 	ldw	r3,-12(fp)
10000ff0:	e0bff617 	ldw	r2,-40(fp)
10000ff4:	1885883a 	add	r2,r3,r2
10000ff8:	10c00044 	addi	r3,r2,1
10000ffc:	e0bffc17 	ldw	r2,-16(fp)
10001000:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
10001004:	e0bffc17 	ldw	r2,-16(fp)
10001008:	10c00217 	ldw	r3,8(r2)
1000100c:	e0bff617 	ldw	r2,-40(fp)
10001010:	1880042e 	bgeu	r3,r2,10001024 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
10001014:	e0bffc17 	ldw	r2,-16(fp)
10001018:	00c00044 	movi	r3,1
1000101c:	10c00405 	stb	r3,16(r2)
10001020:	00000206 	br	1000102c <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
10001024:	e0bffc17 	ldw	r2,-16(fp)
10001028:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
1000102c:	e0fffc17 	ldw	r3,-16(fp)
10001030:	00840034 	movhi	r2,4096
10001034:	10911604 	addi	r2,r2,17496
10001038:	e0bff915 	stw	r2,-28(fp)
1000103c:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10001040:	e0bffa17 	ldw	r2,-24(fp)
10001044:	e0fff917 	ldw	r3,-28(fp)
10001048:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1000104c:	e0bff917 	ldw	r2,-28(fp)
10001050:	10c00017 	ldw	r3,0(r2)
10001054:	e0bffa17 	ldw	r2,-24(fp)
10001058:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1000105c:	e0bff917 	ldw	r2,-28(fp)
10001060:	10800017 	ldw	r2,0(r2)
10001064:	e0fffa17 	ldw	r3,-24(fp)
10001068:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1000106c:	e0bff917 	ldw	r2,-28(fp)
10001070:	e0fffa17 	ldw	r3,-24(fp)
10001074:	10c00015 	stw	r3,0(r2)
10001078:	e0bff717 	ldw	r2,-36(fp)
1000107c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10001080:	e0bffb17 	ldw	r2,-20(fp)
10001084:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
10001088:	0005883a 	mov	r2,zero
1000108c:	00000306 	br	1000109c <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
10001090:	00bffa84 	movi	r2,-22
10001094:	00000106 	br	1000109c <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
10001098:	00bfde84 	movi	r2,-134
  }
}
1000109c:	e037883a 	mov	sp,fp
100010a0:	df000017 	ldw	fp,0(sp)
100010a4:	dec00104 	addi	sp,sp,4
100010a8:	f800283a 	ret

100010ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100010ac:	defffe04 	addi	sp,sp,-8
100010b0:	dfc00115 	stw	ra,4(sp)
100010b4:	df000015 	stw	fp,0(sp)
100010b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100010bc:	00840034 	movhi	r2,4096
100010c0:	10911404 	addi	r2,r2,17488
100010c4:	10800017 	ldw	r2,0(r2)
100010c8:	10000526 	beq	r2,zero,100010e0 <alt_get_errno+0x34>
100010cc:	00840034 	movhi	r2,4096
100010d0:	10911404 	addi	r2,r2,17488
100010d4:	10800017 	ldw	r2,0(r2)
100010d8:	103ee83a 	callr	r2
100010dc:	00000206 	br	100010e8 <alt_get_errno+0x3c>
100010e0:	00840034 	movhi	r2,4096
100010e4:	10984604 	addi	r2,r2,24856
}
100010e8:	e037883a 	mov	sp,fp
100010ec:	dfc00117 	ldw	ra,4(sp)
100010f0:	df000017 	ldw	fp,0(sp)
100010f4:	dec00204 	addi	sp,sp,8
100010f8:	f800283a 	ret

100010fc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
100010fc:	defffb04 	addi	sp,sp,-20
10001100:	dfc00415 	stw	ra,16(sp)
10001104:	df000315 	stw	fp,12(sp)
10001108:	df000304 	addi	fp,sp,12
1000110c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
10001110:	e0bfff17 	ldw	r2,-4(fp)
10001114:	10000816 	blt	r2,zero,10001138 <close+0x3c>
10001118:	e13fff17 	ldw	r4,-4(fp)
1000111c:	01400304 	movi	r5,12
10001120:	00025400 	call	10002540 <__mulsi3>
10001124:	1007883a 	mov	r3,r2
10001128:	00840034 	movhi	r2,4096
1000112c:	108fa604 	addi	r2,r2,16024
10001130:	1885883a 	add	r2,r3,r2
10001134:	00000106 	br	1000113c <close+0x40>
10001138:	0005883a 	mov	r2,zero
1000113c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
10001140:	e0bffd17 	ldw	r2,-12(fp)
10001144:	10001926 	beq	r2,zero,100011ac <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
10001148:	e0bffd17 	ldw	r2,-12(fp)
1000114c:	10800017 	ldw	r2,0(r2)
10001150:	10800417 	ldw	r2,16(r2)
10001154:	10000626 	beq	r2,zero,10001170 <close+0x74>
10001158:	e0bffd17 	ldw	r2,-12(fp)
1000115c:	10800017 	ldw	r2,0(r2)
10001160:	10800417 	ldw	r2,16(r2)
10001164:	e13ffd17 	ldw	r4,-12(fp)
10001168:	103ee83a 	callr	r2
1000116c:	00000106 	br	10001174 <close+0x78>
10001170:	0005883a 	mov	r2,zero
10001174:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
10001178:	e13fff17 	ldw	r4,-4(fp)
1000117c:	0001ab00 	call	10001ab0 <alt_release_fd>
    if (rval < 0)
10001180:	e0bffe17 	ldw	r2,-8(fp)
10001184:	1000070e 	bge	r2,zero,100011a4 <close+0xa8>
    {
      ALT_ERRNO = -rval;
10001188:	00010ac0 	call	100010ac <alt_get_errno>
1000118c:	1007883a 	mov	r3,r2
10001190:	e0bffe17 	ldw	r2,-8(fp)
10001194:	0085c83a 	sub	r2,zero,r2
10001198:	18800015 	stw	r2,0(r3)
      return -1;
1000119c:	00bfffc4 	movi	r2,-1
100011a0:	00000706 	br	100011c0 <close+0xc4>
    }
    return 0;
100011a4:	0005883a 	mov	r2,zero
100011a8:	00000506 	br	100011c0 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
100011ac:	00010ac0 	call	100010ac <alt_get_errno>
100011b0:	1007883a 	mov	r3,r2
100011b4:	00801444 	movi	r2,81
100011b8:	18800015 	stw	r2,0(r3)
    return -1;
100011bc:	00bfffc4 	movi	r2,-1
  }
}
100011c0:	e037883a 	mov	sp,fp
100011c4:	dfc00117 	ldw	ra,4(sp)
100011c8:	df000017 	ldw	fp,0(sp)
100011cc:	dec00204 	addi	sp,sp,8
100011d0:	f800283a 	ret

100011d4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
100011d4:	deffff04 	addi	sp,sp,-4
100011d8:	df000015 	stw	fp,0(sp)
100011dc:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
100011e0:	e037883a 	mov	sp,fp
100011e4:	df000017 	ldw	fp,0(sp)
100011e8:	dec00104 	addi	sp,sp,4
100011ec:	f800283a 	ret

100011f0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
100011f0:	defffc04 	addi	sp,sp,-16
100011f4:	df000315 	stw	fp,12(sp)
100011f8:	df000304 	addi	fp,sp,12
100011fc:	e13ffd15 	stw	r4,-12(fp)
10001200:	e17ffe15 	stw	r5,-8(fp)
10001204:	e1bfff15 	stw	r6,-4(fp)
  return len;
10001208:	e0bfff17 	ldw	r2,-4(fp)
}
1000120c:	e037883a 	mov	sp,fp
10001210:	df000017 	ldw	fp,0(sp)
10001214:	dec00104 	addi	sp,sp,4
10001218:	f800283a 	ret

1000121c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000121c:	defffe04 	addi	sp,sp,-8
10001220:	dfc00115 	stw	ra,4(sp)
10001224:	df000015 	stw	fp,0(sp)
10001228:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000122c:	00840034 	movhi	r2,4096
10001230:	10911404 	addi	r2,r2,17488
10001234:	10800017 	ldw	r2,0(r2)
10001238:	10000526 	beq	r2,zero,10001250 <alt_get_errno+0x34>
1000123c:	00840034 	movhi	r2,4096
10001240:	10911404 	addi	r2,r2,17488
10001244:	10800017 	ldw	r2,0(r2)
10001248:	103ee83a 	callr	r2
1000124c:	00000206 	br	10001258 <alt_get_errno+0x3c>
10001250:	00840034 	movhi	r2,4096
10001254:	10984604 	addi	r2,r2,24856
}
10001258:	e037883a 	mov	sp,fp
1000125c:	dfc00117 	ldw	ra,4(sp)
10001260:	df000017 	ldw	fp,0(sp)
10001264:	dec00204 	addi	sp,sp,8
10001268:	f800283a 	ret

1000126c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
1000126c:	defffa04 	addi	sp,sp,-24
10001270:	dfc00515 	stw	ra,20(sp)
10001274:	df000415 	stw	fp,16(sp)
10001278:	df000404 	addi	fp,sp,16
1000127c:	e13ffe15 	stw	r4,-8(fp)
10001280:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
10001284:	e0bffe17 	ldw	r2,-8(fp)
10001288:	10000326 	beq	r2,zero,10001298 <alt_dev_llist_insert+0x2c>
1000128c:	e0bffe17 	ldw	r2,-8(fp)
10001290:	10800217 	ldw	r2,8(r2)
10001294:	1000061e 	bne	r2,zero,100012b0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
10001298:	000121c0 	call	1000121c <alt_get_errno>
1000129c:	1007883a 	mov	r3,r2
100012a0:	00800584 	movi	r2,22
100012a4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
100012a8:	00bffa84 	movi	r2,-22
100012ac:	00001306 	br	100012fc <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
100012b0:	e0bffe17 	ldw	r2,-8(fp)
100012b4:	e0ffff17 	ldw	r3,-4(fp)
100012b8:	e0fffc15 	stw	r3,-16(fp)
100012bc:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
100012c0:	e0bffd17 	ldw	r2,-12(fp)
100012c4:	e0fffc17 	ldw	r3,-16(fp)
100012c8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
100012cc:	e0bffc17 	ldw	r2,-16(fp)
100012d0:	10c00017 	ldw	r3,0(r2)
100012d4:	e0bffd17 	ldw	r2,-12(fp)
100012d8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
100012dc:	e0bffc17 	ldw	r2,-16(fp)
100012e0:	10800017 	ldw	r2,0(r2)
100012e4:	e0fffd17 	ldw	r3,-12(fp)
100012e8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
100012ec:	e0bffc17 	ldw	r2,-16(fp)
100012f0:	e0fffd17 	ldw	r3,-12(fp)
100012f4:	10c00015 	stw	r3,0(r2)

  return 0;  
100012f8:	0005883a 	mov	r2,zero
}
100012fc:	e037883a 	mov	sp,fp
10001300:	dfc00117 	ldw	ra,4(sp)
10001304:	df000017 	ldw	fp,0(sp)
10001308:	dec00204 	addi	sp,sp,8
1000130c:	f800283a 	ret

10001310 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
10001310:	defffd04 	addi	sp,sp,-12
10001314:	dfc00215 	stw	ra,8(sp)
10001318:	df000115 	stw	fp,4(sp)
1000131c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10001320:	00840034 	movhi	r2,4096
10001324:	10896604 	addi	r2,r2,9624
10001328:	e0bfff15 	stw	r2,-4(fp)
1000132c:	00000606 	br	10001348 <_do_ctors+0x38>
        (*ctor) (); 
10001330:	e0bfff17 	ldw	r2,-4(fp)
10001334:	10800017 	ldw	r2,0(r2)
10001338:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1000133c:	e0bfff17 	ldw	r2,-4(fp)
10001340:	10bfff04 	addi	r2,r2,-4
10001344:	e0bfff15 	stw	r2,-4(fp)
10001348:	e0ffff17 	ldw	r3,-4(fp)
1000134c:	00840034 	movhi	r2,4096
10001350:	10896704 	addi	r2,r2,9628
10001354:	18bff62e 	bgeu	r3,r2,10001330 <__alt_data_end+0xf8001330>
        (*ctor) (); 
}
10001358:	e037883a 	mov	sp,fp
1000135c:	dfc00117 	ldw	ra,4(sp)
10001360:	df000017 	ldw	fp,0(sp)
10001364:	dec00204 	addi	sp,sp,8
10001368:	f800283a 	ret

1000136c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
1000136c:	defffd04 	addi	sp,sp,-12
10001370:	dfc00215 	stw	ra,8(sp)
10001374:	df000115 	stw	fp,4(sp)
10001378:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1000137c:	00840034 	movhi	r2,4096
10001380:	10896604 	addi	r2,r2,9624
10001384:	e0bfff15 	stw	r2,-4(fp)
10001388:	00000606 	br	100013a4 <_do_dtors+0x38>
        (*dtor) (); 
1000138c:	e0bfff17 	ldw	r2,-4(fp)
10001390:	10800017 	ldw	r2,0(r2)
10001394:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10001398:	e0bfff17 	ldw	r2,-4(fp)
1000139c:	10bfff04 	addi	r2,r2,-4
100013a0:	e0bfff15 	stw	r2,-4(fp)
100013a4:	e0ffff17 	ldw	r3,-4(fp)
100013a8:	00840034 	movhi	r2,4096
100013ac:	10896704 	addi	r2,r2,9628
100013b0:	18bff62e 	bgeu	r3,r2,1000138c <__alt_data_end+0xf800138c>
        (*dtor) (); 
}
100013b4:	e037883a 	mov	sp,fp
100013b8:	dfc00117 	ldw	ra,4(sp)
100013bc:	df000017 	ldw	fp,0(sp)
100013c0:	dec00204 	addi	sp,sp,8
100013c4:	f800283a 	ret

100013c8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
100013c8:	deffff04 	addi	sp,sp,-4
100013cc:	df000015 	stw	fp,0(sp)
100013d0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
100013d4:	e037883a 	mov	sp,fp
100013d8:	df000017 	ldw	fp,0(sp)
100013dc:	dec00104 	addi	sp,sp,4
100013e0:	f800283a 	ret

100013e4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
100013e4:	defff904 	addi	sp,sp,-28
100013e8:	dfc00615 	stw	ra,24(sp)
100013ec:	df000515 	stw	fp,20(sp)
100013f0:	df000504 	addi	fp,sp,20
100013f4:	e13ffc15 	stw	r4,-16(fp)
100013f8:	e17ffd15 	stw	r5,-12(fp)
100013fc:	e1bffe15 	stw	r6,-8(fp)
10001400:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
10001404:	e0800217 	ldw	r2,8(fp)
10001408:	d8800015 	stw	r2,0(sp)
1000140c:	e13ffc17 	ldw	r4,-16(fp)
10001410:	e17ffd17 	ldw	r5,-12(fp)
10001414:	e1bffe17 	ldw	r6,-8(fp)
10001418:	e1ffff17 	ldw	r7,-4(fp)
1000141c:	00015c40 	call	100015c4 <alt_iic_isr_register>
}  
10001420:	e037883a 	mov	sp,fp
10001424:	dfc00117 	ldw	ra,4(sp)
10001428:	df000017 	ldw	fp,0(sp)
1000142c:	dec00204 	addi	sp,sp,8
10001430:	f800283a 	ret

10001434 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
10001434:	defff904 	addi	sp,sp,-28
10001438:	df000615 	stw	fp,24(sp)
1000143c:	df000604 	addi	fp,sp,24
10001440:	e13ffe15 	stw	r4,-8(fp)
10001444:	e17fff15 	stw	r5,-4(fp)
10001448:	e0bfff17 	ldw	r2,-4(fp)
1000144c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10001450:	0005303a 	rdctl	r2,status
10001454:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10001458:	e0fffb17 	ldw	r3,-20(fp)
1000145c:	00bfff84 	movi	r2,-2
10001460:	1884703a 	and	r2,r3,r2
10001464:	1001703a 	wrctl	status,r2
  
  return context;
10001468:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1000146c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
10001470:	e0bffa17 	ldw	r2,-24(fp)
10001474:	00c00044 	movi	r3,1
10001478:	1884983a 	sll	r2,r3,r2
1000147c:	1007883a 	mov	r3,r2
10001480:	00840034 	movhi	r2,4096
10001484:	10984204 	addi	r2,r2,24840
10001488:	10800017 	ldw	r2,0(r2)
1000148c:	1886b03a 	or	r3,r3,r2
10001490:	00840034 	movhi	r2,4096
10001494:	10984204 	addi	r2,r2,24840
10001498:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1000149c:	00840034 	movhi	r2,4096
100014a0:	10984204 	addi	r2,r2,24840
100014a4:	10800017 	ldw	r2,0(r2)
100014a8:	100170fa 	wrctl	ienable,r2
100014ac:	e0bffc17 	ldw	r2,-16(fp)
100014b0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100014b4:	e0bffd17 	ldw	r2,-12(fp)
100014b8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
100014bc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
100014c0:	0001883a 	nop
}
100014c4:	e037883a 	mov	sp,fp
100014c8:	df000017 	ldw	fp,0(sp)
100014cc:	dec00104 	addi	sp,sp,4
100014d0:	f800283a 	ret

100014d4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
100014d4:	defff904 	addi	sp,sp,-28
100014d8:	df000615 	stw	fp,24(sp)
100014dc:	df000604 	addi	fp,sp,24
100014e0:	e13ffe15 	stw	r4,-8(fp)
100014e4:	e17fff15 	stw	r5,-4(fp)
100014e8:	e0bfff17 	ldw	r2,-4(fp)
100014ec:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100014f0:	0005303a 	rdctl	r2,status
100014f4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100014f8:	e0fffb17 	ldw	r3,-20(fp)
100014fc:	00bfff84 	movi	r2,-2
10001500:	1884703a 	and	r2,r3,r2
10001504:	1001703a 	wrctl	status,r2
  
  return context;
10001508:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1000150c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
10001510:	e0bffa17 	ldw	r2,-24(fp)
10001514:	00c00044 	movi	r3,1
10001518:	1884983a 	sll	r2,r3,r2
1000151c:	0084303a 	nor	r2,zero,r2
10001520:	1007883a 	mov	r3,r2
10001524:	00840034 	movhi	r2,4096
10001528:	10984204 	addi	r2,r2,24840
1000152c:	10800017 	ldw	r2,0(r2)
10001530:	1886703a 	and	r3,r3,r2
10001534:	00840034 	movhi	r2,4096
10001538:	10984204 	addi	r2,r2,24840
1000153c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10001540:	00840034 	movhi	r2,4096
10001544:	10984204 	addi	r2,r2,24840
10001548:	10800017 	ldw	r2,0(r2)
1000154c:	100170fa 	wrctl	ienable,r2
10001550:	e0bffc17 	ldw	r2,-16(fp)
10001554:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10001558:	e0bffd17 	ldw	r2,-12(fp)
1000155c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10001560:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
10001564:	0001883a 	nop
}
10001568:	e037883a 	mov	sp,fp
1000156c:	df000017 	ldw	fp,0(sp)
10001570:	dec00104 	addi	sp,sp,4
10001574:	f800283a 	ret

10001578 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
10001578:	defffc04 	addi	sp,sp,-16
1000157c:	df000315 	stw	fp,12(sp)
10001580:	df000304 	addi	fp,sp,12
10001584:	e13ffe15 	stw	r4,-8(fp)
10001588:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
1000158c:	000530fa 	rdctl	r2,ienable
10001590:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
10001594:	e0bfff17 	ldw	r2,-4(fp)
10001598:	00c00044 	movi	r3,1
1000159c:	1884983a 	sll	r2,r3,r2
100015a0:	1007883a 	mov	r3,r2
100015a4:	e0bffd17 	ldw	r2,-12(fp)
100015a8:	1884703a 	and	r2,r3,r2
100015ac:	1004c03a 	cmpne	r2,r2,zero
100015b0:	10803fcc 	andi	r2,r2,255
}
100015b4:	e037883a 	mov	sp,fp
100015b8:	df000017 	ldw	fp,0(sp)
100015bc:	dec00104 	addi	sp,sp,4
100015c0:	f800283a 	ret

100015c4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
100015c4:	defff504 	addi	sp,sp,-44
100015c8:	dfc00a15 	stw	ra,40(sp)
100015cc:	df000915 	stw	fp,36(sp)
100015d0:	df000904 	addi	fp,sp,36
100015d4:	e13ffc15 	stw	r4,-16(fp)
100015d8:	e17ffd15 	stw	r5,-12(fp)
100015dc:	e1bffe15 	stw	r6,-8(fp)
100015e0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
100015e4:	00bffa84 	movi	r2,-22
100015e8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
100015ec:	e0bffd17 	ldw	r2,-12(fp)
100015f0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
100015f4:	e0bff817 	ldw	r2,-32(fp)
100015f8:	10800808 	cmpgei	r2,r2,32
100015fc:	1000271e 	bne	r2,zero,1000169c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10001600:	0005303a 	rdctl	r2,status
10001604:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10001608:	e0fffa17 	ldw	r3,-24(fp)
1000160c:	00bfff84 	movi	r2,-2
10001610:	1884703a 	and	r2,r3,r2
10001614:	1001703a 	wrctl	status,r2
  
  return context;
10001618:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
1000161c:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
10001620:	00840034 	movhi	r2,4096
10001624:	10984704 	addi	r2,r2,24860
10001628:	e0fff817 	ldw	r3,-32(fp)
1000162c:	180690fa 	slli	r3,r3,3
10001630:	10c5883a 	add	r2,r2,r3
10001634:	e0fffe17 	ldw	r3,-8(fp)
10001638:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
1000163c:	00840034 	movhi	r2,4096
10001640:	10984704 	addi	r2,r2,24860
10001644:	e0fff817 	ldw	r3,-32(fp)
10001648:	180690fa 	slli	r3,r3,3
1000164c:	10c5883a 	add	r2,r2,r3
10001650:	10800104 	addi	r2,r2,4
10001654:	e0ffff17 	ldw	r3,-4(fp)
10001658:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
1000165c:	e0bffe17 	ldw	r2,-8(fp)
10001660:	10000526 	beq	r2,zero,10001678 <alt_iic_isr_register+0xb4>
10001664:	e0bff817 	ldw	r2,-32(fp)
10001668:	e13ffc17 	ldw	r4,-16(fp)
1000166c:	100b883a 	mov	r5,r2
10001670:	00014340 	call	10001434 <alt_ic_irq_enable>
10001674:	00000406 	br	10001688 <alt_iic_isr_register+0xc4>
10001678:	e0bff817 	ldw	r2,-32(fp)
1000167c:	e13ffc17 	ldw	r4,-16(fp)
10001680:	100b883a 	mov	r5,r2
10001684:	00014d40 	call	100014d4 <alt_ic_irq_disable>
10001688:	e0bff715 	stw	r2,-36(fp)
1000168c:	e0bff917 	ldw	r2,-28(fp)
10001690:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10001694:	e0bffb17 	ldw	r2,-20(fp)
10001698:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
1000169c:	e0bff717 	ldw	r2,-36(fp)
}
100016a0:	e037883a 	mov	sp,fp
100016a4:	dfc00117 	ldw	ra,4(sp)
100016a8:	df000017 	ldw	fp,0(sp)
100016ac:	dec00204 	addi	sp,sp,8
100016b0:	f800283a 	ret

100016b4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
100016b4:	defff804 	addi	sp,sp,-32
100016b8:	dfc00715 	stw	ra,28(sp)
100016bc:	df000615 	stw	fp,24(sp)
100016c0:	dc000515 	stw	r16,20(sp)
100016c4:	df000604 	addi	fp,sp,24
100016c8:	e13ffb15 	stw	r4,-20(fp)
100016cc:	e17ffc15 	stw	r5,-16(fp)
100016d0:	e1bffd15 	stw	r6,-12(fp)
100016d4:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
100016d8:	e13ffc17 	ldw	r4,-16(fp)
100016dc:	e17ffd17 	ldw	r5,-12(fp)
100016e0:	e1bffe17 	ldw	r6,-8(fp)
100016e4:	00019500 	call	10001950 <open>
100016e8:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
100016ec:	e0bffa17 	ldw	r2,-24(fp)
100016f0:	10002216 	blt	r2,zero,1000177c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
100016f4:	04040034 	movhi	r16,4096
100016f8:	840fa604 	addi	r16,r16,16024
100016fc:	e0bffa17 	ldw	r2,-24(fp)
10001700:	1009883a 	mov	r4,r2
10001704:	01400304 	movi	r5,12
10001708:	00025400 	call	10002540 <__mulsi3>
1000170c:	8085883a 	add	r2,r16,r2
10001710:	10c00017 	ldw	r3,0(r2)
10001714:	e0bffb17 	ldw	r2,-20(fp)
10001718:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
1000171c:	04040034 	movhi	r16,4096
10001720:	840fa604 	addi	r16,r16,16024
10001724:	e0bffa17 	ldw	r2,-24(fp)
10001728:	1009883a 	mov	r4,r2
1000172c:	01400304 	movi	r5,12
10001730:	00025400 	call	10002540 <__mulsi3>
10001734:	8085883a 	add	r2,r16,r2
10001738:	10800104 	addi	r2,r2,4
1000173c:	10c00017 	ldw	r3,0(r2)
10001740:	e0bffb17 	ldw	r2,-20(fp)
10001744:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
10001748:	04040034 	movhi	r16,4096
1000174c:	840fa604 	addi	r16,r16,16024
10001750:	e0bffa17 	ldw	r2,-24(fp)
10001754:	1009883a 	mov	r4,r2
10001758:	01400304 	movi	r5,12
1000175c:	00025400 	call	10002540 <__mulsi3>
10001760:	8085883a 	add	r2,r16,r2
10001764:	10800204 	addi	r2,r2,8
10001768:	10c00017 	ldw	r3,0(r2)
1000176c:	e0bffb17 	ldw	r2,-20(fp)
10001770:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
10001774:	e13ffa17 	ldw	r4,-24(fp)
10001778:	0001ab00 	call	10001ab0 <alt_release_fd>
  }
} 
1000177c:	e6ffff04 	addi	sp,fp,-4
10001780:	dfc00217 	ldw	ra,8(sp)
10001784:	df000117 	ldw	fp,4(sp)
10001788:	dc000017 	ldw	r16,0(sp)
1000178c:	dec00304 	addi	sp,sp,12
10001790:	f800283a 	ret

10001794 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
10001794:	defffb04 	addi	sp,sp,-20
10001798:	dfc00415 	stw	ra,16(sp)
1000179c:	df000315 	stw	fp,12(sp)
100017a0:	df000304 	addi	fp,sp,12
100017a4:	e13ffd15 	stw	r4,-12(fp)
100017a8:	e17ffe15 	stw	r5,-8(fp)
100017ac:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
100017b0:	01040034 	movhi	r4,4096
100017b4:	210fa904 	addi	r4,r4,16036
100017b8:	e17ffd17 	ldw	r5,-12(fp)
100017bc:	01800044 	movi	r6,1
100017c0:	01c07fc4 	movi	r7,511
100017c4:	00016b40 	call	100016b4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
100017c8:	01040034 	movhi	r4,4096
100017cc:	210fa604 	addi	r4,r4,16024
100017d0:	e17ffe17 	ldw	r5,-8(fp)
100017d4:	000d883a 	mov	r6,zero
100017d8:	01c07fc4 	movi	r7,511
100017dc:	00016b40 	call	100016b4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
100017e0:	01040034 	movhi	r4,4096
100017e4:	210fac04 	addi	r4,r4,16048
100017e8:	e17fff17 	ldw	r5,-4(fp)
100017ec:	01800044 	movi	r6,1
100017f0:	01c07fc4 	movi	r7,511
100017f4:	00016b40 	call	100016b4 <alt_open_fd>
}  
100017f8:	e037883a 	mov	sp,fp
100017fc:	dfc00117 	ldw	ra,4(sp)
10001800:	df000017 	ldw	fp,0(sp)
10001804:	dec00204 	addi	sp,sp,8
10001808:	f800283a 	ret

1000180c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000180c:	defffe04 	addi	sp,sp,-8
10001810:	dfc00115 	stw	ra,4(sp)
10001814:	df000015 	stw	fp,0(sp)
10001818:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000181c:	00840034 	movhi	r2,4096
10001820:	10911404 	addi	r2,r2,17488
10001824:	10800017 	ldw	r2,0(r2)
10001828:	10000526 	beq	r2,zero,10001840 <alt_get_errno+0x34>
1000182c:	00840034 	movhi	r2,4096
10001830:	10911404 	addi	r2,r2,17488
10001834:	10800017 	ldw	r2,0(r2)
10001838:	103ee83a 	callr	r2
1000183c:	00000206 	br	10001848 <alt_get_errno+0x3c>
10001840:	00840034 	movhi	r2,4096
10001844:	10984604 	addi	r2,r2,24856
}
10001848:	e037883a 	mov	sp,fp
1000184c:	dfc00117 	ldw	ra,4(sp)
10001850:	df000017 	ldw	fp,0(sp)
10001854:	dec00204 	addi	sp,sp,8
10001858:	f800283a 	ret

1000185c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
1000185c:	defffb04 	addi	sp,sp,-20
10001860:	dfc00415 	stw	ra,16(sp)
10001864:	df000315 	stw	fp,12(sp)
10001868:	dc000215 	stw	r16,8(sp)
1000186c:	df000304 	addi	fp,sp,12
10001870:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
10001874:	e0bffe17 	ldw	r2,-8(fp)
10001878:	10800217 	ldw	r2,8(r2)
1000187c:	10d00034 	orhi	r3,r2,16384
10001880:	e0bffe17 	ldw	r2,-8(fp)
10001884:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10001888:	e03ffd15 	stw	zero,-12(fp)
1000188c:	00002306 	br	1000191c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10001890:	04040034 	movhi	r16,4096
10001894:	840fa604 	addi	r16,r16,16024
10001898:	e0bffd17 	ldw	r2,-12(fp)
1000189c:	1009883a 	mov	r4,r2
100018a0:	01400304 	movi	r5,12
100018a4:	00025400 	call	10002540 <__mulsi3>
100018a8:	8085883a 	add	r2,r16,r2
100018ac:	10c00017 	ldw	r3,0(r2)
100018b0:	e0bffe17 	ldw	r2,-8(fp)
100018b4:	10800017 	ldw	r2,0(r2)
100018b8:	1880151e 	bne	r3,r2,10001910 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
100018bc:	04040034 	movhi	r16,4096
100018c0:	840fa604 	addi	r16,r16,16024
100018c4:	e0bffd17 	ldw	r2,-12(fp)
100018c8:	1009883a 	mov	r4,r2
100018cc:	01400304 	movi	r5,12
100018d0:	00025400 	call	10002540 <__mulsi3>
100018d4:	8085883a 	add	r2,r16,r2
100018d8:	10800204 	addi	r2,r2,8
100018dc:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
100018e0:	10000b0e 	bge	r2,zero,10001910 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
100018e4:	e13ffd17 	ldw	r4,-12(fp)
100018e8:	01400304 	movi	r5,12
100018ec:	00025400 	call	10002540 <__mulsi3>
100018f0:	1007883a 	mov	r3,r2
100018f4:	00840034 	movhi	r2,4096
100018f8:	108fa604 	addi	r2,r2,16024
100018fc:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10001900:	e0bffe17 	ldw	r2,-8(fp)
10001904:	18800226 	beq	r3,r2,10001910 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
10001908:	00bffcc4 	movi	r2,-13
1000190c:	00000a06 	br	10001938 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10001910:	e0bffd17 	ldw	r2,-12(fp)
10001914:	10800044 	addi	r2,r2,1
10001918:	e0bffd15 	stw	r2,-12(fp)
1000191c:	00840034 	movhi	r2,4096
10001920:	10911304 	addi	r2,r2,17484
10001924:	10800017 	ldw	r2,0(r2)
10001928:	1007883a 	mov	r3,r2
1000192c:	e0bffd17 	ldw	r2,-12(fp)
10001930:	18bfd72e 	bgeu	r3,r2,10001890 <__alt_data_end+0xf8001890>
    }
  }
  
  /* The device is not locked */
 
  return 0;
10001934:	0005883a 	mov	r2,zero
}
10001938:	e6ffff04 	addi	sp,fp,-4
1000193c:	dfc00217 	ldw	ra,8(sp)
10001940:	df000117 	ldw	fp,4(sp)
10001944:	dc000017 	ldw	r16,0(sp)
10001948:	dec00304 	addi	sp,sp,12
1000194c:	f800283a 	ret

10001950 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
10001950:	defff604 	addi	sp,sp,-40
10001954:	dfc00915 	stw	ra,36(sp)
10001958:	df000815 	stw	fp,32(sp)
1000195c:	df000804 	addi	fp,sp,32
10001960:	e13ffd15 	stw	r4,-12(fp)
10001964:	e17ffe15 	stw	r5,-8(fp)
10001968:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
1000196c:	00bfffc4 	movi	r2,-1
10001970:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
10001974:	00bffb44 	movi	r2,-19
10001978:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
1000197c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
10001980:	e13ffd17 	ldw	r4,-12(fp)
10001984:	01440034 	movhi	r5,4096
10001988:	29511104 	addi	r5,r5,17476
1000198c:	0001cec0 	call	10001cec <alt_find_dev>
10001990:	e0bff815 	stw	r2,-32(fp)
10001994:	e0bff817 	ldw	r2,-32(fp)
10001998:	1000051e 	bne	r2,zero,100019b0 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
1000199c:	e13ffd17 	ldw	r4,-12(fp)
100019a0:	0001d7c0 	call	10001d7c <alt_find_file>
100019a4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
100019a8:	00800044 	movi	r2,1
100019ac:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
100019b0:	e0bff817 	ldw	r2,-32(fp)
100019b4:	10002b26 	beq	r2,zero,10001a64 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
100019b8:	e13ff817 	ldw	r4,-32(fp)
100019bc:	0001e900 	call	10001e90 <alt_get_fd>
100019c0:	e0bff915 	stw	r2,-28(fp)
100019c4:	e0bff917 	ldw	r2,-28(fp)
100019c8:	1000030e 	bge	r2,zero,100019d8 <open+0x88>
    {
      status = index;
100019cc:	e0bff917 	ldw	r2,-28(fp)
100019d0:	e0bffa15 	stw	r2,-24(fp)
100019d4:	00002506 	br	10001a6c <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
100019d8:	e13ff917 	ldw	r4,-28(fp)
100019dc:	01400304 	movi	r5,12
100019e0:	00025400 	call	10002540 <__mulsi3>
100019e4:	1007883a 	mov	r3,r2
100019e8:	00840034 	movhi	r2,4096
100019ec:	108fa604 	addi	r2,r2,16024
100019f0:	1885883a 	add	r2,r3,r2
100019f4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
100019f8:	e0fffe17 	ldw	r3,-8(fp)
100019fc:	00900034 	movhi	r2,16384
10001a00:	10bfffc4 	addi	r2,r2,-1
10001a04:	1886703a 	and	r3,r3,r2
10001a08:	e0bffc17 	ldw	r2,-16(fp)
10001a0c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
10001a10:	e0bffb17 	ldw	r2,-20(fp)
10001a14:	1000051e 	bne	r2,zero,10001a2c <open+0xdc>
10001a18:	e13ffc17 	ldw	r4,-16(fp)
10001a1c:	000185c0 	call	1000185c <alt_file_locked>
10001a20:	e0bffa15 	stw	r2,-24(fp)
10001a24:	e0bffa17 	ldw	r2,-24(fp)
10001a28:	10001016 	blt	r2,zero,10001a6c <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
10001a2c:	e0bff817 	ldw	r2,-32(fp)
10001a30:	10800317 	ldw	r2,12(r2)
10001a34:	10000826 	beq	r2,zero,10001a58 <open+0x108>
10001a38:	e0bff817 	ldw	r2,-32(fp)
10001a3c:	10800317 	ldw	r2,12(r2)
10001a40:	e13ffc17 	ldw	r4,-16(fp)
10001a44:	e17ffd17 	ldw	r5,-12(fp)
10001a48:	e1bffe17 	ldw	r6,-8(fp)
10001a4c:	e1ffff17 	ldw	r7,-4(fp)
10001a50:	103ee83a 	callr	r2
10001a54:	00000106 	br	10001a5c <open+0x10c>
10001a58:	0005883a 	mov	r2,zero
10001a5c:	e0bffa15 	stw	r2,-24(fp)
10001a60:	00000206 	br	10001a6c <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
10001a64:	00bffb44 	movi	r2,-19
10001a68:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
10001a6c:	e0bffa17 	ldw	r2,-24(fp)
10001a70:	1000090e 	bge	r2,zero,10001a98 <open+0x148>
  {
    alt_release_fd (index);  
10001a74:	e13ff917 	ldw	r4,-28(fp)
10001a78:	0001ab00 	call	10001ab0 <alt_release_fd>
    ALT_ERRNO = -status;
10001a7c:	000180c0 	call	1000180c <alt_get_errno>
10001a80:	1007883a 	mov	r3,r2
10001a84:	e0bffa17 	ldw	r2,-24(fp)
10001a88:	0085c83a 	sub	r2,zero,r2
10001a8c:	18800015 	stw	r2,0(r3)
    return -1;
10001a90:	00bfffc4 	movi	r2,-1
10001a94:	00000106 	br	10001a9c <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
10001a98:	e0bff917 	ldw	r2,-28(fp)
}
10001a9c:	e037883a 	mov	sp,fp
10001aa0:	dfc00117 	ldw	ra,4(sp)
10001aa4:	df000017 	ldw	fp,0(sp)
10001aa8:	dec00204 	addi	sp,sp,8
10001aac:	f800283a 	ret

10001ab0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
10001ab0:	defffc04 	addi	sp,sp,-16
10001ab4:	dfc00315 	stw	ra,12(sp)
10001ab8:	df000215 	stw	fp,8(sp)
10001abc:	dc000115 	stw	r16,4(sp)
10001ac0:	df000204 	addi	fp,sp,8
10001ac4:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
10001ac8:	e0bffe17 	ldw	r2,-8(fp)
10001acc:	108000d0 	cmplti	r2,r2,3
10001ad0:	1000111e 	bne	r2,zero,10001b18 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
10001ad4:	04040034 	movhi	r16,4096
10001ad8:	840fa604 	addi	r16,r16,16024
10001adc:	e0bffe17 	ldw	r2,-8(fp)
10001ae0:	1009883a 	mov	r4,r2
10001ae4:	01400304 	movi	r5,12
10001ae8:	00025400 	call	10002540 <__mulsi3>
10001aec:	8085883a 	add	r2,r16,r2
10001af0:	10800204 	addi	r2,r2,8
10001af4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
10001af8:	04040034 	movhi	r16,4096
10001afc:	840fa604 	addi	r16,r16,16024
10001b00:	e0bffe17 	ldw	r2,-8(fp)
10001b04:	1009883a 	mov	r4,r2
10001b08:	01400304 	movi	r5,12
10001b0c:	00025400 	call	10002540 <__mulsi3>
10001b10:	8085883a 	add	r2,r16,r2
10001b14:	10000015 	stw	zero,0(r2)
  }
}
10001b18:	e6ffff04 	addi	sp,fp,-4
10001b1c:	dfc00217 	ldw	ra,8(sp)
10001b20:	df000117 	ldw	fp,4(sp)
10001b24:	dc000017 	ldw	r16,0(sp)
10001b28:	dec00304 	addi	sp,sp,12
10001b2c:	f800283a 	ret

10001b30 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
10001b30:	defffa04 	addi	sp,sp,-24
10001b34:	df000515 	stw	fp,20(sp)
10001b38:	df000504 	addi	fp,sp,20
10001b3c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10001b40:	0005303a 	rdctl	r2,status
10001b44:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10001b48:	e0fffc17 	ldw	r3,-16(fp)
10001b4c:	00bfff84 	movi	r2,-2
10001b50:	1884703a 	and	r2,r3,r2
10001b54:	1001703a 	wrctl	status,r2
  
  return context;
10001b58:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
10001b5c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
10001b60:	e0bfff17 	ldw	r2,-4(fp)
10001b64:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
10001b68:	e0bffd17 	ldw	r2,-12(fp)
10001b6c:	10800017 	ldw	r2,0(r2)
10001b70:	e0fffd17 	ldw	r3,-12(fp)
10001b74:	18c00117 	ldw	r3,4(r3)
10001b78:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
10001b7c:	e0bffd17 	ldw	r2,-12(fp)
10001b80:	10800117 	ldw	r2,4(r2)
10001b84:	e0fffd17 	ldw	r3,-12(fp)
10001b88:	18c00017 	ldw	r3,0(r3)
10001b8c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
10001b90:	e0bffd17 	ldw	r2,-12(fp)
10001b94:	e0fffd17 	ldw	r3,-12(fp)
10001b98:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
10001b9c:	e0bffd17 	ldw	r2,-12(fp)
10001ba0:	e0fffd17 	ldw	r3,-12(fp)
10001ba4:	10c00015 	stw	r3,0(r2)
10001ba8:	e0bffb17 	ldw	r2,-20(fp)
10001bac:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10001bb0:	e0bffe17 	ldw	r2,-8(fp)
10001bb4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
10001bb8:	e037883a 	mov	sp,fp
10001bbc:	df000017 	ldw	fp,0(sp)
10001bc0:	dec00104 	addi	sp,sp,4
10001bc4:	f800283a 	ret

10001bc8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10001bc8:	defffb04 	addi	sp,sp,-20
10001bcc:	dfc00415 	stw	ra,16(sp)
10001bd0:	df000315 	stw	fp,12(sp)
10001bd4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10001bd8:	d0a00717 	ldw	r2,-32740(gp)
10001bdc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10001be0:	d0a73517 	ldw	r2,-25388(gp)
10001be4:	10800044 	addi	r2,r2,1
10001be8:	d0a73515 	stw	r2,-25388(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10001bec:	00002e06 	br	10001ca8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
10001bf0:	e0bffd17 	ldw	r2,-12(fp)
10001bf4:	10800017 	ldw	r2,0(r2)
10001bf8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
10001bfc:	e0bffd17 	ldw	r2,-12(fp)
10001c00:	10800403 	ldbu	r2,16(r2)
10001c04:	10803fcc 	andi	r2,r2,255
10001c08:	10000426 	beq	r2,zero,10001c1c <alt_tick+0x54>
10001c0c:	d0a73517 	ldw	r2,-25388(gp)
10001c10:	1000021e 	bne	r2,zero,10001c1c <alt_tick+0x54>
    {
      alarm->rollover = 0;
10001c14:	e0bffd17 	ldw	r2,-12(fp)
10001c18:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
10001c1c:	e0bffd17 	ldw	r2,-12(fp)
10001c20:	10800217 	ldw	r2,8(r2)
10001c24:	d0e73517 	ldw	r3,-25388(gp)
10001c28:	18801d36 	bltu	r3,r2,10001ca0 <alt_tick+0xd8>
10001c2c:	e0bffd17 	ldw	r2,-12(fp)
10001c30:	10800403 	ldbu	r2,16(r2)
10001c34:	10803fcc 	andi	r2,r2,255
10001c38:	1000191e 	bne	r2,zero,10001ca0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
10001c3c:	e0bffd17 	ldw	r2,-12(fp)
10001c40:	10800317 	ldw	r2,12(r2)
10001c44:	e0fffd17 	ldw	r3,-12(fp)
10001c48:	18c00517 	ldw	r3,20(r3)
10001c4c:	1809883a 	mov	r4,r3
10001c50:	103ee83a 	callr	r2
10001c54:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
10001c58:	e0bfff17 	ldw	r2,-4(fp)
10001c5c:	1000031e 	bne	r2,zero,10001c6c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
10001c60:	e13ffd17 	ldw	r4,-12(fp)
10001c64:	0001b300 	call	10001b30 <alt_alarm_stop>
10001c68:	00000d06 	br	10001ca0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
10001c6c:	e0bffd17 	ldw	r2,-12(fp)
10001c70:	10c00217 	ldw	r3,8(r2)
10001c74:	e0bfff17 	ldw	r2,-4(fp)
10001c78:	1887883a 	add	r3,r3,r2
10001c7c:	e0bffd17 	ldw	r2,-12(fp)
10001c80:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
10001c84:	e0bffd17 	ldw	r2,-12(fp)
10001c88:	10c00217 	ldw	r3,8(r2)
10001c8c:	d0a73517 	ldw	r2,-25388(gp)
10001c90:	1880032e 	bgeu	r3,r2,10001ca0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
10001c94:	e0bffd17 	ldw	r2,-12(fp)
10001c98:	00c00044 	movi	r3,1
10001c9c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
10001ca0:	e0bffe17 	ldw	r2,-8(fp)
10001ca4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10001ca8:	e0fffd17 	ldw	r3,-12(fp)
10001cac:	d0a00704 	addi	r2,gp,-32740
10001cb0:	18bfcf1e 	bne	r3,r2,10001bf0 <__alt_data_end+0xf8001bf0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
10001cb4:	0001883a 	nop
}
10001cb8:	e037883a 	mov	sp,fp
10001cbc:	dfc00117 	ldw	ra,4(sp)
10001cc0:	df000017 	ldw	fp,0(sp)
10001cc4:	dec00204 	addi	sp,sp,8
10001cc8:	f800283a 	ret

10001ccc <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
10001ccc:	deffff04 	addi	sp,sp,-4
10001cd0:	df000015 	stw	fp,0(sp)
10001cd4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10001cd8:	000170fa 	wrctl	ienable,zero
}
10001cdc:	e037883a 	mov	sp,fp
10001ce0:	df000017 	ldw	fp,0(sp)
10001ce4:	dec00104 	addi	sp,sp,4
10001ce8:	f800283a 	ret

10001cec <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10001cec:	defffa04 	addi	sp,sp,-24
10001cf0:	dfc00515 	stw	ra,20(sp)
10001cf4:	df000415 	stw	fp,16(sp)
10001cf8:	df000404 	addi	fp,sp,16
10001cfc:	e13ffe15 	stw	r4,-8(fp)
10001d00:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
10001d04:	e0bfff17 	ldw	r2,-4(fp)
10001d08:	10800017 	ldw	r2,0(r2)
10001d0c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10001d10:	e13ffe17 	ldw	r4,-8(fp)
10001d14:	00022000 	call	10002200 <strlen>
10001d18:	10800044 	addi	r2,r2,1
10001d1c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10001d20:	00000d06 	br	10001d58 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
10001d24:	e0bffc17 	ldw	r2,-16(fp)
10001d28:	10c00217 	ldw	r3,8(r2)
10001d2c:	e0bffd17 	ldw	r2,-12(fp)
10001d30:	1809883a 	mov	r4,r3
10001d34:	e17ffe17 	ldw	r5,-8(fp)
10001d38:	100d883a 	mov	r6,r2
10001d3c:	000204c0 	call	1000204c <memcmp>
10001d40:	1000021e 	bne	r2,zero,10001d4c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
10001d44:	e0bffc17 	ldw	r2,-16(fp)
10001d48:	00000706 	br	10001d68 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
10001d4c:	e0bffc17 	ldw	r2,-16(fp)
10001d50:	10800017 	ldw	r2,0(r2)
10001d54:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10001d58:	e0fffc17 	ldw	r3,-16(fp)
10001d5c:	e0bfff17 	ldw	r2,-4(fp)
10001d60:	18bff01e 	bne	r3,r2,10001d24 <__alt_data_end+0xf8001d24>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
10001d64:	0005883a 	mov	r2,zero
}
10001d68:	e037883a 	mov	sp,fp
10001d6c:	dfc00117 	ldw	ra,4(sp)
10001d70:	df000017 	ldw	fp,0(sp)
10001d74:	dec00204 	addi	sp,sp,8
10001d78:	f800283a 	ret

10001d7c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
10001d7c:	defffb04 	addi	sp,sp,-20
10001d80:	dfc00415 	stw	ra,16(sp)
10001d84:	df000315 	stw	fp,12(sp)
10001d88:	df000304 	addi	fp,sp,12
10001d8c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
10001d90:	00840034 	movhi	r2,4096
10001d94:	10910f04 	addi	r2,r2,17468
10001d98:	10800017 	ldw	r2,0(r2)
10001d9c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10001da0:	00003106 	br	10001e68 <alt_find_file+0xec>
  {
    len = strlen(next->name);
10001da4:	e0bffd17 	ldw	r2,-12(fp)
10001da8:	10800217 	ldw	r2,8(r2)
10001dac:	1009883a 	mov	r4,r2
10001db0:	00022000 	call	10002200 <strlen>
10001db4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
10001db8:	e0bffd17 	ldw	r2,-12(fp)
10001dbc:	10c00217 	ldw	r3,8(r2)
10001dc0:	e0bffe17 	ldw	r2,-8(fp)
10001dc4:	10bfffc4 	addi	r2,r2,-1
10001dc8:	1885883a 	add	r2,r3,r2
10001dcc:	10800003 	ldbu	r2,0(r2)
10001dd0:	10803fcc 	andi	r2,r2,255
10001dd4:	1080201c 	xori	r2,r2,128
10001dd8:	10bfe004 	addi	r2,r2,-128
10001ddc:	10800bd8 	cmpnei	r2,r2,47
10001de0:	1000031e 	bne	r2,zero,10001df0 <alt_find_file+0x74>
    {
      len -= 1;
10001de4:	e0bffe17 	ldw	r2,-8(fp)
10001de8:	10bfffc4 	addi	r2,r2,-1
10001dec:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10001df0:	e0bffe17 	ldw	r2,-8(fp)
10001df4:	e0ffff17 	ldw	r3,-4(fp)
10001df8:	1885883a 	add	r2,r3,r2
10001dfc:	10800003 	ldbu	r2,0(r2)
10001e00:	10803fcc 	andi	r2,r2,255
10001e04:	1080201c 	xori	r2,r2,128
10001e08:	10bfe004 	addi	r2,r2,-128
10001e0c:	10800be0 	cmpeqi	r2,r2,47
10001e10:	1000081e 	bne	r2,zero,10001e34 <alt_find_file+0xb8>
10001e14:	e0bffe17 	ldw	r2,-8(fp)
10001e18:	e0ffff17 	ldw	r3,-4(fp)
10001e1c:	1885883a 	add	r2,r3,r2
10001e20:	10800003 	ldbu	r2,0(r2)
10001e24:	10803fcc 	andi	r2,r2,255
10001e28:	1080201c 	xori	r2,r2,128
10001e2c:	10bfe004 	addi	r2,r2,-128
10001e30:	10000a1e 	bne	r2,zero,10001e5c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
10001e34:	e0bffd17 	ldw	r2,-12(fp)
10001e38:	10c00217 	ldw	r3,8(r2)
10001e3c:	e0bffe17 	ldw	r2,-8(fp)
10001e40:	1809883a 	mov	r4,r3
10001e44:	e17fff17 	ldw	r5,-4(fp)
10001e48:	100d883a 	mov	r6,r2
10001e4c:	000204c0 	call	1000204c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10001e50:	1000021e 	bne	r2,zero,10001e5c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
10001e54:	e0bffd17 	ldw	r2,-12(fp)
10001e58:	00000806 	br	10001e7c <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
10001e5c:	e0bffd17 	ldw	r2,-12(fp)
10001e60:	10800017 	ldw	r2,0(r2)
10001e64:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10001e68:	e0fffd17 	ldw	r3,-12(fp)
10001e6c:	00840034 	movhi	r2,4096
10001e70:	10910f04 	addi	r2,r2,17468
10001e74:	18bfcb1e 	bne	r3,r2,10001da4 <__alt_data_end+0xf8001da4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
10001e78:	0005883a 	mov	r2,zero
}
10001e7c:	e037883a 	mov	sp,fp
10001e80:	dfc00117 	ldw	ra,4(sp)
10001e84:	df000017 	ldw	fp,0(sp)
10001e88:	dec00204 	addi	sp,sp,8
10001e8c:	f800283a 	ret

10001e90 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
10001e90:	defffa04 	addi	sp,sp,-24
10001e94:	dfc00515 	stw	ra,20(sp)
10001e98:	df000415 	stw	fp,16(sp)
10001e9c:	dc000315 	stw	r16,12(sp)
10001ea0:	df000404 	addi	fp,sp,16
10001ea4:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
10001ea8:	00bffa04 	movi	r2,-24
10001eac:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10001eb0:	e03ffc15 	stw	zero,-16(fp)
10001eb4:	00002106 	br	10001f3c <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
10001eb8:	04040034 	movhi	r16,4096
10001ebc:	840fa604 	addi	r16,r16,16024
10001ec0:	e0bffc17 	ldw	r2,-16(fp)
10001ec4:	1009883a 	mov	r4,r2
10001ec8:	01400304 	movi	r5,12
10001ecc:	00025400 	call	10002540 <__mulsi3>
10001ed0:	8085883a 	add	r2,r16,r2
10001ed4:	10800017 	ldw	r2,0(r2)
10001ed8:	1000151e 	bne	r2,zero,10001f30 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
10001edc:	04040034 	movhi	r16,4096
10001ee0:	840fa604 	addi	r16,r16,16024
10001ee4:	e0bffc17 	ldw	r2,-16(fp)
10001ee8:	1009883a 	mov	r4,r2
10001eec:	01400304 	movi	r5,12
10001ef0:	00025400 	call	10002540 <__mulsi3>
10001ef4:	8085883a 	add	r2,r16,r2
10001ef8:	e0fffe17 	ldw	r3,-8(fp)
10001efc:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
10001f00:	00840034 	movhi	r2,4096
10001f04:	10911304 	addi	r2,r2,17484
10001f08:	10c00017 	ldw	r3,0(r2)
10001f0c:	e0bffc17 	ldw	r2,-16(fp)
10001f10:	1880040e 	bge	r3,r2,10001f24 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
10001f14:	00840034 	movhi	r2,4096
10001f18:	10911304 	addi	r2,r2,17484
10001f1c:	e0fffc17 	ldw	r3,-16(fp)
10001f20:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
10001f24:	e0bffc17 	ldw	r2,-16(fp)
10001f28:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
10001f2c:	00000606 	br	10001f48 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10001f30:	e0bffc17 	ldw	r2,-16(fp)
10001f34:	10800044 	addi	r2,r2,1
10001f38:	e0bffc15 	stw	r2,-16(fp)
10001f3c:	e0bffc17 	ldw	r2,-16(fp)
10001f40:	10800810 	cmplti	r2,r2,32
10001f44:	103fdc1e 	bne	r2,zero,10001eb8 <__alt_data_end+0xf8001eb8>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10001f48:	e0bffd17 	ldw	r2,-12(fp)
}
10001f4c:	e6ffff04 	addi	sp,fp,-4
10001f50:	dfc00217 	ldw	ra,8(sp)
10001f54:	df000117 	ldw	fp,4(sp)
10001f58:	dc000017 	ldw	r16,0(sp)
10001f5c:	dec00304 	addi	sp,sp,12
10001f60:	f800283a 	ret

10001f64 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
10001f64:	defffe04 	addi	sp,sp,-8
10001f68:	df000115 	stw	fp,4(sp)
10001f6c:	df000104 	addi	fp,sp,4
10001f70:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
10001f74:	e0bfff17 	ldw	r2,-4(fp)
10001f78:	10bffe84 	addi	r2,r2,-6
10001f7c:	10c00428 	cmpgeui	r3,r2,16
10001f80:	18001a1e 	bne	r3,zero,10001fec <alt_exception_cause_generated_bad_addr+0x88>
10001f84:	100690ba 	slli	r3,r2,2
10001f88:	00840034 	movhi	r2,4096
10001f8c:	1087e704 	addi	r2,r2,8092
10001f90:	1885883a 	add	r2,r3,r2
10001f94:	10800017 	ldw	r2,0(r2)
10001f98:	1000683a 	jmp	r2
10001f9c:	10001fdc 	xori	zero,r2,127
10001fa0:	10001fdc 	xori	zero,r2,127
10001fa4:	10001fec 	andhi	zero,r2,127
10001fa8:	10001fec 	andhi	zero,r2,127
10001fac:	10001fec 	andhi	zero,r2,127
10001fb0:	10001fdc 	xori	zero,r2,127
10001fb4:	10001fe4 	muli	zero,r2,127
10001fb8:	10001fec 	andhi	zero,r2,127
10001fbc:	10001fdc 	xori	zero,r2,127
10001fc0:	10001fdc 	xori	zero,r2,127
10001fc4:	10001fec 	andhi	zero,r2,127
10001fc8:	10001fdc 	xori	zero,r2,127
10001fcc:	10001fe4 	muli	zero,r2,127
10001fd0:	10001fec 	andhi	zero,r2,127
10001fd4:	10001fec 	andhi	zero,r2,127
10001fd8:	10001fdc 	xori	zero,r2,127
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
10001fdc:	00800044 	movi	r2,1
10001fe0:	00000306 	br	10001ff0 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
10001fe4:	0005883a 	mov	r2,zero
10001fe8:	00000106 	br	10001ff0 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
10001fec:	0005883a 	mov	r2,zero
  }
}
10001ff0:	e037883a 	mov	sp,fp
10001ff4:	df000017 	ldw	fp,0(sp)
10001ff8:	dec00104 	addi	sp,sp,4
10001ffc:	f800283a 	ret

10002000 <atexit>:
10002000:	200b883a 	mov	r5,r4
10002004:	000d883a 	mov	r6,zero
10002008:	0009883a 	mov	r4,zero
1000200c:	000f883a 	mov	r7,zero
10002010:	00022981 	jmpi	10002298 <__register_exitproc>

10002014 <exit>:
10002014:	defffe04 	addi	sp,sp,-8
10002018:	000b883a 	mov	r5,zero
1000201c:	dc000015 	stw	r16,0(sp)
10002020:	dfc00115 	stw	ra,4(sp)
10002024:	2021883a 	mov	r16,r4
10002028:	00023ac0 	call	100023ac <__call_exitprocs>
1000202c:	00840034 	movhi	r2,4096
10002030:	10911804 	addi	r2,r2,17504
10002034:	11000017 	ldw	r4,0(r2)
10002038:	20800f17 	ldw	r2,60(r4)
1000203c:	10000126 	beq	r2,zero,10002044 <exit+0x30>
10002040:	103ee83a 	callr	r2
10002044:	8009883a 	mov	r4,r16
10002048:	00025680 	call	10002568 <_exit>

1000204c <memcmp>:
1000204c:	01c000c4 	movi	r7,3
10002050:	3980192e 	bgeu	r7,r6,100020b8 <memcmp+0x6c>
10002054:	2144b03a 	or	r2,r4,r5
10002058:	11c4703a 	and	r2,r2,r7
1000205c:	10000f26 	beq	r2,zero,1000209c <memcmp+0x50>
10002060:	20800003 	ldbu	r2,0(r4)
10002064:	28c00003 	ldbu	r3,0(r5)
10002068:	10c0151e 	bne	r2,r3,100020c0 <memcmp+0x74>
1000206c:	31bfff84 	addi	r6,r6,-2
10002070:	01ffffc4 	movi	r7,-1
10002074:	00000406 	br	10002088 <memcmp+0x3c>
10002078:	20800003 	ldbu	r2,0(r4)
1000207c:	28c00003 	ldbu	r3,0(r5)
10002080:	31bfffc4 	addi	r6,r6,-1
10002084:	10c00e1e 	bne	r2,r3,100020c0 <memcmp+0x74>
10002088:	21000044 	addi	r4,r4,1
1000208c:	29400044 	addi	r5,r5,1
10002090:	31fff91e 	bne	r6,r7,10002078 <__alt_data_end+0xf8002078>
10002094:	0005883a 	mov	r2,zero
10002098:	f800283a 	ret
1000209c:	20c00017 	ldw	r3,0(r4)
100020a0:	28800017 	ldw	r2,0(r5)
100020a4:	1880041e 	bne	r3,r2,100020b8 <memcmp+0x6c>
100020a8:	31bfff04 	addi	r6,r6,-4
100020ac:	21000104 	addi	r4,r4,4
100020b0:	29400104 	addi	r5,r5,4
100020b4:	39bff936 	bltu	r7,r6,1000209c <__alt_data_end+0xf800209c>
100020b8:	303fe91e 	bne	r6,zero,10002060 <__alt_data_end+0xf8002060>
100020bc:	003ff506 	br	10002094 <__alt_data_end+0xf8002094>
100020c0:	10c5c83a 	sub	r2,r2,r3
100020c4:	f800283a 	ret

100020c8 <memcpy>:
100020c8:	deffff04 	addi	sp,sp,-4
100020cc:	dc000015 	stw	r16,0(sp)
100020d0:	00c003c4 	movi	r3,15
100020d4:	2005883a 	mov	r2,r4
100020d8:	1980432e 	bgeu	r3,r6,100021e8 <memcpy+0x120>
100020dc:	2146b03a 	or	r3,r4,r5
100020e0:	18c000cc 	andi	r3,r3,3
100020e4:	1800421e 	bne	r3,zero,100021f0 <memcpy+0x128>
100020e8:	343ffc04 	addi	r16,r6,-16
100020ec:	8020d13a 	srli	r16,r16,4
100020f0:	28c00104 	addi	r3,r5,4
100020f4:	23400104 	addi	r13,r4,4
100020f8:	801e913a 	slli	r15,r16,4
100020fc:	2b000204 	addi	r12,r5,8
10002100:	22c00204 	addi	r11,r4,8
10002104:	7bc00504 	addi	r15,r15,20
10002108:	2a800304 	addi	r10,r5,12
1000210c:	22400304 	addi	r9,r4,12
10002110:	2bdf883a 	add	r15,r5,r15
10002114:	2811883a 	mov	r8,r5
10002118:	200f883a 	mov	r7,r4
1000211c:	41000017 	ldw	r4,0(r8)
10002120:	39c00404 	addi	r7,r7,16
10002124:	18c00404 	addi	r3,r3,16
10002128:	393ffc15 	stw	r4,-16(r7)
1000212c:	1bbffc17 	ldw	r14,-16(r3)
10002130:	6b400404 	addi	r13,r13,16
10002134:	5ac00404 	addi	r11,r11,16
10002138:	6bbffc15 	stw	r14,-16(r13)
1000213c:	63800017 	ldw	r14,0(r12)
10002140:	4a400404 	addi	r9,r9,16
10002144:	42000404 	addi	r8,r8,16
10002148:	5bbffc15 	stw	r14,-16(r11)
1000214c:	53800017 	ldw	r14,0(r10)
10002150:	63000404 	addi	r12,r12,16
10002154:	52800404 	addi	r10,r10,16
10002158:	4bbffc15 	stw	r14,-16(r9)
1000215c:	1bffef1e 	bne	r3,r15,1000211c <__alt_data_end+0xf800211c>
10002160:	81c00044 	addi	r7,r16,1
10002164:	380e913a 	slli	r7,r7,4
10002168:	310003cc 	andi	r4,r6,15
1000216c:	02c000c4 	movi	r11,3
10002170:	11c7883a 	add	r3,r2,r7
10002174:	29cb883a 	add	r5,r5,r7
10002178:	59001f2e 	bgeu	r11,r4,100021f8 <memcpy+0x130>
1000217c:	1813883a 	mov	r9,r3
10002180:	2811883a 	mov	r8,r5
10002184:	200f883a 	mov	r7,r4
10002188:	42800017 	ldw	r10,0(r8)
1000218c:	4a400104 	addi	r9,r9,4
10002190:	39ffff04 	addi	r7,r7,-4
10002194:	4abfff15 	stw	r10,-4(r9)
10002198:	42000104 	addi	r8,r8,4
1000219c:	59fffa36 	bltu	r11,r7,10002188 <__alt_data_end+0xf8002188>
100021a0:	213fff04 	addi	r4,r4,-4
100021a4:	2008d0ba 	srli	r4,r4,2
100021a8:	318000cc 	andi	r6,r6,3
100021ac:	21000044 	addi	r4,r4,1
100021b0:	2109883a 	add	r4,r4,r4
100021b4:	2109883a 	add	r4,r4,r4
100021b8:	1907883a 	add	r3,r3,r4
100021bc:	290b883a 	add	r5,r5,r4
100021c0:	30000626 	beq	r6,zero,100021dc <memcpy+0x114>
100021c4:	198d883a 	add	r6,r3,r6
100021c8:	29c00003 	ldbu	r7,0(r5)
100021cc:	18c00044 	addi	r3,r3,1
100021d0:	29400044 	addi	r5,r5,1
100021d4:	19ffffc5 	stb	r7,-1(r3)
100021d8:	19bffb1e 	bne	r3,r6,100021c8 <__alt_data_end+0xf80021c8>
100021dc:	dc000017 	ldw	r16,0(sp)
100021e0:	dec00104 	addi	sp,sp,4
100021e4:	f800283a 	ret
100021e8:	2007883a 	mov	r3,r4
100021ec:	003ff406 	br	100021c0 <__alt_data_end+0xf80021c0>
100021f0:	2007883a 	mov	r3,r4
100021f4:	003ff306 	br	100021c4 <__alt_data_end+0xf80021c4>
100021f8:	200d883a 	mov	r6,r4
100021fc:	003ff006 	br	100021c0 <__alt_data_end+0xf80021c0>

10002200 <strlen>:
10002200:	208000cc 	andi	r2,r4,3
10002204:	10002026 	beq	r2,zero,10002288 <strlen+0x88>
10002208:	20800007 	ldb	r2,0(r4)
1000220c:	10002026 	beq	r2,zero,10002290 <strlen+0x90>
10002210:	2005883a 	mov	r2,r4
10002214:	00000206 	br	10002220 <strlen+0x20>
10002218:	10c00007 	ldb	r3,0(r2)
1000221c:	18001826 	beq	r3,zero,10002280 <strlen+0x80>
10002220:	10800044 	addi	r2,r2,1
10002224:	10c000cc 	andi	r3,r2,3
10002228:	183ffb1e 	bne	r3,zero,10002218 <__alt_data_end+0xf8002218>
1000222c:	10c00017 	ldw	r3,0(r2)
10002230:	01ffbff4 	movhi	r7,65279
10002234:	39ffbfc4 	addi	r7,r7,-257
10002238:	00ca303a 	nor	r5,zero,r3
1000223c:	01a02074 	movhi	r6,32897
10002240:	19c7883a 	add	r3,r3,r7
10002244:	31a02004 	addi	r6,r6,-32640
10002248:	1946703a 	and	r3,r3,r5
1000224c:	1986703a 	and	r3,r3,r6
10002250:	1800091e 	bne	r3,zero,10002278 <strlen+0x78>
10002254:	10800104 	addi	r2,r2,4
10002258:	10c00017 	ldw	r3,0(r2)
1000225c:	19cb883a 	add	r5,r3,r7
10002260:	00c6303a 	nor	r3,zero,r3
10002264:	28c6703a 	and	r3,r5,r3
10002268:	1986703a 	and	r3,r3,r6
1000226c:	183ff926 	beq	r3,zero,10002254 <__alt_data_end+0xf8002254>
10002270:	00000106 	br	10002278 <strlen+0x78>
10002274:	10800044 	addi	r2,r2,1
10002278:	10c00007 	ldb	r3,0(r2)
1000227c:	183ffd1e 	bne	r3,zero,10002274 <__alt_data_end+0xf8002274>
10002280:	1105c83a 	sub	r2,r2,r4
10002284:	f800283a 	ret
10002288:	2005883a 	mov	r2,r4
1000228c:	003fe706 	br	1000222c <__alt_data_end+0xf800222c>
10002290:	0005883a 	mov	r2,zero
10002294:	f800283a 	ret

10002298 <__register_exitproc>:
10002298:	00840034 	movhi	r2,4096
1000229c:	defffa04 	addi	sp,sp,-24
100022a0:	10911804 	addi	r2,r2,17504
100022a4:	dc000315 	stw	r16,12(sp)
100022a8:	14000017 	ldw	r16,0(r2)
100022ac:	dc400415 	stw	r17,16(sp)
100022b0:	dfc00515 	stw	ra,20(sp)
100022b4:	80805217 	ldw	r2,328(r16)
100022b8:	2023883a 	mov	r17,r4
100022bc:	10003626 	beq	r2,zero,10002398 <__register_exitproc+0x100>
100022c0:	10c00117 	ldw	r3,4(r2)
100022c4:	010007c4 	movi	r4,31
100022c8:	20c00e16 	blt	r4,r3,10002304 <__register_exitproc+0x6c>
100022cc:	1a400044 	addi	r9,r3,1
100022d0:	8800211e 	bne	r17,zero,10002358 <__register_exitproc+0xc0>
100022d4:	18c00084 	addi	r3,r3,2
100022d8:	18c7883a 	add	r3,r3,r3
100022dc:	18c7883a 	add	r3,r3,r3
100022e0:	12400115 	stw	r9,4(r2)
100022e4:	10c7883a 	add	r3,r2,r3
100022e8:	19400015 	stw	r5,0(r3)
100022ec:	0005883a 	mov	r2,zero
100022f0:	dfc00517 	ldw	ra,20(sp)
100022f4:	dc400417 	ldw	r17,16(sp)
100022f8:	dc000317 	ldw	r16,12(sp)
100022fc:	dec00604 	addi	sp,sp,24
10002300:	f800283a 	ret
10002304:	00800034 	movhi	r2,0
10002308:	10800004 	addi	r2,r2,0
1000230c:	10002526 	beq	r2,zero,100023a4 <__register_exitproc+0x10c>
10002310:	01006404 	movi	r4,400
10002314:	d9400015 	stw	r5,0(sp)
10002318:	d9800115 	stw	r6,4(sp)
1000231c:	d9c00215 	stw	r7,8(sp)
10002320:	00000000 	call	10000000 <__alt_mem_sdram>
10002324:	d9400017 	ldw	r5,0(sp)
10002328:	d9800117 	ldw	r6,4(sp)
1000232c:	d9c00217 	ldw	r7,8(sp)
10002330:	10001c26 	beq	r2,zero,100023a4 <__register_exitproc+0x10c>
10002334:	80c05217 	ldw	r3,328(r16)
10002338:	10000115 	stw	zero,4(r2)
1000233c:	02400044 	movi	r9,1
10002340:	10c00015 	stw	r3,0(r2)
10002344:	80805215 	stw	r2,328(r16)
10002348:	10006215 	stw	zero,392(r2)
1000234c:	10006315 	stw	zero,396(r2)
10002350:	0007883a 	mov	r3,zero
10002354:	883fdf26 	beq	r17,zero,100022d4 <__alt_data_end+0xf80022d4>
10002358:	18d1883a 	add	r8,r3,r3
1000235c:	4211883a 	add	r8,r8,r8
10002360:	1211883a 	add	r8,r2,r8
10002364:	41802215 	stw	r6,136(r8)
10002368:	01000044 	movi	r4,1
1000236c:	11806217 	ldw	r6,392(r2)
10002370:	20c8983a 	sll	r4,r4,r3
10002374:	310cb03a 	or	r6,r6,r4
10002378:	11806215 	stw	r6,392(r2)
1000237c:	41c04215 	stw	r7,264(r8)
10002380:	01800084 	movi	r6,2
10002384:	89bfd31e 	bne	r17,r6,100022d4 <__alt_data_end+0xf80022d4>
10002388:	11806317 	ldw	r6,396(r2)
1000238c:	3108b03a 	or	r4,r6,r4
10002390:	11006315 	stw	r4,396(r2)
10002394:	003fcf06 	br	100022d4 <__alt_data_end+0xf80022d4>
10002398:	80805304 	addi	r2,r16,332
1000239c:	80805215 	stw	r2,328(r16)
100023a0:	003fc706 	br	100022c0 <__alt_data_end+0xf80022c0>
100023a4:	00bfffc4 	movi	r2,-1
100023a8:	003fd106 	br	100022f0 <__alt_data_end+0xf80022f0>

100023ac <__call_exitprocs>:
100023ac:	00840034 	movhi	r2,4096
100023b0:	10911804 	addi	r2,r2,17504
100023b4:	10800017 	ldw	r2,0(r2)
100023b8:	defff404 	addi	sp,sp,-48
100023bc:	dd800815 	stw	r22,32(sp)
100023c0:	d8800015 	stw	r2,0(sp)
100023c4:	10805204 	addi	r2,r2,328
100023c8:	dd000615 	stw	r20,24(sp)
100023cc:	dc800415 	stw	r18,16(sp)
100023d0:	dfc00b15 	stw	ra,44(sp)
100023d4:	df000a15 	stw	fp,40(sp)
100023d8:	ddc00915 	stw	r23,36(sp)
100023dc:	dd400715 	stw	r21,28(sp)
100023e0:	dcc00515 	stw	r19,20(sp)
100023e4:	dc400315 	stw	r17,12(sp)
100023e8:	dc000215 	stw	r16,8(sp)
100023ec:	2025883a 	mov	r18,r4
100023f0:	2829883a 	mov	r20,r5
100023f4:	d8800115 	stw	r2,4(sp)
100023f8:	05bfffc4 	movi	r22,-1
100023fc:	d8800017 	ldw	r2,0(sp)
10002400:	14c05217 	ldw	r19,328(r2)
10002404:	98001d26 	beq	r19,zero,1000247c <__call_exitprocs+0xd0>
10002408:	dd400117 	ldw	r21,4(sp)
1000240c:	98800117 	ldw	r2,4(r19)
10002410:	173fffc4 	addi	fp,r2,-1
10002414:	e0000d16 	blt	fp,zero,1000244c <__call_exitprocs+0xa0>
10002418:	14000044 	addi	r16,r2,1
1000241c:	8421883a 	add	r16,r16,r16
10002420:	8421883a 	add	r16,r16,r16
10002424:	84402004 	addi	r17,r16,128
10002428:	9c63883a 	add	r17,r19,r17
1000242c:	9c21883a 	add	r16,r19,r16
10002430:	a0001e26 	beq	r20,zero,100024ac <__call_exitprocs+0x100>
10002434:	80804017 	ldw	r2,256(r16)
10002438:	15001c26 	beq	r2,r20,100024ac <__call_exitprocs+0x100>
1000243c:	e73fffc4 	addi	fp,fp,-1
10002440:	843fff04 	addi	r16,r16,-4
10002444:	8c7fff04 	addi	r17,r17,-4
10002448:	e5bff91e 	bne	fp,r22,10002430 <__alt_data_end+0xf8002430>
1000244c:	00800034 	movhi	r2,0
10002450:	10800004 	addi	r2,r2,0
10002454:	10000926 	beq	r2,zero,1000247c <__call_exitprocs+0xd0>
10002458:	98800117 	ldw	r2,4(r19)
1000245c:	1000311e 	bne	r2,zero,10002524 <__call_exitprocs+0x178>
10002460:	98800017 	ldw	r2,0(r19)
10002464:	10003426 	beq	r2,zero,10002538 <__call_exitprocs+0x18c>
10002468:	9809883a 	mov	r4,r19
1000246c:	a8800015 	stw	r2,0(r21)
10002470:	00000000 	call	10000000 <__alt_mem_sdram>
10002474:	acc00017 	ldw	r19,0(r21)
10002478:	983fe41e 	bne	r19,zero,1000240c <__alt_data_end+0xf800240c>
1000247c:	dfc00b17 	ldw	ra,44(sp)
10002480:	df000a17 	ldw	fp,40(sp)
10002484:	ddc00917 	ldw	r23,36(sp)
10002488:	dd800817 	ldw	r22,32(sp)
1000248c:	dd400717 	ldw	r21,28(sp)
10002490:	dd000617 	ldw	r20,24(sp)
10002494:	dcc00517 	ldw	r19,20(sp)
10002498:	dc800417 	ldw	r18,16(sp)
1000249c:	dc400317 	ldw	r17,12(sp)
100024a0:	dc000217 	ldw	r16,8(sp)
100024a4:	dec00c04 	addi	sp,sp,48
100024a8:	f800283a 	ret
100024ac:	98800117 	ldw	r2,4(r19)
100024b0:	80c00017 	ldw	r3,0(r16)
100024b4:	10bfffc4 	addi	r2,r2,-1
100024b8:	17001526 	beq	r2,fp,10002510 <__call_exitprocs+0x164>
100024bc:	80000015 	stw	zero,0(r16)
100024c0:	183fde26 	beq	r3,zero,1000243c <__alt_data_end+0xf800243c>
100024c4:	00800044 	movi	r2,1
100024c8:	1708983a 	sll	r4,r2,fp
100024cc:	98806217 	ldw	r2,392(r19)
100024d0:	9dc00117 	ldw	r23,4(r19)
100024d4:	2084703a 	and	r2,r4,r2
100024d8:	1000061e 	bne	r2,zero,100024f4 <__call_exitprocs+0x148>
100024dc:	183ee83a 	callr	r3
100024e0:	98800117 	ldw	r2,4(r19)
100024e4:	15ffc51e 	bne	r2,r23,100023fc <__alt_data_end+0xf80023fc>
100024e8:	a8800017 	ldw	r2,0(r21)
100024ec:	14ffd326 	beq	r2,r19,1000243c <__alt_data_end+0xf800243c>
100024f0:	003fc206 	br	100023fc <__alt_data_end+0xf80023fc>
100024f4:	98806317 	ldw	r2,396(r19)
100024f8:	2084703a 	and	r2,r4,r2
100024fc:	1000061e 	bne	r2,zero,10002518 <__call_exitprocs+0x16c>
10002500:	89400017 	ldw	r5,0(r17)
10002504:	9009883a 	mov	r4,r18
10002508:	183ee83a 	callr	r3
1000250c:	003ff406 	br	100024e0 <__alt_data_end+0xf80024e0>
10002510:	9f000115 	stw	fp,4(r19)
10002514:	003fea06 	br	100024c0 <__alt_data_end+0xf80024c0>
10002518:	89000017 	ldw	r4,0(r17)
1000251c:	183ee83a 	callr	r3
10002520:	003fef06 	br	100024e0 <__alt_data_end+0xf80024e0>
10002524:	98800017 	ldw	r2,0(r19)
10002528:	982b883a 	mov	r21,r19
1000252c:	1027883a 	mov	r19,r2
10002530:	983fb61e 	bne	r19,zero,1000240c <__alt_data_end+0xf800240c>
10002534:	003fd106 	br	1000247c <__alt_data_end+0xf800247c>
10002538:	0005883a 	mov	r2,zero
1000253c:	003ffa06 	br	10002528 <__alt_data_end+0xf8002528>

10002540 <__mulsi3>:
10002540:	0005883a 	mov	r2,zero
10002544:	20000726 	beq	r4,zero,10002564 <__mulsi3+0x24>
10002548:	20c0004c 	andi	r3,r4,1
1000254c:	2008d07a 	srli	r4,r4,1
10002550:	18000126 	beq	r3,zero,10002558 <__mulsi3+0x18>
10002554:	1145883a 	add	r2,r2,r5
10002558:	294b883a 	add	r5,r5,r5
1000255c:	203ffa1e 	bne	r4,zero,10002548 <__alt_data_end+0xf8002548>
10002560:	f800283a 	ret
10002564:	f800283a 	ret

10002568 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
10002568:	defffd04 	addi	sp,sp,-12
1000256c:	df000215 	stw	fp,8(sp)
10002570:	df000204 	addi	fp,sp,8
10002574:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
10002578:	0001883a 	nop
1000257c:	e0bfff17 	ldw	r2,-4(fp)
10002580:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
10002584:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
10002588:	10000226 	beq	r2,zero,10002594 <_exit+0x2c>
    ALT_SIM_FAIL();
1000258c:	002af070 	cmpltui	zero,zero,43969
10002590:	00000106 	br	10002598 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10002594:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10002598:	003fff06 	br	10002598 <__alt_data_end+0xf8002598>
