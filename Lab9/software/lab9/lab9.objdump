
lab9.elf:     file format elf32-littlenios2
lab9.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1000022c

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x00010fc0 memsz 0x00010fc0 flags r-x
    LOAD off    0x00011fe0 vaddr 0x10010fe0 paddr 0x10012b08 align 2**12
         filesz 0x00001b28 memsz 0x00001b28 flags rw-
    LOAD off    0x00014630 vaddr 0x10014630 paddr 0x10014630 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000020c  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00010240  1000022c  1000022c  0000122c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000b74  1001046c  1001046c  0001146c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b28  10010fe0  10012b08  00011fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  10014630  10014630  00014630  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00013b08  2**0
                  CONTENTS
  7 .sdram        00000000  10014790  10014790  00013b08  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00013b08  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000cf0  00000000  00000000  00013b30  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00024181  00000000  00000000  00014820  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00009084  00000000  00000000  000389a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b0a8  00000000  00000000  00041a25  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002260  00000000  00000000  0004cad0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003718  00000000  00000000  0004ed30  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00016da4  00000000  00000000  00052448  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  000691ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001388  00000000  00000000  00069200  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0006d897  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000b  00000000  00000000  0006d89a  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0006d8a5  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0006d8a6  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0006d8a7  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0006d8ab  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0006d8af  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0006d8b3  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0006d8be  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0006d8c9  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  0006d8d4  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000026  00000000  00000000  0006d8df  2**0
                  CONTENTS, READONLY
 30 .jdi          00004234  00000000  00000000  0006d905  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00067a82  00000000  00000000  00071b39  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
1000022c l    d  .text	00000000 .text
1001046c l    d  .rodata	00000000 .rodata
10010fe0 l    d  .rwdata	00000000 .rwdata
10014630 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
10014790 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lab9_bsp//obj/HAL/src/crt0.o
10000264 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
10010d26 l     O .rodata	00000010 zeroes.4181
10010d36 l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
10004128 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
10005cd0 l     F .text	00000008 __fp_lock
10005cd8 l     F .text	00000008 __fp_unlock
10005cec l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
10011424 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
10011868 l     O .rwdata	00000020 lc_ctype_charset
10011848 l     O .rwdata	00000020 lc_message_charset
10011888 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
10010d68 l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
100088e8 l     F .text	000000fc __sprint_r.part.0
10010e9c l     O .rodata	00000010 blanks.4125
10010e8c l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
1000b3ec l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
1000dd14 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1000de3c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
1000de68 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
1000df70 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
1000e06c l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
1000e150 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
1000e334 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
10012af8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
1000e5b8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
1000e708 l     F .text	00000038 alt_dev_reg
10011a68 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
1000e9e4 l     F .text	00000204 altera_avalon_jtag_uart_irq
1000ebe8 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
1000f364 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
1000f7fc l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
1000f954 l     F .text	00000050 alt_get_errno
1000f9a4 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
10014664 g     O .bss	00000004 alt_instruction_exception_handler
100004e8 g     F .text	00000094 subWord
10007f7c g     F .text	00000074 _mprec_log10
10000268 g     F .text	000000bc charToHex
10008068 g     F .text	0000008c __any_on
1000a314 g     F .text	00000054 _isatty_r
10010d74 g     O .rodata	00000028 __mprec_tinytens
1000e27c g     F .text	00000078 alt_main
10001d20 g     F .text	000000b8 _puts_r
10014690 g     O .bss	00000100 alt_irq
1000a368 g     F .text	0000005c _lseek_r
10012b08 g       *ABS*	00000000 __flash_rwdata_start
1000c734 g     F .text	00000084 .hidden __eqdf2
10000d38 g     F .text	000002fc shiftRows
10014790 g       *ABS*	00000000 __alt_heap_start
10001ce4 g     F .text	0000003c printf
1000a590 g     F .text	0000009c _wcrtomb_r
100087e0 g     F .text	0000005c __sseek
10006034 g     F .text	00000010 __sinit
1000a420 g     F .text	00000154 __swbuf_r
10006aac g     F .text	0000007c _setlocale_r
10005e8c g     F .text	00000078 __sfmoreglue
10000324 g     F .text	00000068 charsToHex
1000e314 g     F .text	00000020 __malloc_unlock
10006e2c g     F .text	0000015c memmove
1000601c g     F .text	00000018 _cleanup
100070ac g     F .text	000000a8 _Balloc
1000c7b8 g     F .text	000000e0 .hidden __gtdf2
1000fd94 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
1001046c g     O .rodata	00000100 aes_sbox
1000a2bc g     F .text	00000058 _fstat_r
1001463c g     O .bss	00000004 errno
1000875c g     F .text	00000008 __seofread
10014650 g     O .bss	00000004 alt_argv
1001066c g     O .rodata	00000600 gf_mul
1001aac8 g       *ABS*	00000000 _gp
100118e8 g     O .rwdata	00000180 alt_fd_list
1000fdb4 g     F .text	00000090 alt_find_dev
10001b80 g     F .text	00000138 memcpy
1000071c g     F .text	00000154 keyExpansion
10005ce0 g     F .text	0000000c _cleanup_r
1000db3c g     F .text	000000d0 .hidden __floatsidf
1000f8dc g     F .text	00000078 alt_io_redirect
1000c898 g     F .text	000000e0 .hidden __ltdf2
1001046c g       *ABS*	00000000 __DTOR_END__
10001dd8 g     F .text	00000014 puts
1001002c g     F .text	0000009c alt_exception_cause_generated_bad_addr
10001034 g     F .text	00000068 subBytes
10008694 g     F .text	00000074 __fpclassifyd
10007ed8 g     F .text	000000a4 __ratio
10009e20 g     F .text	00000024 __vfiprintf_internal
1000ede4 g     F .text	0000020c altera_avalon_jtag_uart_read
100013b0 g     F .text	00000014 malloc
10001cb8 g     F .text	0000002c _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
1000b508 g     F .text	00000008 .hidden __udivsi3
1000dfc0 g     F .text	000000ac isatty
10010dc4 g     O .rodata	000000c8 __mprec_tens
10006b28 g     F .text	0000000c __locale_charset
10014638 g     O .bss	00000004 __malloc_top_pad
10012ad8 g     O .rwdata	00000004 __mb_cur_max
10006b58 g     F .text	0000000c _localeconv_r
100074d4 g     F .text	0000003c __i2b
10006498 g     F .text	000004a4 __sfvwrite_r
10001dec g     F .text	00000054 _sbrk_r
1000a3c4 g     F .text	0000005c _read_r
10012af0 g     O .rwdata	00000004 alt_max_fd
10009fcc g     F .text	00000100 _fclose_r
10005ca0 g     F .text	00000030 fflush
10014634 g     O .bss	00000004 __malloc_max_sbrked_mem
1000b518 g     F .text	0000089c .hidden __adddf3
10007c80 g     F .text	0000011c __b2d
1000add0 g     F .text	0000061c .hidden __umoddi3
1000e1a0 g     F .text	000000dc lseek
10012ad0 g     O .rwdata	00000004 _global_impure_ptr
100080f4 g     F .text	000005a0 _realloc_r
10014790 g       *ABS*	00000000 __bss_end
1000f70c g     F .text	000000f0 alt_iic_isr_register
1000fc90 g     F .text	00000104 alt_tick
1000a790 g     F .text	00000640 .hidden __udivdi3
1000a0e0 g     F .text	00000184 _fputwc_r
10010d9c g     O .rodata	00000028 __mprec_bigtens
100072b8 g     F .text	00000104 __s2b
1000dc0c g     F .text	000000a4 .hidden __floatunsidf
10007a28 g     F .text	00000060 __mcmp
10006054 g     F .text	00000018 __fp_lock_all
1000f6c0 g     F .text	0000004c alt_ic_irq_enabled
1000fbf8 g     F .text	00000098 alt_alarm_stop
10014658 g     O .bss	00000004 alt_irq_active
100000fc g     F .exceptions	000000d0 alt_irq_handler
100118c0 g     O .rwdata	00000028 alt_dev_null
1000f348 g     F .text	0000001c alt_dcache_flush_all
100073bc g     F .text	00000068 __hi0bits
1000dab4 g     F .text	00000088 .hidden __fixdfsi
10012b08 g       *ABS*	00000000 __ram_rwdata_end
10012ae8 g     O .rwdata	00000008 alt_dev_list
1000e608 g     F .text	00000100 write
10000468 g     F .text	00000080 rotWord
10010fe0 g       *ABS*	00000000 __ram_rodata_end
1000deb8 g     F .text	000000b8 fstat
1000c898 g     F .text	000000e0 .hidden __ledf2
100077a0 g     F .text	00000140 __pow5mult
100089fc g     F .text	00001424 ___vfiprintf_internal_r
10014648 g     O .bss	00000004 __nlocale_changed
1000b510 g     F .text	00000008 .hidden __umodsi3
10014790 g       *ABS*	00000000 end
1000e920 g     F .text	000000c4 altera_avalon_jtag_uart_init
100001cc g     F .exceptions	00000060 alt_instruction_exception_entry
1001046c g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
1000dcb0 g     F .text	00000064 .hidden __clzsi2
1000eff0 g     F .text	00000218 altera_avalon_jtag_uart_write
10006044 g     F .text	00000004 __sfp_lock_acquire
10006d44 g     F .text	000000e8 memchr
10001ed8 g     F .text	000020fc ___vfprintf_internal_r
100061a8 g     F .text	000002f0 _free_r
100006b8 g     F .text	00000064 storeWord
10006b34 g     F .text	00000010 __locale_mb_cur_max
100102a4 g     F .text	00000194 __call_exitprocs
10014644 g     O .bss	00000004 __mlocale_changed
10012ac8 g     O .rwdata	00000004 __malloc_sbrk_base
1000022c g     F .text	0000003c _start
1001465c g     O .bss	00000004 _alt_tick_rate
100078e0 g     F .text	00000148 __lshift
10014660 g     O .bss	00000004 _alt_nticks
1000e384 g     F .text	00000104 read
1000e774 g     F .text	00000048 alt_sys_init
10010190 g     F .text	00000114 __register_exitproc
10007510 g     F .text	00000290 __multiply
1000ec90 g     F .text	00000068 altera_avalon_jtag_uart_close
10001388 g     F .text	00000028 .hidden __mulsi3
10010fe0 g       *ABS*	00000000 __ram_rwdata_start
1001046c g       *ABS*	00000000 __ram_rodata_start
10014668 g     O .bss	00000028 __malloc_current_mallinfo
10007d9c g     F .text	0000013c __d2b
1000e7bc g     F .text	00000060 altera_avalon_jtag_uart_read_fd
1001056c g     O .rodata	00000100 aes_invsbox
1000ff58 g     F .text	000000d4 alt_get_fd
10009ea0 g     F .text	00000054 _close_r
10010114 g     F .text	0000007c memcmp
1000e87c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10014790 g       *ABS*	00000000 __alt_stack_base
1000e8cc g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10003ff8 g     F .text	00000130 __swsetup_r
1000109c g     F .text	000000ac encrypt
1000bdb4 g     F .text	00000980 .hidden __divdf3
10005f04 g     F .text	00000118 __sfp
10007ff0 g     F .text	00000078 __copybits
1001101c g     O .rwdata	00000408 __malloc_av_
10006050 g     F .text	00000004 __sinit_lock_release
1000c978 g     F .text	0000086c .hidden __muldf3
10008708 g     F .text	00000054 __sread
1000fe44 g     F .text	00000114 alt_find_file
1000f3b4 g     F .text	000000a4 alt_dev_llist_insert
1000e2f4 g     F .text	00000020 __malloc_lock
1000e508 g     F .text	000000b0 sbrk
1000057c g     F .text	000000c4 rCon
10005a78 g     F .text	00000228 _fflush_r
10009ef4 g     F .text	000000d8 _calloc_r
10014630 g       *ABS*	00000000 __bss_start
10006f88 g     F .text	00000124 memset
10001148 g     F .text	00000240 main
10014654 g     O .bss	00000004 alt_envp
10014630 g     O .bss	00000004 __malloc_max_total_mem
1000e81c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
1000a574 g     F .text	0000001c __swbuf
1000883c g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
1000a0cc g     F .text	00000014 fclose
10004350 g     F .text	00001728 _dtoa_r
100013d8 g     F .text	000007a8 _malloc_r
1000a704 g     F .text	00000030 __ascii_wctomb
10012af4 g     O .rwdata	00000004 alt_errno
1000693c g     F .text	000000b8 _fwalk
10000870 g     F .text	000000a0 addRoundKey
1000b458 g     F .text	00000054 .hidden __divsi3
10000910 g     F .text	00000428 mixColumns
10006084 g     F .text	00000124 _malloc_trim_r
1001046c g       *ABS*	00000000 __CTOR_END__
10008844 g     F .text	000000a4 strcmp
1001046c g       *ABS*	00000000 __flash_rodata_start
1001046c g       *ABS*	00000000 __DTOR_LIST__
1000c734 g     F .text	00000084 .hidden __nedf2
1000e740 g     F .text	00000034 alt_irq_init
1000e488 g     F .text	00000080 alt_release_fd
10010eac g     O .rodata	00000100 .hidden __clz_tab
10014640 g     O .bss	00000004 _PathLocale
100100c8 g     F .text	00000014 atexit
10009e44 g     F .text	0000005c _write_r
10006b64 g     F .text	0000001c setlocale
10012ad4 g     O .rwdata	00000004 _impure_ptr
1001464c g     O .bss	00000004 alt_argc
1000f4b4 g     F .text	0000005c _do_dtors
10006b50 g     F .text	00000008 __locale_cjk_lang
100003cc g     F .text	0000009c chartoInt
10000020 g       .exceptions	00000000 alt_irq_entry
10007c20 g     F .text	00000060 __ulp
1000606c g     F .text	00000018 __fp_unlock_all
1000038c g     F .text	00000040 hextoChar
10012ae0 g     O .rwdata	00000008 alt_fs_list
10010fe0 g     O .rwdata	0000003c Rcon
10000020 g       *ABS*	00000000 __ram_exceptions_start
10006b80 g     F .text	0000000c localeconv
1000f52c g     F .text	00000050 alt_ic_isr_register
10012b08 g       *ABS*	00000000 _edata
10014790 g       *ABS*	00000000 _end
1000022c g       *ABS*	00000000 __ram_exceptions_end
1000ecf8 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
1000f61c g     F .text	000000a4 alt_ic_irq_disable
10008764 g     F .text	0000007c __swrite
10012acc g     O .rwdata	00000004 __malloc_trim_threshold
10006b44 g     F .text	0000000c __locale_msgcharset
100100dc g     F .text	00000038 exit
100069f4 g     F .text	000000b8 _fwalk_reent
10007a88 g     F .text	00000198 __mdiff
1000b4ac g     F .text	0000005c .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
10006048 g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
10010438 g     F .text	00000034 _exit
1000f208 g     F .text	00000140 alt_alarm_start
10006b8c g     F .text	000001b8 __smakebuf_r
10001e40 g     F .text	00000098 strlen
1000fa98 g     F .text	00000160 open
1000c7b8 g     F .text	000000e0 .hidden __gedf2
10012adc g     O .rwdata	00000004 __wctomb
100089e4 g     F .text	00000018 __sprint_r
1000f510 g     F .text	0000001c alt_icache_flush_all
10012afc g     O .rwdata	00000004 alt_priority_mask
1000f57c g     F .text	000000a0 alt_ic_irq_enable
10003fd4 g     F .text	00000024 __vfprintf_internal
1000a734 g     F .text	0000005c _wctomb_r
1000d1e4 g     F .text	000008d0 .hidden __subdf3
10007424 g     F .text	000000b0 __lo0bits
10012b00 g     O .rwdata	00000008 alt_alarm_list
1000f458 g     F .text	0000005c _do_ctors
10000640 g     F .text	00000078 XOR
1000a62c g     F .text	000000d8 wcrtomb
1000dd64 g     F .text	000000d8 close
1000e0d0 g     F .text	00000080 alt_load
1000a264 g     F .text	00000058 fputwc
100013c4 g     F .text	00000014 free
1000604c g     F .text	00000004 __sinit_lock_acquire
1000717c g     F .text	0000013c __multadd
10007154 g     F .text	00000028 _Bfree



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08408b14 	ori	at,at,556
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000fc0 	call	100000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
1000008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10000098:	00001cc0 	call	100001cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000fc:	defff904 	addi	sp,sp,-28
10000100:	dfc00615 	stw	ra,24(sp)
10000104:	df000515 	stw	fp,20(sp)
10000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1000010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000110:	0005313a 	rdctl	r2,ipending
10000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000124:	00800044 	movi	r2,1
10000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000012c:	e0fffb17 	ldw	r3,-20(fp)
10000130:	e0bffc17 	ldw	r2,-16(fp)
10000134:	1884703a 	and	r2,r3,r2
10000138:	10001426 	beq	r2,zero,1000018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000013c:	00840074 	movhi	r2,4097
10000140:	1091a404 	addi	r2,r2,18064
10000144:	e0fffd17 	ldw	r3,-12(fp)
10000148:	180690fa 	slli	r3,r3,3
1000014c:	10c5883a 	add	r2,r2,r3
10000150:	10c00017 	ldw	r3,0(r2)
10000154:	00840074 	movhi	r2,4097
10000158:	1091a404 	addi	r2,r2,18064
1000015c:	e13ffd17 	ldw	r4,-12(fp)
10000160:	200890fa 	slli	r4,r4,3
10000164:	1105883a 	add	r2,r2,r4
10000168:	10800104 	addi	r2,r2,4
1000016c:	10800017 	ldw	r2,0(r2)
10000170:	1009883a 	mov	r4,r2
10000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000017c:	0005313a 	rdctl	r2,ipending
10000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000184:	e0bfff17 	ldw	r2,-4(fp)
10000188:	00000706 	br	100001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000018c:	e0bffc17 	ldw	r2,-16(fp)
10000190:	1085883a 	add	r2,r2,r2
10000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000198:	e0bffd17 	ldw	r2,-12(fp)
1000019c:	10800044 	addi	r2,r2,1
100001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a4:	003fe106 	br	1000012c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
100001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
100001ac:	e0bffb17 	ldw	r2,-20(fp)
100001b0:	103fdb1e 	bne	r2,zero,10000120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001b4:	0001883a 	nop
}
100001b8:	e037883a 	mov	sp,fp
100001bc:	dfc00117 	ldw	ra,4(sp)
100001c0:	df000017 	ldw	fp,0(sp)
100001c4:	dec00204 	addi	sp,sp,8
100001c8:	f800283a 	ret

100001cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100001cc:	defffb04 	addi	sp,sp,-20
100001d0:	dfc00415 	stw	ra,16(sp)
100001d4:	df000315 	stw	fp,12(sp)
100001d8:	df000304 	addi	fp,sp,12
100001dc:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
100001e0:	00bfffc4 	movi	r2,-1
100001e4:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
100001e8:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
100001ec:	d0a6e717 	ldw	r2,-25700(gp)
100001f0:	10000726 	beq	r2,zero,10000210 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
100001f4:	d0a6e717 	ldw	r2,-25700(gp)
100001f8:	e0fffd17 	ldw	r3,-12(fp)
100001fc:	1809883a 	mov	r4,r3
10000200:	e17fff17 	ldw	r5,-4(fp)
10000204:	e1bffe17 	ldw	r6,-8(fp)
10000208:	103ee83a 	callr	r2
1000020c:	00000206 	br	10000218 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10000210:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
10000214:	0005883a 	mov	r2,zero
}
10000218:	e037883a 	mov	sp,fp
1000021c:	dfc00117 	ldw	ra,4(sp)
10000220:	df000017 	ldw	fp,0(sp)
10000224:	dec00204 	addi	sp,sp,8
10000228:	f800283a 	ret

Disassembly of section .text:

1000022c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
1000022c:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000230:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000234:	06840074 	movhi	gp,4097
    ori gp, gp, %lo(_gp)
10000238:	d6aab214 	ori	gp,gp,43720
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
1000023c:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
10000240:	10918c14 	ori	r2,r2,17968

    movhi r3, %hi(__bss_end)
10000244:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
10000248:	18d1e414 	ori	r3,r3,18320

    beq r2, r3, 1f
1000024c:	10c00326 	beq	r2,r3,1000025c <_start+0x30>

0:
    stw zero, (r2)
10000250:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000254:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
10000258:	10fffd36 	bltu	r2,r3,10000250 <__alt_data_end+0xf8000250>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
1000025c:	000e0d00 	call	1000e0d0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000260:	000e27c0 	call	1000e27c <alt_main>

10000264 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000264:	003fff06 	br	10000264 <__alt_data_end+0xf8000264>

10000268 <charToHex>:
#define to_sw_sig		(char*)		TO_SW_SIG_BASE
*/


char charToHex(char c)
{
10000268:	defffd04 	addi	sp,sp,-12
1000026c:	df000215 	stw	fp,8(sp)
10000270:	df000204 	addi	fp,sp,8
10000274:	2005883a 	mov	r2,r4
10000278:	e0bfff05 	stb	r2,-4(fp)
	char hex = c;
1000027c:	e0bfff03 	ldbu	r2,-4(fp)
10000280:	e0bffe05 	stb	r2,-8(fp)

	if (hex >= '0' && hex <= '9')
10000284:	e0bffe07 	ldb	r2,-8(fp)
10000288:	10800c10 	cmplti	r2,r2,48
1000028c:	1000071e 	bne	r2,zero,100002ac <charToHex+0x44>
10000290:	e0bffe07 	ldb	r2,-8(fp)
10000294:	10800e88 	cmpgei	r2,r2,58
10000298:	1000041e 	bne	r2,zero,100002ac <charToHex+0x44>
		hex -= '0';
1000029c:	e0bffe03 	ldbu	r2,-8(fp)
100002a0:	10bff404 	addi	r2,r2,-48
100002a4:	e0bffe05 	stb	r2,-8(fp)
100002a8:	00001906 	br	10000310 <charToHex+0xa8>
	else if (hex >= 'A' && hex <='F')
100002ac:	e0bffe07 	ldb	r2,-8(fp)
100002b0:	10801050 	cmplti	r2,r2,65
100002b4:	10000a1e 	bne	r2,zero,100002e0 <charToHex+0x78>
100002b8:	e0bffe07 	ldb	r2,-8(fp)
100002bc:	108011c8 	cmpgei	r2,r2,71
100002c0:	1000071e 	bne	r2,zero,100002e0 <charToHex+0x78>
	{
		hex -= 'A';
100002c4:	e0bffe03 	ldbu	r2,-8(fp)
100002c8:	10bfefc4 	addi	r2,r2,-65
100002cc:	e0bffe05 	stb	r2,-8(fp)
		hex += 10;
100002d0:	e0bffe03 	ldbu	r2,-8(fp)
100002d4:	10800284 	addi	r2,r2,10
100002d8:	e0bffe05 	stb	r2,-8(fp)
100002dc:	00000c06 	br	10000310 <charToHex+0xa8>
	}
	else if (hex >= 'a' && hex <='f')
100002e0:	e0bffe07 	ldb	r2,-8(fp)
100002e4:	10801850 	cmplti	r2,r2,97
100002e8:	1000091e 	bne	r2,zero,10000310 <charToHex+0xa8>
100002ec:	e0bffe07 	ldb	r2,-8(fp)
100002f0:	108019c8 	cmpgei	r2,r2,103
100002f4:	1000061e 	bne	r2,zero,10000310 <charToHex+0xa8>
	{
		hex -= 'a';
100002f8:	e0bffe03 	ldbu	r2,-8(fp)
100002fc:	10bfe7c4 	addi	r2,r2,-97
10000300:	e0bffe05 	stb	r2,-8(fp)
		hex += 10;
10000304:	e0bffe03 	ldbu	r2,-8(fp)
10000308:	10800284 	addi	r2,r2,10
1000030c:	e0bffe05 	stb	r2,-8(fp)
	}
	return hex;
10000310:	e0bffe03 	ldbu	r2,-8(fp)
}
10000314:	e037883a 	mov	sp,fp
10000318:	df000017 	ldw	fp,0(sp)
1000031c:	dec00104 	addi	sp,sp,4
10000320:	f800283a 	ret

10000324 <charsToHex>:

char charsToHex(char c1, char c2)
{
10000324:	defffb04 	addi	sp,sp,-20
10000328:	dfc00415 	stw	ra,16(sp)
1000032c:	df000315 	stw	fp,12(sp)
10000330:	df000304 	addi	fp,sp,12
10000334:	2007883a 	mov	r3,r4
10000338:	2805883a 	mov	r2,r5
1000033c:	e0fffe05 	stb	r3,-8(fp)
10000340:	e0bfff05 	stb	r2,-4(fp)
	char hex1 = charToHex(c1);
10000344:	e0bffe07 	ldb	r2,-8(fp)
10000348:	1009883a 	mov	r4,r2
1000034c:	00002680 	call	10000268 <charToHex>
10000350:	e0bffd05 	stb	r2,-12(fp)
	char hex2 = charToHex(c2);
10000354:	e0bfff07 	ldb	r2,-4(fp)
10000358:	1009883a 	mov	r4,r2
1000035c:	00002680 	call	10000268 <charToHex>
10000360:	e0bffd45 	stb	r2,-11(fp)
	return (hex1 << 4) + hex2;
10000364:	e0bffd03 	ldbu	r2,-12(fp)
10000368:	1004913a 	slli	r2,r2,4
1000036c:	1007883a 	mov	r3,r2
10000370:	e0bffd43 	ldbu	r2,-11(fp)
10000374:	1885883a 	add	r2,r3,r2
}
10000378:	e037883a 	mov	sp,fp
1000037c:	dfc00117 	ldw	ra,4(sp)
10000380:	df000017 	ldw	fp,0(sp)
10000384:	dec00204 	addi	sp,sp,8
10000388:	f800283a 	ret

1000038c <hextoChar>:

void hextoChar(char c) {
1000038c:	defffd04 	addi	sp,sp,-12
10000390:	dfc00215 	stw	ra,8(sp)
10000394:	df000115 	stw	fp,4(sp)
10000398:	df000104 	addi	fp,sp,4
1000039c:	2005883a 	mov	r2,r4
100003a0:	e0bfff05 	stb	r2,-4(fp)
	printf("%x", c);
100003a4:	e0bfff07 	ldb	r2,-4(fp)
100003a8:	01040074 	movhi	r4,4097
100003ac:	21031b04 	addi	r4,r4,3180
100003b0:	100b883a 	mov	r5,r2
100003b4:	0001ce40 	call	10001ce4 <printf>
}
100003b8:	e037883a 	mov	sp,fp
100003bc:	dfc00117 	ldw	ra,4(sp)
100003c0:	df000017 	ldw	fp,0(sp)
100003c4:	dec00204 	addi	sp,sp,8
100003c8:	f800283a 	ret

100003cc <chartoInt>:

// Maybe write char to int and int to char converters?

uint chartoInt(uchar* input){
100003cc:	defff904 	addi	sp,sp,-28
100003d0:	df000615 	stw	fp,24(sp)
100003d4:	df000604 	addi	fp,sp,24
100003d8:	e13fff15 	stw	r4,-4(fp)
	uint temp0 = (uint)input[0];
100003dc:	e0bfff17 	ldw	r2,-4(fp)
100003e0:	10800003 	ldbu	r2,0(r2)
100003e4:	10803fcc 	andi	r2,r2,255
100003e8:	e0bffa15 	stw	r2,-24(fp)
	uint temp1 = (uint)input[1];
100003ec:	e0bfff17 	ldw	r2,-4(fp)
100003f0:	10800044 	addi	r2,r2,1
100003f4:	10800003 	ldbu	r2,0(r2)
100003f8:	10803fcc 	andi	r2,r2,255
100003fc:	e0bffb15 	stw	r2,-20(fp)
	uint temp2 = (uint)input[2];
10000400:	e0bfff17 	ldw	r2,-4(fp)
10000404:	10800084 	addi	r2,r2,2
10000408:	10800003 	ldbu	r2,0(r2)
1000040c:	10803fcc 	andi	r2,r2,255
10000410:	e0bffc15 	stw	r2,-16(fp)
	uint temp3 = (uint)input[3];
10000414:	e0bfff17 	ldw	r2,-4(fp)
10000418:	108000c4 	addi	r2,r2,3
1000041c:	10800003 	ldbu	r2,0(r2)
10000420:	10803fcc 	andi	r2,r2,255
10000424:	e0bffd15 	stw	r2,-12(fp)

	uint output = (temp0 << 24) & (temp1 << 16) & (temp2 << 8) & (temp3);
10000428:	e0bffa17 	ldw	r2,-24(fp)
1000042c:	1006963a 	slli	r3,r2,24
10000430:	e0bffb17 	ldw	r2,-20(fp)
10000434:	1004943a 	slli	r2,r2,16
10000438:	1886703a 	and	r3,r3,r2
1000043c:	e0bffc17 	ldw	r2,-16(fp)
10000440:	1004923a 	slli	r2,r2,8
10000444:	1886703a 	and	r3,r3,r2
10000448:	e0bffd17 	ldw	r2,-12(fp)
1000044c:	1884703a 	and	r2,r3,r2
10000450:	e0bffe15 	stw	r2,-8(fp)
	return output;
10000454:	e0bffe17 	ldw	r2,-8(fp)
}
10000458:	e037883a 	mov	sp,fp
1000045c:	df000017 	ldw	fp,0(sp)
10000460:	dec00104 	addi	sp,sp,4
10000464:	f800283a 	ret

10000468 <rotWord>:

// TODO: AES Encryption related function calls

// Naive implementation, may change later. Other implementations call for a
// a temp array, but then we have to copy that, and that takes time and space...
void rotWord(uchar* input){
10000468:	defffc04 	addi	sp,sp,-16
1000046c:	df000315 	stw	fp,12(sp)
10000470:	df000304 	addi	fp,sp,12
10000474:	e13fff15 	stw	r4,-4(fp)
	uchar temp = input[0];
10000478:	e0bfff17 	ldw	r2,-4(fp)
1000047c:	10800003 	ldbu	r2,0(r2)
10000480:	e0bffe05 	stb	r2,-8(fp)
	int i;
	for(i = 0; i < 3; i++){
10000484:	e03ffd15 	stw	zero,-12(fp)
10000488:	00000c06 	br	100004bc <rotWord+0x54>
		input[i] = input[i+1];
1000048c:	e0bffd17 	ldw	r2,-12(fp)
10000490:	e0ffff17 	ldw	r3,-4(fp)
10000494:	1885883a 	add	r2,r3,r2
10000498:	e0fffd17 	ldw	r3,-12(fp)
1000049c:	18c00044 	addi	r3,r3,1
100004a0:	e13fff17 	ldw	r4,-4(fp)
100004a4:	20c7883a 	add	r3,r4,r3
100004a8:	18c00003 	ldbu	r3,0(r3)
100004ac:	10c00005 	stb	r3,0(r2)
// Naive implementation, may change later. Other implementations call for a
// a temp array, but then we have to copy that, and that takes time and space...
void rotWord(uchar* input){
	uchar temp = input[0];
	int i;
	for(i = 0; i < 3; i++){
100004b0:	e0bffd17 	ldw	r2,-12(fp)
100004b4:	10800044 	addi	r2,r2,1
100004b8:	e0bffd15 	stw	r2,-12(fp)
100004bc:	e0bffd17 	ldw	r2,-12(fp)
100004c0:	108000d0 	cmplti	r2,r2,3
100004c4:	103ff11e 	bne	r2,zero,1000048c <__alt_data_end+0xf800048c>
		input[i] = input[i+1];
	}
	input[3] = temp;
100004c8:	e0bfff17 	ldw	r2,-4(fp)
100004cc:	108000c4 	addi	r2,r2,3
100004d0:	e0fffe03 	ldbu	r3,-8(fp)
100004d4:	10c00005 	stb	r3,0(r2)
}
100004d8:	e037883a 	mov	sp,fp
100004dc:	df000017 	ldw	fp,0(sp)
100004e0:	dec00104 	addi	sp,sp,4
100004e4:	f800283a 	ret

100004e8 <subWord>:

void subWord(uchar* input){
100004e8:	defffc04 	addi	sp,sp,-16
100004ec:	df000315 	stw	fp,12(sp)
100004f0:	df000304 	addi	fp,sp,12
100004f4:	e13fff15 	stw	r4,-4(fp)
	int i;
	for(i = 0; i < 4; i++){
100004f8:	e03ffd15 	stw	zero,-12(fp)
100004fc:	00001806 	br	10000560 <subWord+0x78>
		uchar c = input[i];
10000500:	e0bffd17 	ldw	r2,-12(fp)
10000504:	e0ffff17 	ldw	r3,-4(fp)
10000508:	1885883a 	add	r2,r3,r2
1000050c:	10800003 	ldbu	r2,0(r2)
10000510:	e0bffe05 	stb	r2,-8(fp)
		input[i] = aes_sbox[(c >> 4)& 0x0F][c&0x0F];
10000514:	e0bffd17 	ldw	r2,-12(fp)
10000518:	e0ffff17 	ldw	r3,-4(fp)
1000051c:	1887883a 	add	r3,r3,r2
10000520:	e0bffe03 	ldbu	r2,-8(fp)
10000524:	1004d13a 	srli	r2,r2,4
10000528:	10803fcc 	andi	r2,r2,255
1000052c:	114003cc 	andi	r5,r2,15
10000530:	e0bffe03 	ldbu	r2,-8(fp)
10000534:	110003cc 	andi	r4,r2,15
10000538:	00840074 	movhi	r2,4097
1000053c:	10811b04 	addi	r2,r2,1132
10000540:	280a913a 	slli	r5,r5,4
10000544:	2909883a 	add	r4,r5,r4
10000548:	1105883a 	add	r2,r2,r4
1000054c:	10800003 	ldbu	r2,0(r2)
10000550:	18800005 	stb	r2,0(r3)
	input[3] = temp;
}

void subWord(uchar* input){
	int i;
	for(i = 0; i < 4; i++){
10000554:	e0bffd17 	ldw	r2,-12(fp)
10000558:	10800044 	addi	r2,r2,1
1000055c:	e0bffd15 	stw	r2,-12(fp)
10000560:	e0bffd17 	ldw	r2,-12(fp)
10000564:	10800110 	cmplti	r2,r2,4
10000568:	103fe51e 	bne	r2,zero,10000500 <__alt_data_end+0xf8000500>
		uchar c = input[i];
		input[i] = aes_sbox[(c >> 4)& 0x0F][c&0x0F];
	}
}
1000056c:	e037883a 	mov	sp,fp
10000570:	df000017 	ldw	fp,0(sp)
10000574:	dec00104 	addi	sp,sp,4
10000578:	f800283a 	ret

1000057c <rCon>:

void rCon(uchar* input, int w){
1000057c:	defffa04 	addi	sp,sp,-24
10000580:	df000515 	stw	fp,20(sp)
10000584:	df000504 	addi	fp,sp,20
10000588:	e13ffe15 	stw	r4,-8(fp)
1000058c:	e17fff15 	stw	r5,-4(fp)
	uint value = Rcon[w]; // Double check that this fits the endianness of the computer
10000590:	00840074 	movhi	r2,4097
10000594:	1083f804 	addi	r2,r2,4064
10000598:	e0ffff17 	ldw	r3,-4(fp)
1000059c:	18c7883a 	add	r3,r3,r3
100005a0:	18c7883a 	add	r3,r3,r3
100005a4:	10c5883a 	add	r2,r2,r3
100005a8:	10800017 	ldw	r2,0(r2)
100005ac:	e0bffc15 	stw	r2,-16(fp)
	uchar temp[4];
	int i;
	temp[0] = (uchar)((value >> 24) & 0x000000FF); // This value should be 0x01, 0x02, etc.
100005b0:	e0bffc17 	ldw	r2,-16(fp)
100005b4:	1004d63a 	srli	r2,r2,24
100005b8:	e0bffd05 	stb	r2,-12(fp)
	temp[1] = (uchar)((value >> 16) & 0x000000FF);
100005bc:	e0bffc17 	ldw	r2,-16(fp)
100005c0:	1004d43a 	srli	r2,r2,16
100005c4:	e0bffd45 	stb	r2,-11(fp)
	temp[2] = (uchar)((value >> 8) & 0x000000FF);
100005c8:	e0bffc17 	ldw	r2,-16(fp)
100005cc:	1004d23a 	srli	r2,r2,8
100005d0:	e0bffd85 	stb	r2,-10(fp)
	temp[3] = (uchar)(value & 0x000000FF);
100005d4:	e0bffc17 	ldw	r2,-16(fp)
100005d8:	e0bffdc5 	stb	r2,-9(fp)
	for(i = 0; i < 4; i++){
100005dc:	e03ffb15 	stw	zero,-20(fp)
100005e0:	00001006 	br	10000624 <rCon+0xa8>
		input[i] = input[i] ^ temp[i];
100005e4:	e0bffb17 	ldw	r2,-20(fp)
100005e8:	e0fffe17 	ldw	r3,-8(fp)
100005ec:	1885883a 	add	r2,r3,r2
100005f0:	e0fffb17 	ldw	r3,-20(fp)
100005f4:	e13ffe17 	ldw	r4,-8(fp)
100005f8:	20c7883a 	add	r3,r4,r3
100005fc:	19000003 	ldbu	r4,0(r3)
10000600:	e17ffd04 	addi	r5,fp,-12
10000604:	e0fffb17 	ldw	r3,-20(fp)
10000608:	28c7883a 	add	r3,r5,r3
1000060c:	18c00003 	ldbu	r3,0(r3)
10000610:	20c6f03a 	xor	r3,r4,r3
10000614:	10c00005 	stb	r3,0(r2)
	int i;
	temp[0] = (uchar)((value >> 24) & 0x000000FF); // This value should be 0x01, 0x02, etc.
	temp[1] = (uchar)((value >> 16) & 0x000000FF);
	temp[2] = (uchar)((value >> 8) & 0x000000FF);
	temp[3] = (uchar)(value & 0x000000FF);
	for(i = 0; i < 4; i++){
10000618:	e0bffb17 	ldw	r2,-20(fp)
1000061c:	10800044 	addi	r2,r2,1
10000620:	e0bffb15 	stw	r2,-20(fp)
10000624:	e0bffb17 	ldw	r2,-20(fp)
10000628:	10800110 	cmplti	r2,r2,4
1000062c:	103fed1e 	bne	r2,zero,100005e4 <__alt_data_end+0xf80005e4>
		input[i] = input[i] ^ temp[i];
	}
}
10000630:	e037883a 	mov	sp,fp
10000634:	df000017 	ldw	fp,0(sp)
10000638:	dec00104 	addi	sp,sp,4
1000063c:	f800283a 	ret

10000640 <XOR>:

void XOR(uchar* input1, uchar* input2){
10000640:	defffc04 	addi	sp,sp,-16
10000644:	df000315 	stw	fp,12(sp)
10000648:	df000304 	addi	fp,sp,12
1000064c:	e13ffe15 	stw	r4,-8(fp)
10000650:	e17fff15 	stw	r5,-4(fp)
	int i;
	for(i = 0; i < 4; i++){
10000654:	e03ffd15 	stw	zero,-12(fp)
10000658:	00001006 	br	1000069c <XOR+0x5c>
		input1[i] = input1[i] ^ input2[i];
1000065c:	e0bffd17 	ldw	r2,-12(fp)
10000660:	e0fffe17 	ldw	r3,-8(fp)
10000664:	1885883a 	add	r2,r3,r2
10000668:	e0fffd17 	ldw	r3,-12(fp)
1000066c:	e13ffe17 	ldw	r4,-8(fp)
10000670:	20c7883a 	add	r3,r4,r3
10000674:	19000003 	ldbu	r4,0(r3)
10000678:	e0fffd17 	ldw	r3,-12(fp)
1000067c:	e17fff17 	ldw	r5,-4(fp)
10000680:	28c7883a 	add	r3,r5,r3
10000684:	18c00003 	ldbu	r3,0(r3)
10000688:	20c6f03a 	xor	r3,r4,r3
1000068c:	10c00005 	stb	r3,0(r2)
	}
}

void XOR(uchar* input1, uchar* input2){
	int i;
	for(i = 0; i < 4; i++){
10000690:	e0bffd17 	ldw	r2,-12(fp)
10000694:	10800044 	addi	r2,r2,1
10000698:	e0bffd15 	stw	r2,-12(fp)
1000069c:	e0bffd17 	ldw	r2,-12(fp)
100006a0:	10800110 	cmplti	r2,r2,4
100006a4:	103fed1e 	bne	r2,zero,1000065c <__alt_data_end+0xf800065c>
		input1[i] = input1[i] ^ input2[i];
	}
}
100006a8:	e037883a 	mov	sp,fp
100006ac:	df000017 	ldw	fp,0(sp)
100006b0:	dec00104 	addi	sp,sp,4
100006b4:	f800283a 	ret

100006b8 <storeWord>:

void storeWord(uchar* store, uchar* data){
100006b8:	defffc04 	addi	sp,sp,-16
100006bc:	df000315 	stw	fp,12(sp)
100006c0:	df000304 	addi	fp,sp,12
100006c4:	e13ffe15 	stw	r4,-8(fp)
100006c8:	e17fff15 	stw	r5,-4(fp)
	int i;
	for(i = 0; i < 4; i++){
100006cc:	e03ffd15 	stw	zero,-12(fp)
100006d0:	00000b06 	br	10000700 <storeWord+0x48>
		store[i] = data[i];
100006d4:	e0bffd17 	ldw	r2,-12(fp)
100006d8:	e0fffe17 	ldw	r3,-8(fp)
100006dc:	1885883a 	add	r2,r3,r2
100006e0:	e0fffd17 	ldw	r3,-12(fp)
100006e4:	e13fff17 	ldw	r4,-4(fp)
100006e8:	20c7883a 	add	r3,r4,r3
100006ec:	18c00003 	ldbu	r3,0(r3)
100006f0:	10c00005 	stb	r3,0(r2)
	}
}

void storeWord(uchar* store, uchar* data){
	int i;
	for(i = 0; i < 4; i++){
100006f4:	e0bffd17 	ldw	r2,-12(fp)
100006f8:	10800044 	addi	r2,r2,1
100006fc:	e0bffd15 	stw	r2,-12(fp)
10000700:	e0bffd17 	ldw	r2,-12(fp)
10000704:	10800110 	cmplti	r2,r2,4
10000708:	103ff21e 	bne	r2,zero,100006d4 <__alt_data_end+0xf80006d4>
		store[i] = data[i];
	}
}
1000070c:	e037883a 	mov	sp,fp
10000710:	df000017 	ldw	fp,0(sp)
10000714:	dec00104 	addi	sp,sp,4
10000718:	f800283a 	ret

1000071c <keyExpansion>:

void keyExpansion(uchar* key, uchar* keySchedule){
1000071c:	defff904 	addi	sp,sp,-28
10000720:	dfc00615 	stw	ra,24(sp)
10000724:	df000515 	stw	fp,20(sp)
10000728:	df000504 	addi	fp,sp,20
1000072c:	e13ffe15 	stw	r4,-8(fp)
10000730:	e17fff15 	stw	r5,-4(fp)
	uchar* temp;
	temp = malloc(4*sizeof(uchar));
10000734:	01000104 	movi	r4,4
10000738:	00013b00 	call	100013b0 <malloc>
1000073c:	e0bffd15 	stw	r2,-12(fp)
	// Initialize first key
	int i;
	int w;
	for(i = 0; i <(4*4); i++) {
10000740:	e03ffb15 	stw	zero,-20(fp)
10000744:	00000b06 	br	10000774 <keyExpansion+0x58>
		keySchedule[i] = key[i];
10000748:	e0bffb17 	ldw	r2,-20(fp)
1000074c:	e0ffff17 	ldw	r3,-4(fp)
10000750:	1885883a 	add	r2,r3,r2
10000754:	e0fffb17 	ldw	r3,-20(fp)
10000758:	e13ffe17 	ldw	r4,-8(fp)
1000075c:	20c7883a 	add	r3,r4,r3
10000760:	18c00003 	ldbu	r3,0(r3)
10000764:	10c00005 	stb	r3,0(r2)
	uchar* temp;
	temp = malloc(4*sizeof(uchar));
	// Initialize first key
	int i;
	int w;
	for(i = 0; i <(4*4); i++) {
10000768:	e0bffb17 	ldw	r2,-20(fp)
1000076c:	10800044 	addi	r2,r2,1
10000770:	e0bffb15 	stw	r2,-20(fp)
10000774:	e0bffb17 	ldw	r2,-20(fp)
10000778:	10800410 	cmplti	r2,r2,16
1000077c:	103ff21e 	bne	r2,zero,10000748 <__alt_data_end+0xf8000748>
		keySchedule[i] = key[i];
	}

	for(w = 4; w < 4*4; w++){ // iterates through words
10000780:	00800104 	movi	r2,4
10000784:	e0bffc15 	stw	r2,-16(fp)
10000788:	00002f06 	br	10000848 <keyExpansion+0x12c>
		storeWord(temp, &keySchedule[4*(w-1)]);
1000078c:	e0bffc17 	ldw	r2,-16(fp)
10000790:	10bfffc4 	addi	r2,r2,-1
10000794:	1085883a 	add	r2,r2,r2
10000798:	1085883a 	add	r2,r2,r2
1000079c:	1007883a 	mov	r3,r2
100007a0:	e0bfff17 	ldw	r2,-4(fp)
100007a4:	10c5883a 	add	r2,r2,r3
100007a8:	e13ffd17 	ldw	r4,-12(fp)
100007ac:	100b883a 	mov	r5,r2
100007b0:	00006b80 	call	100006b8 <storeWord>
		if(w%4 == 0){
100007b4:	e0bffc17 	ldw	r2,-16(fp)
100007b8:	108000cc 	andi	r2,r2,3
100007bc:	10000c1e 	bne	r2,zero,100007f0 <keyExpansion+0xd4>
			rotWord(temp);
100007c0:	e13ffd17 	ldw	r4,-12(fp)
100007c4:	00004680 	call	10000468 <rotWord>
			subWord(temp);
100007c8:	e13ffd17 	ldw	r4,-12(fp)
100007cc:	00004e80 	call	100004e8 <subWord>
			rCon(temp, (w/4)-1);
100007d0:	e0bffc17 	ldw	r2,-16(fp)
100007d4:	1000010e 	bge	r2,zero,100007dc <keyExpansion+0xc0>
100007d8:	108000c4 	addi	r2,r2,3
100007dc:	1005d0ba 	srai	r2,r2,2
100007e0:	10bfffc4 	addi	r2,r2,-1
100007e4:	e13ffd17 	ldw	r4,-12(fp)
100007e8:	100b883a 	mov	r5,r2
100007ec:	000057c0 	call	1000057c <rCon>
		}
		XOR(temp, &keySchedule[4*(w-4)]);
100007f0:	e0bffc17 	ldw	r2,-16(fp)
100007f4:	10bfff04 	addi	r2,r2,-4
100007f8:	1085883a 	add	r2,r2,r2
100007fc:	1085883a 	add	r2,r2,r2
10000800:	1007883a 	mov	r3,r2
10000804:	e0bfff17 	ldw	r2,-4(fp)
10000808:	10c5883a 	add	r2,r2,r3
1000080c:	e13ffd17 	ldw	r4,-12(fp)
10000810:	100b883a 	mov	r5,r2
10000814:	00006400 	call	10000640 <XOR>
		storeWord(&keySchedule[4*w], temp);
10000818:	e0bffc17 	ldw	r2,-16(fp)
1000081c:	1085883a 	add	r2,r2,r2
10000820:	1085883a 	add	r2,r2,r2
10000824:	1007883a 	mov	r3,r2
10000828:	e0bfff17 	ldw	r2,-4(fp)
1000082c:	10c5883a 	add	r2,r2,r3
10000830:	1009883a 	mov	r4,r2
10000834:	e17ffd17 	ldw	r5,-12(fp)
10000838:	00006b80 	call	100006b8 <storeWord>
	int w;
	for(i = 0; i <(4*4); i++) {
		keySchedule[i] = key[i];
	}

	for(w = 4; w < 4*4; w++){ // iterates through words
1000083c:	e0bffc17 	ldw	r2,-16(fp)
10000840:	10800044 	addi	r2,r2,1
10000844:	e0bffc15 	stw	r2,-16(fp)
10000848:	e0bffc17 	ldw	r2,-16(fp)
1000084c:	10800410 	cmplti	r2,r2,16
10000850:	103fce1e 	bne	r2,zero,1000078c <__alt_data_end+0xf800078c>
			rCon(temp, (w/4)-1);
		}
		XOR(temp, &keySchedule[4*(w-4)]);
		storeWord(&keySchedule[4*w], temp);
	}
	free(temp);
10000854:	e13ffd17 	ldw	r4,-12(fp)
10000858:	00013c40 	call	100013c4 <free>
}
1000085c:	e037883a 	mov	sp,fp
10000860:	dfc00117 	ldw	ra,4(sp)
10000864:	df000017 	ldw	fp,0(sp)
10000868:	dec00204 	addi	sp,sp,8
1000086c:	f800283a 	ret

10000870 <addRoundKey>:

void addRoundKey(uchar* state, uchar* key_schedule, int round){
10000870:	defffa04 	addi	sp,sp,-24
10000874:	dfc00515 	stw	ra,20(sp)
10000878:	df000415 	stw	fp,16(sp)
1000087c:	df000404 	addi	fp,sp,16
10000880:	e13ffd15 	stw	r4,-12(fp)
10000884:	e17ffe15 	stw	r5,-8(fp)
10000888:	e1bfff15 	stw	r6,-4(fp)
	int w;
	for(w = 0; w < 4; w++){
1000088c:	e03ffc15 	stw	zero,-16(fp)
10000890:	00001706 	br	100008f0 <addRoundKey+0x80>
		XOR(&state[4*w], &key_schedule[4*(w+4*round)]);
10000894:	e0bffc17 	ldw	r2,-16(fp)
10000898:	1085883a 	add	r2,r2,r2
1000089c:	1085883a 	add	r2,r2,r2
100008a0:	1007883a 	mov	r3,r2
100008a4:	e0bffd17 	ldw	r2,-12(fp)
100008a8:	10c7883a 	add	r3,r2,r3
100008ac:	e0bfff17 	ldw	r2,-4(fp)
100008b0:	1085883a 	add	r2,r2,r2
100008b4:	1085883a 	add	r2,r2,r2
100008b8:	1009883a 	mov	r4,r2
100008bc:	e0bffc17 	ldw	r2,-16(fp)
100008c0:	2085883a 	add	r2,r4,r2
100008c4:	1085883a 	add	r2,r2,r2
100008c8:	1085883a 	add	r2,r2,r2
100008cc:	1009883a 	mov	r4,r2
100008d0:	e0bffe17 	ldw	r2,-8(fp)
100008d4:	1105883a 	add	r2,r2,r4
100008d8:	1809883a 	mov	r4,r3
100008dc:	100b883a 	mov	r5,r2
100008e0:	00006400 	call	10000640 <XOR>
	free(temp);
}

void addRoundKey(uchar* state, uchar* key_schedule, int round){
	int w;
	for(w = 0; w < 4; w++){
100008e4:	e0bffc17 	ldw	r2,-16(fp)
100008e8:	10800044 	addi	r2,r2,1
100008ec:	e0bffc15 	stw	r2,-16(fp)
100008f0:	e0bffc17 	ldw	r2,-16(fp)
100008f4:	10800110 	cmplti	r2,r2,4
100008f8:	103fe61e 	bne	r2,zero,10000894 <__alt_data_end+0xf8000894>
		XOR(&state[4*w], &key_schedule[4*(w+4*round)]);
	}
}
100008fc:	e037883a 	mov	sp,fp
10000900:	dfc00117 	ldw	ra,4(sp)
10000904:	df000017 	ldw	fp,0(sp)
10000908:	dec00204 	addi	sp,sp,8
1000090c:	f800283a 	ret

10000910 <mixColumns>:

void mixColumns(uchar* state){
10000910:	defff404 	addi	sp,sp,-48
10000914:	dfc00b15 	stw	ra,44(sp)
10000918:	df000a15 	stw	fp,40(sp)
1000091c:	dc800915 	stw	r18,36(sp)
10000920:	dc400815 	stw	r17,32(sp)
10000924:	dc000715 	stw	r16,28(sp)
10000928:	df000a04 	addi	fp,sp,40
1000092c:	e13ffc15 	stw	r4,-16(fp)

	int i = 0;
10000930:	e03ff615 	stw	zero,-40(fp)
	int j = 0;
10000934:	e03ff715 	stw	zero,-36(fp)

	uchar* temp0;
	temp0 = malloc(4*sizeof(uchar));
10000938:	01000104 	movi	r4,4
1000093c:	00013b00 	call	100013b0 <malloc>
10000940:	e0bff815 	stw	r2,-32(fp)

	uchar* temp1;
	temp1 = malloc(4*sizeof(uchar));
10000944:	01000104 	movi	r4,4
10000948:	00013b00 	call	100013b0 <malloc>
1000094c:	e0bff915 	stw	r2,-28(fp)

	uchar* temp2;
	temp2 = malloc(4*sizeof(uchar));
10000950:	01000104 	movi	r4,4
10000954:	00013b00 	call	100013b0 <malloc>
10000958:	e0bffa15 	stw	r2,-24(fp)

	uchar* temp3;
	temp3 = malloc(4*sizeof(uchar));
1000095c:	01000104 	movi	r4,4
10000960:	00013b00 	call	100013b0 <malloc>
10000964:	e0bffb15 	stw	r2,-20(fp)


	for(j = 0; j < 4; j ++){
10000968:	e03ff715 	stw	zero,-36(fp)
1000096c:	00002906 	br	10000a14 <mixColumns+0x104>
		temp0[j] = state[j];
10000970:	e0bff717 	ldw	r2,-36(fp)
10000974:	e0fff817 	ldw	r3,-32(fp)
10000978:	1885883a 	add	r2,r3,r2
1000097c:	e0fff717 	ldw	r3,-36(fp)
10000980:	e13ffc17 	ldw	r4,-16(fp)
10000984:	20c7883a 	add	r3,r4,r3
10000988:	18c00003 	ldbu	r3,0(r3)
1000098c:	10c00005 	stb	r3,0(r2)
		temp1[j] = state[4+j];
10000990:	e0bff717 	ldw	r2,-36(fp)
10000994:	e0fff917 	ldw	r3,-28(fp)
10000998:	1885883a 	add	r2,r3,r2
1000099c:	e0fff717 	ldw	r3,-36(fp)
100009a0:	18c00104 	addi	r3,r3,4
100009a4:	1809883a 	mov	r4,r3
100009a8:	e0fffc17 	ldw	r3,-16(fp)
100009ac:	1907883a 	add	r3,r3,r4
100009b0:	18c00003 	ldbu	r3,0(r3)
100009b4:	10c00005 	stb	r3,0(r2)
		temp2[j] = state[8+j];
100009b8:	e0bff717 	ldw	r2,-36(fp)
100009bc:	e0fffa17 	ldw	r3,-24(fp)
100009c0:	1885883a 	add	r2,r3,r2
100009c4:	e0fff717 	ldw	r3,-36(fp)
100009c8:	18c00204 	addi	r3,r3,8
100009cc:	1809883a 	mov	r4,r3
100009d0:	e0fffc17 	ldw	r3,-16(fp)
100009d4:	1907883a 	add	r3,r3,r4
100009d8:	18c00003 	ldbu	r3,0(r3)
100009dc:	10c00005 	stb	r3,0(r2)
		temp3[j] = state[12+j];
100009e0:	e0bff717 	ldw	r2,-36(fp)
100009e4:	e0fffb17 	ldw	r3,-20(fp)
100009e8:	1885883a 	add	r2,r3,r2
100009ec:	e0fff717 	ldw	r3,-36(fp)
100009f0:	18c00304 	addi	r3,r3,12
100009f4:	1809883a 	mov	r4,r3
100009f8:	e0fffc17 	ldw	r3,-16(fp)
100009fc:	1907883a 	add	r3,r3,r4
10000a00:	18c00003 	ldbu	r3,0(r3)
10000a04:	10c00005 	stb	r3,0(r2)

	uchar* temp3;
	temp3 = malloc(4*sizeof(uchar));


	for(j = 0; j < 4; j ++){
10000a08:	e0bff717 	ldw	r2,-36(fp)
10000a0c:	10800044 	addi	r2,r2,1
10000a10:	e0bff715 	stw	r2,-36(fp)
10000a14:	e0bff717 	ldw	r2,-36(fp)
10000a18:	10800110 	cmplti	r2,r2,4
10000a1c:	103fd41e 	bne	r2,zero,10000970 <__alt_data_end+0xf8000970>
		temp1[j] = state[4+j];
		temp2[j] = state[8+j];
		temp3[j] = state[12+j];
	}

	for(i = 0; i < 4; i++){
10000a20:	e03ff615 	stw	zero,-40(fp)
10000a24:	0000b106 	br	10000cec <mixColumns+0x3dc>
		state[j] = (gf_mul[temp0[i]][0]) ^ (gf_mul[temp1[i]][1]) ^ temp2[i] ^ temp3[i];
10000a28:	e0bff717 	ldw	r2,-36(fp)
10000a2c:	e0fffc17 	ldw	r3,-16(fp)
10000a30:	18a3883a 	add	r17,r3,r2
10000a34:	e0bff617 	ldw	r2,-40(fp)
10000a38:	e0fff817 	ldw	r3,-32(fp)
10000a3c:	1885883a 	add	r2,r3,r2
10000a40:	10800003 	ldbu	r2,0(r2)
10000a44:	10803fcc 	andi	r2,r2,255
10000a48:	04040074 	movhi	r16,4097
10000a4c:	84019b04 	addi	r16,r16,1644
10000a50:	1009883a 	mov	r4,r2
10000a54:	01400184 	movi	r5,6
10000a58:	00013880 	call	10001388 <__mulsi3>
10000a5c:	8085883a 	add	r2,r16,r2
10000a60:	14800003 	ldbu	r18,0(r2)
10000a64:	e0bff617 	ldw	r2,-40(fp)
10000a68:	e0fff917 	ldw	r3,-28(fp)
10000a6c:	1885883a 	add	r2,r3,r2
10000a70:	10800003 	ldbu	r2,0(r2)
10000a74:	10803fcc 	andi	r2,r2,255
10000a78:	04040074 	movhi	r16,4097
10000a7c:	84019b04 	addi	r16,r16,1644
10000a80:	1009883a 	mov	r4,r2
10000a84:	01400184 	movi	r5,6
10000a88:	00013880 	call	10001388 <__mulsi3>
10000a8c:	8085883a 	add	r2,r16,r2
10000a90:	10800044 	addi	r2,r2,1
10000a94:	10800003 	ldbu	r2,0(r2)
10000a98:	9084f03a 	xor	r2,r18,r2
10000a9c:	1009883a 	mov	r4,r2
10000aa0:	e0bff617 	ldw	r2,-40(fp)
10000aa4:	e0fffa17 	ldw	r3,-24(fp)
10000aa8:	1885883a 	add	r2,r3,r2
10000aac:	10800003 	ldbu	r2,0(r2)
10000ab0:	2084f03a 	xor	r2,r4,r2
10000ab4:	1009883a 	mov	r4,r2
10000ab8:	e0bff617 	ldw	r2,-40(fp)
10000abc:	e0fffb17 	ldw	r3,-20(fp)
10000ac0:	1885883a 	add	r2,r3,r2
10000ac4:	10800003 	ldbu	r2,0(r2)
10000ac8:	2084f03a 	xor	r2,r4,r2
10000acc:	88800005 	stb	r2,0(r17)
		state[4+j] = temp0[i] ^ (gf_mul[temp1[i]][0]) ^ (gf_mul[temp2[i]][1]) ^ temp3[i];
10000ad0:	e0bff717 	ldw	r2,-36(fp)
10000ad4:	10800104 	addi	r2,r2,4
10000ad8:	1007883a 	mov	r3,r2
10000adc:	e0bffc17 	ldw	r2,-16(fp)
10000ae0:	10e3883a 	add	r17,r2,r3
10000ae4:	e0bff617 	ldw	r2,-40(fp)
10000ae8:	e0fff817 	ldw	r3,-32(fp)
10000aec:	1885883a 	add	r2,r3,r2
10000af0:	14800003 	ldbu	r18,0(r2)
10000af4:	e0bff617 	ldw	r2,-40(fp)
10000af8:	e0fff917 	ldw	r3,-28(fp)
10000afc:	1885883a 	add	r2,r3,r2
10000b00:	10800003 	ldbu	r2,0(r2)
10000b04:	10803fcc 	andi	r2,r2,255
10000b08:	04040074 	movhi	r16,4097
10000b0c:	84019b04 	addi	r16,r16,1644
10000b10:	1009883a 	mov	r4,r2
10000b14:	01400184 	movi	r5,6
10000b18:	00013880 	call	10001388 <__mulsi3>
10000b1c:	8085883a 	add	r2,r16,r2
10000b20:	10800003 	ldbu	r2,0(r2)
10000b24:	9084f03a 	xor	r2,r18,r2
10000b28:	1025883a 	mov	r18,r2
10000b2c:	e0bff617 	ldw	r2,-40(fp)
10000b30:	e0fffa17 	ldw	r3,-24(fp)
10000b34:	1885883a 	add	r2,r3,r2
10000b38:	10800003 	ldbu	r2,0(r2)
10000b3c:	10803fcc 	andi	r2,r2,255
10000b40:	04040074 	movhi	r16,4097
10000b44:	84019b04 	addi	r16,r16,1644
10000b48:	1009883a 	mov	r4,r2
10000b4c:	01400184 	movi	r5,6
10000b50:	00013880 	call	10001388 <__mulsi3>
10000b54:	8085883a 	add	r2,r16,r2
10000b58:	10800044 	addi	r2,r2,1
10000b5c:	10800003 	ldbu	r2,0(r2)
10000b60:	9084f03a 	xor	r2,r18,r2
10000b64:	1009883a 	mov	r4,r2
10000b68:	e0bff617 	ldw	r2,-40(fp)
10000b6c:	e0fffb17 	ldw	r3,-20(fp)
10000b70:	1885883a 	add	r2,r3,r2
10000b74:	10800003 	ldbu	r2,0(r2)
10000b78:	2084f03a 	xor	r2,r4,r2
10000b7c:	88800005 	stb	r2,0(r17)
		state[8+j] = temp0[i] ^ temp1[i] ^ (gf_mul[temp2[i]][0]) ^ (gf_mul[temp3[i]][1]);
10000b80:	e0bff717 	ldw	r2,-36(fp)
10000b84:	10800204 	addi	r2,r2,8
10000b88:	1007883a 	mov	r3,r2
10000b8c:	e0bffc17 	ldw	r2,-16(fp)
10000b90:	10e3883a 	add	r17,r2,r3
10000b94:	e0bff617 	ldw	r2,-40(fp)
10000b98:	e0fff817 	ldw	r3,-32(fp)
10000b9c:	1885883a 	add	r2,r3,r2
10000ba0:	10c00003 	ldbu	r3,0(r2)
10000ba4:	e0bff617 	ldw	r2,-40(fp)
10000ba8:	e13ff917 	ldw	r4,-28(fp)
10000bac:	2085883a 	add	r2,r4,r2
10000bb0:	10800003 	ldbu	r2,0(r2)
10000bb4:	1884f03a 	xor	r2,r3,r2
10000bb8:	1025883a 	mov	r18,r2
10000bbc:	e0bff617 	ldw	r2,-40(fp)
10000bc0:	e0fffa17 	ldw	r3,-24(fp)
10000bc4:	1885883a 	add	r2,r3,r2
10000bc8:	10800003 	ldbu	r2,0(r2)
10000bcc:	10803fcc 	andi	r2,r2,255
10000bd0:	04040074 	movhi	r16,4097
10000bd4:	84019b04 	addi	r16,r16,1644
10000bd8:	1009883a 	mov	r4,r2
10000bdc:	01400184 	movi	r5,6
10000be0:	00013880 	call	10001388 <__mulsi3>
10000be4:	8085883a 	add	r2,r16,r2
10000be8:	10800003 	ldbu	r2,0(r2)
10000bec:	9084f03a 	xor	r2,r18,r2
10000bf0:	1025883a 	mov	r18,r2
10000bf4:	e0bff617 	ldw	r2,-40(fp)
10000bf8:	e0fffb17 	ldw	r3,-20(fp)
10000bfc:	1885883a 	add	r2,r3,r2
10000c00:	10800003 	ldbu	r2,0(r2)
10000c04:	10803fcc 	andi	r2,r2,255
10000c08:	04040074 	movhi	r16,4097
10000c0c:	84019b04 	addi	r16,r16,1644
10000c10:	1009883a 	mov	r4,r2
10000c14:	01400184 	movi	r5,6
10000c18:	00013880 	call	10001388 <__mulsi3>
10000c1c:	8085883a 	add	r2,r16,r2
10000c20:	10800044 	addi	r2,r2,1
10000c24:	10800003 	ldbu	r2,0(r2)
10000c28:	9084f03a 	xor	r2,r18,r2
10000c2c:	88800005 	stb	r2,0(r17)
		state[12+j] = (gf_mul[temp0[i]][1]) ^ temp1[i] ^ temp2[i] ^ (gf_mul[temp3[i]][0]);
10000c30:	e0bff717 	ldw	r2,-36(fp)
10000c34:	10800304 	addi	r2,r2,12
10000c38:	1007883a 	mov	r3,r2
10000c3c:	e0bffc17 	ldw	r2,-16(fp)
10000c40:	10e3883a 	add	r17,r2,r3
10000c44:	e0bff617 	ldw	r2,-40(fp)
10000c48:	e0fff817 	ldw	r3,-32(fp)
10000c4c:	1885883a 	add	r2,r3,r2
10000c50:	10800003 	ldbu	r2,0(r2)
10000c54:	10803fcc 	andi	r2,r2,255
10000c58:	04040074 	movhi	r16,4097
10000c5c:	84019b04 	addi	r16,r16,1644
10000c60:	1009883a 	mov	r4,r2
10000c64:	01400184 	movi	r5,6
10000c68:	00013880 	call	10001388 <__mulsi3>
10000c6c:	8085883a 	add	r2,r16,r2
10000c70:	10800044 	addi	r2,r2,1
10000c74:	10c00003 	ldbu	r3,0(r2)
10000c78:	e0bff617 	ldw	r2,-40(fp)
10000c7c:	e13ff917 	ldw	r4,-28(fp)
10000c80:	2085883a 	add	r2,r4,r2
10000c84:	10800003 	ldbu	r2,0(r2)
10000c88:	1884f03a 	xor	r2,r3,r2
10000c8c:	1009883a 	mov	r4,r2
10000c90:	e0bff617 	ldw	r2,-40(fp)
10000c94:	e0fffa17 	ldw	r3,-24(fp)
10000c98:	1885883a 	add	r2,r3,r2
10000c9c:	10800003 	ldbu	r2,0(r2)
10000ca0:	2084f03a 	xor	r2,r4,r2
10000ca4:	1025883a 	mov	r18,r2
10000ca8:	e0bff617 	ldw	r2,-40(fp)
10000cac:	e0fffb17 	ldw	r3,-20(fp)
10000cb0:	1885883a 	add	r2,r3,r2
10000cb4:	10800003 	ldbu	r2,0(r2)
10000cb8:	10803fcc 	andi	r2,r2,255
10000cbc:	04040074 	movhi	r16,4097
10000cc0:	84019b04 	addi	r16,r16,1644
10000cc4:	1009883a 	mov	r4,r2
10000cc8:	01400184 	movi	r5,6
10000ccc:	00013880 	call	10001388 <__mulsi3>
10000cd0:	8085883a 	add	r2,r16,r2
10000cd4:	10800003 	ldbu	r2,0(r2)
10000cd8:	9084f03a 	xor	r2,r18,r2
10000cdc:	88800005 	stb	r2,0(r17)
		temp1[j] = state[4+j];
		temp2[j] = state[8+j];
		temp3[j] = state[12+j];
	}

	for(i = 0; i < 4; i++){
10000ce0:	e0bff617 	ldw	r2,-40(fp)
10000ce4:	10800044 	addi	r2,r2,1
10000ce8:	e0bff615 	stw	r2,-40(fp)
10000cec:	e0bff617 	ldw	r2,-40(fp)
10000cf0:	10800110 	cmplti	r2,r2,4
10000cf4:	103f4c1e 	bne	r2,zero,10000a28 <__alt_data_end+0xf8000a28>
		state[4+j] = temp0[i] ^ (gf_mul[temp1[i]][0]) ^ (gf_mul[temp2[i]][1]) ^ temp3[i];
		state[8+j] = temp0[i] ^ temp1[i] ^ (gf_mul[temp2[i]][0]) ^ (gf_mul[temp3[i]][1]);
		state[12+j] = (gf_mul[temp0[i]][1]) ^ temp1[i] ^ temp2[i] ^ (gf_mul[temp3[i]][0]);
	}

	free(temp0);
10000cf8:	e13ff817 	ldw	r4,-32(fp)
10000cfc:	00013c40 	call	100013c4 <free>
	free(temp1);
10000d00:	e13ff917 	ldw	r4,-28(fp)
10000d04:	00013c40 	call	100013c4 <free>
	free(temp2);
10000d08:	e13ffa17 	ldw	r4,-24(fp)
10000d0c:	00013c40 	call	100013c4 <free>
	free(temp3);
10000d10:	e13ffb17 	ldw	r4,-20(fp)
10000d14:	00013c40 	call	100013c4 <free>

}
10000d18:	e6fffd04 	addi	sp,fp,-12
10000d1c:	dfc00417 	ldw	ra,16(sp)
10000d20:	df000317 	ldw	fp,12(sp)
10000d24:	dc800217 	ldw	r18,8(sp)
10000d28:	dc400117 	ldw	r17,4(sp)
10000d2c:	dc000017 	ldw	r16,0(sp)
10000d30:	dec00504 	addi	sp,sp,20
10000d34:	f800283a 	ret

10000d38 <shiftRows>:



void shiftRows(uchar* state){
10000d38:	defffb04 	addi	sp,sp,-20
10000d3c:	df000415 	stw	fp,16(sp)
10000d40:	df000404 	addi	fp,sp,16
10000d44:	e13fff15 	stw	r4,-4(fp)
	// Storing values for later correction. See below.
	uchar temp[3];
	int i, w;
	for(i = 0; i < 3; i++){
10000d48:	e03ffc15 	stw	zero,-16(fp)
10000d4c:	00000c06 	br	10000d80 <shiftRows+0x48>
		temp[i] = state[i+1];
10000d50:	e0bffc17 	ldw	r2,-16(fp)
10000d54:	10800044 	addi	r2,r2,1
10000d58:	e0ffff17 	ldw	r3,-4(fp)
10000d5c:	1885883a 	add	r2,r3,r2
10000d60:	10c00003 	ldbu	r3,0(r2)
10000d64:	e13ffe04 	addi	r4,fp,-8
10000d68:	e0bffc17 	ldw	r2,-16(fp)
10000d6c:	2085883a 	add	r2,r4,r2
10000d70:	10c00005 	stb	r3,0(r2)

void shiftRows(uchar* state){
	// Storing values for later correction. See below.
	uchar temp[3];
	int i, w;
	for(i = 0; i < 3; i++){
10000d74:	e0bffc17 	ldw	r2,-16(fp)
10000d78:	10800044 	addi	r2,r2,1
10000d7c:	e0bffc15 	stw	r2,-16(fp)
10000d80:	e0bffc17 	ldw	r2,-16(fp)
10000d84:	108000d0 	cmplti	r2,r2,3
10000d88:	103ff11e 	bne	r2,zero,10000d50 <__alt_data_end+0xf8000d50>
		temp[i] = state[i+1];
	}
	for(w = 0; w < 4; w++){
10000d8c:	e03ffd15 	stw	zero,-12(fp)
10000d90:	00009506 	br	10000fe8 <shiftRows+0x2b0>
		for(i = 1; i < 4; i++){
10000d94:	00800044 	movi	r2,1
10000d98:	e0bffc15 	stw	r2,-16(fp)
10000d9c:	00008c06 	br	10000fd0 <shiftRows+0x298>
			// Checking if in row 1,2,3. Row 0 is not worried about
			if((4*w + i) % 4 == 1) {
10000da0:	e0bffd17 	ldw	r2,-12(fp)
10000da4:	1085883a 	add	r2,r2,r2
10000da8:	1085883a 	add	r2,r2,r2
10000dac:	1007883a 	mov	r3,r2
10000db0:	e0bffc17 	ldw	r2,-16(fp)
10000db4:	1887883a 	add	r3,r3,r2
10000db8:	00a00034 	movhi	r2,32768
10000dbc:	108000c4 	addi	r2,r2,3
10000dc0:	1884703a 	and	r2,r3,r2
10000dc4:	1000040e 	bge	r2,zero,10000dd8 <shiftRows+0xa0>
10000dc8:	10bfffc4 	addi	r2,r2,-1
10000dcc:	00ffff04 	movi	r3,-4
10000dd0:	10c4b03a 	or	r2,r2,r3
10000dd4:	10800044 	addi	r2,r2,1
10000dd8:	10800058 	cmpnei	r2,r2,1
10000ddc:	10001e1e 	bne	r2,zero,10000e58 <shiftRows+0x120>
				//The modulus ensures that the column never overflows
				state[4*w+i] = state[4*((w+1)%4) + i];
10000de0:	e0bffd17 	ldw	r2,-12(fp)
10000de4:	1085883a 	add	r2,r2,r2
10000de8:	1085883a 	add	r2,r2,r2
10000dec:	1007883a 	mov	r3,r2
10000df0:	e0bffc17 	ldw	r2,-16(fp)
10000df4:	1885883a 	add	r2,r3,r2
10000df8:	1007883a 	mov	r3,r2
10000dfc:	e0bfff17 	ldw	r2,-4(fp)
10000e00:	10c7883a 	add	r3,r2,r3
10000e04:	e0bffd17 	ldw	r2,-12(fp)
10000e08:	11000044 	addi	r4,r2,1
10000e0c:	00a00034 	movhi	r2,32768
10000e10:	108000c4 	addi	r2,r2,3
10000e14:	2084703a 	and	r2,r4,r2
10000e18:	1000040e 	bge	r2,zero,10000e2c <shiftRows+0xf4>
10000e1c:	10bfffc4 	addi	r2,r2,-1
10000e20:	013fff04 	movi	r4,-4
10000e24:	1104b03a 	or	r2,r2,r4
10000e28:	10800044 	addi	r2,r2,1
10000e2c:	1085883a 	add	r2,r2,r2
10000e30:	1085883a 	add	r2,r2,r2
10000e34:	1009883a 	mov	r4,r2
10000e38:	e0bffc17 	ldw	r2,-16(fp)
10000e3c:	2085883a 	add	r2,r4,r2
10000e40:	1009883a 	mov	r4,r2
10000e44:	e0bfff17 	ldw	r2,-4(fp)
10000e48:	1105883a 	add	r2,r2,r4
10000e4c:	10800003 	ldbu	r2,0(r2)
10000e50:	18800005 	stb	r2,0(r3)
10000e54:	00005b06 	br	10000fc4 <shiftRows+0x28c>
			}
			else if((4*w+i) % 4 == 2){
10000e58:	e0bffd17 	ldw	r2,-12(fp)
10000e5c:	1085883a 	add	r2,r2,r2
10000e60:	1085883a 	add	r2,r2,r2
10000e64:	1007883a 	mov	r3,r2
10000e68:	e0bffc17 	ldw	r2,-16(fp)
10000e6c:	1887883a 	add	r3,r3,r2
10000e70:	00a00034 	movhi	r2,32768
10000e74:	108000c4 	addi	r2,r2,3
10000e78:	1884703a 	and	r2,r3,r2
10000e7c:	1000040e 	bge	r2,zero,10000e90 <shiftRows+0x158>
10000e80:	10bfffc4 	addi	r2,r2,-1
10000e84:	00ffff04 	movi	r3,-4
10000e88:	10c4b03a 	or	r2,r2,r3
10000e8c:	10800044 	addi	r2,r2,1
10000e90:	10800098 	cmpnei	r2,r2,2
10000e94:	10001e1e 	bne	r2,zero,10000f10 <shiftRows+0x1d8>
				// We use w+2 here since we are shifting by two columns now
				state[4*w+i] = state[4*((w+2)%4) + i];
10000e98:	e0bffd17 	ldw	r2,-12(fp)
10000e9c:	1085883a 	add	r2,r2,r2
10000ea0:	1085883a 	add	r2,r2,r2
10000ea4:	1007883a 	mov	r3,r2
10000ea8:	e0bffc17 	ldw	r2,-16(fp)
10000eac:	1885883a 	add	r2,r3,r2
10000eb0:	1007883a 	mov	r3,r2
10000eb4:	e0bfff17 	ldw	r2,-4(fp)
10000eb8:	10c7883a 	add	r3,r2,r3
10000ebc:	e0bffd17 	ldw	r2,-12(fp)
10000ec0:	11000084 	addi	r4,r2,2
10000ec4:	00a00034 	movhi	r2,32768
10000ec8:	108000c4 	addi	r2,r2,3
10000ecc:	2084703a 	and	r2,r4,r2
10000ed0:	1000040e 	bge	r2,zero,10000ee4 <shiftRows+0x1ac>
10000ed4:	10bfffc4 	addi	r2,r2,-1
10000ed8:	013fff04 	movi	r4,-4
10000edc:	1104b03a 	or	r2,r2,r4
10000ee0:	10800044 	addi	r2,r2,1
10000ee4:	1085883a 	add	r2,r2,r2
10000ee8:	1085883a 	add	r2,r2,r2
10000eec:	1009883a 	mov	r4,r2
10000ef0:	e0bffc17 	ldw	r2,-16(fp)
10000ef4:	2085883a 	add	r2,r4,r2
10000ef8:	1009883a 	mov	r4,r2
10000efc:	e0bfff17 	ldw	r2,-4(fp)
10000f00:	1105883a 	add	r2,r2,r4
10000f04:	10800003 	ldbu	r2,0(r2)
10000f08:	18800005 	stb	r2,0(r3)
10000f0c:	00002d06 	br	10000fc4 <shiftRows+0x28c>
			}
			else if((4*w+i) % 4 == 3) {
10000f10:	e0bffd17 	ldw	r2,-12(fp)
10000f14:	1085883a 	add	r2,r2,r2
10000f18:	1085883a 	add	r2,r2,r2
10000f1c:	1007883a 	mov	r3,r2
10000f20:	e0bffc17 	ldw	r2,-16(fp)
10000f24:	1887883a 	add	r3,r3,r2
10000f28:	00a00034 	movhi	r2,32768
10000f2c:	108000c4 	addi	r2,r2,3
10000f30:	1884703a 	and	r2,r3,r2
10000f34:	1000040e 	bge	r2,zero,10000f48 <shiftRows+0x210>
10000f38:	10bfffc4 	addi	r2,r2,-1
10000f3c:	00ffff04 	movi	r3,-4
10000f40:	10c4b03a 	or	r2,r2,r3
10000f44:	10800044 	addi	r2,r2,1
10000f48:	108000d8 	cmpnei	r2,r2,3
10000f4c:	10001d1e 	bne	r2,zero,10000fc4 <shiftRows+0x28c>
				// Now shifting by three columns
				state[4*w+i] = state[4*((w+3)%4) + i];
10000f50:	e0bffd17 	ldw	r2,-12(fp)
10000f54:	1085883a 	add	r2,r2,r2
10000f58:	1085883a 	add	r2,r2,r2
10000f5c:	1007883a 	mov	r3,r2
10000f60:	e0bffc17 	ldw	r2,-16(fp)
10000f64:	1885883a 	add	r2,r3,r2
10000f68:	1007883a 	mov	r3,r2
10000f6c:	e0bfff17 	ldw	r2,-4(fp)
10000f70:	10c7883a 	add	r3,r2,r3
10000f74:	e0bffd17 	ldw	r2,-12(fp)
10000f78:	110000c4 	addi	r4,r2,3
10000f7c:	00a00034 	movhi	r2,32768
10000f80:	108000c4 	addi	r2,r2,3
10000f84:	2084703a 	and	r2,r4,r2
10000f88:	1000040e 	bge	r2,zero,10000f9c <shiftRows+0x264>
10000f8c:	10bfffc4 	addi	r2,r2,-1
10000f90:	013fff04 	movi	r4,-4
10000f94:	1104b03a 	or	r2,r2,r4
10000f98:	10800044 	addi	r2,r2,1
10000f9c:	1085883a 	add	r2,r2,r2
10000fa0:	1085883a 	add	r2,r2,r2
10000fa4:	1009883a 	mov	r4,r2
10000fa8:	e0bffc17 	ldw	r2,-16(fp)
10000fac:	2085883a 	add	r2,r4,r2
10000fb0:	1009883a 	mov	r4,r2
10000fb4:	e0bfff17 	ldw	r2,-4(fp)
10000fb8:	1105883a 	add	r2,r2,r4
10000fbc:	10800003 	ldbu	r2,0(r2)
10000fc0:	18800005 	stb	r2,0(r3)
	int i, w;
	for(i = 0; i < 3; i++){
		temp[i] = state[i+1];
	}
	for(w = 0; w < 4; w++){
		for(i = 1; i < 4; i++){
10000fc4:	e0bffc17 	ldw	r2,-16(fp)
10000fc8:	10800044 	addi	r2,r2,1
10000fcc:	e0bffc15 	stw	r2,-16(fp)
10000fd0:	e0bffc17 	ldw	r2,-16(fp)
10000fd4:	10800110 	cmplti	r2,r2,4
10000fd8:	103f711e 	bne	r2,zero,10000da0 <__alt_data_end+0xf8000da0>
	uchar temp[3];
	int i, w;
	for(i = 0; i < 3; i++){
		temp[i] = state[i+1];
	}
	for(w = 0; w < 4; w++){
10000fdc:	e0bffd17 	ldw	r2,-12(fp)
10000fe0:	10800044 	addi	r2,r2,1
10000fe4:	e0bffd15 	stw	r2,-12(fp)
10000fe8:	e0bffd17 	ldw	r2,-12(fp)
10000fec:	10800110 	cmplti	r2,r2,4
10000ff0:	103f681e 	bne	r2,zero,10000d94 <__alt_data_end+0xf8000d94>
	// These states will be incorrectly set by the above function
	// because when we set state[13] = state[0], state[0] has already changed
	// its value to state[5]. Therefore we store the original value of state[0]
	// and fix those errors here. We can also just make temp arrays for all
	// of these, but again, more space and time.
	state[13] = temp[0];
10000ff4:	e0bfff17 	ldw	r2,-4(fp)
10000ff8:	10800344 	addi	r2,r2,13
10000ffc:	e0fffe03 	ldbu	r3,-8(fp)
10001000:	10c00005 	stb	r3,0(r2)
	state[10] = temp[1];
10001004:	e0bfff17 	ldw	r2,-4(fp)
10001008:	10800284 	addi	r2,r2,10
1000100c:	e0fffe43 	ldbu	r3,-7(fp)
10001010:	10c00005 	stb	r3,0(r2)
	state[7] = temp[2];
10001014:	e0bfff17 	ldw	r2,-4(fp)
10001018:	108001c4 	addi	r2,r2,7
1000101c:	e0fffe83 	ldbu	r3,-6(fp)
10001020:	10c00005 	stb	r3,0(r2)
}
10001024:	e037883a 	mov	sp,fp
10001028:	df000017 	ldw	fp,0(sp)
1000102c:	dec00104 	addi	sp,sp,4
10001030:	f800283a 	ret

10001034 <subBytes>:

void subBytes(uchar* state){
10001034:	defffc04 	addi	sp,sp,-16
10001038:	dfc00315 	stw	ra,12(sp)
1000103c:	df000215 	stw	fp,8(sp)
10001040:	df000204 	addi	fp,sp,8
10001044:	e13fff15 	stw	r4,-4(fp)
	int w;
	for(w = 0; w < 4; w++){
10001048:	e03ffe15 	stw	zero,-8(fp)
1000104c:	00000b06 	br	1000107c <subBytes+0x48>
		subWord(&state[4*w]);
10001050:	e0bffe17 	ldw	r2,-8(fp)
10001054:	1085883a 	add	r2,r2,r2
10001058:	1085883a 	add	r2,r2,r2
1000105c:	1007883a 	mov	r3,r2
10001060:	e0bfff17 	ldw	r2,-4(fp)
10001064:	10c5883a 	add	r2,r2,r3
10001068:	1009883a 	mov	r4,r2
1000106c:	00004e80 	call	100004e8 <subWord>
	state[7] = temp[2];
}

void subBytes(uchar* state){
	int w;
	for(w = 0; w < 4; w++){
10001070:	e0bffe17 	ldw	r2,-8(fp)
10001074:	10800044 	addi	r2,r2,1
10001078:	e0bffe15 	stw	r2,-8(fp)
1000107c:	e0bffe17 	ldw	r2,-8(fp)
10001080:	10800110 	cmplti	r2,r2,4
10001084:	103ff21e 	bne	r2,zero,10001050 <__alt_data_end+0xf8001050>
		subWord(&state[4*w]);
	}
}
10001088:	e037883a 	mov	sp,fp
1000108c:	dfc00117 	ldw	ra,4(sp)
10001090:	df000017 	ldw	fp,0(sp)
10001094:	dec00204 	addi	sp,sp,8
10001098:	f800283a 	ret

1000109c <encrypt>:

void encrypt(uchar* state, uchar* key_schedule){
1000109c:	defffb04 	addi	sp,sp,-20
100010a0:	dfc00415 	stw	ra,16(sp)
100010a4:	df000315 	stw	fp,12(sp)
100010a8:	df000304 	addi	fp,sp,12
100010ac:	e13ffe15 	stw	r4,-8(fp)
100010b0:	e17fff15 	stw	r5,-4(fp)
	int round = 0;
100010b4:	e03ffd15 	stw	zero,-12(fp)
	addRoundKey(state, key_schedule, round);
100010b8:	e13ffe17 	ldw	r4,-8(fp)
100010bc:	e17fff17 	ldw	r5,-4(fp)
100010c0:	e1bffd17 	ldw	r6,-12(fp)
100010c4:	00008700 	call	10000870 <addRoundKey>
	for(round = 1; round < 10; round++) {
100010c8:	00800044 	movi	r2,1
100010cc:	e0bffd15 	stw	r2,-12(fp)
100010d0:	00000d06 	br	10001108 <encrypt+0x6c>
		subBytes(state);
100010d4:	e13ffe17 	ldw	r4,-8(fp)
100010d8:	00010340 	call	10001034 <subBytes>
		shiftRows(state);
100010dc:	e13ffe17 	ldw	r4,-8(fp)
100010e0:	0000d380 	call	10000d38 <shiftRows>
		mixColumns(state);
100010e4:	e13ffe17 	ldw	r4,-8(fp)
100010e8:	00009100 	call	10000910 <mixColumns>
		addRoundKey(state, key_schedule, round);
100010ec:	e13ffe17 	ldw	r4,-8(fp)
100010f0:	e17fff17 	ldw	r5,-4(fp)
100010f4:	e1bffd17 	ldw	r6,-12(fp)
100010f8:	00008700 	call	10000870 <addRoundKey>
}

void encrypt(uchar* state, uchar* key_schedule){
	int round = 0;
	addRoundKey(state, key_schedule, round);
	for(round = 1; round < 10; round++) {
100010fc:	e0bffd17 	ldw	r2,-12(fp)
10001100:	10800044 	addi	r2,r2,1
10001104:	e0bffd15 	stw	r2,-12(fp)
10001108:	e0bffd17 	ldw	r2,-12(fp)
1000110c:	10800290 	cmplti	r2,r2,10
10001110:	103ff01e 	bne	r2,zero,100010d4 <__alt_data_end+0xf80010d4>
		subBytes(state);
		shiftRows(state);
		mixColumns(state);
		addRoundKey(state, key_schedule, round);
	}
	subBytes(state);
10001114:	e13ffe17 	ldw	r4,-8(fp)
10001118:	00010340 	call	10001034 <subBytes>
	shiftRows(state);
1000111c:	e13ffe17 	ldw	r4,-8(fp)
10001120:	0000d380 	call	10000d38 <shiftRows>
	addRoundKey(state, key_schedule, round);
10001124:	e13ffe17 	ldw	r4,-8(fp)
10001128:	e17fff17 	ldw	r5,-4(fp)
1000112c:	e1bffd17 	ldw	r6,-12(fp)
10001130:	00008700 	call	10000870 <addRoundKey>
}
10001134:	e037883a 	mov	sp,fp
10001138:	dfc00117 	ldw	ra,4(sp)
1000113c:	df000017 	ldw	fp,0(sp)
10001140:	dec00204 	addi	sp,sp,8
10001144:	f800283a 	ret

10001148 <main>:

	return 0;
}
*/

int main(){
10001148:	deffb704 	addi	sp,sp,-292
1000114c:	dfc04815 	stw	ra,288(sp)
10001150:	df004715 	stw	fp,284(sp)
10001154:	dc004615 	stw	r16,280(sp)
10001158:	df004704 	addi	fp,sp,284
	int i;
	unsigned char plaintext[33] = "ece298dcece298dcece298dcece298dc";
1000115c:	008c9974 	movhi	r2,12901
10001160:	1098d944 	addi	r2,r2,25445
10001164:	e0bfba15 	stw	r2,-280(fp)
10001168:	0098d934 	movhi	r2,25444
1000116c:	108e0e44 	addi	r2,r2,14393
10001170:	e0bfbb15 	stw	r2,-276(fp)
10001174:	008c9974 	movhi	r2,12901
10001178:	1098d944 	addi	r2,r2,25445
1000117c:	e0bfbc15 	stw	r2,-272(fp)
10001180:	0098d934 	movhi	r2,25444
10001184:	108e0e44 	addi	r2,r2,14393
10001188:	e0bfbd15 	stw	r2,-268(fp)
1000118c:	008c9974 	movhi	r2,12901
10001190:	1098d944 	addi	r2,r2,25445
10001194:	e0bfbe15 	stw	r2,-264(fp)
10001198:	0098d934 	movhi	r2,25444
1000119c:	108e0e44 	addi	r2,r2,14393
100011a0:	e0bfbf15 	stw	r2,-260(fp)
100011a4:	008c9974 	movhi	r2,12901
100011a8:	1098d944 	addi	r2,r2,25445
100011ac:	e0bfc015 	stw	r2,-256(fp)
100011b0:	0098d934 	movhi	r2,25444
100011b4:	108e0e44 	addi	r2,r2,14393
100011b8:	e0bfc115 	stw	r2,-252(fp)
100011bc:	e03fc205 	stb	zero,-248(fp)
	unsigned char key[33] = "000102030405060708090a0b0c0d0e0f";
100011c0:	00840074 	movhi	r2,4097
100011c4:	10832f04 	addi	r2,r2,3260
100011c8:	e0ffc244 	addi	r3,fp,-247
100011cc:	100b883a 	mov	r5,r2
100011d0:	00800844 	movi	r2,33
100011d4:	1809883a 	mov	r4,r3
100011d8:	100d883a 	mov	r6,r2
100011dc:	0001b800 	call	10001b80 <memcpy>
		printf("\nEnter key:\n");
		scanf ("%s", key);
		printf ("\n");
        */

		for(i = 0; i < 32; i++){
100011e0:	e03fb915 	stw	zero,-284(fp)
100011e4:	00003a06 	br	100012d0 <main+0x188>
			if(i%2 == 0){
100011e8:	e0bfb917 	ldw	r2,-284(fp)
100011ec:	1080004c 	andi	r2,r2,1
100011f0:	1000341e 	bne	r2,zero,100012c4 <main+0x17c>
				encryptedMsg[i/2] = charsToHex(plaintext[i], plaintext[i+1]);
100011f4:	e0bfb917 	ldw	r2,-284(fp)
100011f8:	1006d7fa 	srli	r3,r2,31
100011fc:	1885883a 	add	r2,r3,r2
10001200:	1005d07a 	srai	r2,r2,1
10001204:	1021883a 	mov	r16,r2
10001208:	e0ffba04 	addi	r3,fp,-280
1000120c:	e0bfb917 	ldw	r2,-284(fp)
10001210:	1885883a 	add	r2,r3,r2
10001214:	10800003 	ldbu	r2,0(r2)
10001218:	11003fcc 	andi	r4,r2,255
1000121c:	2100201c 	xori	r4,r4,128
10001220:	213fe004 	addi	r4,r4,-128
10001224:	e0bfb917 	ldw	r2,-284(fp)
10001228:	10800044 	addi	r2,r2,1
1000122c:	e0ffba04 	addi	r3,fp,-280
10001230:	1885883a 	add	r2,r3,r2
10001234:	10800003 	ldbu	r2,0(r2)
10001238:	10803fcc 	andi	r2,r2,255
1000123c:	1080201c 	xori	r2,r2,128
10001240:	10bfe004 	addi	r2,r2,-128
10001244:	100b883a 	mov	r5,r2
10001248:	00003240 	call	10000324 <charsToHex>
1000124c:	1007883a 	mov	r3,r2
10001250:	e0bfca84 	addi	r2,fp,-214
10001254:	1405883a 	add	r2,r2,r16
10001258:	10c00005 	stb	r3,0(r2)
				key_hex[i/2] = charsToHex(key[i], key[i+1]);
1000125c:	e0bfb917 	ldw	r2,-284(fp)
10001260:	1006d7fa 	srli	r3,r2,31
10001264:	1885883a 	add	r2,r3,r2
10001268:	1005d07a 	srai	r2,r2,1
1000126c:	1021883a 	mov	r16,r2
10001270:	e0ffc244 	addi	r3,fp,-247
10001274:	e0bfb917 	ldw	r2,-284(fp)
10001278:	1885883a 	add	r2,r3,r2
1000127c:	10800003 	ldbu	r2,0(r2)
10001280:	11003fcc 	andi	r4,r2,255
10001284:	2100201c 	xori	r4,r4,128
10001288:	213fe004 	addi	r4,r4,-128
1000128c:	e0bfb917 	ldw	r2,-284(fp)
10001290:	10800044 	addi	r2,r2,1
10001294:	e0ffc244 	addi	r3,fp,-247
10001298:	1885883a 	add	r2,r3,r2
1000129c:	10800003 	ldbu	r2,0(r2)
100012a0:	10803fcc 	andi	r2,r2,255
100012a4:	1080201c 	xori	r2,r2,128
100012a8:	10bfe004 	addi	r2,r2,-128
100012ac:	100b883a 	mov	r5,r2
100012b0:	00003240 	call	10000324 <charsToHex>
100012b4:	1007883a 	mov	r3,r2
100012b8:	e0bfce84 	addi	r2,fp,-198
100012bc:	1405883a 	add	r2,r2,r16
100012c0:	10c00005 	stb	r3,0(r2)
		printf("\nEnter key:\n");
		scanf ("%s", key);
		printf ("\n");
        */

		for(i = 0; i < 32; i++){
100012c4:	e0bfb917 	ldw	r2,-284(fp)
100012c8:	10800044 	addi	r2,r2,1
100012cc:	e0bfb915 	stw	r2,-284(fp)
100012d0:	e0bfb917 	ldw	r2,-284(fp)
100012d4:	10800810 	cmplti	r2,r2,32
100012d8:	103fc31e 	bne	r2,zero,100011e8 <__alt_data_end+0xf80011e8>
				encryptedMsg[i/2] = charsToHex(plaintext[i], plaintext[i+1]);
				key_hex[i/2] = charsToHex(key[i], key[i+1]);
			}
		}

		keyExpansion(key_hex, key_schedule);
100012dc:	e0ffce84 	addi	r3,fp,-198
100012e0:	e0bfd284 	addi	r2,fp,-182
100012e4:	1809883a 	mov	r4,r3
100012e8:	100b883a 	mov	r5,r2
100012ec:	000071c0 	call	1000071c <keyExpansion>
		encrypt(encryptedMsg, key_schedule);
100012f0:	e0ffca84 	addi	r3,fp,-214
100012f4:	e0bfd284 	addi	r2,fp,-182
100012f8:	1809883a 	mov	r4,r3
100012fc:	100b883a 	mov	r5,r2
10001300:	000109c0 	call	1000109c <encrypt>

		printf("\nEncrypted message is\n");
10001304:	01040074 	movhi	r4,4097
10001308:	21031c04 	addi	r4,r4,3184
1000130c:	0001dd80 	call	10001dd8 <puts>
        for(i = 0; i < 16; i++) {
10001310:	e03fb915 	stw	zero,-284(fp)
10001314:	00000c06 	br	10001348 <main+0x200>
            printf("%x", encryptedMsg[i]);
10001318:	e0ffca84 	addi	r3,fp,-214
1000131c:	e0bfb917 	ldw	r2,-284(fp)
10001320:	1885883a 	add	r2,r3,r2
10001324:	10800003 	ldbu	r2,0(r2)
10001328:	10803fcc 	andi	r2,r2,255
1000132c:	01040074 	movhi	r4,4097
10001330:	21031b04 	addi	r4,r4,3180
10001334:	100b883a 	mov	r5,r2
10001338:	0001ce40 	call	10001ce4 <printf>

		keyExpansion(key_hex, key_schedule);
		encrypt(encryptedMsg, key_schedule);

		printf("\nEncrypted message is\n");
        for(i = 0; i < 16; i++) {
1000133c:	e0bfb917 	ldw	r2,-284(fp)
10001340:	10800044 	addi	r2,r2,1
10001344:	e0bfb915 	stw	r2,-284(fp)
10001348:	e0bfb917 	ldw	r2,-284(fp)
1000134c:	10800410 	cmplti	r2,r2,16
10001350:	103ff11e 	bne	r2,zero,10001318 <__alt_data_end+0xf8001318>
            printf("%x", encryptedMsg[i]);
        }


		printf("\nTransmitting message...\n");
10001354:	01040074 	movhi	r4,4097
10001358:	21032204 	addi	r4,r4,3208
1000135c:	0001dd80 	call	10001dd8 <puts>



		printf("\nTransmitting key...\n");
10001360:	01040074 	movhi	r4,4097
10001364:	21032904 	addi	r4,r4,3236
10001368:	0001dd80 	call	10001dd8 <puts>



	return 0;
1000136c:	0005883a 	mov	r2,zero
}
10001370:	e6ffff04 	addi	sp,fp,-4
10001374:	dfc00217 	ldw	ra,8(sp)
10001378:	df000117 	ldw	fp,4(sp)
1000137c:	dc000017 	ldw	r16,0(sp)
10001380:	dec00304 	addi	sp,sp,12
10001384:	f800283a 	ret

10001388 <__mulsi3>:
10001388:	0005883a 	mov	r2,zero
1000138c:	20000726 	beq	r4,zero,100013ac <__mulsi3+0x24>
10001390:	20c0004c 	andi	r3,r4,1
10001394:	2008d07a 	srli	r4,r4,1
10001398:	18000126 	beq	r3,zero,100013a0 <__mulsi3+0x18>
1000139c:	1145883a 	add	r2,r2,r5
100013a0:	294b883a 	add	r5,r5,r5
100013a4:	203ffa1e 	bne	r4,zero,10001390 <__alt_data_end+0xf8001390>
100013a8:	f800283a 	ret
100013ac:	f800283a 	ret

100013b0 <malloc>:
100013b0:	00840074 	movhi	r2,4097
100013b4:	108ab504 	addi	r2,r2,10964
100013b8:	200b883a 	mov	r5,r4
100013bc:	11000017 	ldw	r4,0(r2)
100013c0:	00013d81 	jmpi	100013d8 <_malloc_r>

100013c4 <free>:
100013c4:	00840074 	movhi	r2,4097
100013c8:	108ab504 	addi	r2,r2,10964
100013cc:	200b883a 	mov	r5,r4
100013d0:	11000017 	ldw	r4,0(r2)
100013d4:	00061a81 	jmpi	100061a8 <_free_r>

100013d8 <_malloc_r>:
100013d8:	defff504 	addi	sp,sp,-44
100013dc:	dc800315 	stw	r18,12(sp)
100013e0:	dfc00a15 	stw	ra,40(sp)
100013e4:	df000915 	stw	fp,36(sp)
100013e8:	ddc00815 	stw	r23,32(sp)
100013ec:	dd800715 	stw	r22,28(sp)
100013f0:	dd400615 	stw	r21,24(sp)
100013f4:	dd000515 	stw	r20,20(sp)
100013f8:	dcc00415 	stw	r19,16(sp)
100013fc:	dc400215 	stw	r17,8(sp)
10001400:	dc000115 	stw	r16,4(sp)
10001404:	288002c4 	addi	r2,r5,11
10001408:	00c00584 	movi	r3,22
1000140c:	2025883a 	mov	r18,r4
10001410:	18802a2e 	bgeu	r3,r2,100014bc <_malloc_r+0xe4>
10001414:	047ffe04 	movi	r17,-8
10001418:	1462703a 	and	r17,r2,r17
1000141c:	88009e16 	blt	r17,zero,10001698 <_malloc_r+0x2c0>
10001420:	89409d36 	bltu	r17,r5,10001698 <_malloc_r+0x2c0>
10001424:	000e2f40 	call	1000e2f4 <__malloc_lock>
10001428:	00807dc4 	movi	r2,503
1000142c:	14402736 	bltu	r2,r17,100014cc <_malloc_r+0xf4>
10001430:	8806d0fa 	srli	r3,r17,3
10001434:	04c40074 	movhi	r19,4097
10001438:	9cc40704 	addi	r19,r19,4124
1000143c:	18c5883a 	add	r2,r3,r3
10001440:	1085883a 	add	r2,r2,r2
10001444:	1085883a 	add	r2,r2,r2
10001448:	9885883a 	add	r2,r19,r2
1000144c:	14000317 	ldw	r16,12(r2)
10001450:	80814a26 	beq	r16,r2,1000197c <_malloc_r+0x5a4>
10001454:	80c00117 	ldw	r3,4(r16)
10001458:	81000317 	ldw	r4,12(r16)
1000145c:	00bfff04 	movi	r2,-4
10001460:	1884703a 	and	r2,r3,r2
10001464:	81400217 	ldw	r5,8(r16)
10001468:	8085883a 	add	r2,r16,r2
1000146c:	10c00117 	ldw	r3,4(r2)
10001470:	29000315 	stw	r4,12(r5)
10001474:	21400215 	stw	r5,8(r4)
10001478:	18c00054 	ori	r3,r3,1
1000147c:	10c00115 	stw	r3,4(r2)
10001480:	9009883a 	mov	r4,r18
10001484:	000e3140 	call	1000e314 <__malloc_unlock>
10001488:	80800204 	addi	r2,r16,8
1000148c:	dfc00a17 	ldw	ra,40(sp)
10001490:	df000917 	ldw	fp,36(sp)
10001494:	ddc00817 	ldw	r23,32(sp)
10001498:	dd800717 	ldw	r22,28(sp)
1000149c:	dd400617 	ldw	r21,24(sp)
100014a0:	dd000517 	ldw	r20,20(sp)
100014a4:	dcc00417 	ldw	r19,16(sp)
100014a8:	dc800317 	ldw	r18,12(sp)
100014ac:	dc400217 	ldw	r17,8(sp)
100014b0:	dc000117 	ldw	r16,4(sp)
100014b4:	dec00b04 	addi	sp,sp,44
100014b8:	f800283a 	ret
100014bc:	04400404 	movi	r17,16
100014c0:	89407536 	bltu	r17,r5,10001698 <_malloc_r+0x2c0>
100014c4:	000e2f40 	call	1000e2f4 <__malloc_lock>
100014c8:	003fd906 	br	10001430 <__alt_data_end+0xf8001430>
100014cc:	8806d27a 	srli	r3,r17,9
100014d0:	18007526 	beq	r3,zero,100016a8 <_malloc_r+0x2d0>
100014d4:	00800104 	movi	r2,4
100014d8:	10c0ef36 	bltu	r2,r3,10001898 <_malloc_r+0x4c0>
100014dc:	8806d1ba 	srli	r3,r17,6
100014e0:	19c00e04 	addi	r7,r3,56
100014e4:	39cb883a 	add	r5,r7,r7
100014e8:	04c40074 	movhi	r19,4097
100014ec:	294b883a 	add	r5,r5,r5
100014f0:	9cc40704 	addi	r19,r19,4124
100014f4:	294b883a 	add	r5,r5,r5
100014f8:	994b883a 	add	r5,r19,r5
100014fc:	2c000317 	ldw	r16,12(r5)
10001500:	2c000e26 	beq	r5,r16,1000153c <_malloc_r+0x164>
10001504:	80800117 	ldw	r2,4(r16)
10001508:	01bfff04 	movi	r6,-4
1000150c:	010003c4 	movi	r4,15
10001510:	1184703a 	and	r2,r2,r6
10001514:	1447c83a 	sub	r3,r2,r17
10001518:	20c00716 	blt	r4,r3,10001538 <_malloc_r+0x160>
1000151c:	1800650e 	bge	r3,zero,100016b4 <_malloc_r+0x2dc>
10001520:	84000317 	ldw	r16,12(r16)
10001524:	2c000526 	beq	r5,r16,1000153c <_malloc_r+0x164>
10001528:	80800117 	ldw	r2,4(r16)
1000152c:	1184703a 	and	r2,r2,r6
10001530:	1447c83a 	sub	r3,r2,r17
10001534:	20fff90e 	bge	r4,r3,1000151c <__alt_data_end+0xf800151c>
10001538:	39ffffc4 	addi	r7,r7,-1
1000153c:	38c00044 	addi	r3,r7,1
10001540:	01840074 	movhi	r6,4097
10001544:	9c000417 	ldw	r16,16(r19)
10001548:	31840704 	addi	r6,r6,4124
1000154c:	32400204 	addi	r9,r6,8
10001550:	82410326 	beq	r16,r9,10001960 <_malloc_r+0x588>
10001554:	81000117 	ldw	r4,4(r16)
10001558:	00bfff04 	movi	r2,-4
1000155c:	208e703a 	and	r7,r4,r2
10001560:	3c45c83a 	sub	r2,r7,r17
10001564:	010003c4 	movi	r4,15
10001568:	2080ee16 	blt	r4,r2,10001924 <_malloc_r+0x54c>
1000156c:	32400515 	stw	r9,20(r6)
10001570:	32400415 	stw	r9,16(r6)
10001574:	1000510e 	bge	r2,zero,100016bc <_malloc_r+0x2e4>
10001578:	00807fc4 	movi	r2,511
1000157c:	11c0ce36 	bltu	r2,r7,100018b8 <_malloc_r+0x4e0>
10001580:	3808d0fa 	srli	r4,r7,3
10001584:	01c00044 	movi	r7,1
10001588:	30800117 	ldw	r2,4(r6)
1000158c:	210b883a 	add	r5,r4,r4
10001590:	294b883a 	add	r5,r5,r5
10001594:	2009d0ba 	srai	r4,r4,2
10001598:	294b883a 	add	r5,r5,r5
1000159c:	298b883a 	add	r5,r5,r6
100015a0:	2a000217 	ldw	r8,8(r5)
100015a4:	3908983a 	sll	r4,r7,r4
100015a8:	81400315 	stw	r5,12(r16)
100015ac:	82000215 	stw	r8,8(r16)
100015b0:	2088b03a 	or	r4,r4,r2
100015b4:	2c000215 	stw	r16,8(r5)
100015b8:	31000115 	stw	r4,4(r6)
100015bc:	44000315 	stw	r16,12(r8)
100015c0:	1805d0ba 	srai	r2,r3,2
100015c4:	01400044 	movi	r5,1
100015c8:	288a983a 	sll	r5,r5,r2
100015cc:	21404336 	bltu	r4,r5,100016dc <_malloc_r+0x304>
100015d0:	2144703a 	and	r2,r4,r5
100015d4:	10000a1e 	bne	r2,zero,10001600 <_malloc_r+0x228>
100015d8:	00bfff04 	movi	r2,-4
100015dc:	294b883a 	add	r5,r5,r5
100015e0:	1886703a 	and	r3,r3,r2
100015e4:	2144703a 	and	r2,r4,r5
100015e8:	18c00104 	addi	r3,r3,4
100015ec:	1000041e 	bne	r2,zero,10001600 <_malloc_r+0x228>
100015f0:	294b883a 	add	r5,r5,r5
100015f4:	2144703a 	and	r2,r4,r5
100015f8:	18c00104 	addi	r3,r3,4
100015fc:	103ffc26 	beq	r2,zero,100015f0 <__alt_data_end+0xf80015f0>
10001600:	023fff04 	movi	r8,-4
10001604:	01c003c4 	movi	r7,15
10001608:	18c5883a 	add	r2,r3,r3
1000160c:	1085883a 	add	r2,r2,r2
10001610:	1085883a 	add	r2,r2,r2
10001614:	9895883a 	add	r10,r19,r2
10001618:	52c00304 	addi	r11,r10,12
1000161c:	1819883a 	mov	r12,r3
10001620:	5c000017 	ldw	r16,0(r11)
10001624:	59bffd04 	addi	r6,r11,-12
10001628:	8180041e 	bne	r16,r6,1000163c <_malloc_r+0x264>
1000162c:	0000ce06 	br	10001968 <_malloc_r+0x590>
10001630:	2000d70e 	bge	r4,zero,10001990 <_malloc_r+0x5b8>
10001634:	84000317 	ldw	r16,12(r16)
10001638:	8180cb26 	beq	r16,r6,10001968 <_malloc_r+0x590>
1000163c:	80800117 	ldw	r2,4(r16)
10001640:	1204703a 	and	r2,r2,r8
10001644:	1449c83a 	sub	r4,r2,r17
10001648:	393ff90e 	bge	r7,r4,10001630 <__alt_data_end+0xf8001630>
1000164c:	80800317 	ldw	r2,12(r16)
10001650:	80c00217 	ldw	r3,8(r16)
10001654:	89400054 	ori	r5,r17,1
10001658:	81400115 	stw	r5,4(r16)
1000165c:	18800315 	stw	r2,12(r3)
10001660:	10c00215 	stw	r3,8(r2)
10001664:	8463883a 	add	r17,r16,r17
10001668:	9c400515 	stw	r17,20(r19)
1000166c:	9c400415 	stw	r17,16(r19)
10001670:	20800054 	ori	r2,r4,1
10001674:	88800115 	stw	r2,4(r17)
10001678:	8a400315 	stw	r9,12(r17)
1000167c:	8a400215 	stw	r9,8(r17)
10001680:	8923883a 	add	r17,r17,r4
10001684:	89000015 	stw	r4,0(r17)
10001688:	9009883a 	mov	r4,r18
1000168c:	000e3140 	call	1000e314 <__malloc_unlock>
10001690:	80800204 	addi	r2,r16,8
10001694:	003f7d06 	br	1000148c <__alt_data_end+0xf800148c>
10001698:	00800304 	movi	r2,12
1000169c:	90800015 	stw	r2,0(r18)
100016a0:	0005883a 	mov	r2,zero
100016a4:	003f7906 	br	1000148c <__alt_data_end+0xf800148c>
100016a8:	01401f84 	movi	r5,126
100016ac:	01c00fc4 	movi	r7,63
100016b0:	003f8d06 	br	100014e8 <__alt_data_end+0xf80014e8>
100016b4:	81000317 	ldw	r4,12(r16)
100016b8:	003f6a06 	br	10001464 <__alt_data_end+0xf8001464>
100016bc:	81c5883a 	add	r2,r16,r7
100016c0:	10c00117 	ldw	r3,4(r2)
100016c4:	9009883a 	mov	r4,r18
100016c8:	18c00054 	ori	r3,r3,1
100016cc:	10c00115 	stw	r3,4(r2)
100016d0:	000e3140 	call	1000e314 <__malloc_unlock>
100016d4:	80800204 	addi	r2,r16,8
100016d8:	003f6c06 	br	1000148c <__alt_data_end+0xf800148c>
100016dc:	9c000217 	ldw	r16,8(r19)
100016e0:	00bfff04 	movi	r2,-4
100016e4:	85800117 	ldw	r22,4(r16)
100016e8:	b0ac703a 	and	r22,r22,r2
100016ec:	b4400336 	bltu	r22,r17,100016fc <_malloc_r+0x324>
100016f0:	b445c83a 	sub	r2,r22,r17
100016f4:	00c003c4 	movi	r3,15
100016f8:	18805d16 	blt	r3,r2,10001870 <_malloc_r+0x498>
100016fc:	05c40074 	movhi	r23,4097
10001700:	00840074 	movhi	r2,4097
10001704:	bdcab204 	addi	r23,r23,10952
10001708:	10918e04 	addi	r2,r2,17976
1000170c:	15400017 	ldw	r21,0(r2)
10001710:	b9000017 	ldw	r4,0(r23)
10001714:	00ffffc4 	movi	r3,-1
10001718:	858d883a 	add	r6,r16,r22
1000171c:	8d6b883a 	add	r21,r17,r21
10001720:	20c0e426 	beq	r4,r3,10001ab4 <_malloc_r+0x6dc>
10001724:	ad4403c4 	addi	r21,r21,4111
10001728:	00fc0004 	movi	r3,-4096
1000172c:	a8ea703a 	and	r21,r21,r3
10001730:	9009883a 	mov	r4,r18
10001734:	a80b883a 	mov	r5,r21
10001738:	d9800015 	stw	r6,0(sp)
1000173c:	0001dec0 	call	10001dec <_sbrk_r>
10001740:	00ffffc4 	movi	r3,-1
10001744:	1029883a 	mov	r20,r2
10001748:	d9800017 	ldw	r6,0(sp)
1000174c:	10c0a426 	beq	r2,r3,100019e0 <_malloc_r+0x608>
10001750:	1180a236 	bltu	r2,r6,100019dc <_malloc_r+0x604>
10001754:	07040074 	movhi	fp,4097
10001758:	e7119a04 	addi	fp,fp,18024
1000175c:	e0c00017 	ldw	r3,0(fp)
10001760:	a8c7883a 	add	r3,r21,r3
10001764:	e0c00015 	stw	r3,0(fp)
10001768:	3500da26 	beq	r6,r20,10001ad4 <_malloc_r+0x6fc>
1000176c:	b9000017 	ldw	r4,0(r23)
10001770:	00bfffc4 	movi	r2,-1
10001774:	2080e426 	beq	r4,r2,10001b08 <_malloc_r+0x730>
10001778:	a185c83a 	sub	r2,r20,r6
1000177c:	1885883a 	add	r2,r3,r2
10001780:	e0800015 	stw	r2,0(fp)
10001784:	a0c001cc 	andi	r3,r20,7
10001788:	1800b526 	beq	r3,zero,10001a60 <_malloc_r+0x688>
1000178c:	a0e9c83a 	sub	r20,r20,r3
10001790:	00840204 	movi	r2,4104
10001794:	a5000204 	addi	r20,r20,8
10001798:	10c7c83a 	sub	r3,r2,r3
1000179c:	a545883a 	add	r2,r20,r21
100017a0:	1083ffcc 	andi	r2,r2,4095
100017a4:	18abc83a 	sub	r21,r3,r2
100017a8:	9009883a 	mov	r4,r18
100017ac:	a80b883a 	mov	r5,r21
100017b0:	0001dec0 	call	10001dec <_sbrk_r>
100017b4:	00ffffc4 	movi	r3,-1
100017b8:	10c0d026 	beq	r2,r3,10001afc <_malloc_r+0x724>
100017bc:	1507c83a 	sub	r3,r2,r20
100017c0:	a8c7883a 	add	r3,r21,r3
100017c4:	18c00054 	ori	r3,r3,1
100017c8:	e0800017 	ldw	r2,0(fp)
100017cc:	9d000215 	stw	r20,8(r19)
100017d0:	a0c00115 	stw	r3,4(r20)
100017d4:	a887883a 	add	r3,r21,r2
100017d8:	e0c00015 	stw	r3,0(fp)
100017dc:	84c00e26 	beq	r16,r19,10001818 <_malloc_r+0x440>
100017e0:	018003c4 	movi	r6,15
100017e4:	3580a02e 	bgeu	r6,r22,10001a68 <_malloc_r+0x690>
100017e8:	81400117 	ldw	r5,4(r16)
100017ec:	013ffe04 	movi	r4,-8
100017f0:	b0bffd04 	addi	r2,r22,-12
100017f4:	1104703a 	and	r2,r2,r4
100017f8:	2900004c 	andi	r4,r5,1
100017fc:	1108b03a 	or	r4,r2,r4
10001800:	81000115 	stw	r4,4(r16)
10001804:	01400144 	movi	r5,5
10001808:	8089883a 	add	r4,r16,r2
1000180c:	21400115 	stw	r5,4(r4)
10001810:	21400215 	stw	r5,8(r4)
10001814:	3080c036 	bltu	r6,r2,10001b18 <_malloc_r+0x740>
10001818:	00840074 	movhi	r2,4097
1000181c:	10918d04 	addi	r2,r2,17972
10001820:	11000017 	ldw	r4,0(r2)
10001824:	20c0012e 	bgeu	r4,r3,1000182c <_malloc_r+0x454>
10001828:	10c00015 	stw	r3,0(r2)
1000182c:	00840074 	movhi	r2,4097
10001830:	10918c04 	addi	r2,r2,17968
10001834:	11000017 	ldw	r4,0(r2)
10001838:	9c000217 	ldw	r16,8(r19)
1000183c:	20c0012e 	bgeu	r4,r3,10001844 <_malloc_r+0x46c>
10001840:	10c00015 	stw	r3,0(r2)
10001844:	80c00117 	ldw	r3,4(r16)
10001848:	00bfff04 	movi	r2,-4
1000184c:	1886703a 	and	r3,r3,r2
10001850:	1c45c83a 	sub	r2,r3,r17
10001854:	1c400236 	bltu	r3,r17,10001860 <_malloc_r+0x488>
10001858:	00c003c4 	movi	r3,15
1000185c:	18800416 	blt	r3,r2,10001870 <_malloc_r+0x498>
10001860:	9009883a 	mov	r4,r18
10001864:	000e3140 	call	1000e314 <__malloc_unlock>
10001868:	0005883a 	mov	r2,zero
1000186c:	003f0706 	br	1000148c <__alt_data_end+0xf800148c>
10001870:	88c00054 	ori	r3,r17,1
10001874:	80c00115 	stw	r3,4(r16)
10001878:	8463883a 	add	r17,r16,r17
1000187c:	10800054 	ori	r2,r2,1
10001880:	9c400215 	stw	r17,8(r19)
10001884:	88800115 	stw	r2,4(r17)
10001888:	9009883a 	mov	r4,r18
1000188c:	000e3140 	call	1000e314 <__malloc_unlock>
10001890:	80800204 	addi	r2,r16,8
10001894:	003efd06 	br	1000148c <__alt_data_end+0xf800148c>
10001898:	00800504 	movi	r2,20
1000189c:	10c0482e 	bgeu	r2,r3,100019c0 <_malloc_r+0x5e8>
100018a0:	00801504 	movi	r2,84
100018a4:	10c06836 	bltu	r2,r3,10001a48 <_malloc_r+0x670>
100018a8:	8806d33a 	srli	r3,r17,12
100018ac:	19c01b84 	addi	r7,r3,110
100018b0:	39cb883a 	add	r5,r7,r7
100018b4:	003f0c06 	br	100014e8 <__alt_data_end+0xf80014e8>
100018b8:	3804d27a 	srli	r2,r7,9
100018bc:	01000104 	movi	r4,4
100018c0:	2080422e 	bgeu	r4,r2,100019cc <_malloc_r+0x5f4>
100018c4:	01000504 	movi	r4,20
100018c8:	20807c36 	bltu	r4,r2,10001abc <_malloc_r+0x6e4>
100018cc:	110016c4 	addi	r4,r2,91
100018d0:	210b883a 	add	r5,r4,r4
100018d4:	294b883a 	add	r5,r5,r5
100018d8:	294b883a 	add	r5,r5,r5
100018dc:	994b883a 	add	r5,r19,r5
100018e0:	28800217 	ldw	r2,8(r5)
100018e4:	02040074 	movhi	r8,4097
100018e8:	42040704 	addi	r8,r8,4124
100018ec:	11406326 	beq	r2,r5,10001a7c <_malloc_r+0x6a4>
100018f0:	01bfff04 	movi	r6,-4
100018f4:	11000117 	ldw	r4,4(r2)
100018f8:	2188703a 	and	r4,r4,r6
100018fc:	3900022e 	bgeu	r7,r4,10001908 <_malloc_r+0x530>
10001900:	10800217 	ldw	r2,8(r2)
10001904:	28bffb1e 	bne	r5,r2,100018f4 <__alt_data_end+0xf80018f4>
10001908:	11800317 	ldw	r6,12(r2)
1000190c:	99000117 	ldw	r4,4(r19)
10001910:	81800315 	stw	r6,12(r16)
10001914:	80800215 	stw	r2,8(r16)
10001918:	34000215 	stw	r16,8(r6)
1000191c:	14000315 	stw	r16,12(r2)
10001920:	003f2706 	br	100015c0 <__alt_data_end+0xf80015c0>
10001924:	88c00054 	ori	r3,r17,1
10001928:	80c00115 	stw	r3,4(r16)
1000192c:	8463883a 	add	r17,r16,r17
10001930:	34400515 	stw	r17,20(r6)
10001934:	34400415 	stw	r17,16(r6)
10001938:	10c00054 	ori	r3,r2,1
1000193c:	8a400315 	stw	r9,12(r17)
10001940:	8a400215 	stw	r9,8(r17)
10001944:	88c00115 	stw	r3,4(r17)
10001948:	88a3883a 	add	r17,r17,r2
1000194c:	88800015 	stw	r2,0(r17)
10001950:	9009883a 	mov	r4,r18
10001954:	000e3140 	call	1000e314 <__malloc_unlock>
10001958:	80800204 	addi	r2,r16,8
1000195c:	003ecb06 	br	1000148c <__alt_data_end+0xf800148c>
10001960:	31000117 	ldw	r4,4(r6)
10001964:	003f1606 	br	100015c0 <__alt_data_end+0xf80015c0>
10001968:	63000044 	addi	r12,r12,1
1000196c:	608000cc 	andi	r2,r12,3
10001970:	5ac00204 	addi	r11,r11,8
10001974:	103f2a1e 	bne	r2,zero,10001620 <__alt_data_end+0xf8001620>
10001978:	00002106 	br	10001a00 <_malloc_r+0x628>
1000197c:	80800204 	addi	r2,r16,8
10001980:	84000517 	ldw	r16,20(r16)
10001984:	143eb31e 	bne	r2,r16,10001454 <__alt_data_end+0xf8001454>
10001988:	18c00084 	addi	r3,r3,2
1000198c:	003eec06 	br	10001540 <__alt_data_end+0xf8001540>
10001990:	8085883a 	add	r2,r16,r2
10001994:	10c00117 	ldw	r3,4(r2)
10001998:	81000317 	ldw	r4,12(r16)
1000199c:	81400217 	ldw	r5,8(r16)
100019a0:	18c00054 	ori	r3,r3,1
100019a4:	10c00115 	stw	r3,4(r2)
100019a8:	29000315 	stw	r4,12(r5)
100019ac:	21400215 	stw	r5,8(r4)
100019b0:	9009883a 	mov	r4,r18
100019b4:	000e3140 	call	1000e314 <__malloc_unlock>
100019b8:	80800204 	addi	r2,r16,8
100019bc:	003eb306 	br	1000148c <__alt_data_end+0xf800148c>
100019c0:	19c016c4 	addi	r7,r3,91
100019c4:	39cb883a 	add	r5,r7,r7
100019c8:	003ec706 	br	100014e8 <__alt_data_end+0xf80014e8>
100019cc:	3804d1ba 	srli	r2,r7,6
100019d0:	11000e04 	addi	r4,r2,56
100019d4:	210b883a 	add	r5,r4,r4
100019d8:	003fbe06 	br	100018d4 <__alt_data_end+0xf80018d4>
100019dc:	84ff5d26 	beq	r16,r19,10001754 <__alt_data_end+0xf8001754>
100019e0:	9c000217 	ldw	r16,8(r19)
100019e4:	00bfff04 	movi	r2,-4
100019e8:	80c00117 	ldw	r3,4(r16)
100019ec:	1886703a 	and	r3,r3,r2
100019f0:	003f9706 	br	10001850 <__alt_data_end+0xf8001850>
100019f4:	52800017 	ldw	r10,0(r10)
100019f8:	18ffffc4 	addi	r3,r3,-1
100019fc:	50805c1e 	bne	r10,r2,10001b70 <_malloc_r+0x798>
10001a00:	190000cc 	andi	r4,r3,3
10001a04:	50bffe04 	addi	r2,r10,-8
10001a08:	203ffa1e 	bne	r4,zero,100019f4 <__alt_data_end+0xf80019f4>
10001a0c:	98800117 	ldw	r2,4(r19)
10001a10:	0146303a 	nor	r3,zero,r5
10001a14:	1884703a 	and	r2,r3,r2
10001a18:	98800115 	stw	r2,4(r19)
10001a1c:	294b883a 	add	r5,r5,r5
10001a20:	117f2e36 	bltu	r2,r5,100016dc <__alt_data_end+0xf80016dc>
10001a24:	283f2d26 	beq	r5,zero,100016dc <__alt_data_end+0xf80016dc>
10001a28:	1146703a 	and	r3,r2,r5
10001a2c:	1800521e 	bne	r3,zero,10001b78 <_malloc_r+0x7a0>
10001a30:	6007883a 	mov	r3,r12
10001a34:	294b883a 	add	r5,r5,r5
10001a38:	1148703a 	and	r4,r2,r5
10001a3c:	18c00104 	addi	r3,r3,4
10001a40:	203ffc26 	beq	r4,zero,10001a34 <__alt_data_end+0xf8001a34>
10001a44:	003ef006 	br	10001608 <__alt_data_end+0xf8001608>
10001a48:	00805504 	movi	r2,340
10001a4c:	10c01336 	bltu	r2,r3,10001a9c <_malloc_r+0x6c4>
10001a50:	8806d3fa 	srli	r3,r17,15
10001a54:	19c01dc4 	addi	r7,r3,119
10001a58:	39cb883a 	add	r5,r7,r7
10001a5c:	003ea206 	br	100014e8 <__alt_data_end+0xf80014e8>
10001a60:	00c40004 	movi	r3,4096
10001a64:	003f4d06 	br	1000179c <__alt_data_end+0xf800179c>
10001a68:	00800044 	movi	r2,1
10001a6c:	a0800115 	stw	r2,4(r20)
10001a70:	a021883a 	mov	r16,r20
10001a74:	0007883a 	mov	r3,zero
10001a78:	003f7506 	br	10001850 <__alt_data_end+0xf8001850>
10001a7c:	200bd0ba 	srai	r5,r4,2
10001a80:	01800044 	movi	r6,1
10001a84:	41000117 	ldw	r4,4(r8)
10001a88:	314a983a 	sll	r5,r6,r5
10001a8c:	100d883a 	mov	r6,r2
10001a90:	2908b03a 	or	r4,r5,r4
10001a94:	41000115 	stw	r4,4(r8)
10001a98:	003f9d06 	br	10001910 <__alt_data_end+0xf8001910>
10001a9c:	00815504 	movi	r2,1364
10001aa0:	10c01336 	bltu	r2,r3,10001af0 <_malloc_r+0x718>
10001aa4:	8806d4ba 	srli	r3,r17,18
10001aa8:	19c01f04 	addi	r7,r3,124
10001aac:	39cb883a 	add	r5,r7,r7
10001ab0:	003e8d06 	br	100014e8 <__alt_data_end+0xf80014e8>
10001ab4:	ad400404 	addi	r21,r21,16
10001ab8:	003f1d06 	br	10001730 <__alt_data_end+0xf8001730>
10001abc:	01001504 	movi	r4,84
10001ac0:	20801c36 	bltu	r4,r2,10001b34 <_malloc_r+0x75c>
10001ac4:	3804d33a 	srli	r2,r7,12
10001ac8:	11001b84 	addi	r4,r2,110
10001acc:	210b883a 	add	r5,r4,r4
10001ad0:	003f8006 	br	100018d4 <__alt_data_end+0xf80018d4>
10001ad4:	3083ffcc 	andi	r2,r6,4095
10001ad8:	103f241e 	bne	r2,zero,1000176c <__alt_data_end+0xf800176c>
10001adc:	99000217 	ldw	r4,8(r19)
10001ae0:	ad85883a 	add	r2,r21,r22
10001ae4:	10800054 	ori	r2,r2,1
10001ae8:	20800115 	stw	r2,4(r4)
10001aec:	003f4a06 	br	10001818 <__alt_data_end+0xf8001818>
10001af0:	01403f04 	movi	r5,252
10001af4:	01c01f84 	movi	r7,126
10001af8:	003e7b06 	br	100014e8 <__alt_data_end+0xf80014e8>
10001afc:	00c00044 	movi	r3,1
10001b00:	002b883a 	mov	r21,zero
10001b04:	003f3006 	br	100017c8 <__alt_data_end+0xf80017c8>
10001b08:	00840074 	movhi	r2,4097
10001b0c:	108ab204 	addi	r2,r2,10952
10001b10:	15000015 	stw	r20,0(r2)
10001b14:	003f1b06 	br	10001784 <__alt_data_end+0xf8001784>
10001b18:	9009883a 	mov	r4,r18
10001b1c:	81400204 	addi	r5,r16,8
10001b20:	00061a80 	call	100061a8 <_free_r>
10001b24:	00840074 	movhi	r2,4097
10001b28:	10919a04 	addi	r2,r2,18024
10001b2c:	10c00017 	ldw	r3,0(r2)
10001b30:	003f3906 	br	10001818 <__alt_data_end+0xf8001818>
10001b34:	01005504 	movi	r4,340
10001b38:	20800436 	bltu	r4,r2,10001b4c <_malloc_r+0x774>
10001b3c:	3804d3fa 	srli	r2,r7,15
10001b40:	11001dc4 	addi	r4,r2,119
10001b44:	210b883a 	add	r5,r4,r4
10001b48:	003f6206 	br	100018d4 <__alt_data_end+0xf80018d4>
10001b4c:	01015504 	movi	r4,1364
10001b50:	20800436 	bltu	r4,r2,10001b64 <_malloc_r+0x78c>
10001b54:	3804d4ba 	srli	r2,r7,18
10001b58:	11001f04 	addi	r4,r2,124
10001b5c:	210b883a 	add	r5,r4,r4
10001b60:	003f5c06 	br	100018d4 <__alt_data_end+0xf80018d4>
10001b64:	01403f04 	movi	r5,252
10001b68:	01001f84 	movi	r4,126
10001b6c:	003f5906 	br	100018d4 <__alt_data_end+0xf80018d4>
10001b70:	98800117 	ldw	r2,4(r19)
10001b74:	003fa906 	br	10001a1c <__alt_data_end+0xf8001a1c>
10001b78:	6007883a 	mov	r3,r12
10001b7c:	003ea206 	br	10001608 <__alt_data_end+0xf8001608>

10001b80 <memcpy>:
10001b80:	deffff04 	addi	sp,sp,-4
10001b84:	dc000015 	stw	r16,0(sp)
10001b88:	00c003c4 	movi	r3,15
10001b8c:	2005883a 	mov	r2,r4
10001b90:	1980432e 	bgeu	r3,r6,10001ca0 <memcpy+0x120>
10001b94:	2146b03a 	or	r3,r4,r5
10001b98:	18c000cc 	andi	r3,r3,3
10001b9c:	1800421e 	bne	r3,zero,10001ca8 <memcpy+0x128>
10001ba0:	343ffc04 	addi	r16,r6,-16
10001ba4:	8020d13a 	srli	r16,r16,4
10001ba8:	28c00104 	addi	r3,r5,4
10001bac:	23400104 	addi	r13,r4,4
10001bb0:	801e913a 	slli	r15,r16,4
10001bb4:	2b000204 	addi	r12,r5,8
10001bb8:	22c00204 	addi	r11,r4,8
10001bbc:	7bc00504 	addi	r15,r15,20
10001bc0:	2a800304 	addi	r10,r5,12
10001bc4:	22400304 	addi	r9,r4,12
10001bc8:	2bdf883a 	add	r15,r5,r15
10001bcc:	2811883a 	mov	r8,r5
10001bd0:	200f883a 	mov	r7,r4
10001bd4:	41000017 	ldw	r4,0(r8)
10001bd8:	39c00404 	addi	r7,r7,16
10001bdc:	18c00404 	addi	r3,r3,16
10001be0:	393ffc15 	stw	r4,-16(r7)
10001be4:	1bbffc17 	ldw	r14,-16(r3)
10001be8:	6b400404 	addi	r13,r13,16
10001bec:	5ac00404 	addi	r11,r11,16
10001bf0:	6bbffc15 	stw	r14,-16(r13)
10001bf4:	63800017 	ldw	r14,0(r12)
10001bf8:	4a400404 	addi	r9,r9,16
10001bfc:	42000404 	addi	r8,r8,16
10001c00:	5bbffc15 	stw	r14,-16(r11)
10001c04:	53800017 	ldw	r14,0(r10)
10001c08:	63000404 	addi	r12,r12,16
10001c0c:	52800404 	addi	r10,r10,16
10001c10:	4bbffc15 	stw	r14,-16(r9)
10001c14:	1bffef1e 	bne	r3,r15,10001bd4 <__alt_data_end+0xf8001bd4>
10001c18:	81c00044 	addi	r7,r16,1
10001c1c:	380e913a 	slli	r7,r7,4
10001c20:	310003cc 	andi	r4,r6,15
10001c24:	02c000c4 	movi	r11,3
10001c28:	11c7883a 	add	r3,r2,r7
10001c2c:	29cb883a 	add	r5,r5,r7
10001c30:	59001f2e 	bgeu	r11,r4,10001cb0 <memcpy+0x130>
10001c34:	1813883a 	mov	r9,r3
10001c38:	2811883a 	mov	r8,r5
10001c3c:	200f883a 	mov	r7,r4
10001c40:	42800017 	ldw	r10,0(r8)
10001c44:	4a400104 	addi	r9,r9,4
10001c48:	39ffff04 	addi	r7,r7,-4
10001c4c:	4abfff15 	stw	r10,-4(r9)
10001c50:	42000104 	addi	r8,r8,4
10001c54:	59fffa36 	bltu	r11,r7,10001c40 <__alt_data_end+0xf8001c40>
10001c58:	213fff04 	addi	r4,r4,-4
10001c5c:	2008d0ba 	srli	r4,r4,2
10001c60:	318000cc 	andi	r6,r6,3
10001c64:	21000044 	addi	r4,r4,1
10001c68:	2109883a 	add	r4,r4,r4
10001c6c:	2109883a 	add	r4,r4,r4
10001c70:	1907883a 	add	r3,r3,r4
10001c74:	290b883a 	add	r5,r5,r4
10001c78:	30000626 	beq	r6,zero,10001c94 <memcpy+0x114>
10001c7c:	198d883a 	add	r6,r3,r6
10001c80:	29c00003 	ldbu	r7,0(r5)
10001c84:	18c00044 	addi	r3,r3,1
10001c88:	29400044 	addi	r5,r5,1
10001c8c:	19ffffc5 	stb	r7,-1(r3)
10001c90:	19bffb1e 	bne	r3,r6,10001c80 <__alt_data_end+0xf8001c80>
10001c94:	dc000017 	ldw	r16,0(sp)
10001c98:	dec00104 	addi	sp,sp,4
10001c9c:	f800283a 	ret
10001ca0:	2007883a 	mov	r3,r4
10001ca4:	003ff406 	br	10001c78 <__alt_data_end+0xf8001c78>
10001ca8:	2007883a 	mov	r3,r4
10001cac:	003ff306 	br	10001c7c <__alt_data_end+0xf8001c7c>
10001cb0:	200d883a 	mov	r6,r4
10001cb4:	003ff006 	br	10001c78 <__alt_data_end+0xf8001c78>

10001cb8 <_printf_r>:
10001cb8:	defffd04 	addi	sp,sp,-12
10001cbc:	dfc00015 	stw	ra,0(sp)
10001cc0:	d9800115 	stw	r6,4(sp)
10001cc4:	d9c00215 	stw	r7,8(sp)
10001cc8:	280d883a 	mov	r6,r5
10001ccc:	21400217 	ldw	r5,8(r4)
10001cd0:	d9c00104 	addi	r7,sp,4
10001cd4:	0001ed80 	call	10001ed8 <___vfprintf_internal_r>
10001cd8:	dfc00017 	ldw	ra,0(sp)
10001cdc:	dec00304 	addi	sp,sp,12
10001ce0:	f800283a 	ret

10001ce4 <printf>:
10001ce4:	defffc04 	addi	sp,sp,-16
10001ce8:	dfc00015 	stw	ra,0(sp)
10001cec:	d9400115 	stw	r5,4(sp)
10001cf0:	d9800215 	stw	r6,8(sp)
10001cf4:	d9c00315 	stw	r7,12(sp)
10001cf8:	00840074 	movhi	r2,4097
10001cfc:	108ab504 	addi	r2,r2,10964
10001d00:	10800017 	ldw	r2,0(r2)
10001d04:	200b883a 	mov	r5,r4
10001d08:	d9800104 	addi	r6,sp,4
10001d0c:	11000217 	ldw	r4,8(r2)
10001d10:	0003fd40 	call	10003fd4 <__vfprintf_internal>
10001d14:	dfc00017 	ldw	ra,0(sp)
10001d18:	dec00404 	addi	sp,sp,16
10001d1c:	f800283a 	ret

10001d20 <_puts_r>:
10001d20:	defff604 	addi	sp,sp,-40
10001d24:	dc000715 	stw	r16,28(sp)
10001d28:	2021883a 	mov	r16,r4
10001d2c:	2809883a 	mov	r4,r5
10001d30:	dc400815 	stw	r17,32(sp)
10001d34:	dfc00915 	stw	ra,36(sp)
10001d38:	2823883a 	mov	r17,r5
10001d3c:	0001e400 	call	10001e40 <strlen>
10001d40:	00c40074 	movhi	r3,4097
10001d44:	18cab504 	addi	r3,r3,10964
10001d48:	18c00017 	ldw	r3,0(r3)
10001d4c:	11000044 	addi	r4,r2,1
10001d50:	d8800115 	stw	r2,4(sp)
10001d54:	18c00217 	ldw	r3,8(r3)
10001d58:	01440074 	movhi	r5,4097
10001d5c:	29433804 	addi	r5,r5,3296
10001d60:	1880030b 	ldhu	r2,12(r3)
10001d64:	d9400215 	stw	r5,8(sp)
10001d68:	d9000615 	stw	r4,24(sp)
10001d6c:	01400044 	movi	r5,1
10001d70:	01000084 	movi	r4,2
10001d74:	d9000515 	stw	r4,20(sp)
10001d78:	dc400015 	stw	r17,0(sp)
10001d7c:	d9400315 	stw	r5,12(sp)
10001d80:	dec00415 	stw	sp,16(sp)
10001d84:	1108000c 	andi	r4,r2,8192
10001d88:	2000061e 	bne	r4,zero,10001da4 <_puts_r+0x84>
10001d8c:	19401917 	ldw	r5,100(r3)
10001d90:	0137ffc4 	movi	r4,-8193
10001d94:	10880014 	ori	r2,r2,8192
10001d98:	2908703a 	and	r4,r5,r4
10001d9c:	1880030d 	sth	r2,12(r3)
10001da0:	19001915 	stw	r4,100(r3)
10001da4:	81400217 	ldw	r5,8(r16)
10001da8:	8009883a 	mov	r4,r16
10001dac:	d9800404 	addi	r6,sp,16
10001db0:	00064980 	call	10006498 <__sfvwrite_r>
10001db4:	1000061e 	bne	r2,zero,10001dd0 <_puts_r+0xb0>
10001db8:	00800284 	movi	r2,10
10001dbc:	dfc00917 	ldw	ra,36(sp)
10001dc0:	dc400817 	ldw	r17,32(sp)
10001dc4:	dc000717 	ldw	r16,28(sp)
10001dc8:	dec00a04 	addi	sp,sp,40
10001dcc:	f800283a 	ret
10001dd0:	00bfffc4 	movi	r2,-1
10001dd4:	003ff906 	br	10001dbc <__alt_data_end+0xf8001dbc>

10001dd8 <puts>:
10001dd8:	00840074 	movhi	r2,4097
10001ddc:	108ab504 	addi	r2,r2,10964
10001de0:	200b883a 	mov	r5,r4
10001de4:	11000017 	ldw	r4,0(r2)
10001de8:	0001d201 	jmpi	10001d20 <_puts_r>

10001dec <_sbrk_r>:
10001dec:	defffd04 	addi	sp,sp,-12
10001df0:	dc000015 	stw	r16,0(sp)
10001df4:	04040074 	movhi	r16,4097
10001df8:	dc400115 	stw	r17,4(sp)
10001dfc:	84118f04 	addi	r16,r16,17980
10001e00:	2023883a 	mov	r17,r4
10001e04:	2809883a 	mov	r4,r5
10001e08:	dfc00215 	stw	ra,8(sp)
10001e0c:	80000015 	stw	zero,0(r16)
10001e10:	000e5080 	call	1000e508 <sbrk>
10001e14:	00ffffc4 	movi	r3,-1
10001e18:	10c00526 	beq	r2,r3,10001e30 <_sbrk_r+0x44>
10001e1c:	dfc00217 	ldw	ra,8(sp)
10001e20:	dc400117 	ldw	r17,4(sp)
10001e24:	dc000017 	ldw	r16,0(sp)
10001e28:	dec00304 	addi	sp,sp,12
10001e2c:	f800283a 	ret
10001e30:	80c00017 	ldw	r3,0(r16)
10001e34:	183ff926 	beq	r3,zero,10001e1c <__alt_data_end+0xf8001e1c>
10001e38:	88c00015 	stw	r3,0(r17)
10001e3c:	003ff706 	br	10001e1c <__alt_data_end+0xf8001e1c>

10001e40 <strlen>:
10001e40:	208000cc 	andi	r2,r4,3
10001e44:	10002026 	beq	r2,zero,10001ec8 <strlen+0x88>
10001e48:	20800007 	ldb	r2,0(r4)
10001e4c:	10002026 	beq	r2,zero,10001ed0 <strlen+0x90>
10001e50:	2005883a 	mov	r2,r4
10001e54:	00000206 	br	10001e60 <strlen+0x20>
10001e58:	10c00007 	ldb	r3,0(r2)
10001e5c:	18001826 	beq	r3,zero,10001ec0 <strlen+0x80>
10001e60:	10800044 	addi	r2,r2,1
10001e64:	10c000cc 	andi	r3,r2,3
10001e68:	183ffb1e 	bne	r3,zero,10001e58 <__alt_data_end+0xf8001e58>
10001e6c:	10c00017 	ldw	r3,0(r2)
10001e70:	01ffbff4 	movhi	r7,65279
10001e74:	39ffbfc4 	addi	r7,r7,-257
10001e78:	00ca303a 	nor	r5,zero,r3
10001e7c:	01a02074 	movhi	r6,32897
10001e80:	19c7883a 	add	r3,r3,r7
10001e84:	31a02004 	addi	r6,r6,-32640
10001e88:	1946703a 	and	r3,r3,r5
10001e8c:	1986703a 	and	r3,r3,r6
10001e90:	1800091e 	bne	r3,zero,10001eb8 <strlen+0x78>
10001e94:	10800104 	addi	r2,r2,4
10001e98:	10c00017 	ldw	r3,0(r2)
10001e9c:	19cb883a 	add	r5,r3,r7
10001ea0:	00c6303a 	nor	r3,zero,r3
10001ea4:	28c6703a 	and	r3,r5,r3
10001ea8:	1986703a 	and	r3,r3,r6
10001eac:	183ff926 	beq	r3,zero,10001e94 <__alt_data_end+0xf8001e94>
10001eb0:	00000106 	br	10001eb8 <strlen+0x78>
10001eb4:	10800044 	addi	r2,r2,1
10001eb8:	10c00007 	ldb	r3,0(r2)
10001ebc:	183ffd1e 	bne	r3,zero,10001eb4 <__alt_data_end+0xf8001eb4>
10001ec0:	1105c83a 	sub	r2,r2,r4
10001ec4:	f800283a 	ret
10001ec8:	2005883a 	mov	r2,r4
10001ecc:	003fe706 	br	10001e6c <__alt_data_end+0xf8001e6c>
10001ed0:	0005883a 	mov	r2,zero
10001ed4:	f800283a 	ret

10001ed8 <___vfprintf_internal_r>:
10001ed8:	defeb604 	addi	sp,sp,-1320
10001edc:	dfc14915 	stw	ra,1316(sp)
10001ee0:	ddc14715 	stw	r23,1308(sp)
10001ee4:	dd814615 	stw	r22,1304(sp)
10001ee8:	202f883a 	mov	r23,r4
10001eec:	282d883a 	mov	r22,r5
10001ef0:	d9812a15 	stw	r6,1192(sp)
10001ef4:	d9c12d15 	stw	r7,1204(sp)
10001ef8:	df014815 	stw	fp,1312(sp)
10001efc:	dd414515 	stw	r21,1300(sp)
10001f00:	dd014415 	stw	r20,1296(sp)
10001f04:	dcc14315 	stw	r19,1292(sp)
10001f08:	dc814215 	stw	r18,1288(sp)
10001f0c:	dc414115 	stw	r17,1284(sp)
10001f10:	dc014015 	stw	r16,1280(sp)
10001f14:	0006b580 	call	10006b58 <_localeconv_r>
10001f18:	10800017 	ldw	r2,0(r2)
10001f1c:	1009883a 	mov	r4,r2
10001f20:	d8813515 	stw	r2,1236(sp)
10001f24:	0001e400 	call	10001e40 <strlen>
10001f28:	d8813815 	stw	r2,1248(sp)
10001f2c:	b8000226 	beq	r23,zero,10001f38 <___vfprintf_internal_r+0x60>
10001f30:	b8800e17 	ldw	r2,56(r23)
10001f34:	10010526 	beq	r2,zero,1000234c <___vfprintf_internal_r+0x474>
10001f38:	b0c0030b 	ldhu	r3,12(r22)
10001f3c:	1908000c 	andi	r4,r3,8192
10001f40:	1805883a 	mov	r2,r3
10001f44:	2000071e 	bne	r4,zero,10001f64 <___vfprintf_internal_r+0x8c>
10001f48:	b1001917 	ldw	r4,100(r22)
10001f4c:	18880014 	ori	r2,r3,8192
10001f50:	00f7ffc4 	movi	r3,-8193
10001f54:	20c8703a 	and	r4,r4,r3
10001f58:	b080030d 	sth	r2,12(r22)
10001f5c:	1007883a 	mov	r3,r2
10001f60:	b1001915 	stw	r4,100(r22)
10001f64:	1100020c 	andi	r4,r2,8
10001f68:	2000a826 	beq	r4,zero,1000220c <___vfprintf_internal_r+0x334>
10001f6c:	b1000417 	ldw	r4,16(r22)
10001f70:	2000a626 	beq	r4,zero,1000220c <___vfprintf_internal_r+0x334>
10001f74:	1080068c 	andi	r2,r2,26
10001f78:	01000284 	movi	r4,10
10001f7c:	1100ac26 	beq	r2,r4,10002230 <___vfprintf_internal_r+0x358>
10001f80:	d8c10e04 	addi	r3,sp,1080
10001f84:	d9010dc4 	addi	r4,sp,1079
10001f88:	d9400404 	addi	r5,sp,16
10001f8c:	05040074 	movhi	r20,4097
10001f90:	1905c83a 	sub	r2,r3,r4
10001f94:	a5034984 	addi	r20,r20,3366
10001f98:	d8c12815 	stw	r3,1184(sp)
10001f9c:	d9012915 	stw	r4,1188(sp)
10001fa0:	d9411e15 	stw	r5,1144(sp)
10001fa4:	d8012015 	stw	zero,1152(sp)
10001fa8:	d8011f15 	stw	zero,1148(sp)
10001fac:	d8013315 	stw	zero,1228(sp)
10001fb0:	d8013715 	stw	zero,1244(sp)
10001fb4:	d8013915 	stw	zero,1252(sp)
10001fb8:	d8013b15 	stw	zero,1260(sp)
10001fbc:	d8013a15 	stw	zero,1256(sp)
10001fc0:	d8012f15 	stw	zero,1212(sp)
10001fc4:	2811883a 	mov	r8,r5
10001fc8:	d8813c15 	stw	r2,1264(sp)
10001fcc:	d8c12a17 	ldw	r3,1192(sp)
10001fd0:	18800007 	ldb	r2,0(r3)
10001fd4:	10021326 	beq	r2,zero,10002824 <___vfprintf_internal_r+0x94c>
10001fd8:	00c00944 	movi	r3,37
10001fdc:	dc012a17 	ldw	r16,1192(sp)
10001fe0:	10c0021e 	bne	r2,r3,10001fec <___vfprintf_internal_r+0x114>
10001fe4:	00001606 	br	10002040 <___vfprintf_internal_r+0x168>
10001fe8:	10c08526 	beq	r2,r3,10002200 <___vfprintf_internal_r+0x328>
10001fec:	84000044 	addi	r16,r16,1
10001ff0:	80800007 	ldb	r2,0(r16)
10001ff4:	103ffc1e 	bne	r2,zero,10001fe8 <__alt_data_end+0xf8001fe8>
10001ff8:	d9012a17 	ldw	r4,1192(sp)
10001ffc:	8123c83a 	sub	r17,r16,r4
10002000:	88000f26 	beq	r17,zero,10002040 <___vfprintf_internal_r+0x168>
10002004:	d8812a17 	ldw	r2,1192(sp)
10002008:	d8c12017 	ldw	r3,1152(sp)
1000200c:	44400115 	stw	r17,4(r8)
10002010:	40800015 	stw	r2,0(r8)
10002014:	d8811f17 	ldw	r2,1148(sp)
10002018:	1c47883a 	add	r3,r3,r17
1000201c:	d8c12015 	stw	r3,1152(sp)
10002020:	10800044 	addi	r2,r2,1
10002024:	d8811f15 	stw	r2,1148(sp)
10002028:	00c001c4 	movi	r3,7
1000202c:	1880b516 	blt	r3,r2,10002304 <___vfprintf_internal_r+0x42c>
10002030:	42000204 	addi	r8,r8,8
10002034:	d8c12f17 	ldw	r3,1212(sp)
10002038:	1c47883a 	add	r3,r3,r17
1000203c:	d8c12f15 	stw	r3,1212(sp)
10002040:	80800007 	ldb	r2,0(r16)
10002044:	1000b626 	beq	r2,zero,10002320 <___vfprintf_internal_r+0x448>
10002048:	80800044 	addi	r2,r16,1
1000204c:	84000047 	ldb	r16,1(r16)
10002050:	0027883a 	mov	r19,zero
10002054:	0039883a 	mov	fp,zero
10002058:	dcc12b05 	stb	r19,1196(sp)
1000205c:	d8012785 	stb	zero,1182(sp)
10002060:	027fffc4 	movi	r9,-1
10002064:	d8012e15 	stw	zero,1208(sp)
10002068:	04401604 	movi	r17,88
1000206c:	04800244 	movi	r18,9
10002070:	da012a15 	stw	r8,1192(sp)
10002074:	e027883a 	mov	r19,fp
10002078:	17000044 	addi	fp,r2,1
1000207c:	80bff804 	addi	r2,r16,-32
10002080:	88831236 	bltu	r17,r2,10002ccc <___vfprintf_internal_r+0xdf4>
10002084:	100490ba 	slli	r2,r2,2
10002088:	01040034 	movhi	r4,4096
1000208c:	21082704 	addi	r4,r4,8348
10002090:	1105883a 	add	r2,r2,r4
10002094:	10800017 	ldw	r2,0(r2)
10002098:	1000683a 	jmp	r2
1000209c:	10002be8 	cmpgeui	zero,r2,175
100020a0:	10002ccc 	andi	zero,r2,179
100020a4:	10002ccc 	andi	zero,r2,179
100020a8:	10002c04 	addi	zero,r2,176
100020ac:	10002ccc 	andi	zero,r2,179
100020b0:	10002ccc 	andi	zero,r2,179
100020b4:	10002ccc 	andi	zero,r2,179
100020b8:	10002ccc 	andi	zero,r2,179
100020bc:	10002ccc 	andi	zero,r2,179
100020c0:	10002ccc 	andi	zero,r2,179
100020c4:	10002c14 	ori	zero,r2,176
100020c8:	10002c3c 	xorhi	zero,r2,176
100020cc:	10002ccc 	andi	zero,r2,179
100020d0:	10002358 	cmpnei	zero,r2,141
100020d4:	10002368 	cmpgeui	zero,r2,141
100020d8:	10002ccc 	andi	zero,r2,179
100020dc:	100023b8 	rdprs	zero,r2,142
100020e0:	100023c8 	cmpgei	zero,r2,143
100020e4:	100023c8 	cmpgei	zero,r2,143
100020e8:	100023c8 	cmpgei	zero,r2,143
100020ec:	100023c8 	cmpgei	zero,r2,143
100020f0:	100023c8 	cmpgei	zero,r2,143
100020f4:	100023c8 	cmpgei	zero,r2,143
100020f8:	100023c8 	cmpgei	zero,r2,143
100020fc:	100023c8 	cmpgei	zero,r2,143
10002100:	100023c8 	cmpgei	zero,r2,143
10002104:	10002ccc 	andi	zero,r2,179
10002108:	10002ccc 	andi	zero,r2,179
1000210c:	10002ccc 	andi	zero,r2,179
10002110:	10002ccc 	andi	zero,r2,179
10002114:	10002ccc 	andi	zero,r2,179
10002118:	10002ccc 	andi	zero,r2,179
1000211c:	10002ccc 	andi	zero,r2,179
10002120:	10002ccc 	andi	zero,r2,179
10002124:	10002ccc 	andi	zero,r2,179
10002128:	10002ccc 	andi	zero,r2,179
1000212c:	1000240c 	andi	zero,r2,144
10002130:	1000282c 	andhi	zero,r2,160
10002134:	10002ccc 	andi	zero,r2,179
10002138:	1000282c 	andhi	zero,r2,160
1000213c:	10002ccc 	andi	zero,r2,179
10002140:	10002ccc 	andi	zero,r2,179
10002144:	10002ccc 	andi	zero,r2,179
10002148:	10002ccc 	andi	zero,r2,179
1000214c:	100028d4 	ori	zero,r2,163
10002150:	10002ccc 	andi	zero,r2,179
10002154:	10002ccc 	andi	zero,r2,179
10002158:	100028e4 	muli	zero,r2,163
1000215c:	10002ccc 	andi	zero,r2,179
10002160:	10002ccc 	andi	zero,r2,179
10002164:	10002ccc 	andi	zero,r2,179
10002168:	10002ccc 	andi	zero,r2,179
1000216c:	10002ccc 	andi	zero,r2,179
10002170:	10002928 	cmpgeui	zero,r2,164
10002174:	10002ccc 	andi	zero,r2,179
10002178:	10002ccc 	andi	zero,r2,179
1000217c:	10002960 	cmpeqi	zero,r2,165
10002180:	10002ccc 	andi	zero,r2,179
10002184:	10002ccc 	andi	zero,r2,179
10002188:	10002ccc 	andi	zero,r2,179
1000218c:	10002ccc 	andi	zero,r2,179
10002190:	10002ccc 	andi	zero,r2,179
10002194:	10002ccc 	andi	zero,r2,179
10002198:	10002ccc 	andi	zero,r2,179
1000219c:	10002ccc 	andi	zero,r2,179
100021a0:	10002ccc 	andi	zero,r2,179
100021a4:	10002ccc 	andi	zero,r2,179
100021a8:	10002b9c 	xori	zero,r2,174
100021ac:	10002b48 	cmpgei	zero,r2,173
100021b0:	1000282c 	andhi	zero,r2,160
100021b4:	1000282c 	andhi	zero,r2,160
100021b8:	1000282c 	andhi	zero,r2,160
100021bc:	10002b8c 	andi	zero,r2,174
100021c0:	10002b48 	cmpgei	zero,r2,173
100021c4:	10002ccc 	andi	zero,r2,179
100021c8:	10002ccc 	andi	zero,r2,179
100021cc:	10002a64 	muli	zero,r2,169
100021d0:	10002ccc 	andi	zero,r2,179
100021d4:	10002a7c 	xorhi	zero,r2,169
100021d8:	10002abc 	xorhi	zero,r2,170
100021dc:	10002afc 	xorhi	zero,r2,171
100021e0:	100029c8 	cmpgei	zero,r2,167
100021e4:	10002ccc 	andi	zero,r2,179
100021e8:	10002c50 	cmplti	zero,r2,177
100021ec:	10002ccc 	andi	zero,r2,179
100021f0:	100029d8 	cmpnei	zero,r2,167
100021f4:	10002ccc 	andi	zero,r2,179
100021f8:	10002ccc 	andi	zero,r2,179
100021fc:	10002a18 	cmpnei	zero,r2,168
10002200:	d9412a17 	ldw	r5,1192(sp)
10002204:	8163c83a 	sub	r17,r16,r5
10002208:	003f7d06 	br	10002000 <__alt_data_end+0xf8002000>
1000220c:	b809883a 	mov	r4,r23
10002210:	b00b883a 	mov	r5,r22
10002214:	0003ff80 	call	10003ff8 <__swsetup_r>
10002218:	10002d1e 	bne	r2,zero,100022d0 <___vfprintf_internal_r+0x3f8>
1000221c:	b0c0030b 	ldhu	r3,12(r22)
10002220:	01000284 	movi	r4,10
10002224:	1805883a 	mov	r2,r3
10002228:	1080068c 	andi	r2,r2,26
1000222c:	113f541e 	bne	r2,r4,10001f80 <__alt_data_end+0xf8001f80>
10002230:	b080038b 	ldhu	r2,14(r22)
10002234:	113fffcc 	andi	r4,r2,65535
10002238:	2120001c 	xori	r4,r4,32768
1000223c:	21200004 	addi	r4,r4,-32768
10002240:	203f4f16 	blt	r4,zero,10001f80 <__alt_data_end+0xf8001f80>
10002244:	b2c01917 	ldw	r11,100(r22)
10002248:	b2800717 	ldw	r10,28(r22)
1000224c:	b2400917 	ldw	r9,36(r22)
10002250:	d9812a17 	ldw	r6,1192(sp)
10002254:	d9c12d17 	ldw	r7,1204(sp)
10002258:	02010004 	movi	r8,1024
1000225c:	18ffff4c 	andi	r3,r3,65533
10002260:	d881078d 	sth	r2,1054(sp)
10002264:	b809883a 	mov	r4,r23
10002268:	d8800404 	addi	r2,sp,16
1000226c:	d9410404 	addi	r5,sp,1040
10002270:	d8c1070d 	sth	r3,1052(sp)
10002274:	dac11d15 	stw	r11,1140(sp)
10002278:	da810b15 	stw	r10,1068(sp)
1000227c:	da410d15 	stw	r9,1076(sp)
10002280:	d8810415 	stw	r2,1040(sp)
10002284:	d8810815 	stw	r2,1056(sp)
10002288:	da010615 	stw	r8,1048(sp)
1000228c:	da010915 	stw	r8,1060(sp)
10002290:	d8010a15 	stw	zero,1064(sp)
10002294:	0001ed80 	call	10001ed8 <___vfprintf_internal_r>
10002298:	1021883a 	mov	r16,r2
1000229c:	10000416 	blt	r2,zero,100022b0 <___vfprintf_internal_r+0x3d8>
100022a0:	b809883a 	mov	r4,r23
100022a4:	d9410404 	addi	r5,sp,1040
100022a8:	0005a780 	call	10005a78 <_fflush_r>
100022ac:	1007301e 	bne	r2,zero,10003f70 <___vfprintf_internal_r+0x2098>
100022b0:	d881070b 	ldhu	r2,1052(sp)
100022b4:	1080100c 	andi	r2,r2,64
100022b8:	10000326 	beq	r2,zero,100022c8 <___vfprintf_internal_r+0x3f0>
100022bc:	b080030b 	ldhu	r2,12(r22)
100022c0:	10801014 	ori	r2,r2,64
100022c4:	b080030d 	sth	r2,12(r22)
100022c8:	8005883a 	mov	r2,r16
100022cc:	00000106 	br	100022d4 <___vfprintf_internal_r+0x3fc>
100022d0:	00bfffc4 	movi	r2,-1
100022d4:	dfc14917 	ldw	ra,1316(sp)
100022d8:	df014817 	ldw	fp,1312(sp)
100022dc:	ddc14717 	ldw	r23,1308(sp)
100022e0:	dd814617 	ldw	r22,1304(sp)
100022e4:	dd414517 	ldw	r21,1300(sp)
100022e8:	dd014417 	ldw	r20,1296(sp)
100022ec:	dcc14317 	ldw	r19,1292(sp)
100022f0:	dc814217 	ldw	r18,1288(sp)
100022f4:	dc414117 	ldw	r17,1284(sp)
100022f8:	dc014017 	ldw	r16,1280(sp)
100022fc:	dec14a04 	addi	sp,sp,1320
10002300:	f800283a 	ret
10002304:	b809883a 	mov	r4,r23
10002308:	b00b883a 	mov	r5,r22
1000230c:	d9811e04 	addi	r6,sp,1144
10002310:	00089e40 	call	100089e4 <__sprint_r>
10002314:	1000081e 	bne	r2,zero,10002338 <___vfprintf_internal_r+0x460>
10002318:	da000404 	addi	r8,sp,16
1000231c:	003f4506 	br	10002034 <__alt_data_end+0xf8002034>
10002320:	d8812017 	ldw	r2,1152(sp)
10002324:	10000426 	beq	r2,zero,10002338 <___vfprintf_internal_r+0x460>
10002328:	b809883a 	mov	r4,r23
1000232c:	b00b883a 	mov	r5,r22
10002330:	d9811e04 	addi	r6,sp,1144
10002334:	00089e40 	call	100089e4 <__sprint_r>
10002338:	b080030b 	ldhu	r2,12(r22)
1000233c:	1080100c 	andi	r2,r2,64
10002340:	103fe31e 	bne	r2,zero,100022d0 <__alt_data_end+0xf80022d0>
10002344:	d8812f17 	ldw	r2,1212(sp)
10002348:	003fe206 	br	100022d4 <__alt_data_end+0xf80022d4>
1000234c:	b809883a 	mov	r4,r23
10002350:	00060340 	call	10006034 <__sinit>
10002354:	003ef806 	br	10001f38 <__alt_data_end+0xf8001f38>
10002358:	e005883a 	mov	r2,fp
1000235c:	9cc00114 	ori	r19,r19,4
10002360:	e4000007 	ldb	r16,0(fp)
10002364:	003f4406 	br	10002078 <__alt_data_end+0xf8002078>
10002368:	e4000007 	ldb	r16,0(fp)
1000236c:	01000a84 	movi	r4,42
10002370:	e0800044 	addi	r2,fp,1
10002374:	8106f626 	beq	r16,r4,10003f50 <___vfprintf_internal_r+0x2078>
10002378:	857ff404 	addi	r21,r16,-48
1000237c:	1039883a 	mov	fp,r2
10002380:	0013883a 	mov	r9,zero
10002384:	957f3d36 	bltu	r18,r21,1000207c <__alt_data_end+0xf800207c>
10002388:	0009883a 	mov	r4,zero
1000238c:	01400284 	movi	r5,10
10002390:	00013880 	call	10001388 <__mulsi3>
10002394:	e4000007 	ldb	r16,0(fp)
10002398:	a889883a 	add	r4,r21,r2
1000239c:	e7000044 	addi	fp,fp,1
100023a0:	857ff404 	addi	r21,r16,-48
100023a4:	957ff92e 	bgeu	r18,r21,1000238c <__alt_data_end+0xf800238c>
100023a8:	2013883a 	mov	r9,r4
100023ac:	203f330e 	bge	r4,zero,1000207c <__alt_data_end+0xf800207c>
100023b0:	027fffc4 	movi	r9,-1
100023b4:	003f3106 	br	1000207c <__alt_data_end+0xf800207c>
100023b8:	9cc02014 	ori	r19,r19,128
100023bc:	e005883a 	mov	r2,fp
100023c0:	e4000007 	ldb	r16,0(fp)
100023c4:	003f2c06 	br	10002078 <__alt_data_end+0xf8002078>
100023c8:	857ff404 	addi	r21,r16,-48
100023cc:	d8012e15 	stw	zero,1208(sp)
100023d0:	e021883a 	mov	r16,fp
100023d4:	0009883a 	mov	r4,zero
100023d8:	da412c15 	stw	r9,1200(sp)
100023dc:	01400284 	movi	r5,10
100023e0:	00013880 	call	10001388 <__mulsi3>
100023e4:	81400007 	ldb	r5,0(r16)
100023e8:	1549883a 	add	r4,r2,r21
100023ec:	e7000044 	addi	fp,fp,1
100023f0:	2d7ff404 	addi	r21,r5,-48
100023f4:	e021883a 	mov	r16,fp
100023f8:	957ff82e 	bgeu	r18,r21,100023dc <__alt_data_end+0xf80023dc>
100023fc:	2821883a 	mov	r16,r5
10002400:	d9012e15 	stw	r4,1208(sp)
10002404:	da412c17 	ldw	r9,1200(sp)
10002408:	003f1c06 	br	1000207c <__alt_data_end+0xf800207c>
1000240c:	da012a17 	ldw	r8,1192(sp)
10002410:	df012a15 	stw	fp,1192(sp)
10002414:	9839883a 	mov	fp,r19
10002418:	dcc12b03 	ldbu	r19,1196(sp)
1000241c:	e7000414 	ori	fp,fp,16
10002420:	e080080c 	andi	r2,fp,32
10002424:	dcc12785 	stb	r19,1182(sp)
10002428:	d8c12d17 	ldw	r3,1204(sp)
1000242c:	1001ce26 	beq	r2,zero,10002b68 <___vfprintf_internal_r+0xc90>
10002430:	d9012d17 	ldw	r4,1204(sp)
10002434:	18800117 	ldw	r2,4(r3)
10002438:	1c800017 	ldw	r18,0(r3)
1000243c:	21000204 	addi	r4,r4,8
10002440:	d9012d15 	stw	r4,1204(sp)
10002444:	102b883a 	mov	r21,r2
10002448:	10044916 	blt	r2,zero,10003570 <___vfprintf_internal_r+0x1698>
1000244c:	dcc12783 	ldbu	r19,1182(sp)
10002450:	da413215 	stw	r9,1224(sp)
10002454:	00800044 	movi	r2,1
10002458:	9546b03a 	or	r3,r18,r21
1000245c:	48000216 	blt	r9,zero,10002468 <___vfprintf_internal_r+0x590>
10002460:	013fdfc4 	movi	r4,-129
10002464:	e138703a 	and	fp,fp,r4
10002468:	1802251e 	bne	r3,zero,10002d00 <___vfprintf_internal_r+0xe28>
1000246c:	48031726 	beq	r9,zero,100030cc <___vfprintf_internal_r+0x11f4>
10002470:	10803fcc 	andi	r2,r2,255
10002474:	00c00044 	movi	r3,1
10002478:	10c24526 	beq	r2,r3,10002d90 <___vfprintf_internal_r+0xeb8>
1000247c:	00c00084 	movi	r3,2
10002480:	10c33426 	beq	r2,r3,10003154 <___vfprintf_internal_r+0x127c>
10002484:	d8c10e04 	addi	r3,sp,1080
10002488:	9008d0fa 	srli	r4,r18,3
1000248c:	a80a977a 	slli	r5,r21,29
10002490:	a82ad0fa 	srli	r21,r21,3
10002494:	948001cc 	andi	r18,r18,7
10002498:	90800c04 	addi	r2,r18,48
1000249c:	18ffffc4 	addi	r3,r3,-1
100024a0:	2924b03a 	or	r18,r5,r4
100024a4:	18800005 	stb	r2,0(r3)
100024a8:	9548b03a 	or	r4,r18,r21
100024ac:	203ff61e 	bne	r4,zero,10002488 <__alt_data_end+0xf8002488>
100024b0:	e100004c 	andi	r4,fp,1
100024b4:	d8c13115 	stw	r3,1220(sp)
100024b8:	20039a1e 	bne	r4,zero,10003324 <___vfprintf_internal_r+0x144c>
100024bc:	d8812817 	ldw	r2,1184(sp)
100024c0:	10e3c83a 	sub	r17,r2,r3
100024c4:	8805883a 	mov	r2,r17
100024c8:	8a40010e 	bge	r17,r9,100024d0 <___vfprintf_internal_r+0x5f8>
100024cc:	4805883a 	mov	r2,r9
100024d0:	d8812b15 	stw	r2,1196(sp)
100024d4:	d8013415 	stw	zero,1232(sp)
100024d8:	98803fcc 	andi	r2,r19,255
100024dc:	1080201c 	xori	r2,r2,128
100024e0:	10bfe004 	addi	r2,r2,-128
100024e4:	10000326 	beq	r2,zero,100024f4 <___vfprintf_internal_r+0x61c>
100024e8:	d8c12b17 	ldw	r3,1196(sp)
100024ec:	18c00044 	addi	r3,r3,1
100024f0:	d8c12b15 	stw	r3,1196(sp)
100024f4:	e0c0008c 	andi	r3,fp,2
100024f8:	d8c12c15 	stw	r3,1200(sp)
100024fc:	18000326 	beq	r3,zero,1000250c <___vfprintf_internal_r+0x634>
10002500:	d8c12b17 	ldw	r3,1196(sp)
10002504:	18c00084 	addi	r3,r3,2
10002508:	d8c12b15 	stw	r3,1196(sp)
1000250c:	e0c0210c 	andi	r3,fp,132
10002510:	d8c13015 	stw	r3,1216(sp)
10002514:	1801f81e 	bne	r3,zero,10002cf8 <___vfprintf_internal_r+0xe20>
10002518:	d9012e17 	ldw	r4,1208(sp)
1000251c:	d8c12b17 	ldw	r3,1196(sp)
10002520:	20ebc83a 	sub	r21,r4,r3
10002524:	0541f40e 	bge	zero,r21,10002cf8 <___vfprintf_internal_r+0xe20>
10002528:	02400404 	movi	r9,16
1000252c:	d8c12017 	ldw	r3,1152(sp)
10002530:	d8811f17 	ldw	r2,1148(sp)
10002534:	4d45750e 	bge	r9,r21,10003b0c <___vfprintf_internal_r+0x1c34>
10002538:	01440074 	movhi	r5,4097
1000253c:	29434d84 	addi	r5,r5,3382
10002540:	d9413615 	stw	r5,1240(sp)
10002544:	4827883a 	mov	r19,r9
10002548:	048001c4 	movi	r18,7
1000254c:	00000306 	br	1000255c <___vfprintf_internal_r+0x684>
10002550:	ad7ffc04 	addi	r21,r21,-16
10002554:	42000204 	addi	r8,r8,8
10002558:	9d40130e 	bge	r19,r21,100025a8 <___vfprintf_internal_r+0x6d0>
1000255c:	01040074 	movhi	r4,4097
10002560:	18c00404 	addi	r3,r3,16
10002564:	10800044 	addi	r2,r2,1
10002568:	21034d84 	addi	r4,r4,3382
1000256c:	41000015 	stw	r4,0(r8)
10002570:	44c00115 	stw	r19,4(r8)
10002574:	d8c12015 	stw	r3,1152(sp)
10002578:	d8811f15 	stw	r2,1148(sp)
1000257c:	90bff40e 	bge	r18,r2,10002550 <__alt_data_end+0xf8002550>
10002580:	b809883a 	mov	r4,r23
10002584:	b00b883a 	mov	r5,r22
10002588:	d9811e04 	addi	r6,sp,1144
1000258c:	00089e40 	call	100089e4 <__sprint_r>
10002590:	103f691e 	bne	r2,zero,10002338 <__alt_data_end+0xf8002338>
10002594:	ad7ffc04 	addi	r21,r21,-16
10002598:	d8c12017 	ldw	r3,1152(sp)
1000259c:	d8811f17 	ldw	r2,1148(sp)
100025a0:	da000404 	addi	r8,sp,16
100025a4:	9d7fed16 	blt	r19,r21,1000255c <__alt_data_end+0xf800255c>
100025a8:	d9413617 	ldw	r5,1240(sp)
100025ac:	a8c7883a 	add	r3,r21,r3
100025b0:	10800044 	addi	r2,r2,1
100025b4:	41400015 	stw	r5,0(r8)
100025b8:	45400115 	stw	r21,4(r8)
100025bc:	d8c12015 	stw	r3,1152(sp)
100025c0:	d8811f15 	stw	r2,1148(sp)
100025c4:	010001c4 	movi	r4,7
100025c8:	20832b16 	blt	r4,r2,10003278 <___vfprintf_internal_r+0x13a0>
100025cc:	d8812787 	ldb	r2,1182(sp)
100025d0:	42000204 	addi	r8,r8,8
100025d4:	10000c26 	beq	r2,zero,10002608 <___vfprintf_internal_r+0x730>
100025d8:	d8811f17 	ldw	r2,1148(sp)
100025dc:	d9012784 	addi	r4,sp,1182
100025e0:	18c00044 	addi	r3,r3,1
100025e4:	10800044 	addi	r2,r2,1
100025e8:	41000015 	stw	r4,0(r8)
100025ec:	01000044 	movi	r4,1
100025f0:	41000115 	stw	r4,4(r8)
100025f4:	d8c12015 	stw	r3,1152(sp)
100025f8:	d8811f15 	stw	r2,1148(sp)
100025fc:	010001c4 	movi	r4,7
10002600:	2082c416 	blt	r4,r2,10003114 <___vfprintf_internal_r+0x123c>
10002604:	42000204 	addi	r8,r8,8
10002608:	d8812c17 	ldw	r2,1200(sp)
1000260c:	10000c26 	beq	r2,zero,10002640 <___vfprintf_internal_r+0x768>
10002610:	d8811f17 	ldw	r2,1148(sp)
10002614:	d9012704 	addi	r4,sp,1180
10002618:	18c00084 	addi	r3,r3,2
1000261c:	10800044 	addi	r2,r2,1
10002620:	41000015 	stw	r4,0(r8)
10002624:	01000084 	movi	r4,2
10002628:	41000115 	stw	r4,4(r8)
1000262c:	d8c12015 	stw	r3,1152(sp)
10002630:	d8811f15 	stw	r2,1148(sp)
10002634:	010001c4 	movi	r4,7
10002638:	2082be16 	blt	r4,r2,10003134 <___vfprintf_internal_r+0x125c>
1000263c:	42000204 	addi	r8,r8,8
10002640:	d9013017 	ldw	r4,1216(sp)
10002644:	00802004 	movi	r2,128
10002648:	20822026 	beq	r4,r2,10002ecc <___vfprintf_internal_r+0xff4>
1000264c:	d9413217 	ldw	r5,1224(sp)
10002650:	2c67c83a 	sub	r19,r5,r17
10002654:	04c0260e 	bge	zero,r19,100026f0 <___vfprintf_internal_r+0x818>
10002658:	05400404 	movi	r21,16
1000265c:	d8811f17 	ldw	r2,1148(sp)
10002660:	acc4720e 	bge	r21,r19,1000382c <___vfprintf_internal_r+0x1954>
10002664:	01440074 	movhi	r5,4097
10002668:	29434984 	addi	r5,r5,3366
1000266c:	d9412c15 	stw	r5,1200(sp)
10002670:	048001c4 	movi	r18,7
10002674:	00000306 	br	10002684 <___vfprintf_internal_r+0x7ac>
10002678:	9cfffc04 	addi	r19,r19,-16
1000267c:	42000204 	addi	r8,r8,8
10002680:	acc0110e 	bge	r21,r19,100026c8 <___vfprintf_internal_r+0x7f0>
10002684:	18c00404 	addi	r3,r3,16
10002688:	10800044 	addi	r2,r2,1
1000268c:	45000015 	stw	r20,0(r8)
10002690:	45400115 	stw	r21,4(r8)
10002694:	d8c12015 	stw	r3,1152(sp)
10002698:	d8811f15 	stw	r2,1148(sp)
1000269c:	90bff60e 	bge	r18,r2,10002678 <__alt_data_end+0xf8002678>
100026a0:	b809883a 	mov	r4,r23
100026a4:	b00b883a 	mov	r5,r22
100026a8:	d9811e04 	addi	r6,sp,1144
100026ac:	00089e40 	call	100089e4 <__sprint_r>
100026b0:	103f211e 	bne	r2,zero,10002338 <__alt_data_end+0xf8002338>
100026b4:	9cfffc04 	addi	r19,r19,-16
100026b8:	d8c12017 	ldw	r3,1152(sp)
100026bc:	d8811f17 	ldw	r2,1148(sp)
100026c0:	da000404 	addi	r8,sp,16
100026c4:	acffef16 	blt	r21,r19,10002684 <__alt_data_end+0xf8002684>
100026c8:	d9012c17 	ldw	r4,1200(sp)
100026cc:	1cc7883a 	add	r3,r3,r19
100026d0:	10800044 	addi	r2,r2,1
100026d4:	41000015 	stw	r4,0(r8)
100026d8:	44c00115 	stw	r19,4(r8)
100026dc:	d8c12015 	stw	r3,1152(sp)
100026e0:	d8811f15 	stw	r2,1148(sp)
100026e4:	010001c4 	movi	r4,7
100026e8:	20828216 	blt	r4,r2,100030f4 <___vfprintf_internal_r+0x121c>
100026ec:	42000204 	addi	r8,r8,8
100026f0:	e080400c 	andi	r2,fp,256
100026f4:	1001ac1e 	bne	r2,zero,10002da8 <___vfprintf_internal_r+0xed0>
100026f8:	d8811f17 	ldw	r2,1148(sp)
100026fc:	d9413117 	ldw	r5,1220(sp)
10002700:	1c47883a 	add	r3,r3,r17
10002704:	10800044 	addi	r2,r2,1
10002708:	41400015 	stw	r5,0(r8)
1000270c:	44400115 	stw	r17,4(r8)
10002710:	d8c12015 	stw	r3,1152(sp)
10002714:	d8811f15 	stw	r2,1148(sp)
10002718:	010001c4 	movi	r4,7
1000271c:	20825d16 	blt	r4,r2,10003094 <___vfprintf_internal_r+0x11bc>
10002720:	42000204 	addi	r8,r8,8
10002724:	e080010c 	andi	r2,fp,4
10002728:	10003126 	beq	r2,zero,100027f0 <___vfprintf_internal_r+0x918>
1000272c:	d8812e17 	ldw	r2,1208(sp)
10002730:	d9012b17 	ldw	r4,1196(sp)
10002734:	1121c83a 	sub	r16,r2,r4
10002738:	04002d0e 	bge	zero,r16,100027f0 <___vfprintf_internal_r+0x918>
1000273c:	04400404 	movi	r17,16
10002740:	d8811f17 	ldw	r2,1148(sp)
10002744:	8c05340e 	bge	r17,r16,10003c18 <___vfprintf_internal_r+0x1d40>
10002748:	01040074 	movhi	r4,4097
1000274c:	21034d84 	addi	r4,r4,3382
10002750:	d9013615 	stw	r4,1240(sp)
10002754:	048001c4 	movi	r18,7
10002758:	00000306 	br	10002768 <___vfprintf_internal_r+0x890>
1000275c:	843ffc04 	addi	r16,r16,-16
10002760:	42000204 	addi	r8,r8,8
10002764:	8c00130e 	bge	r17,r16,100027b4 <___vfprintf_internal_r+0x8dc>
10002768:	01440074 	movhi	r5,4097
1000276c:	18c00404 	addi	r3,r3,16
10002770:	10800044 	addi	r2,r2,1
10002774:	29434d84 	addi	r5,r5,3382
10002778:	41400015 	stw	r5,0(r8)
1000277c:	44400115 	stw	r17,4(r8)
10002780:	d8c12015 	stw	r3,1152(sp)
10002784:	d8811f15 	stw	r2,1148(sp)
10002788:	90bff40e 	bge	r18,r2,1000275c <__alt_data_end+0xf800275c>
1000278c:	b809883a 	mov	r4,r23
10002790:	b00b883a 	mov	r5,r22
10002794:	d9811e04 	addi	r6,sp,1144
10002798:	00089e40 	call	100089e4 <__sprint_r>
1000279c:	103ee61e 	bne	r2,zero,10002338 <__alt_data_end+0xf8002338>
100027a0:	843ffc04 	addi	r16,r16,-16
100027a4:	d8c12017 	ldw	r3,1152(sp)
100027a8:	d8811f17 	ldw	r2,1148(sp)
100027ac:	da000404 	addi	r8,sp,16
100027b0:	8c3fed16 	blt	r17,r16,10002768 <__alt_data_end+0xf8002768>
100027b4:	d9013617 	ldw	r4,1240(sp)
100027b8:	1c07883a 	add	r3,r3,r16
100027bc:	10800044 	addi	r2,r2,1
100027c0:	41000015 	stw	r4,0(r8)
100027c4:	44000115 	stw	r16,4(r8)
100027c8:	d8c12015 	stw	r3,1152(sp)
100027cc:	d8811f15 	stw	r2,1148(sp)
100027d0:	010001c4 	movi	r4,7
100027d4:	2080060e 	bge	r4,r2,100027f0 <___vfprintf_internal_r+0x918>
100027d8:	b809883a 	mov	r4,r23
100027dc:	b00b883a 	mov	r5,r22
100027e0:	d9811e04 	addi	r6,sp,1144
100027e4:	00089e40 	call	100089e4 <__sprint_r>
100027e8:	103ed31e 	bne	r2,zero,10002338 <__alt_data_end+0xf8002338>
100027ec:	d8c12017 	ldw	r3,1152(sp)
100027f0:	df012b17 	ldw	fp,1196(sp)
100027f4:	d9412e17 	ldw	r5,1208(sp)
100027f8:	e140010e 	bge	fp,r5,10002800 <___vfprintf_internal_r+0x928>
100027fc:	2839883a 	mov	fp,r5
10002800:	d8812f17 	ldw	r2,1212(sp)
10002804:	1705883a 	add	r2,r2,fp
10002808:	d8812f15 	stw	r2,1212(sp)
1000280c:	1802291e 	bne	r3,zero,100030b4 <___vfprintf_internal_r+0x11dc>
10002810:	d8c12a17 	ldw	r3,1192(sp)
10002814:	d8011f15 	stw	zero,1148(sp)
10002818:	da000404 	addi	r8,sp,16
1000281c:	18800007 	ldb	r2,0(r3)
10002820:	103ded1e 	bne	r2,zero,10001fd8 <__alt_data_end+0xf8001fd8>
10002824:	dc012a17 	ldw	r16,1192(sp)
10002828:	003e0506 	br	10002040 <__alt_data_end+0xf8002040>
1000282c:	d9012d17 	ldw	r4,1204(sp)
10002830:	d9412d17 	ldw	r5,1204(sp)
10002834:	da012a17 	ldw	r8,1192(sp)
10002838:	21000017 	ldw	r4,0(r4)
1000283c:	29400117 	ldw	r5,4(r5)
10002840:	df012a15 	stw	fp,1192(sp)
10002844:	9839883a 	mov	fp,r19
10002848:	dcc12b03 	ldbu	r19,1196(sp)
1000284c:	d9013715 	stw	r4,1244(sp)
10002850:	d9413915 	stw	r5,1252(sp)
10002854:	da013f15 	stw	r8,1276(sp)
10002858:	da413e15 	stw	r9,1272(sp)
1000285c:	dcc12785 	stb	r19,1182(sp)
10002860:	00086940 	call	10008694 <__fpclassifyd>
10002864:	d8c12d17 	ldw	r3,1204(sp)
10002868:	04400044 	movi	r17,1
1000286c:	da013f17 	ldw	r8,1276(sp)
10002870:	1c800204 	addi	r18,r3,8
10002874:	da413e17 	ldw	r9,1272(sp)
10002878:	d9013717 	ldw	r4,1244(sp)
1000287c:	d9413917 	ldw	r5,1252(sp)
10002880:	1443451e 	bne	r2,r17,10003598 <___vfprintf_internal_r+0x16c0>
10002884:	000d883a 	mov	r6,zero
10002888:	000f883a 	mov	r7,zero
1000288c:	000c8980 	call	1000c898 <__ledf2>
10002890:	da013f17 	ldw	r8,1276(sp)
10002894:	1004fe16 	blt	r2,zero,10003c90 <___vfprintf_internal_r+0x1db8>
10002898:	dcc12783 	ldbu	r19,1182(sp)
1000289c:	008011c4 	movi	r2,71
100028a0:	14045d0e 	bge	r2,r16,10003a18 <___vfprintf_internal_r+0x1b40>
100028a4:	01440074 	movhi	r5,4097
100028a8:	29433a04 	addi	r5,r5,3304
100028ac:	d9413115 	stw	r5,1220(sp)
100028b0:	00c000c4 	movi	r3,3
100028b4:	00bfdfc4 	movi	r2,-129
100028b8:	d8c12b15 	stw	r3,1196(sp)
100028bc:	e0b8703a 	and	fp,fp,r2
100028c0:	dc812d15 	stw	r18,1204(sp)
100028c4:	1823883a 	mov	r17,r3
100028c8:	d8013215 	stw	zero,1224(sp)
100028cc:	d8013415 	stw	zero,1232(sp)
100028d0:	003f0106 	br	100024d8 <__alt_data_end+0xf80024d8>
100028d4:	9cc00214 	ori	r19,r19,8
100028d8:	e005883a 	mov	r2,fp
100028dc:	e4000007 	ldb	r16,0(fp)
100028e0:	003de506 	br	10002078 <__alt_data_end+0xf8002078>
100028e4:	da012a17 	ldw	r8,1192(sp)
100028e8:	df012a15 	stw	fp,1192(sp)
100028ec:	9f000414 	ori	fp,r19,16
100028f0:	e0c0080c 	andi	r3,fp,32
100028f4:	d8812d17 	ldw	r2,1204(sp)
100028f8:	18007626 	beq	r3,zero,10002ad4 <___vfprintf_internal_r+0xbfc>
100028fc:	d9412d17 	ldw	r5,1204(sp)
10002900:	14800017 	ldw	r18,0(r2)
10002904:	15400117 	ldw	r21,4(r2)
10002908:	29400204 	addi	r5,r5,8
1000290c:	d9412d15 	stw	r5,1204(sp)
10002910:	0005883a 	mov	r2,zero
10002914:	9546b03a 	or	r3,r18,r21
10002918:	d8012785 	stb	zero,1182(sp)
1000291c:	da413215 	stw	r9,1224(sp)
10002920:	0027883a 	mov	r19,zero
10002924:	003ecd06 	br	1000245c <__alt_data_end+0xf800245c>
10002928:	da012a17 	ldw	r8,1192(sp)
1000292c:	df012a15 	stw	fp,1192(sp)
10002930:	9f000414 	ori	fp,r19,16
10002934:	e0c0080c 	andi	r3,fp,32
10002938:	d8812d17 	ldw	r2,1204(sp)
1000293c:	18002c26 	beq	r3,zero,100029f0 <___vfprintf_internal_r+0xb18>
10002940:	d9012d17 	ldw	r4,1204(sp)
10002944:	14800017 	ldw	r18,0(r2)
10002948:	15400117 	ldw	r21,4(r2)
1000294c:	21000204 	addi	r4,r4,8
10002950:	d9012d15 	stw	r4,1204(sp)
10002954:	00800044 	movi	r2,1
10002958:	9546b03a 	or	r3,r18,r21
1000295c:	003fee06 	br	10002918 <__alt_data_end+0xf8002918>
10002960:	da012a17 	ldw	r8,1192(sp)
10002964:	df012a15 	stw	fp,1192(sp)
10002968:	9839883a 	mov	fp,r19
1000296c:	dcc12b03 	ldbu	r19,1196(sp)
10002970:	01440074 	movhi	r5,4097
10002974:	29433d04 	addi	r5,r5,3316
10002978:	dcc12785 	stb	r19,1182(sp)
1000297c:	d9413b15 	stw	r5,1260(sp)
10002980:	e0c0080c 	andi	r3,fp,32
10002984:	d8812d17 	ldw	r2,1204(sp)
10002988:	18002e26 	beq	r3,zero,10002a44 <___vfprintf_internal_r+0xb6c>
1000298c:	d9412d17 	ldw	r5,1204(sp)
10002990:	14800017 	ldw	r18,0(r2)
10002994:	15400117 	ldw	r21,4(r2)
10002998:	29400204 	addi	r5,r5,8
1000299c:	d9412d15 	stw	r5,1204(sp)
100029a0:	e080004c 	andi	r2,fp,1
100029a4:	10025c26 	beq	r2,zero,10003318 <___vfprintf_internal_r+0x1440>
100029a8:	9546b03a 	or	r3,r18,r21
100029ac:	18038f26 	beq	r3,zero,100037ec <___vfprintf_internal_r+0x1914>
100029b0:	00800c04 	movi	r2,48
100029b4:	d8812705 	stb	r2,1180(sp)
100029b8:	dc012745 	stb	r16,1181(sp)
100029bc:	e7000094 	ori	fp,fp,2
100029c0:	00800084 	movi	r2,2
100029c4:	003fd406 	br	10002918 <__alt_data_end+0xf8002918>
100029c8:	9cc00814 	ori	r19,r19,32
100029cc:	e005883a 	mov	r2,fp
100029d0:	e4000007 	ldb	r16,0(fp)
100029d4:	003da806 	br	10002078 <__alt_data_end+0xf8002078>
100029d8:	da012a17 	ldw	r8,1192(sp)
100029dc:	df012a15 	stw	fp,1192(sp)
100029e0:	9839883a 	mov	fp,r19
100029e4:	e0c0080c 	andi	r3,fp,32
100029e8:	d8812d17 	ldw	r2,1204(sp)
100029ec:	183fd41e 	bne	r3,zero,10002940 <__alt_data_end+0xf8002940>
100029f0:	e0c0040c 	andi	r3,fp,16
100029f4:	18035f26 	beq	r3,zero,10003774 <___vfprintf_internal_r+0x189c>
100029f8:	d9412d17 	ldw	r5,1204(sp)
100029fc:	14800017 	ldw	r18,0(r2)
10002a00:	002b883a 	mov	r21,zero
10002a04:	29400104 	addi	r5,r5,4
10002a08:	d9412d15 	stw	r5,1204(sp)
10002a0c:	00800044 	movi	r2,1
10002a10:	9007883a 	mov	r3,r18
10002a14:	003fc006 	br	10002918 <__alt_data_end+0xf8002918>
10002a18:	da012a17 	ldw	r8,1192(sp)
10002a1c:	df012a15 	stw	fp,1192(sp)
10002a20:	9839883a 	mov	fp,r19
10002a24:	dcc12b03 	ldbu	r19,1196(sp)
10002a28:	01040074 	movhi	r4,4097
10002a2c:	21034204 	addi	r4,r4,3336
10002a30:	d9013b15 	stw	r4,1260(sp)
10002a34:	dcc12785 	stb	r19,1182(sp)
10002a38:	e0c0080c 	andi	r3,fp,32
10002a3c:	d8812d17 	ldw	r2,1204(sp)
10002a40:	183fd21e 	bne	r3,zero,1000298c <__alt_data_end+0xf800298c>
10002a44:	e0c0040c 	andi	r3,fp,16
10002a48:	18035426 	beq	r3,zero,1000379c <___vfprintf_internal_r+0x18c4>
10002a4c:	d8c12d17 	ldw	r3,1204(sp)
10002a50:	14800017 	ldw	r18,0(r2)
10002a54:	002b883a 	mov	r21,zero
10002a58:	18c00104 	addi	r3,r3,4
10002a5c:	d8c12d15 	stw	r3,1204(sp)
10002a60:	003fcf06 	br	100029a0 <__alt_data_end+0xf80029a0>
10002a64:	e4000007 	ldb	r16,0(fp)
10002a68:	00801b04 	movi	r2,108
10002a6c:	8083f726 	beq	r16,r2,10003a4c <___vfprintf_internal_r+0x1b74>
10002a70:	9cc00414 	ori	r19,r19,16
10002a74:	e005883a 	mov	r2,fp
10002a78:	003d7f06 	br	10002078 <__alt_data_end+0xf8002078>
10002a7c:	da012a17 	ldw	r8,1192(sp)
10002a80:	df012a15 	stw	fp,1192(sp)
10002a84:	9839883a 	mov	fp,r19
10002a88:	dcc12b03 	ldbu	r19,1196(sp)
10002a8c:	e080080c 	andi	r2,fp,32
10002a90:	dcc12785 	stb	r19,1182(sp)
10002a94:	10032226 	beq	r2,zero,10003720 <___vfprintf_internal_r+0x1848>
10002a98:	d9412d17 	ldw	r5,1204(sp)
10002a9c:	d9012f17 	ldw	r4,1212(sp)
10002aa0:	28800017 	ldw	r2,0(r5)
10002aa4:	2007d7fa 	srai	r3,r4,31
10002aa8:	29400104 	addi	r5,r5,4
10002aac:	d9412d15 	stw	r5,1204(sp)
10002ab0:	11000015 	stw	r4,0(r2)
10002ab4:	10c00115 	stw	r3,4(r2)
10002ab8:	003d4406 	br	10001fcc <__alt_data_end+0xf8001fcc>
10002abc:	da012a17 	ldw	r8,1192(sp)
10002ac0:	df012a15 	stw	fp,1192(sp)
10002ac4:	9839883a 	mov	fp,r19
10002ac8:	e0c0080c 	andi	r3,fp,32
10002acc:	d8812d17 	ldw	r2,1204(sp)
10002ad0:	183f8a1e 	bne	r3,zero,100028fc <__alt_data_end+0xf80028fc>
10002ad4:	e0c0040c 	andi	r3,fp,16
10002ad8:	18031c26 	beq	r3,zero,1000374c <___vfprintf_internal_r+0x1874>
10002adc:	14800017 	ldw	r18,0(r2)
10002ae0:	d8812d17 	ldw	r2,1204(sp)
10002ae4:	002b883a 	mov	r21,zero
10002ae8:	9007883a 	mov	r3,r18
10002aec:	10800104 	addi	r2,r2,4
10002af0:	d8812d15 	stw	r2,1204(sp)
10002af4:	0005883a 	mov	r2,zero
10002af8:	003f8706 	br	10002918 <__alt_data_end+0xf8002918>
10002afc:	d9412d17 	ldw	r5,1204(sp)
10002b00:	00800c04 	movi	r2,48
10002b04:	d8812705 	stb	r2,1180(sp)
10002b08:	2c800017 	ldw	r18,0(r5)
10002b0c:	00801e04 	movi	r2,120
10002b10:	d8812745 	stb	r2,1181(sp)
10002b14:	00840074 	movhi	r2,4097
10002b18:	10834204 	addi	r2,r2,3336
10002b1c:	29400104 	addi	r5,r5,4
10002b20:	da012a17 	ldw	r8,1192(sp)
10002b24:	d8813b15 	stw	r2,1260(sp)
10002b28:	df012a15 	stw	fp,1192(sp)
10002b2c:	002b883a 	mov	r21,zero
10002b30:	9f000094 	ori	fp,r19,2
10002b34:	d9412d15 	stw	r5,1204(sp)
10002b38:	00800084 	movi	r2,2
10002b3c:	04001e04 	movi	r16,120
10002b40:	9007883a 	mov	r3,r18
10002b44:	003f7406 	br	10002918 <__alt_data_end+0xf8002918>
10002b48:	da012a17 	ldw	r8,1192(sp)
10002b4c:	df012a15 	stw	fp,1192(sp)
10002b50:	9839883a 	mov	fp,r19
10002b54:	dcc12b03 	ldbu	r19,1196(sp)
10002b58:	e080080c 	andi	r2,fp,32
10002b5c:	d8c12d17 	ldw	r3,1204(sp)
10002b60:	dcc12785 	stb	r19,1182(sp)
10002b64:	103e321e 	bne	r2,zero,10002430 <__alt_data_end+0xf8002430>
10002b68:	e080040c 	andi	r2,fp,16
10002b6c:	10031326 	beq	r2,zero,100037bc <___vfprintf_internal_r+0x18e4>
10002b70:	1c800017 	ldw	r18,0(r3)
10002b74:	d9412d17 	ldw	r5,1204(sp)
10002b78:	902bd7fa 	srai	r21,r18,31
10002b7c:	29400104 	addi	r5,r5,4
10002b80:	d9412d15 	stw	r5,1204(sp)
10002b84:	a805883a 	mov	r2,r21
10002b88:	003e2f06 	br	10002448 <__alt_data_end+0xf8002448>
10002b8c:	9cc01014 	ori	r19,r19,64
10002b90:	e005883a 	mov	r2,fp
10002b94:	e4000007 	ldb	r16,0(fp)
10002b98:	003d3706 	br	10002078 <__alt_data_end+0xf8002078>
10002b9c:	d8c12d17 	ldw	r3,1204(sp)
10002ba0:	d9012d17 	ldw	r4,1204(sp)
10002ba4:	da012a17 	ldw	r8,1192(sp)
10002ba8:	18800017 	ldw	r2,0(r3)
10002bac:	21000104 	addi	r4,r4,4
10002bb0:	00c00044 	movi	r3,1
10002bb4:	df012a15 	stw	fp,1192(sp)
10002bb8:	d8c12b15 	stw	r3,1196(sp)
10002bbc:	9839883a 	mov	fp,r19
10002bc0:	d8012785 	stb	zero,1182(sp)
10002bc4:	d8810405 	stb	r2,1040(sp)
10002bc8:	d9012d15 	stw	r4,1204(sp)
10002bcc:	1823883a 	mov	r17,r3
10002bd0:	d8c10404 	addi	r3,sp,1040
10002bd4:	d8013215 	stw	zero,1224(sp)
10002bd8:	d8013415 	stw	zero,1232(sp)
10002bdc:	d8c13115 	stw	r3,1220(sp)
10002be0:	0005883a 	mov	r2,zero
10002be4:	003e4306 	br	100024f4 <__alt_data_end+0xf80024f4>
10002be8:	d8812b07 	ldb	r2,1196(sp)
10002bec:	1002fc1e 	bne	r2,zero,100037e0 <___vfprintf_internal_r+0x1908>
10002bf0:	00c00804 	movi	r3,32
10002bf4:	d8c12b05 	stb	r3,1196(sp)
10002bf8:	e005883a 	mov	r2,fp
10002bfc:	e4000007 	ldb	r16,0(fp)
10002c00:	003d1d06 	br	10002078 <__alt_data_end+0xf8002078>
10002c04:	9cc00054 	ori	r19,r19,1
10002c08:	e005883a 	mov	r2,fp
10002c0c:	e4000007 	ldb	r16,0(fp)
10002c10:	003d1906 	br	10002078 <__alt_data_end+0xf8002078>
10002c14:	d9012d17 	ldw	r4,1204(sp)
10002c18:	d9412d17 	ldw	r5,1204(sp)
10002c1c:	21000017 	ldw	r4,0(r4)
10002c20:	28c00104 	addi	r3,r5,4
10002c24:	d9012e15 	stw	r4,1208(sp)
10002c28:	20038c16 	blt	r4,zero,10003a5c <___vfprintf_internal_r+0x1b84>
10002c2c:	d8c12d15 	stw	r3,1204(sp)
10002c30:	e005883a 	mov	r2,fp
10002c34:	e4000007 	ldb	r16,0(fp)
10002c38:	003d0f06 	br	10002078 <__alt_data_end+0xf8002078>
10002c3c:	00c00ac4 	movi	r3,43
10002c40:	d8c12b05 	stb	r3,1196(sp)
10002c44:	e005883a 	mov	r2,fp
10002c48:	e4000007 	ldb	r16,0(fp)
10002c4c:	003d0a06 	br	10002078 <__alt_data_end+0xf8002078>
10002c50:	d8c12d17 	ldw	r3,1204(sp)
10002c54:	d9012d17 	ldw	r4,1204(sp)
10002c58:	da012a17 	ldw	r8,1192(sp)
10002c5c:	18c00017 	ldw	r3,0(r3)
10002c60:	df012a15 	stw	fp,1192(sp)
10002c64:	d8012785 	stb	zero,1182(sp)
10002c68:	d8c13115 	stw	r3,1220(sp)
10002c6c:	9839883a 	mov	fp,r19
10002c70:	24800104 	addi	r18,r4,4
10002c74:	1803f726 	beq	r3,zero,10003c54 <___vfprintf_internal_r+0x1d7c>
10002c78:	d9013117 	ldw	r4,1220(sp)
10002c7c:	48038916 	blt	r9,zero,10003aa4 <___vfprintf_internal_r+0x1bcc>
10002c80:	480d883a 	mov	r6,r9
10002c84:	000b883a 	mov	r5,zero
10002c88:	da013f15 	stw	r8,1276(sp)
10002c8c:	da413e15 	stw	r9,1272(sp)
10002c90:	0006d440 	call	10006d44 <memchr>
10002c94:	da013f17 	ldw	r8,1276(sp)
10002c98:	da413e17 	ldw	r9,1272(sp)
10002c9c:	10045926 	beq	r2,zero,10003e04 <___vfprintf_internal_r+0x1f2c>
10002ca0:	d8c13117 	ldw	r3,1220(sp)
10002ca4:	10e3c83a 	sub	r17,r2,r3
10002ca8:	4c433516 	blt	r9,r17,10003980 <___vfprintf_internal_r+0x1aa8>
10002cac:	8805883a 	mov	r2,r17
10002cb0:	88038116 	blt	r17,zero,10003ab8 <___vfprintf_internal_r+0x1be0>
10002cb4:	dcc12783 	ldbu	r19,1182(sp)
10002cb8:	d8812b15 	stw	r2,1196(sp)
10002cbc:	dc812d15 	stw	r18,1204(sp)
10002cc0:	d8013215 	stw	zero,1224(sp)
10002cc4:	d8013415 	stw	zero,1232(sp)
10002cc8:	003e0306 	br	100024d8 <__alt_data_end+0xf80024d8>
10002ccc:	da012a17 	ldw	r8,1192(sp)
10002cd0:	df012a15 	stw	fp,1192(sp)
10002cd4:	9839883a 	mov	fp,r19
10002cd8:	dcc12b03 	ldbu	r19,1196(sp)
10002cdc:	dcc12785 	stb	r19,1182(sp)
10002ce0:	803d8f26 	beq	r16,zero,10002320 <__alt_data_end+0xf8002320>
10002ce4:	00c00044 	movi	r3,1
10002ce8:	d8c12b15 	stw	r3,1196(sp)
10002cec:	dc010405 	stb	r16,1040(sp)
10002cf0:	d8012785 	stb	zero,1182(sp)
10002cf4:	003fb506 	br	10002bcc <__alt_data_end+0xf8002bcc>
10002cf8:	d8c12017 	ldw	r3,1152(sp)
10002cfc:	003e3506 	br	100025d4 <__alt_data_end+0xf80025d4>
10002d00:	10803fcc 	andi	r2,r2,255
10002d04:	00c00044 	movi	r3,1
10002d08:	10fddc1e 	bne	r2,r3,1000247c <__alt_data_end+0xf800247c>
10002d0c:	a800021e 	bne	r21,zero,10002d18 <___vfprintf_internal_r+0xe40>
10002d10:	00800244 	movi	r2,9
10002d14:	14801e2e 	bgeu	r2,r18,10002d90 <___vfprintf_internal_r+0xeb8>
10002d18:	dc012b15 	stw	r16,1196(sp)
10002d1c:	dc410e04 	addi	r17,sp,1080
10002d20:	9021883a 	mov	r16,r18
10002d24:	da012c15 	stw	r8,1200(sp)
10002d28:	a825883a 	mov	r18,r21
10002d2c:	482b883a 	mov	r21,r9
10002d30:	8009883a 	mov	r4,r16
10002d34:	900b883a 	mov	r5,r18
10002d38:	01800284 	movi	r6,10
10002d3c:	000f883a 	mov	r7,zero
10002d40:	000add00 	call	1000add0 <__umoddi3>
10002d44:	10800c04 	addi	r2,r2,48
10002d48:	8c7fffc4 	addi	r17,r17,-1
10002d4c:	8009883a 	mov	r4,r16
10002d50:	900b883a 	mov	r5,r18
10002d54:	01800284 	movi	r6,10
10002d58:	000f883a 	mov	r7,zero
10002d5c:	88800005 	stb	r2,0(r17)
10002d60:	000a7900 	call	1000a790 <__udivdi3>
10002d64:	1021883a 	mov	r16,r2
10002d68:	10c4b03a 	or	r2,r2,r3
10002d6c:	1825883a 	mov	r18,r3
10002d70:	103fef1e 	bne	r2,zero,10002d30 <__alt_data_end+0xf8002d30>
10002d74:	d9012817 	ldw	r4,1184(sp)
10002d78:	dc413115 	stw	r17,1220(sp)
10002d7c:	dc012b17 	ldw	r16,1196(sp)
10002d80:	da012c17 	ldw	r8,1200(sp)
10002d84:	a813883a 	mov	r9,r21
10002d88:	2463c83a 	sub	r17,r4,r17
10002d8c:	003dcd06 	br	100024c4 <__alt_data_end+0xf80024c4>
10002d90:	94800c04 	addi	r18,r18,48
10002d94:	d8c10dc4 	addi	r3,sp,1079
10002d98:	dc810dc5 	stb	r18,1079(sp)
10002d9c:	dc413c17 	ldw	r17,1264(sp)
10002da0:	d8c13115 	stw	r3,1220(sp)
10002da4:	003dc706 	br	100024c4 <__alt_data_end+0xf80024c4>
10002da8:	00801944 	movi	r2,101
10002dac:	1400720e 	bge	r2,r16,10002f78 <___vfprintf_internal_r+0x10a0>
10002db0:	d9013717 	ldw	r4,1244(sp)
10002db4:	d9413917 	ldw	r5,1252(sp)
10002db8:	000d883a 	mov	r6,zero
10002dbc:	000f883a 	mov	r7,zero
10002dc0:	d8c13d15 	stw	r3,1268(sp)
10002dc4:	da013f15 	stw	r8,1276(sp)
10002dc8:	000c7340 	call	1000c734 <__eqdf2>
10002dcc:	d8c13d17 	ldw	r3,1268(sp)
10002dd0:	da013f17 	ldw	r8,1276(sp)
10002dd4:	1000f41e 	bne	r2,zero,100031a8 <___vfprintf_internal_r+0x12d0>
10002dd8:	d8811f17 	ldw	r2,1148(sp)
10002ddc:	01040074 	movhi	r4,4097
10002de0:	21034904 	addi	r4,r4,3364
10002de4:	18c00044 	addi	r3,r3,1
10002de8:	10800044 	addi	r2,r2,1
10002dec:	41000015 	stw	r4,0(r8)
10002df0:	01000044 	movi	r4,1
10002df4:	41000115 	stw	r4,4(r8)
10002df8:	d8c12015 	stw	r3,1152(sp)
10002dfc:	d8811f15 	stw	r2,1148(sp)
10002e00:	010001c4 	movi	r4,7
10002e04:	20828d16 	blt	r4,r2,1000383c <___vfprintf_internal_r+0x1964>
10002e08:	42000204 	addi	r8,r8,8
10002e0c:	d8812617 	ldw	r2,1176(sp)
10002e10:	d9413317 	ldw	r5,1228(sp)
10002e14:	11400216 	blt	r2,r5,10002e20 <___vfprintf_internal_r+0xf48>
10002e18:	e080004c 	andi	r2,fp,1
10002e1c:	103e4126 	beq	r2,zero,10002724 <__alt_data_end+0xf8002724>
10002e20:	d8813817 	ldw	r2,1248(sp)
10002e24:	d9013517 	ldw	r4,1236(sp)
10002e28:	d9413817 	ldw	r5,1248(sp)
10002e2c:	1887883a 	add	r3,r3,r2
10002e30:	d8811f17 	ldw	r2,1148(sp)
10002e34:	41000015 	stw	r4,0(r8)
10002e38:	41400115 	stw	r5,4(r8)
10002e3c:	10800044 	addi	r2,r2,1
10002e40:	d8c12015 	stw	r3,1152(sp)
10002e44:	d8811f15 	stw	r2,1148(sp)
10002e48:	010001c4 	movi	r4,7
10002e4c:	20830916 	blt	r4,r2,10003a74 <___vfprintf_internal_r+0x1b9c>
10002e50:	42000204 	addi	r8,r8,8
10002e54:	d8813317 	ldw	r2,1228(sp)
10002e58:	143fffc4 	addi	r16,r2,-1
10002e5c:	043e310e 	bge	zero,r16,10002724 <__alt_data_end+0xf8002724>
10002e60:	04400404 	movi	r17,16
10002e64:	d8811f17 	ldw	r2,1148(sp)
10002e68:	8c007e0e 	bge	r17,r16,10003064 <___vfprintf_internal_r+0x118c>
10002e6c:	01440074 	movhi	r5,4097
10002e70:	29434984 	addi	r5,r5,3366
10002e74:	d9412c15 	stw	r5,1200(sp)
10002e78:	04c001c4 	movi	r19,7
10002e7c:	00000306 	br	10002e8c <___vfprintf_internal_r+0xfb4>
10002e80:	42000204 	addi	r8,r8,8
10002e84:	843ffc04 	addi	r16,r16,-16
10002e88:	8c00790e 	bge	r17,r16,10003070 <___vfprintf_internal_r+0x1198>
10002e8c:	18c00404 	addi	r3,r3,16
10002e90:	10800044 	addi	r2,r2,1
10002e94:	45000015 	stw	r20,0(r8)
10002e98:	44400115 	stw	r17,4(r8)
10002e9c:	d8c12015 	stw	r3,1152(sp)
10002ea0:	d8811f15 	stw	r2,1148(sp)
10002ea4:	98bff60e 	bge	r19,r2,10002e80 <__alt_data_end+0xf8002e80>
10002ea8:	b809883a 	mov	r4,r23
10002eac:	b00b883a 	mov	r5,r22
10002eb0:	d9811e04 	addi	r6,sp,1144
10002eb4:	00089e40 	call	100089e4 <__sprint_r>
10002eb8:	103d1f1e 	bne	r2,zero,10002338 <__alt_data_end+0xf8002338>
10002ebc:	d8c12017 	ldw	r3,1152(sp)
10002ec0:	d8811f17 	ldw	r2,1148(sp)
10002ec4:	da000404 	addi	r8,sp,16
10002ec8:	003fee06 	br	10002e84 <__alt_data_end+0xf8002e84>
10002ecc:	d9412e17 	ldw	r5,1208(sp)
10002ed0:	d8812b17 	ldw	r2,1196(sp)
10002ed4:	28a7c83a 	sub	r19,r5,r2
10002ed8:	04fddc0e 	bge	zero,r19,1000264c <__alt_data_end+0xf800264c>
10002edc:	05400404 	movi	r21,16
10002ee0:	d8811f17 	ldw	r2,1148(sp)
10002ee4:	acc3870e 	bge	r21,r19,10003d04 <___vfprintf_internal_r+0x1e2c>
10002ee8:	01440074 	movhi	r5,4097
10002eec:	29434984 	addi	r5,r5,3366
10002ef0:	d9412c15 	stw	r5,1200(sp)
10002ef4:	048001c4 	movi	r18,7
10002ef8:	00000306 	br	10002f08 <___vfprintf_internal_r+0x1030>
10002efc:	9cfffc04 	addi	r19,r19,-16
10002f00:	42000204 	addi	r8,r8,8
10002f04:	acc0110e 	bge	r21,r19,10002f4c <___vfprintf_internal_r+0x1074>
10002f08:	18c00404 	addi	r3,r3,16
10002f0c:	10800044 	addi	r2,r2,1
10002f10:	45000015 	stw	r20,0(r8)
10002f14:	45400115 	stw	r21,4(r8)
10002f18:	d8c12015 	stw	r3,1152(sp)
10002f1c:	d8811f15 	stw	r2,1148(sp)
10002f20:	90bff60e 	bge	r18,r2,10002efc <__alt_data_end+0xf8002efc>
10002f24:	b809883a 	mov	r4,r23
10002f28:	b00b883a 	mov	r5,r22
10002f2c:	d9811e04 	addi	r6,sp,1144
10002f30:	00089e40 	call	100089e4 <__sprint_r>
10002f34:	103d001e 	bne	r2,zero,10002338 <__alt_data_end+0xf8002338>
10002f38:	9cfffc04 	addi	r19,r19,-16
10002f3c:	d8c12017 	ldw	r3,1152(sp)
10002f40:	d8811f17 	ldw	r2,1148(sp)
10002f44:	da000404 	addi	r8,sp,16
10002f48:	acffef16 	blt	r21,r19,10002f08 <__alt_data_end+0xf8002f08>
10002f4c:	d9012c17 	ldw	r4,1200(sp)
10002f50:	1cc7883a 	add	r3,r3,r19
10002f54:	10800044 	addi	r2,r2,1
10002f58:	41000015 	stw	r4,0(r8)
10002f5c:	44c00115 	stw	r19,4(r8)
10002f60:	d8c12015 	stw	r3,1152(sp)
10002f64:	d8811f15 	stw	r2,1148(sp)
10002f68:	010001c4 	movi	r4,7
10002f6c:	20817816 	blt	r4,r2,10003550 <___vfprintf_internal_r+0x1678>
10002f70:	42000204 	addi	r8,r8,8
10002f74:	003db506 	br	1000264c <__alt_data_end+0xf800264c>
10002f78:	d9413317 	ldw	r5,1228(sp)
10002f7c:	00800044 	movi	r2,1
10002f80:	18c00044 	addi	r3,r3,1
10002f84:	11413e0e 	bge	r2,r5,10003480 <___vfprintf_internal_r+0x15a8>
10002f88:	dc011f17 	ldw	r16,1148(sp)
10002f8c:	d8813117 	ldw	r2,1220(sp)
10002f90:	d8c12015 	stw	r3,1152(sp)
10002f94:	84000044 	addi	r16,r16,1
10002f98:	40800015 	stw	r2,0(r8)
10002f9c:	00800044 	movi	r2,1
10002fa0:	40800115 	stw	r2,4(r8)
10002fa4:	dc011f15 	stw	r16,1148(sp)
10002fa8:	008001c4 	movi	r2,7
10002fac:	14015616 	blt	r2,r16,10003508 <___vfprintf_internal_r+0x1630>
10002fb0:	42000204 	addi	r8,r8,8
10002fb4:	d9013817 	ldw	r4,1248(sp)
10002fb8:	d9413517 	ldw	r5,1236(sp)
10002fbc:	84000044 	addi	r16,r16,1
10002fc0:	1907883a 	add	r3,r3,r4
10002fc4:	41400015 	stw	r5,0(r8)
10002fc8:	41000115 	stw	r4,4(r8)
10002fcc:	d8c12015 	stw	r3,1152(sp)
10002fd0:	dc011f15 	stw	r16,1148(sp)
10002fd4:	008001c4 	movi	r2,7
10002fd8:	14015416 	blt	r2,r16,1000352c <___vfprintf_internal_r+0x1654>
10002fdc:	44400204 	addi	r17,r8,8
10002fe0:	d9013717 	ldw	r4,1244(sp)
10002fe4:	d9413917 	ldw	r5,1252(sp)
10002fe8:	000d883a 	mov	r6,zero
10002fec:	000f883a 	mov	r7,zero
10002ff0:	d8c13d15 	stw	r3,1268(sp)
10002ff4:	000c7340 	call	1000c734 <__eqdf2>
10002ff8:	d8c13d17 	ldw	r3,1268(sp)
10002ffc:	1000a726 	beq	r2,zero,1000329c <___vfprintf_internal_r+0x13c4>
10003000:	d9013317 	ldw	r4,1228(sp)
10003004:	d9413117 	ldw	r5,1220(sp)
10003008:	84000044 	addi	r16,r16,1
1000300c:	20bfffc4 	addi	r2,r4,-1
10003010:	1887883a 	add	r3,r3,r2
10003014:	29000044 	addi	r4,r5,1
10003018:	88800115 	stw	r2,4(r17)
1000301c:	89000015 	stw	r4,0(r17)
10003020:	d8c12015 	stw	r3,1152(sp)
10003024:	dc011f15 	stw	r16,1148(sp)
10003028:	008001c4 	movi	r2,7
1000302c:	14012d16 	blt	r2,r16,100034e4 <___vfprintf_internal_r+0x160c>
10003030:	8c400204 	addi	r17,r17,8
10003034:	d9413a17 	ldw	r5,1256(sp)
10003038:	dcc122c4 	addi	r19,sp,1163
1000303c:	84000044 	addi	r16,r16,1
10003040:	28c7883a 	add	r3,r5,r3
10003044:	8cc00015 	stw	r19,0(r17)
10003048:	89400115 	stw	r5,4(r17)
1000304c:	d8c12015 	stw	r3,1152(sp)
10003050:	dc011f15 	stw	r16,1148(sp)
10003054:	008001c4 	movi	r2,7
10003058:	14000e16 	blt	r2,r16,10003094 <___vfprintf_internal_r+0x11bc>
1000305c:	8a000204 	addi	r8,r17,8
10003060:	003db006 	br	10002724 <__alt_data_end+0xf8002724>
10003064:	01040074 	movhi	r4,4097
10003068:	21034984 	addi	r4,r4,3366
1000306c:	d9012c15 	stw	r4,1200(sp)
10003070:	d9012c17 	ldw	r4,1200(sp)
10003074:	1c07883a 	add	r3,r3,r16
10003078:	44000115 	stw	r16,4(r8)
1000307c:	41000015 	stw	r4,0(r8)
10003080:	10800044 	addi	r2,r2,1
10003084:	d8c12015 	stw	r3,1152(sp)
10003088:	d8811f15 	stw	r2,1148(sp)
1000308c:	010001c4 	movi	r4,7
10003090:	20bda30e 	bge	r4,r2,10002720 <__alt_data_end+0xf8002720>
10003094:	b809883a 	mov	r4,r23
10003098:	b00b883a 	mov	r5,r22
1000309c:	d9811e04 	addi	r6,sp,1144
100030a0:	00089e40 	call	100089e4 <__sprint_r>
100030a4:	103ca41e 	bne	r2,zero,10002338 <__alt_data_end+0xf8002338>
100030a8:	d8c12017 	ldw	r3,1152(sp)
100030ac:	da000404 	addi	r8,sp,16
100030b0:	003d9c06 	br	10002724 <__alt_data_end+0xf8002724>
100030b4:	b809883a 	mov	r4,r23
100030b8:	b00b883a 	mov	r5,r22
100030bc:	d9811e04 	addi	r6,sp,1144
100030c0:	00089e40 	call	100089e4 <__sprint_r>
100030c4:	103dd226 	beq	r2,zero,10002810 <__alt_data_end+0xf8002810>
100030c8:	003c9b06 	br	10002338 <__alt_data_end+0xf8002338>
100030cc:	10803fcc 	andi	r2,r2,255
100030d0:	1000311e 	bne	r2,zero,10003198 <___vfprintf_internal_r+0x12c0>
100030d4:	e080004c 	andi	r2,fp,1
100030d8:	10002f26 	beq	r2,zero,10003198 <___vfprintf_internal_r+0x12c0>
100030dc:	00800c04 	movi	r2,48
100030e0:	d8c10dc4 	addi	r3,sp,1079
100030e4:	d8810dc5 	stb	r2,1079(sp)
100030e8:	dc413c17 	ldw	r17,1264(sp)
100030ec:	d8c13115 	stw	r3,1220(sp)
100030f0:	003cf406 	br	100024c4 <__alt_data_end+0xf80024c4>
100030f4:	b809883a 	mov	r4,r23
100030f8:	b00b883a 	mov	r5,r22
100030fc:	d9811e04 	addi	r6,sp,1144
10003100:	00089e40 	call	100089e4 <__sprint_r>
10003104:	103c8c1e 	bne	r2,zero,10002338 <__alt_data_end+0xf8002338>
10003108:	d8c12017 	ldw	r3,1152(sp)
1000310c:	da000404 	addi	r8,sp,16
10003110:	003d7706 	br	100026f0 <__alt_data_end+0xf80026f0>
10003114:	b809883a 	mov	r4,r23
10003118:	b00b883a 	mov	r5,r22
1000311c:	d9811e04 	addi	r6,sp,1144
10003120:	00089e40 	call	100089e4 <__sprint_r>
10003124:	103c841e 	bne	r2,zero,10002338 <__alt_data_end+0xf8002338>
10003128:	d8c12017 	ldw	r3,1152(sp)
1000312c:	da000404 	addi	r8,sp,16
10003130:	003d3506 	br	10002608 <__alt_data_end+0xf8002608>
10003134:	b809883a 	mov	r4,r23
10003138:	b00b883a 	mov	r5,r22
1000313c:	d9811e04 	addi	r6,sp,1144
10003140:	00089e40 	call	100089e4 <__sprint_r>
10003144:	103c7c1e 	bne	r2,zero,10002338 <__alt_data_end+0xf8002338>
10003148:	d8c12017 	ldw	r3,1152(sp)
1000314c:	da000404 	addi	r8,sp,16
10003150:	003d3b06 	br	10002640 <__alt_data_end+0xf8002640>
10003154:	d9413b17 	ldw	r5,1260(sp)
10003158:	d8c10e04 	addi	r3,sp,1080
1000315c:	908003cc 	andi	r2,r18,15
10003160:	a808973a 	slli	r4,r21,28
10003164:	2885883a 	add	r2,r5,r2
10003168:	9024d13a 	srli	r18,r18,4
1000316c:	10800003 	ldbu	r2,0(r2)
10003170:	a82ad13a 	srli	r21,r21,4
10003174:	18ffffc4 	addi	r3,r3,-1
10003178:	24a4b03a 	or	r18,r4,r18
1000317c:	18800005 	stb	r2,0(r3)
10003180:	9544b03a 	or	r2,r18,r21
10003184:	103ff51e 	bne	r2,zero,1000315c <__alt_data_end+0xf800315c>
10003188:	d9412817 	ldw	r5,1184(sp)
1000318c:	d8c13115 	stw	r3,1220(sp)
10003190:	28e3c83a 	sub	r17,r5,r3
10003194:	003ccb06 	br	100024c4 <__alt_data_end+0xf80024c4>
10003198:	d8c10e04 	addi	r3,sp,1080
1000319c:	0023883a 	mov	r17,zero
100031a0:	d8c13115 	stw	r3,1220(sp)
100031a4:	003cc706 	br	100024c4 <__alt_data_end+0xf80024c4>
100031a8:	dc012617 	ldw	r16,1176(sp)
100031ac:	0401ab0e 	bge	zero,r16,1000385c <___vfprintf_internal_r+0x1984>
100031b0:	d8813317 	ldw	r2,1228(sp)
100031b4:	d9413117 	ldw	r5,1220(sp)
100031b8:	d9013417 	ldw	r4,1232(sp)
100031bc:	1023883a 	mov	r17,r2
100031c0:	28a1883a 	add	r16,r5,r2
100031c4:	2080010e 	bge	r4,r2,100031cc <___vfprintf_internal_r+0x12f4>
100031c8:	2023883a 	mov	r17,r4
100031cc:	04400b0e 	bge	zero,r17,100031fc <___vfprintf_internal_r+0x1324>
100031d0:	d8811f17 	ldw	r2,1148(sp)
100031d4:	d9413117 	ldw	r5,1220(sp)
100031d8:	1c47883a 	add	r3,r3,r17
100031dc:	10800044 	addi	r2,r2,1
100031e0:	41400015 	stw	r5,0(r8)
100031e4:	44400115 	stw	r17,4(r8)
100031e8:	d8c12015 	stw	r3,1152(sp)
100031ec:	d8811f15 	stw	r2,1148(sp)
100031f0:	010001c4 	movi	r4,7
100031f4:	20826716 	blt	r4,r2,10003b94 <___vfprintf_internal_r+0x1cbc>
100031f8:	42000204 	addi	r8,r8,8
100031fc:	88026316 	blt	r17,zero,10003b8c <___vfprintf_internal_r+0x1cb4>
10003200:	d8813417 	ldw	r2,1232(sp)
10003204:	1463c83a 	sub	r17,r2,r17
10003208:	0440590e 	bge	zero,r17,10003370 <___vfprintf_internal_r+0x1498>
1000320c:	04c00404 	movi	r19,16
10003210:	d8811f17 	ldw	r2,1148(sp)
10003214:	9c41770e 	bge	r19,r17,100037f4 <___vfprintf_internal_r+0x191c>
10003218:	01440074 	movhi	r5,4097
1000321c:	29434984 	addi	r5,r5,3366
10003220:	d9412c15 	stw	r5,1200(sp)
10003224:	054001c4 	movi	r21,7
10003228:	00000306 	br	10003238 <___vfprintf_internal_r+0x1360>
1000322c:	42000204 	addi	r8,r8,8
10003230:	8c7ffc04 	addi	r17,r17,-16
10003234:	9c41720e 	bge	r19,r17,10003800 <___vfprintf_internal_r+0x1928>
10003238:	18c00404 	addi	r3,r3,16
1000323c:	10800044 	addi	r2,r2,1
10003240:	45000015 	stw	r20,0(r8)
10003244:	44c00115 	stw	r19,4(r8)
10003248:	d8c12015 	stw	r3,1152(sp)
1000324c:	d8811f15 	stw	r2,1148(sp)
10003250:	a8bff60e 	bge	r21,r2,1000322c <__alt_data_end+0xf800322c>
10003254:	b809883a 	mov	r4,r23
10003258:	b00b883a 	mov	r5,r22
1000325c:	d9811e04 	addi	r6,sp,1144
10003260:	00089e40 	call	100089e4 <__sprint_r>
10003264:	103c341e 	bne	r2,zero,10002338 <__alt_data_end+0xf8002338>
10003268:	d8c12017 	ldw	r3,1152(sp)
1000326c:	d8811f17 	ldw	r2,1148(sp)
10003270:	da000404 	addi	r8,sp,16
10003274:	003fee06 	br	10003230 <__alt_data_end+0xf8003230>
10003278:	b809883a 	mov	r4,r23
1000327c:	b00b883a 	mov	r5,r22
10003280:	d9811e04 	addi	r6,sp,1144
10003284:	00089e40 	call	100089e4 <__sprint_r>
10003288:	103c2b1e 	bne	r2,zero,10002338 <__alt_data_end+0xf8002338>
1000328c:	d8c12017 	ldw	r3,1152(sp)
10003290:	d8812787 	ldb	r2,1182(sp)
10003294:	da000404 	addi	r8,sp,16
10003298:	003cce06 	br	100025d4 <__alt_data_end+0xf80025d4>
1000329c:	d8813317 	ldw	r2,1228(sp)
100032a0:	14ffffc4 	addi	r19,r2,-1
100032a4:	04ff630e 	bge	zero,r19,10003034 <__alt_data_end+0xf8003034>
100032a8:	05400404 	movi	r21,16
100032ac:	acc0810e 	bge	r21,r19,100034b4 <___vfprintf_internal_r+0x15dc>
100032b0:	01440074 	movhi	r5,4097
100032b4:	29434984 	addi	r5,r5,3366
100032b8:	d9412c15 	stw	r5,1200(sp)
100032bc:	01c001c4 	movi	r7,7
100032c0:	00000306 	br	100032d0 <___vfprintf_internal_r+0x13f8>
100032c4:	8c400204 	addi	r17,r17,8
100032c8:	9cfffc04 	addi	r19,r19,-16
100032cc:	acc07c0e 	bge	r21,r19,100034c0 <___vfprintf_internal_r+0x15e8>
100032d0:	18c00404 	addi	r3,r3,16
100032d4:	84000044 	addi	r16,r16,1
100032d8:	8d000015 	stw	r20,0(r17)
100032dc:	8d400115 	stw	r21,4(r17)
100032e0:	d8c12015 	stw	r3,1152(sp)
100032e4:	dc011f15 	stw	r16,1148(sp)
100032e8:	3c3ff60e 	bge	r7,r16,100032c4 <__alt_data_end+0xf80032c4>
100032ec:	b809883a 	mov	r4,r23
100032f0:	b00b883a 	mov	r5,r22
100032f4:	d9811e04 	addi	r6,sp,1144
100032f8:	d9c13d15 	stw	r7,1268(sp)
100032fc:	00089e40 	call	100089e4 <__sprint_r>
10003300:	d9c13d17 	ldw	r7,1268(sp)
10003304:	103c0c1e 	bne	r2,zero,10002338 <__alt_data_end+0xf8002338>
10003308:	d8c12017 	ldw	r3,1152(sp)
1000330c:	dc011f17 	ldw	r16,1148(sp)
10003310:	dc400404 	addi	r17,sp,16
10003314:	003fec06 	br	100032c8 <__alt_data_end+0xf80032c8>
10003318:	00800084 	movi	r2,2
1000331c:	9546b03a 	or	r3,r18,r21
10003320:	003d7d06 	br	10002918 <__alt_data_end+0xf8002918>
10003324:	10803fcc 	andi	r2,r2,255
10003328:	1080201c 	xori	r2,r2,128
1000332c:	10bfe004 	addi	r2,r2,-128
10003330:	01000c04 	movi	r4,48
10003334:	1101d726 	beq	r2,r4,10003a94 <___vfprintf_internal_r+0x1bbc>
10003338:	d9413117 	ldw	r5,1220(sp)
1000333c:	d8812817 	ldw	r2,1184(sp)
10003340:	193fffc5 	stb	r4,-1(r3)
10003344:	297fffc4 	addi	r5,r5,-1
10003348:	d9413115 	stw	r5,1220(sp)
1000334c:	1163c83a 	sub	r17,r2,r5
10003350:	003c5c06 	br	100024c4 <__alt_data_end+0xf80024c4>
10003354:	b809883a 	mov	r4,r23
10003358:	b00b883a 	mov	r5,r22
1000335c:	d9811e04 	addi	r6,sp,1144
10003360:	00089e40 	call	100089e4 <__sprint_r>
10003364:	103bf41e 	bne	r2,zero,10002338 <__alt_data_end+0xf8002338>
10003368:	d8c12017 	ldw	r3,1152(sp)
1000336c:	da000404 	addi	r8,sp,16
10003370:	d9413117 	ldw	r5,1220(sp)
10003374:	d9013417 	ldw	r4,1232(sp)
10003378:	d8812617 	ldw	r2,1176(sp)
1000337c:	2923883a 	add	r17,r5,r4
10003380:	d9413317 	ldw	r5,1228(sp)
10003384:	11400216 	blt	r2,r5,10003390 <___vfprintf_internal_r+0x14b8>
10003388:	e100004c 	andi	r4,fp,1
1000338c:	20000d26 	beq	r4,zero,100033c4 <___vfprintf_internal_r+0x14ec>
10003390:	d9013817 	ldw	r4,1248(sp)
10003394:	d9413517 	ldw	r5,1236(sp)
10003398:	1907883a 	add	r3,r3,r4
1000339c:	d9011f17 	ldw	r4,1148(sp)
100033a0:	41400015 	stw	r5,0(r8)
100033a4:	d9413817 	ldw	r5,1248(sp)
100033a8:	21000044 	addi	r4,r4,1
100033ac:	d8c12015 	stw	r3,1152(sp)
100033b0:	41400115 	stw	r5,4(r8)
100033b4:	d9011f15 	stw	r4,1148(sp)
100033b8:	014001c4 	movi	r5,7
100033bc:	2901fd16 	blt	r5,r4,10003bb4 <___vfprintf_internal_r+0x1cdc>
100033c0:	42000204 	addi	r8,r8,8
100033c4:	d9013317 	ldw	r4,1228(sp)
100033c8:	2085c83a 	sub	r2,r4,r2
100033cc:	8449c83a 	sub	r4,r16,r17
100033d0:	1021883a 	mov	r16,r2
100033d4:	2080010e 	bge	r4,r2,100033dc <___vfprintf_internal_r+0x1504>
100033d8:	2021883a 	mov	r16,r4
100033dc:	04000a0e 	bge	zero,r16,10003408 <___vfprintf_internal_r+0x1530>
100033e0:	d9011f17 	ldw	r4,1148(sp)
100033e4:	1c07883a 	add	r3,r3,r16
100033e8:	44400015 	stw	r17,0(r8)
100033ec:	21000044 	addi	r4,r4,1
100033f0:	44000115 	stw	r16,4(r8)
100033f4:	d8c12015 	stw	r3,1152(sp)
100033f8:	d9011f15 	stw	r4,1148(sp)
100033fc:	014001c4 	movi	r5,7
10003400:	29020916 	blt	r5,r4,10003c28 <___vfprintf_internal_r+0x1d50>
10003404:	42000204 	addi	r8,r8,8
10003408:	80020116 	blt	r16,zero,10003c10 <___vfprintf_internal_r+0x1d38>
1000340c:	1421c83a 	sub	r16,r2,r16
10003410:	043cc40e 	bge	zero,r16,10002724 <__alt_data_end+0xf8002724>
10003414:	04400404 	movi	r17,16
10003418:	d8811f17 	ldw	r2,1148(sp)
1000341c:	8c3f110e 	bge	r17,r16,10003064 <__alt_data_end+0xf8003064>
10003420:	01440074 	movhi	r5,4097
10003424:	29434984 	addi	r5,r5,3366
10003428:	d9412c15 	stw	r5,1200(sp)
1000342c:	04c001c4 	movi	r19,7
10003430:	00000306 	br	10003440 <___vfprintf_internal_r+0x1568>
10003434:	42000204 	addi	r8,r8,8
10003438:	843ffc04 	addi	r16,r16,-16
1000343c:	8c3f0c0e 	bge	r17,r16,10003070 <__alt_data_end+0xf8003070>
10003440:	18c00404 	addi	r3,r3,16
10003444:	10800044 	addi	r2,r2,1
10003448:	45000015 	stw	r20,0(r8)
1000344c:	44400115 	stw	r17,4(r8)
10003450:	d8c12015 	stw	r3,1152(sp)
10003454:	d8811f15 	stw	r2,1148(sp)
10003458:	98bff60e 	bge	r19,r2,10003434 <__alt_data_end+0xf8003434>
1000345c:	b809883a 	mov	r4,r23
10003460:	b00b883a 	mov	r5,r22
10003464:	d9811e04 	addi	r6,sp,1144
10003468:	00089e40 	call	100089e4 <__sprint_r>
1000346c:	103bb21e 	bne	r2,zero,10002338 <__alt_data_end+0xf8002338>
10003470:	d8c12017 	ldw	r3,1152(sp)
10003474:	d8811f17 	ldw	r2,1148(sp)
10003478:	da000404 	addi	r8,sp,16
1000347c:	003fee06 	br	10003438 <__alt_data_end+0xf8003438>
10003480:	e088703a 	and	r4,fp,r2
10003484:	203ec01e 	bne	r4,zero,10002f88 <__alt_data_end+0xf8002f88>
10003488:	dc011f17 	ldw	r16,1148(sp)
1000348c:	d9013117 	ldw	r4,1220(sp)
10003490:	40800115 	stw	r2,4(r8)
10003494:	84000044 	addi	r16,r16,1
10003498:	41000015 	stw	r4,0(r8)
1000349c:	d8c12015 	stw	r3,1152(sp)
100034a0:	dc011f15 	stw	r16,1148(sp)
100034a4:	008001c4 	movi	r2,7
100034a8:	14000e16 	blt	r2,r16,100034e4 <___vfprintf_internal_r+0x160c>
100034ac:	44400204 	addi	r17,r8,8
100034b0:	003ee006 	br	10003034 <__alt_data_end+0xf8003034>
100034b4:	01040074 	movhi	r4,4097
100034b8:	21034984 	addi	r4,r4,3366
100034bc:	d9012c15 	stw	r4,1200(sp)
100034c0:	d8812c17 	ldw	r2,1200(sp)
100034c4:	1cc7883a 	add	r3,r3,r19
100034c8:	84000044 	addi	r16,r16,1
100034cc:	88800015 	stw	r2,0(r17)
100034d0:	8cc00115 	stw	r19,4(r17)
100034d4:	d8c12015 	stw	r3,1152(sp)
100034d8:	dc011f15 	stw	r16,1148(sp)
100034dc:	008001c4 	movi	r2,7
100034e0:	143ed30e 	bge	r2,r16,10003030 <__alt_data_end+0xf8003030>
100034e4:	b809883a 	mov	r4,r23
100034e8:	b00b883a 	mov	r5,r22
100034ec:	d9811e04 	addi	r6,sp,1144
100034f0:	00089e40 	call	100089e4 <__sprint_r>
100034f4:	103b901e 	bne	r2,zero,10002338 <__alt_data_end+0xf8002338>
100034f8:	d8c12017 	ldw	r3,1152(sp)
100034fc:	dc011f17 	ldw	r16,1148(sp)
10003500:	dc400404 	addi	r17,sp,16
10003504:	003ecb06 	br	10003034 <__alt_data_end+0xf8003034>
10003508:	b809883a 	mov	r4,r23
1000350c:	b00b883a 	mov	r5,r22
10003510:	d9811e04 	addi	r6,sp,1144
10003514:	00089e40 	call	100089e4 <__sprint_r>
10003518:	103b871e 	bne	r2,zero,10002338 <__alt_data_end+0xf8002338>
1000351c:	d8c12017 	ldw	r3,1152(sp)
10003520:	dc011f17 	ldw	r16,1148(sp)
10003524:	da000404 	addi	r8,sp,16
10003528:	003ea206 	br	10002fb4 <__alt_data_end+0xf8002fb4>
1000352c:	b809883a 	mov	r4,r23
10003530:	b00b883a 	mov	r5,r22
10003534:	d9811e04 	addi	r6,sp,1144
10003538:	00089e40 	call	100089e4 <__sprint_r>
1000353c:	103b7e1e 	bne	r2,zero,10002338 <__alt_data_end+0xf8002338>
10003540:	d8c12017 	ldw	r3,1152(sp)
10003544:	dc011f17 	ldw	r16,1148(sp)
10003548:	dc400404 	addi	r17,sp,16
1000354c:	003ea406 	br	10002fe0 <__alt_data_end+0xf8002fe0>
10003550:	b809883a 	mov	r4,r23
10003554:	b00b883a 	mov	r5,r22
10003558:	d9811e04 	addi	r6,sp,1144
1000355c:	00089e40 	call	100089e4 <__sprint_r>
10003560:	103b751e 	bne	r2,zero,10002338 <__alt_data_end+0xf8002338>
10003564:	d8c12017 	ldw	r3,1152(sp)
10003568:	da000404 	addi	r8,sp,16
1000356c:	003c3706 	br	1000264c <__alt_data_end+0xf800264c>
10003570:	04a5c83a 	sub	r18,zero,r18
10003574:	9004c03a 	cmpne	r2,r18,zero
10003578:	056bc83a 	sub	r21,zero,r21
1000357c:	a8abc83a 	sub	r21,r21,r2
10003580:	04c00b44 	movi	r19,45
10003584:	dcc12785 	stb	r19,1182(sp)
10003588:	da413215 	stw	r9,1224(sp)
1000358c:	00800044 	movi	r2,1
10003590:	9546b03a 	or	r3,r18,r21
10003594:	003bb106 	br	1000245c <__alt_data_end+0xf800245c>
10003598:	da013f15 	stw	r8,1276(sp)
1000359c:	da413e15 	stw	r9,1272(sp)
100035a0:	00086940 	call	10008694 <__fpclassifyd>
100035a4:	da013f17 	ldw	r8,1276(sp)
100035a8:	da413e17 	ldw	r9,1272(sp)
100035ac:	1000e526 	beq	r2,zero,10003944 <___vfprintf_internal_r+0x1a6c>
100035b0:	04fff7c4 	movi	r19,-33
100035b4:	00bfffc4 	movi	r2,-1
100035b8:	84e6703a 	and	r19,r16,r19
100035bc:	48822926 	beq	r9,r2,10003e64 <___vfprintf_internal_r+0x1f8c>
100035c0:	008011c4 	movi	r2,71
100035c4:	98821626 	beq	r19,r2,10003e20 <___vfprintf_internal_r+0x1f48>
100035c8:	d9013917 	ldw	r4,1252(sp)
100035cc:	e0c04014 	ori	r3,fp,256
100035d0:	d8c12d15 	stw	r3,1204(sp)
100035d4:	20021f16 	blt	r4,zero,10003e54 <___vfprintf_internal_r+0x1f7c>
100035d8:	dc413917 	ldw	r17,1252(sp)
100035dc:	d8012b05 	stb	zero,1196(sp)
100035e0:	00801984 	movi	r2,102
100035e4:	80814d26 	beq	r16,r2,10003b1c <___vfprintf_internal_r+0x1c44>
100035e8:	00801184 	movi	r2,70
100035ec:	80814b26 	beq	r16,r2,10003b1c <___vfprintf_internal_r+0x1c44>
100035f0:	00801144 	movi	r2,69
100035f4:	98821d26 	beq	r19,r2,10003e6c <___vfprintf_internal_r+0x1f94>
100035f8:	482b883a 	mov	r21,r9
100035fc:	d8812604 	addi	r2,sp,1176
10003600:	d8800115 	stw	r2,4(sp)
10003604:	d9413717 	ldw	r5,1244(sp)
10003608:	d8812504 	addi	r2,sp,1172
1000360c:	d8800215 	stw	r2,8(sp)
10003610:	d8812104 	addi	r2,sp,1156
10003614:	dd400015 	stw	r21,0(sp)
10003618:	d8800315 	stw	r2,12(sp)
1000361c:	b809883a 	mov	r4,r23
10003620:	880d883a 	mov	r6,r17
10003624:	01c00084 	movi	r7,2
10003628:	da013f15 	stw	r8,1276(sp)
1000362c:	da413e15 	stw	r9,1272(sp)
10003630:	00043500 	call	10004350 <_dtoa_r>
10003634:	d8813115 	stw	r2,1220(sp)
10003638:	008019c4 	movi	r2,103
1000363c:	da013f17 	ldw	r8,1276(sp)
10003640:	da413e17 	ldw	r9,1272(sp)
10003644:	80800226 	beq	r16,r2,10003650 <___vfprintf_internal_r+0x1778>
10003648:	008011c4 	movi	r2,71
1000364c:	8081451e 	bne	r16,r2,10003b64 <___vfprintf_internal_r+0x1c8c>
10003650:	e080004c 	andi	r2,fp,1
10003654:	10021e26 	beq	r2,zero,10003ed0 <___vfprintf_internal_r+0x1ff8>
10003658:	d8c13117 	ldw	r3,1220(sp)
1000365c:	1d55883a 	add	r10,r3,r21
10003660:	d9013717 	ldw	r4,1244(sp)
10003664:	880b883a 	mov	r5,r17
10003668:	000d883a 	mov	r6,zero
1000366c:	000f883a 	mov	r7,zero
10003670:	da013f15 	stw	r8,1276(sp)
10003674:	da413e15 	stw	r9,1272(sp)
10003678:	da813d15 	stw	r10,1268(sp)
1000367c:	000c7340 	call	1000c734 <__eqdf2>
10003680:	da013f17 	ldw	r8,1276(sp)
10003684:	da413e17 	ldw	r9,1272(sp)
10003688:	da813d17 	ldw	r10,1268(sp)
1000368c:	1001a126 	beq	r2,zero,10003d14 <___vfprintf_internal_r+0x1e3c>
10003690:	d8812117 	ldw	r2,1156(sp)
10003694:	1280062e 	bgeu	r2,r10,100036b0 <___vfprintf_internal_r+0x17d8>
10003698:	01000c04 	movi	r4,48
1000369c:	10c00044 	addi	r3,r2,1
100036a0:	d8c12115 	stw	r3,1156(sp)
100036a4:	11000005 	stb	r4,0(r2)
100036a8:	d8812117 	ldw	r2,1156(sp)
100036ac:	12bffb36 	bltu	r2,r10,1000369c <__alt_data_end+0xf800369c>
100036b0:	d8c13117 	ldw	r3,1220(sp)
100036b4:	10c5c83a 	sub	r2,r2,r3
100036b8:	d8813315 	stw	r2,1228(sp)
100036bc:	008011c4 	movi	r2,71
100036c0:	98818926 	beq	r19,r2,10003ce8 <___vfprintf_internal_r+0x1e10>
100036c4:	00801944 	movi	r2,101
100036c8:	14023c0e 	bge	r2,r16,10003fbc <___vfprintf_internal_r+0x20e4>
100036cc:	d8c12617 	ldw	r3,1176(sp)
100036d0:	00801984 	movi	r2,102
100036d4:	d8c13415 	stw	r3,1232(sp)
100036d8:	8081ef26 	beq	r16,r2,10003e98 <___vfprintf_internal_r+0x1fc0>
100036dc:	d8c13417 	ldw	r3,1232(sp)
100036e0:	d9013317 	ldw	r4,1228(sp)
100036e4:	1901e316 	blt	r3,r4,10003e74 <___vfprintf_internal_r+0x1f9c>
100036e8:	e080004c 	andi	r2,fp,1
100036ec:	1001f426 	beq	r2,zero,10003ec0 <___vfprintf_internal_r+0x1fe8>
100036f0:	d8c13417 	ldw	r3,1232(sp)
100036f4:	1c400044 	addi	r17,r3,1
100036f8:	8839883a 	mov	fp,r17
100036fc:	8801e416 	blt	r17,zero,10003e90 <___vfprintf_internal_r+0x1fb8>
10003700:	dd412b07 	ldb	r21,1196(sp)
10003704:	a801701e 	bne	r21,zero,10003cc8 <___vfprintf_internal_r+0x1df0>
10003708:	df012b15 	stw	fp,1196(sp)
1000370c:	dcc12783 	ldbu	r19,1182(sp)
10003710:	df012d17 	ldw	fp,1204(sp)
10003714:	d8013215 	stw	zero,1224(sp)
10003718:	dc812d15 	stw	r18,1204(sp)
1000371c:	003b6e06 	br	100024d8 <__alt_data_end+0xf80024d8>
10003720:	e080040c 	andi	r2,fp,16
10003724:	1000b51e 	bne	r2,zero,100039fc <___vfprintf_internal_r+0x1b24>
10003728:	e080100c 	andi	r2,fp,64
1000372c:	10015b26 	beq	r2,zero,10003c9c <___vfprintf_internal_r+0x1dc4>
10003730:	d9012d17 	ldw	r4,1204(sp)
10003734:	d9412f17 	ldw	r5,1212(sp)
10003738:	20800017 	ldw	r2,0(r4)
1000373c:	21000104 	addi	r4,r4,4
10003740:	d9012d15 	stw	r4,1204(sp)
10003744:	1140000d 	sth	r5,0(r2)
10003748:	003a2006 	br	10001fcc <__alt_data_end+0xf8001fcc>
1000374c:	e0c0100c 	andi	r3,fp,64
10003750:	1800a226 	beq	r3,zero,100039dc <___vfprintf_internal_r+0x1b04>
10003754:	d8c12d17 	ldw	r3,1204(sp)
10003758:	1480000b 	ldhu	r18,0(r2)
1000375c:	002b883a 	mov	r21,zero
10003760:	18c00104 	addi	r3,r3,4
10003764:	d8c12d15 	stw	r3,1204(sp)
10003768:	0005883a 	mov	r2,zero
1000376c:	9007883a 	mov	r3,r18
10003770:	003c6906 	br	10002918 <__alt_data_end+0xf8002918>
10003774:	e0c0100c 	andi	r3,fp,64
10003778:	18009026 	beq	r3,zero,100039bc <___vfprintf_internal_r+0x1ae4>
1000377c:	1480000b 	ldhu	r18,0(r2)
10003780:	d8812d17 	ldw	r2,1204(sp)
10003784:	002b883a 	mov	r21,zero
10003788:	9007883a 	mov	r3,r18
1000378c:	10800104 	addi	r2,r2,4
10003790:	d8812d15 	stw	r2,1204(sp)
10003794:	00800044 	movi	r2,1
10003798:	003c5f06 	br	10002918 <__alt_data_end+0xf8002918>
1000379c:	e0c0100c 	andi	r3,fp,64
100037a0:	18008026 	beq	r3,zero,100039a4 <___vfprintf_internal_r+0x1acc>
100037a4:	d9012d17 	ldw	r4,1204(sp)
100037a8:	1480000b 	ldhu	r18,0(r2)
100037ac:	002b883a 	mov	r21,zero
100037b0:	21000104 	addi	r4,r4,4
100037b4:	d9012d15 	stw	r4,1204(sp)
100037b8:	003c7906 	br	100029a0 <__alt_data_end+0xf80029a0>
100037bc:	e080100c 	andi	r2,fp,64
100037c0:	10007126 	beq	r2,zero,10003988 <___vfprintf_internal_r+0x1ab0>
100037c4:	1c80000f 	ldh	r18,0(r3)
100037c8:	d8812d17 	ldw	r2,1204(sp)
100037cc:	902bd7fa 	srai	r21,r18,31
100037d0:	10800104 	addi	r2,r2,4
100037d4:	d8812d15 	stw	r2,1204(sp)
100037d8:	a805883a 	mov	r2,r21
100037dc:	003b1a06 	br	10002448 <__alt_data_end+0xf8002448>
100037e0:	e4000007 	ldb	r16,0(fp)
100037e4:	e005883a 	mov	r2,fp
100037e8:	003a2306 	br	10002078 <__alt_data_end+0xf8002078>
100037ec:	00800084 	movi	r2,2
100037f0:	003c4906 	br	10002918 <__alt_data_end+0xf8002918>
100037f4:	01040074 	movhi	r4,4097
100037f8:	21034984 	addi	r4,r4,3366
100037fc:	d9012c15 	stw	r4,1200(sp)
10003800:	d9012c17 	ldw	r4,1200(sp)
10003804:	1c47883a 	add	r3,r3,r17
10003808:	10800044 	addi	r2,r2,1
1000380c:	41000015 	stw	r4,0(r8)
10003810:	44400115 	stw	r17,4(r8)
10003814:	d8c12015 	stw	r3,1152(sp)
10003818:	d8811f15 	stw	r2,1148(sp)
1000381c:	010001c4 	movi	r4,7
10003820:	20becc16 	blt	r4,r2,10003354 <__alt_data_end+0xf8003354>
10003824:	42000204 	addi	r8,r8,8
10003828:	003ed106 	br	10003370 <__alt_data_end+0xf8003370>
1000382c:	01040074 	movhi	r4,4097
10003830:	21034984 	addi	r4,r4,3366
10003834:	d9012c15 	stw	r4,1200(sp)
10003838:	003ba306 	br	100026c8 <__alt_data_end+0xf80026c8>
1000383c:	b809883a 	mov	r4,r23
10003840:	b00b883a 	mov	r5,r22
10003844:	d9811e04 	addi	r6,sp,1144
10003848:	00089e40 	call	100089e4 <__sprint_r>
1000384c:	103aba1e 	bne	r2,zero,10002338 <__alt_data_end+0xf8002338>
10003850:	d8c12017 	ldw	r3,1152(sp)
10003854:	da000404 	addi	r8,sp,16
10003858:	003d6c06 	br	10002e0c <__alt_data_end+0xf8002e0c>
1000385c:	d8811f17 	ldw	r2,1148(sp)
10003860:	01440074 	movhi	r5,4097
10003864:	01000044 	movi	r4,1
10003868:	18c00044 	addi	r3,r3,1
1000386c:	10800044 	addi	r2,r2,1
10003870:	29434904 	addi	r5,r5,3364
10003874:	41000115 	stw	r4,4(r8)
10003878:	41400015 	stw	r5,0(r8)
1000387c:	d8c12015 	stw	r3,1152(sp)
10003880:	d8811f15 	stw	r2,1148(sp)
10003884:	010001c4 	movi	r4,7
10003888:	20806716 	blt	r4,r2,10003a28 <___vfprintf_internal_r+0x1b50>
1000388c:	42000204 	addi	r8,r8,8
10003890:	8000041e 	bne	r16,zero,100038a4 <___vfprintf_internal_r+0x19cc>
10003894:	d8813317 	ldw	r2,1228(sp)
10003898:	1000021e 	bne	r2,zero,100038a4 <___vfprintf_internal_r+0x19cc>
1000389c:	e080004c 	andi	r2,fp,1
100038a0:	103ba026 	beq	r2,zero,10002724 <__alt_data_end+0xf8002724>
100038a4:	d9013817 	ldw	r4,1248(sp)
100038a8:	d8811f17 	ldw	r2,1148(sp)
100038ac:	d9413517 	ldw	r5,1236(sp)
100038b0:	1907883a 	add	r3,r3,r4
100038b4:	10800044 	addi	r2,r2,1
100038b8:	41000115 	stw	r4,4(r8)
100038bc:	41400015 	stw	r5,0(r8)
100038c0:	d8c12015 	stw	r3,1152(sp)
100038c4:	d8811f15 	stw	r2,1148(sp)
100038c8:	010001c4 	movi	r4,7
100038cc:	20815716 	blt	r4,r2,10003e2c <___vfprintf_internal_r+0x1f54>
100038d0:	42000204 	addi	r8,r8,8
100038d4:	0421c83a 	sub	r16,zero,r16
100038d8:	0400810e 	bge	zero,r16,10003ae0 <___vfprintf_internal_r+0x1c08>
100038dc:	04400404 	movi	r17,16
100038e0:	8c00bd0e 	bge	r17,r16,10003bd8 <___vfprintf_internal_r+0x1d00>
100038e4:	01440074 	movhi	r5,4097
100038e8:	29434984 	addi	r5,r5,3366
100038ec:	d9412c15 	stw	r5,1200(sp)
100038f0:	04c001c4 	movi	r19,7
100038f4:	00000306 	br	10003904 <___vfprintf_internal_r+0x1a2c>
100038f8:	42000204 	addi	r8,r8,8
100038fc:	843ffc04 	addi	r16,r16,-16
10003900:	8c00b80e 	bge	r17,r16,10003be4 <___vfprintf_internal_r+0x1d0c>
10003904:	18c00404 	addi	r3,r3,16
10003908:	10800044 	addi	r2,r2,1
1000390c:	45000015 	stw	r20,0(r8)
10003910:	44400115 	stw	r17,4(r8)
10003914:	d8c12015 	stw	r3,1152(sp)
10003918:	d8811f15 	stw	r2,1148(sp)
1000391c:	98bff60e 	bge	r19,r2,100038f8 <__alt_data_end+0xf80038f8>
10003920:	b809883a 	mov	r4,r23
10003924:	b00b883a 	mov	r5,r22
10003928:	d9811e04 	addi	r6,sp,1144
1000392c:	00089e40 	call	100089e4 <__sprint_r>
10003930:	103a811e 	bne	r2,zero,10002338 <__alt_data_end+0xf8002338>
10003934:	d8c12017 	ldw	r3,1152(sp)
10003938:	d8811f17 	ldw	r2,1148(sp)
1000393c:	da000404 	addi	r8,sp,16
10003940:	003fee06 	br	100038fc <__alt_data_end+0xf80038fc>
10003944:	008011c4 	movi	r2,71
10003948:	1400db16 	blt	r2,r16,10003cb8 <___vfprintf_internal_r+0x1de0>
1000394c:	01040074 	movhi	r4,4097
10003950:	21033b04 	addi	r4,r4,3308
10003954:	d9013115 	stw	r4,1220(sp)
10003958:	00c000c4 	movi	r3,3
1000395c:	00bfdfc4 	movi	r2,-129
10003960:	d8c12b15 	stw	r3,1196(sp)
10003964:	e0b8703a 	and	fp,fp,r2
10003968:	dcc12783 	ldbu	r19,1182(sp)
1000396c:	dc812d15 	stw	r18,1204(sp)
10003970:	1823883a 	mov	r17,r3
10003974:	d8013215 	stw	zero,1224(sp)
10003978:	d8013415 	stw	zero,1232(sp)
1000397c:	003ad606 	br	100024d8 <__alt_data_end+0xf80024d8>
10003980:	4823883a 	mov	r17,r9
10003984:	003cc906 	br	10002cac <__alt_data_end+0xf8002cac>
10003988:	1c800017 	ldw	r18,0(r3)
1000398c:	d8c12d17 	ldw	r3,1204(sp)
10003990:	902bd7fa 	srai	r21,r18,31
10003994:	18c00104 	addi	r3,r3,4
10003998:	d8c12d15 	stw	r3,1204(sp)
1000399c:	a805883a 	mov	r2,r21
100039a0:	003aa906 	br	10002448 <__alt_data_end+0xf8002448>
100039a4:	d9412d17 	ldw	r5,1204(sp)
100039a8:	14800017 	ldw	r18,0(r2)
100039ac:	002b883a 	mov	r21,zero
100039b0:	29400104 	addi	r5,r5,4
100039b4:	d9412d15 	stw	r5,1204(sp)
100039b8:	003bf906 	br	100029a0 <__alt_data_end+0xf80029a0>
100039bc:	d8c12d17 	ldw	r3,1204(sp)
100039c0:	14800017 	ldw	r18,0(r2)
100039c4:	002b883a 	mov	r21,zero
100039c8:	18c00104 	addi	r3,r3,4
100039cc:	d8c12d15 	stw	r3,1204(sp)
100039d0:	00800044 	movi	r2,1
100039d4:	9007883a 	mov	r3,r18
100039d8:	003bcf06 	br	10002918 <__alt_data_end+0xf8002918>
100039dc:	d9012d17 	ldw	r4,1204(sp)
100039e0:	14800017 	ldw	r18,0(r2)
100039e4:	002b883a 	mov	r21,zero
100039e8:	21000104 	addi	r4,r4,4
100039ec:	d9012d15 	stw	r4,1204(sp)
100039f0:	0005883a 	mov	r2,zero
100039f4:	9007883a 	mov	r3,r18
100039f8:	003bc706 	br	10002918 <__alt_data_end+0xf8002918>
100039fc:	d9412d17 	ldw	r5,1204(sp)
10003a00:	d8c12f17 	ldw	r3,1212(sp)
10003a04:	28800017 	ldw	r2,0(r5)
10003a08:	29400104 	addi	r5,r5,4
10003a0c:	d9412d15 	stw	r5,1204(sp)
10003a10:	10c00015 	stw	r3,0(r2)
10003a14:	00396d06 	br	10001fcc <__alt_data_end+0xf8001fcc>
10003a18:	01040074 	movhi	r4,4097
10003a1c:	21033904 	addi	r4,r4,3300
10003a20:	d9013115 	stw	r4,1220(sp)
10003a24:	003ba206 	br	100028b0 <__alt_data_end+0xf80028b0>
10003a28:	b809883a 	mov	r4,r23
10003a2c:	b00b883a 	mov	r5,r22
10003a30:	d9811e04 	addi	r6,sp,1144
10003a34:	00089e40 	call	100089e4 <__sprint_r>
10003a38:	103a3f1e 	bne	r2,zero,10002338 <__alt_data_end+0xf8002338>
10003a3c:	dc012617 	ldw	r16,1176(sp)
10003a40:	d8c12017 	ldw	r3,1152(sp)
10003a44:	da000404 	addi	r8,sp,16
10003a48:	003f9106 	br	10003890 <__alt_data_end+0xf8003890>
10003a4c:	e0800044 	addi	r2,fp,1
10003a50:	9cc00814 	ori	r19,r19,32
10003a54:	e4000047 	ldb	r16,1(fp)
10003a58:	00398706 	br	10002078 <__alt_data_end+0xf8002078>
10003a5c:	d8812e17 	ldw	r2,1208(sp)
10003a60:	d8c12d15 	stw	r3,1204(sp)
10003a64:	0085c83a 	sub	r2,zero,r2
10003a68:	d8812e15 	stw	r2,1208(sp)
10003a6c:	e005883a 	mov	r2,fp
10003a70:	003a3a06 	br	1000235c <__alt_data_end+0xf800235c>
10003a74:	b809883a 	mov	r4,r23
10003a78:	b00b883a 	mov	r5,r22
10003a7c:	d9811e04 	addi	r6,sp,1144
10003a80:	00089e40 	call	100089e4 <__sprint_r>
10003a84:	103a2c1e 	bne	r2,zero,10002338 <__alt_data_end+0xf8002338>
10003a88:	d8c12017 	ldw	r3,1152(sp)
10003a8c:	da000404 	addi	r8,sp,16
10003a90:	003cf006 	br	10002e54 <__alt_data_end+0xf8002e54>
10003a94:	d8c12817 	ldw	r3,1184(sp)
10003a98:	d9013117 	ldw	r4,1220(sp)
10003a9c:	1923c83a 	sub	r17,r3,r4
10003aa0:	003a8806 	br	100024c4 <__alt_data_end+0xf80024c4>
10003aa4:	da013f15 	stw	r8,1276(sp)
10003aa8:	0001e400 	call	10001e40 <strlen>
10003aac:	1023883a 	mov	r17,r2
10003ab0:	da013f17 	ldw	r8,1276(sp)
10003ab4:	883c7f0e 	bge	r17,zero,10002cb4 <__alt_data_end+0xf8002cb4>
10003ab8:	0005883a 	mov	r2,zero
10003abc:	003c7d06 	br	10002cb4 <__alt_data_end+0xf8002cb4>
10003ac0:	b809883a 	mov	r4,r23
10003ac4:	b00b883a 	mov	r5,r22
10003ac8:	d9811e04 	addi	r6,sp,1144
10003acc:	00089e40 	call	100089e4 <__sprint_r>
10003ad0:	103a191e 	bne	r2,zero,10002338 <__alt_data_end+0xf8002338>
10003ad4:	d8c12017 	ldw	r3,1152(sp)
10003ad8:	d8811f17 	ldw	r2,1148(sp)
10003adc:	da000404 	addi	r8,sp,16
10003ae0:	d9413317 	ldw	r5,1228(sp)
10003ae4:	d9013117 	ldw	r4,1220(sp)
10003ae8:	10800044 	addi	r2,r2,1
10003aec:	28c7883a 	add	r3,r5,r3
10003af0:	41000015 	stw	r4,0(r8)
10003af4:	41400115 	stw	r5,4(r8)
10003af8:	d8c12015 	stw	r3,1152(sp)
10003afc:	d8811f15 	stw	r2,1148(sp)
10003b00:	010001c4 	movi	r4,7
10003b04:	20bb060e 	bge	r4,r2,10002720 <__alt_data_end+0xf8002720>
10003b08:	003d6206 	br	10003094 <__alt_data_end+0xf8003094>
10003b0c:	01040074 	movhi	r4,4097
10003b10:	21034d84 	addi	r4,r4,3382
10003b14:	d9013615 	stw	r4,1240(sp)
10003b18:	003aa306 	br	100025a8 <__alt_data_end+0xf80025a8>
10003b1c:	d8812604 	addi	r2,sp,1176
10003b20:	d8800115 	stw	r2,4(sp)
10003b24:	d9413717 	ldw	r5,1244(sp)
10003b28:	d8812504 	addi	r2,sp,1172
10003b2c:	d8800215 	stw	r2,8(sp)
10003b30:	d8812104 	addi	r2,sp,1156
10003b34:	da400015 	stw	r9,0(sp)
10003b38:	d8800315 	stw	r2,12(sp)
10003b3c:	b809883a 	mov	r4,r23
10003b40:	880d883a 	mov	r6,r17
10003b44:	01c000c4 	movi	r7,3
10003b48:	da013f15 	stw	r8,1276(sp)
10003b4c:	da413e15 	stw	r9,1272(sp)
10003b50:	00043500 	call	10004350 <_dtoa_r>
10003b54:	da413e17 	ldw	r9,1272(sp)
10003b58:	da013f17 	ldw	r8,1276(sp)
10003b5c:	d8813115 	stw	r2,1220(sp)
10003b60:	482b883a 	mov	r21,r9
10003b64:	d8c13117 	ldw	r3,1220(sp)
10003b68:	00801184 	movi	r2,70
10003b6c:	1d55883a 	add	r10,r3,r21
10003b70:	98bebb1e 	bne	r19,r2,10003660 <__alt_data_end+0xf8003660>
10003b74:	19000007 	ldb	r4,0(r3)
10003b78:	00800c04 	movi	r2,48
10003b7c:	2080dd26 	beq	r4,r2,10003ef4 <___vfprintf_internal_r+0x201c>
10003b80:	d8c12617 	ldw	r3,1176(sp)
10003b84:	50d5883a 	add	r10,r10,r3
10003b88:	003eb506 	br	10003660 <__alt_data_end+0xf8003660>
10003b8c:	0023883a 	mov	r17,zero
10003b90:	003d9b06 	br	10003200 <__alt_data_end+0xf8003200>
10003b94:	b809883a 	mov	r4,r23
10003b98:	b00b883a 	mov	r5,r22
10003b9c:	d9811e04 	addi	r6,sp,1144
10003ba0:	00089e40 	call	100089e4 <__sprint_r>
10003ba4:	1039e41e 	bne	r2,zero,10002338 <__alt_data_end+0xf8002338>
10003ba8:	d8c12017 	ldw	r3,1152(sp)
10003bac:	da000404 	addi	r8,sp,16
10003bb0:	003d9206 	br	100031fc <__alt_data_end+0xf80031fc>
10003bb4:	b809883a 	mov	r4,r23
10003bb8:	b00b883a 	mov	r5,r22
10003bbc:	d9811e04 	addi	r6,sp,1144
10003bc0:	00089e40 	call	100089e4 <__sprint_r>
10003bc4:	1039dc1e 	bne	r2,zero,10002338 <__alt_data_end+0xf8002338>
10003bc8:	d8812617 	ldw	r2,1176(sp)
10003bcc:	d8c12017 	ldw	r3,1152(sp)
10003bd0:	da000404 	addi	r8,sp,16
10003bd4:	003dfb06 	br	100033c4 <__alt_data_end+0xf80033c4>
10003bd8:	01040074 	movhi	r4,4097
10003bdc:	21034984 	addi	r4,r4,3366
10003be0:	d9012c15 	stw	r4,1200(sp)
10003be4:	d9012c17 	ldw	r4,1200(sp)
10003be8:	1c07883a 	add	r3,r3,r16
10003bec:	10800044 	addi	r2,r2,1
10003bf0:	41000015 	stw	r4,0(r8)
10003bf4:	44000115 	stw	r16,4(r8)
10003bf8:	d8c12015 	stw	r3,1152(sp)
10003bfc:	d8811f15 	stw	r2,1148(sp)
10003c00:	010001c4 	movi	r4,7
10003c04:	20bfae16 	blt	r4,r2,10003ac0 <__alt_data_end+0xf8003ac0>
10003c08:	42000204 	addi	r8,r8,8
10003c0c:	003fb406 	br	10003ae0 <__alt_data_end+0xf8003ae0>
10003c10:	0021883a 	mov	r16,zero
10003c14:	003dfd06 	br	1000340c <__alt_data_end+0xf800340c>
10003c18:	01440074 	movhi	r5,4097
10003c1c:	29434d84 	addi	r5,r5,3382
10003c20:	d9413615 	stw	r5,1240(sp)
10003c24:	003ae306 	br	100027b4 <__alt_data_end+0xf80027b4>
10003c28:	b809883a 	mov	r4,r23
10003c2c:	b00b883a 	mov	r5,r22
10003c30:	d9811e04 	addi	r6,sp,1144
10003c34:	00089e40 	call	100089e4 <__sprint_r>
10003c38:	1039bf1e 	bne	r2,zero,10002338 <__alt_data_end+0xf8002338>
10003c3c:	d8812617 	ldw	r2,1176(sp)
10003c40:	d9413317 	ldw	r5,1228(sp)
10003c44:	d8c12017 	ldw	r3,1152(sp)
10003c48:	da000404 	addi	r8,sp,16
10003c4c:	2885c83a 	sub	r2,r5,r2
10003c50:	003ded06 	br	10003408 <__alt_data_end+0xf8003408>
10003c54:	00800184 	movi	r2,6
10003c58:	1240012e 	bgeu	r2,r9,10003c60 <___vfprintf_internal_r+0x1d88>
10003c5c:	1013883a 	mov	r9,r2
10003c60:	4823883a 	mov	r17,r9
10003c64:	4805883a 	mov	r2,r9
10003c68:	4800b216 	blt	r9,zero,10003f34 <___vfprintf_internal_r+0x205c>
10003c6c:	01440074 	movhi	r5,4097
10003c70:	29434704 	addi	r5,r5,3356
10003c74:	d8812b15 	stw	r2,1196(sp)
10003c78:	dc812d15 	stw	r18,1204(sp)
10003c7c:	d8013215 	stw	zero,1224(sp)
10003c80:	d8013415 	stw	zero,1232(sp)
10003c84:	d9413115 	stw	r5,1220(sp)
10003c88:	0005883a 	mov	r2,zero
10003c8c:	003a1906 	br	100024f4 <__alt_data_end+0xf80024f4>
10003c90:	04c00b44 	movi	r19,45
10003c94:	dcc12785 	stb	r19,1182(sp)
10003c98:	003b0006 	br	1000289c <__alt_data_end+0xf800289c>
10003c9c:	d8c12d17 	ldw	r3,1204(sp)
10003ca0:	d9012f17 	ldw	r4,1212(sp)
10003ca4:	18800017 	ldw	r2,0(r3)
10003ca8:	18c00104 	addi	r3,r3,4
10003cac:	d8c12d15 	stw	r3,1204(sp)
10003cb0:	11000015 	stw	r4,0(r2)
10003cb4:	0038c506 	br	10001fcc <__alt_data_end+0xf8001fcc>
10003cb8:	01440074 	movhi	r5,4097
10003cbc:	29433c04 	addi	r5,r5,3312
10003cc0:	d9413115 	stw	r5,1220(sp)
10003cc4:	003f2406 	br	10003958 <__alt_data_end+0xf8003958>
10003cc8:	00800b44 	movi	r2,45
10003ccc:	d8812785 	stb	r2,1182(sp)
10003cd0:	df012b15 	stw	fp,1196(sp)
10003cd4:	d8013215 	stw	zero,1224(sp)
10003cd8:	df012d17 	ldw	fp,1204(sp)
10003cdc:	00800b44 	movi	r2,45
10003ce0:	dc812d15 	stw	r18,1204(sp)
10003ce4:	003a0006 	br	100024e8 <__alt_data_end+0xf80024e8>
10003ce8:	d8c12617 	ldw	r3,1176(sp)
10003cec:	00bfff44 	movi	r2,-3
10003cf0:	18800a16 	blt	r3,r2,10003d1c <___vfprintf_internal_r+0x1e44>
10003cf4:	48c00916 	blt	r9,r3,10003d1c <___vfprintf_internal_r+0x1e44>
10003cf8:	d8c13415 	stw	r3,1232(sp)
10003cfc:	040019c4 	movi	r16,103
10003d00:	003e7606 	br	100036dc <__alt_data_end+0xf80036dc>
10003d04:	01040074 	movhi	r4,4097
10003d08:	21034984 	addi	r4,r4,3366
10003d0c:	d9012c15 	stw	r4,1200(sp)
10003d10:	003c8e06 	br	10002f4c <__alt_data_end+0xf8002f4c>
10003d14:	5005883a 	mov	r2,r10
10003d18:	003e6506 	br	100036b0 <__alt_data_end+0xf80036b0>
10003d1c:	843fff84 	addi	r16,r16,-2
10003d20:	1d7fffc4 	addi	r21,r3,-1
10003d24:	dd412615 	stw	r21,1176(sp)
10003d28:	dc0122c5 	stb	r16,1163(sp)
10003d2c:	a8009216 	blt	r21,zero,10003f78 <___vfprintf_internal_r+0x20a0>
10003d30:	00800ac4 	movi	r2,43
10003d34:	d8812305 	stb	r2,1164(sp)
10003d38:	00800244 	movi	r2,9
10003d3c:	1540660e 	bge	r2,r21,10003ed8 <___vfprintf_internal_r+0x2000>
10003d40:	dcc122c4 	addi	r19,sp,1163
10003d44:	dc012c15 	stw	r16,1200(sp)
10003d48:	4023883a 	mov	r17,r8
10003d4c:	9821883a 	mov	r16,r19
10003d50:	a809883a 	mov	r4,r21
10003d54:	01400284 	movi	r5,10
10003d58:	000b4ac0 	call	1000b4ac <__modsi3>
10003d5c:	10800c04 	addi	r2,r2,48
10003d60:	843fffc4 	addi	r16,r16,-1
10003d64:	a809883a 	mov	r4,r21
10003d68:	01400284 	movi	r5,10
10003d6c:	80800005 	stb	r2,0(r16)
10003d70:	000b4580 	call	1000b458 <__divsi3>
10003d74:	01000244 	movi	r4,9
10003d78:	102b883a 	mov	r21,r2
10003d7c:	20bff416 	blt	r4,r2,10003d50 <__alt_data_end+0xf8003d50>
10003d80:	8811883a 	mov	r8,r17
10003d84:	10800c04 	addi	r2,r2,48
10003d88:	8023883a 	mov	r17,r16
10003d8c:	897fffc4 	addi	r5,r17,-1
10003d90:	88bfffc5 	stb	r2,-1(r17)
10003d94:	dc012c17 	ldw	r16,1200(sp)
10003d98:	2cc08a2e 	bgeu	r5,r19,10003fc4 <___vfprintf_internal_r+0x20ec>
10003d9c:	d9812384 	addi	r6,sp,1166
10003da0:	344dc83a 	sub	r6,r6,r17
10003da4:	d9012344 	addi	r4,sp,1165
10003da8:	998d883a 	add	r6,r19,r6
10003dac:	00000106 	br	10003db4 <___vfprintf_internal_r+0x1edc>
10003db0:	28800003 	ldbu	r2,0(r5)
10003db4:	20800005 	stb	r2,0(r4)
10003db8:	21000044 	addi	r4,r4,1
10003dbc:	29400044 	addi	r5,r5,1
10003dc0:	21bffb1e 	bne	r4,r6,10003db0 <__alt_data_end+0xf8003db0>
10003dc4:	d8812304 	addi	r2,sp,1164
10003dc8:	1445c83a 	sub	r2,r2,r17
10003dcc:	d9412344 	addi	r5,sp,1165
10003dd0:	2885883a 	add	r2,r5,r2
10003dd4:	14e7c83a 	sub	r19,r2,r19
10003dd8:	d8813317 	ldw	r2,1228(sp)
10003ddc:	d8c13317 	ldw	r3,1228(sp)
10003de0:	dcc13a15 	stw	r19,1256(sp)
10003de4:	14e3883a 	add	r17,r2,r19
10003de8:	00800044 	movi	r2,1
10003dec:	10c0550e 	bge	r2,r3,10003f44 <___vfprintf_internal_r+0x206c>
10003df0:	8c400044 	addi	r17,r17,1
10003df4:	8839883a 	mov	fp,r17
10003df8:	88005016 	blt	r17,zero,10003f3c <___vfprintf_internal_r+0x2064>
10003dfc:	d8013415 	stw	zero,1232(sp)
10003e00:	003e3f06 	br	10003700 <__alt_data_end+0xf8003700>
10003e04:	da412b15 	stw	r9,1196(sp)
10003e08:	dcc12783 	ldbu	r19,1182(sp)
10003e0c:	4823883a 	mov	r17,r9
10003e10:	dc812d15 	stw	r18,1204(sp)
10003e14:	d8013215 	stw	zero,1224(sp)
10003e18:	d8013415 	stw	zero,1232(sp)
10003e1c:	0039ae06 	br	100024d8 <__alt_data_end+0xf80024d8>
10003e20:	483de91e 	bne	r9,zero,100035c8 <__alt_data_end+0xf80035c8>
10003e24:	8813883a 	mov	r9,r17
10003e28:	003de706 	br	100035c8 <__alt_data_end+0xf80035c8>
10003e2c:	b809883a 	mov	r4,r23
10003e30:	b00b883a 	mov	r5,r22
10003e34:	d9811e04 	addi	r6,sp,1144
10003e38:	00089e40 	call	100089e4 <__sprint_r>
10003e3c:	10393e1e 	bne	r2,zero,10002338 <__alt_data_end+0xf8002338>
10003e40:	dc012617 	ldw	r16,1176(sp)
10003e44:	d8c12017 	ldw	r3,1152(sp)
10003e48:	d8811f17 	ldw	r2,1148(sp)
10003e4c:	da000404 	addi	r8,sp,16
10003e50:	003ea006 	br	100038d4 <__alt_data_end+0xf80038d4>
10003e54:	00c00b44 	movi	r3,45
10003e58:	2460003c 	xorhi	r17,r4,32768
10003e5c:	d8c12b05 	stb	r3,1196(sp)
10003e60:	003ddf06 	br	100035e0 <__alt_data_end+0xf80035e0>
10003e64:	02400184 	movi	r9,6
10003e68:	003dd706 	br	100035c8 <__alt_data_end+0xf80035c8>
10003e6c:	4d400044 	addi	r21,r9,1
10003e70:	003de206 	br	100035fc <__alt_data_end+0xf80035fc>
10003e74:	d8c13417 	ldw	r3,1232(sp)
10003e78:	00c0490e 	bge	zero,r3,10003fa0 <___vfprintf_internal_r+0x20c8>
10003e7c:	04400044 	movi	r17,1
10003e80:	d9013317 	ldw	r4,1228(sp)
10003e84:	8923883a 	add	r17,r17,r4
10003e88:	8839883a 	mov	fp,r17
10003e8c:	883e1c0e 	bge	r17,zero,10003700 <__alt_data_end+0xf8003700>
10003e90:	0039883a 	mov	fp,zero
10003e94:	003e1a06 	br	10003700 <__alt_data_end+0xf8003700>
10003e98:	00c03b0e 	bge	zero,r3,10003f88 <___vfprintf_internal_r+0x20b0>
10003e9c:	4800021e 	bne	r9,zero,10003ea8 <___vfprintf_internal_r+0x1fd0>
10003ea0:	e080004c 	andi	r2,fp,1
10003ea4:	10000626 	beq	r2,zero,10003ec0 <___vfprintf_internal_r+0x1fe8>
10003ea8:	d8c13417 	ldw	r3,1232(sp)
10003eac:	4a400044 	addi	r9,r9,1
10003eb0:	1a63883a 	add	r17,r3,r9
10003eb4:	8839883a 	mov	fp,r17
10003eb8:	883e110e 	bge	r17,zero,10003700 <__alt_data_end+0xf8003700>
10003ebc:	003ff406 	br	10003e90 <__alt_data_end+0xf8003e90>
10003ec0:	1839883a 	mov	fp,r3
10003ec4:	18004116 	blt	r3,zero,10003fcc <___vfprintf_internal_r+0x20f4>
10003ec8:	dc413417 	ldw	r17,1232(sp)
10003ecc:	003e0c06 	br	10003700 <__alt_data_end+0xf8003700>
10003ed0:	d8812117 	ldw	r2,1156(sp)
10003ed4:	003df606 	br	100036b0 <__alt_data_end+0xf80036b0>
10003ed8:	00800c04 	movi	r2,48
10003edc:	a8c00c04 	addi	r3,r21,48
10003ee0:	d8812345 	stb	r2,1165(sp)
10003ee4:	d8c12385 	stb	r3,1166(sp)
10003ee8:	d88123c4 	addi	r2,sp,1167
10003eec:	dcc122c4 	addi	r19,sp,1163
10003ef0:	003fb806 	br	10003dd4 <__alt_data_end+0xf8003dd4>
10003ef4:	d9013717 	ldw	r4,1244(sp)
10003ef8:	880b883a 	mov	r5,r17
10003efc:	000d883a 	mov	r6,zero
10003f00:	000f883a 	mov	r7,zero
10003f04:	da013f15 	stw	r8,1276(sp)
10003f08:	da413e15 	stw	r9,1272(sp)
10003f0c:	da813d15 	stw	r10,1268(sp)
10003f10:	000c7340 	call	1000c734 <__eqdf2>
10003f14:	da013f17 	ldw	r8,1276(sp)
10003f18:	da413e17 	ldw	r9,1272(sp)
10003f1c:	da813d17 	ldw	r10,1268(sp)
10003f20:	103f1726 	beq	r2,zero,10003b80 <__alt_data_end+0xf8003b80>
10003f24:	00800044 	movi	r2,1
10003f28:	1547c83a 	sub	r3,r2,r21
10003f2c:	d8c12615 	stw	r3,1176(sp)
10003f30:	003f1406 	br	10003b84 <__alt_data_end+0xf8003b84>
10003f34:	0005883a 	mov	r2,zero
10003f38:	003f4c06 	br	10003c6c <__alt_data_end+0xf8003c6c>
10003f3c:	0039883a 	mov	fp,zero
10003f40:	003fae06 	br	10003dfc <__alt_data_end+0xf8003dfc>
10003f44:	e084703a 	and	r2,fp,r2
10003f48:	103faa26 	beq	r2,zero,10003df4 <__alt_data_end+0xf8003df4>
10003f4c:	003fa806 	br	10003df0 <__alt_data_end+0xf8003df0>
10003f50:	d9412d17 	ldw	r5,1204(sp)
10003f54:	2a400017 	ldw	r9,0(r5)
10003f58:	28c00104 	addi	r3,r5,4
10003f5c:	d8c12d15 	stw	r3,1204(sp)
10003f60:	483ebc0e 	bge	r9,zero,10003a54 <__alt_data_end+0xf8003a54>
10003f64:	027fffc4 	movi	r9,-1
10003f68:	e4000047 	ldb	r16,1(fp)
10003f6c:	00384206 	br	10002078 <__alt_data_end+0xf8002078>
10003f70:	043fffc4 	movi	r16,-1
10003f74:	0038ce06 	br	100022b0 <__alt_data_end+0xf80022b0>
10003f78:	00800b44 	movi	r2,45
10003f7c:	056bc83a 	sub	r21,zero,r21
10003f80:	d8812305 	stb	r2,1164(sp)
10003f84:	003f6c06 	br	10003d38 <__alt_data_end+0xf8003d38>
10003f88:	4800081e 	bne	r9,zero,10003fac <___vfprintf_internal_r+0x20d4>
10003f8c:	e080004c 	andi	r2,fp,1
10003f90:	1000061e 	bne	r2,zero,10003fac <___vfprintf_internal_r+0x20d4>
10003f94:	07000044 	movi	fp,1
10003f98:	e023883a 	mov	r17,fp
10003f9c:	003dd806 	br	10003700 <__alt_data_end+0xf8003700>
10003fa0:	04400084 	movi	r17,2
10003fa4:	88e3c83a 	sub	r17,r17,r3
10003fa8:	003fb506 	br	10003e80 <__alt_data_end+0xf8003e80>
10003fac:	4c400084 	addi	r17,r9,2
10003fb0:	8839883a 	mov	fp,r17
10003fb4:	883dd20e 	bge	r17,zero,10003700 <__alt_data_end+0xf8003700>
10003fb8:	003fb506 	br	10003e90 <__alt_data_end+0xf8003e90>
10003fbc:	d8c12617 	ldw	r3,1176(sp)
10003fc0:	003f5706 	br	10003d20 <__alt_data_end+0xf8003d20>
10003fc4:	d8812344 	addi	r2,sp,1165
10003fc8:	003f8206 	br	10003dd4 <__alt_data_end+0xf8003dd4>
10003fcc:	0039883a 	mov	fp,zero
10003fd0:	003fbd06 	br	10003ec8 <__alt_data_end+0xf8003ec8>

10003fd4 <__vfprintf_internal>:
10003fd4:	2007883a 	mov	r3,r4
10003fd8:	01040074 	movhi	r4,4097
10003fdc:	210ab504 	addi	r4,r4,10964
10003fe0:	21000017 	ldw	r4,0(r4)
10003fe4:	2805883a 	mov	r2,r5
10003fe8:	300f883a 	mov	r7,r6
10003fec:	180b883a 	mov	r5,r3
10003ff0:	100d883a 	mov	r6,r2
10003ff4:	0001ed81 	jmpi	10001ed8 <___vfprintf_internal_r>

10003ff8 <__swsetup_r>:
10003ff8:	00840074 	movhi	r2,4097
10003ffc:	defffd04 	addi	sp,sp,-12
10004000:	108ab504 	addi	r2,r2,10964
10004004:	dc400115 	stw	r17,4(sp)
10004008:	2023883a 	mov	r17,r4
1000400c:	11000017 	ldw	r4,0(r2)
10004010:	dc000015 	stw	r16,0(sp)
10004014:	dfc00215 	stw	ra,8(sp)
10004018:	2821883a 	mov	r16,r5
1000401c:	20000226 	beq	r4,zero,10004028 <__swsetup_r+0x30>
10004020:	20c00e17 	ldw	r3,56(r4)
10004024:	18002e26 	beq	r3,zero,100040e0 <__swsetup_r+0xe8>
10004028:	8080030b 	ldhu	r2,12(r16)
1000402c:	10c0020c 	andi	r3,r2,8
10004030:	100d883a 	mov	r6,r2
10004034:	18000f26 	beq	r3,zero,10004074 <__swsetup_r+0x7c>
10004038:	80c00417 	ldw	r3,16(r16)
1000403c:	18001526 	beq	r3,zero,10004094 <__swsetup_r+0x9c>
10004040:	1100004c 	andi	r4,r2,1
10004044:	20001c1e 	bne	r4,zero,100040b8 <__swsetup_r+0xc0>
10004048:	1080008c 	andi	r2,r2,2
1000404c:	1000261e 	bne	r2,zero,100040e8 <__swsetup_r+0xf0>
10004050:	80800517 	ldw	r2,20(r16)
10004054:	80800215 	stw	r2,8(r16)
10004058:	18001c26 	beq	r3,zero,100040cc <__swsetup_r+0xd4>
1000405c:	0005883a 	mov	r2,zero
10004060:	dfc00217 	ldw	ra,8(sp)
10004064:	dc400117 	ldw	r17,4(sp)
10004068:	dc000017 	ldw	r16,0(sp)
1000406c:	dec00304 	addi	sp,sp,12
10004070:	f800283a 	ret
10004074:	3080040c 	andi	r2,r6,16
10004078:	10001726 	beq	r2,zero,100040d8 <__swsetup_r+0xe0>
1000407c:	3080010c 	andi	r2,r6,4
10004080:	10001b1e 	bne	r2,zero,100040f0 <__swsetup_r+0xf8>
10004084:	80c00417 	ldw	r3,16(r16)
10004088:	30800214 	ori	r2,r6,8
1000408c:	8080030d 	sth	r2,12(r16)
10004090:	183feb1e 	bne	r3,zero,10004040 <__alt_data_end+0xf8004040>
10004094:	1140a00c 	andi	r5,r2,640
10004098:	01008004 	movi	r4,512
1000409c:	293fe826 	beq	r5,r4,10004040 <__alt_data_end+0xf8004040>
100040a0:	8809883a 	mov	r4,r17
100040a4:	800b883a 	mov	r5,r16
100040a8:	0006b8c0 	call	10006b8c <__smakebuf_r>
100040ac:	8080030b 	ldhu	r2,12(r16)
100040b0:	80c00417 	ldw	r3,16(r16)
100040b4:	003fe206 	br	10004040 <__alt_data_end+0xf8004040>
100040b8:	80800517 	ldw	r2,20(r16)
100040bc:	80000215 	stw	zero,8(r16)
100040c0:	0085c83a 	sub	r2,zero,r2
100040c4:	80800615 	stw	r2,24(r16)
100040c8:	183fe41e 	bne	r3,zero,1000405c <__alt_data_end+0xf800405c>
100040cc:	8080030b 	ldhu	r2,12(r16)
100040d0:	1080200c 	andi	r2,r2,128
100040d4:	103fe226 	beq	r2,zero,10004060 <__alt_data_end+0xf8004060>
100040d8:	00bfffc4 	movi	r2,-1
100040dc:	003fe006 	br	10004060 <__alt_data_end+0xf8004060>
100040e0:	00060340 	call	10006034 <__sinit>
100040e4:	003fd006 	br	10004028 <__alt_data_end+0xf8004028>
100040e8:	0005883a 	mov	r2,zero
100040ec:	003fd906 	br	10004054 <__alt_data_end+0xf8004054>
100040f0:	81400c17 	ldw	r5,48(r16)
100040f4:	28000626 	beq	r5,zero,10004110 <__swsetup_r+0x118>
100040f8:	80801004 	addi	r2,r16,64
100040fc:	28800326 	beq	r5,r2,1000410c <__swsetup_r+0x114>
10004100:	8809883a 	mov	r4,r17
10004104:	00061a80 	call	100061a8 <_free_r>
10004108:	8180030b 	ldhu	r6,12(r16)
1000410c:	80000c15 	stw	zero,48(r16)
10004110:	80c00417 	ldw	r3,16(r16)
10004114:	00bff6c4 	movi	r2,-37
10004118:	118c703a 	and	r6,r2,r6
1000411c:	80000115 	stw	zero,4(r16)
10004120:	80c00015 	stw	r3,0(r16)
10004124:	003fd806 	br	10004088 <__alt_data_end+0xf8004088>

10004128 <quorem>:
10004128:	defff204 	addi	sp,sp,-56
1000412c:	ddc00b15 	stw	r23,44(sp)
10004130:	20800417 	ldw	r2,16(r4)
10004134:	2dc00417 	ldw	r23,16(r5)
10004138:	dfc00d15 	stw	ra,52(sp)
1000413c:	df000c15 	stw	fp,48(sp)
10004140:	dd800a15 	stw	r22,40(sp)
10004144:	dd400915 	stw	r21,36(sp)
10004148:	dd000815 	stw	r20,32(sp)
1000414c:	dcc00715 	stw	r19,28(sp)
10004150:	dc800615 	stw	r18,24(sp)
10004154:	dc400515 	stw	r17,20(sp)
10004158:	dc000415 	stw	r16,16(sp)
1000415c:	15c07a16 	blt	r2,r23,10004348 <quorem+0x220>
10004160:	bdffffc4 	addi	r23,r23,-1
10004164:	bde9883a 	add	r20,r23,r23
10004168:	28c00504 	addi	r3,r5,20
1000416c:	a529883a 	add	r20,r20,r20
10004170:	1d39883a 	add	fp,r3,r20
10004174:	24c00504 	addi	r19,r4,20
10004178:	d9400215 	stw	r5,8(sp)
1000417c:	9d29883a 	add	r20,r19,r20
10004180:	e1400017 	ldw	r5,0(fp)
10004184:	d9000015 	stw	r4,0(sp)
10004188:	a1000017 	ldw	r4,0(r20)
1000418c:	29400044 	addi	r5,r5,1
10004190:	d8c00115 	stw	r3,4(sp)
10004194:	dd000315 	stw	r20,12(sp)
10004198:	000b5080 	call	1000b508 <__udivsi3>
1000419c:	1025883a 	mov	r18,r2
100041a0:	10003026 	beq	r2,zero,10004264 <quorem+0x13c>
100041a4:	dc400117 	ldw	r17,4(sp)
100041a8:	9829883a 	mov	r20,r19
100041ac:	002d883a 	mov	r22,zero
100041b0:	0021883a 	mov	r16,zero
100041b4:	8d400017 	ldw	r21,0(r17)
100041b8:	900b883a 	mov	r5,r18
100041bc:	8c400104 	addi	r17,r17,4
100041c0:	a93fffcc 	andi	r4,r21,65535
100041c4:	00013880 	call	10001388 <__mulsi3>
100041c8:	a808d43a 	srli	r4,r21,16
100041cc:	900b883a 	mov	r5,r18
100041d0:	b0ad883a 	add	r22,r22,r2
100041d4:	00013880 	call	10001388 <__mulsi3>
100041d8:	a1000017 	ldw	r4,0(r20)
100041dc:	b00cd43a 	srli	r6,r22,16
100041e0:	b0ffffcc 	andi	r3,r22,65535
100041e4:	217fffcc 	andi	r5,r4,65535
100041e8:	2c21883a 	add	r16,r5,r16
100041ec:	80c7c83a 	sub	r3,r16,r3
100041f0:	2008d43a 	srli	r4,r4,16
100041f4:	3085883a 	add	r2,r6,r2
100041f8:	1821d43a 	srai	r16,r3,16
100041fc:	117fffcc 	andi	r5,r2,65535
10004200:	2149c83a 	sub	r4,r4,r5
10004204:	2421883a 	add	r16,r4,r16
10004208:	8008943a 	slli	r4,r16,16
1000420c:	18ffffcc 	andi	r3,r3,65535
10004210:	102cd43a 	srli	r22,r2,16
10004214:	20c8b03a 	or	r4,r4,r3
10004218:	a1000015 	stw	r4,0(r20)
1000421c:	8021d43a 	srai	r16,r16,16
10004220:	a5000104 	addi	r20,r20,4
10004224:	e47fe32e 	bgeu	fp,r17,100041b4 <__alt_data_end+0xf80041b4>
10004228:	d8c00317 	ldw	r3,12(sp)
1000422c:	18800017 	ldw	r2,0(r3)
10004230:	10000c1e 	bne	r2,zero,10004264 <quorem+0x13c>
10004234:	18bfff04 	addi	r2,r3,-4
10004238:	9880082e 	bgeu	r19,r2,1000425c <quorem+0x134>
1000423c:	18ffff17 	ldw	r3,-4(r3)
10004240:	18000326 	beq	r3,zero,10004250 <quorem+0x128>
10004244:	00000506 	br	1000425c <quorem+0x134>
10004248:	10c00017 	ldw	r3,0(r2)
1000424c:	1800031e 	bne	r3,zero,1000425c <quorem+0x134>
10004250:	10bfff04 	addi	r2,r2,-4
10004254:	bdffffc4 	addi	r23,r23,-1
10004258:	98bffb36 	bltu	r19,r2,10004248 <__alt_data_end+0xf8004248>
1000425c:	d8c00017 	ldw	r3,0(sp)
10004260:	1dc00415 	stw	r23,16(r3)
10004264:	d9000017 	ldw	r4,0(sp)
10004268:	d9400217 	ldw	r5,8(sp)
1000426c:	0007a280 	call	10007a28 <__mcmp>
10004270:	10002816 	blt	r2,zero,10004314 <quorem+0x1ec>
10004274:	dc400117 	ldw	r17,4(sp)
10004278:	94800044 	addi	r18,r18,1
1000427c:	980d883a 	mov	r6,r19
10004280:	0007883a 	mov	r3,zero
10004284:	31000017 	ldw	r4,0(r6)
10004288:	89400017 	ldw	r5,0(r17)
1000428c:	31800104 	addi	r6,r6,4
10004290:	20bfffcc 	andi	r2,r4,65535
10004294:	10c7883a 	add	r3,r2,r3
10004298:	28bfffcc 	andi	r2,r5,65535
1000429c:	1885c83a 	sub	r2,r3,r2
100042a0:	280ad43a 	srli	r5,r5,16
100042a4:	2008d43a 	srli	r4,r4,16
100042a8:	1007d43a 	srai	r3,r2,16
100042ac:	10bfffcc 	andi	r2,r2,65535
100042b0:	2149c83a 	sub	r4,r4,r5
100042b4:	20c9883a 	add	r4,r4,r3
100042b8:	200a943a 	slli	r5,r4,16
100042bc:	8c400104 	addi	r17,r17,4
100042c0:	2007d43a 	srai	r3,r4,16
100042c4:	2884b03a 	or	r2,r5,r2
100042c8:	30bfff15 	stw	r2,-4(r6)
100042cc:	e47fed2e 	bgeu	fp,r17,10004284 <__alt_data_end+0xf8004284>
100042d0:	bdc5883a 	add	r2,r23,r23
100042d4:	1085883a 	add	r2,r2,r2
100042d8:	9887883a 	add	r3,r19,r2
100042dc:	18800017 	ldw	r2,0(r3)
100042e0:	10000c1e 	bne	r2,zero,10004314 <quorem+0x1ec>
100042e4:	18bfff04 	addi	r2,r3,-4
100042e8:	9880082e 	bgeu	r19,r2,1000430c <quorem+0x1e4>
100042ec:	18ffff17 	ldw	r3,-4(r3)
100042f0:	18000326 	beq	r3,zero,10004300 <quorem+0x1d8>
100042f4:	00000506 	br	1000430c <quorem+0x1e4>
100042f8:	10c00017 	ldw	r3,0(r2)
100042fc:	1800031e 	bne	r3,zero,1000430c <quorem+0x1e4>
10004300:	10bfff04 	addi	r2,r2,-4
10004304:	bdffffc4 	addi	r23,r23,-1
10004308:	98bffb36 	bltu	r19,r2,100042f8 <__alt_data_end+0xf80042f8>
1000430c:	d8c00017 	ldw	r3,0(sp)
10004310:	1dc00415 	stw	r23,16(r3)
10004314:	9005883a 	mov	r2,r18
10004318:	dfc00d17 	ldw	ra,52(sp)
1000431c:	df000c17 	ldw	fp,48(sp)
10004320:	ddc00b17 	ldw	r23,44(sp)
10004324:	dd800a17 	ldw	r22,40(sp)
10004328:	dd400917 	ldw	r21,36(sp)
1000432c:	dd000817 	ldw	r20,32(sp)
10004330:	dcc00717 	ldw	r19,28(sp)
10004334:	dc800617 	ldw	r18,24(sp)
10004338:	dc400517 	ldw	r17,20(sp)
1000433c:	dc000417 	ldw	r16,16(sp)
10004340:	dec00e04 	addi	sp,sp,56
10004344:	f800283a 	ret
10004348:	0005883a 	mov	r2,zero
1000434c:	003ff206 	br	10004318 <__alt_data_end+0xf8004318>

10004350 <_dtoa_r>:
10004350:	20801017 	ldw	r2,64(r4)
10004354:	deffde04 	addi	sp,sp,-136
10004358:	dd401d15 	stw	r21,116(sp)
1000435c:	dcc01b15 	stw	r19,108(sp)
10004360:	dc801a15 	stw	r18,104(sp)
10004364:	dc401915 	stw	r17,100(sp)
10004368:	dc001815 	stw	r16,96(sp)
1000436c:	dfc02115 	stw	ra,132(sp)
10004370:	df002015 	stw	fp,128(sp)
10004374:	ddc01f15 	stw	r23,124(sp)
10004378:	dd801e15 	stw	r22,120(sp)
1000437c:	dd001c15 	stw	r20,112(sp)
10004380:	d9c00315 	stw	r7,12(sp)
10004384:	2021883a 	mov	r16,r4
10004388:	302b883a 	mov	r21,r6
1000438c:	2825883a 	mov	r18,r5
10004390:	dc402417 	ldw	r17,144(sp)
10004394:	3027883a 	mov	r19,r6
10004398:	10000826 	beq	r2,zero,100043bc <_dtoa_r+0x6c>
1000439c:	21801117 	ldw	r6,68(r4)
100043a0:	00c00044 	movi	r3,1
100043a4:	100b883a 	mov	r5,r2
100043a8:	1986983a 	sll	r3,r3,r6
100043ac:	11800115 	stw	r6,4(r2)
100043b0:	10c00215 	stw	r3,8(r2)
100043b4:	00071540 	call	10007154 <_Bfree>
100043b8:	80001015 	stw	zero,64(r16)
100043bc:	a8002d16 	blt	r21,zero,10004474 <_dtoa_r+0x124>
100043c0:	88000015 	stw	zero,0(r17)
100043c4:	a8dffc2c 	andhi	r3,r21,32752
100043c8:	009ffc34 	movhi	r2,32752
100043cc:	18801b26 	beq	r3,r2,1000443c <_dtoa_r+0xec>
100043d0:	9009883a 	mov	r4,r18
100043d4:	980b883a 	mov	r5,r19
100043d8:	000d883a 	mov	r6,zero
100043dc:	000f883a 	mov	r7,zero
100043e0:	000c7340 	call	1000c734 <__eqdf2>
100043e4:	10002a1e 	bne	r2,zero,10004490 <_dtoa_r+0x140>
100043e8:	d8c02317 	ldw	r3,140(sp)
100043ec:	d9002517 	ldw	r4,148(sp)
100043f0:	00800044 	movi	r2,1
100043f4:	18800015 	stw	r2,0(r3)
100043f8:	2001a226 	beq	r4,zero,10004a84 <_dtoa_r+0x734>
100043fc:	00840074 	movhi	r2,4097
10004400:	10834944 	addi	r2,r2,3365
10004404:	20800015 	stw	r2,0(r4)
10004408:	10bfffc4 	addi	r2,r2,-1
1000440c:	dfc02117 	ldw	ra,132(sp)
10004410:	df002017 	ldw	fp,128(sp)
10004414:	ddc01f17 	ldw	r23,124(sp)
10004418:	dd801e17 	ldw	r22,120(sp)
1000441c:	dd401d17 	ldw	r21,116(sp)
10004420:	dd001c17 	ldw	r20,112(sp)
10004424:	dcc01b17 	ldw	r19,108(sp)
10004428:	dc801a17 	ldw	r18,104(sp)
1000442c:	dc401917 	ldw	r17,100(sp)
10004430:	dc001817 	ldw	r16,96(sp)
10004434:	dec02204 	addi	sp,sp,136
10004438:	f800283a 	ret
1000443c:	d8c02317 	ldw	r3,140(sp)
10004440:	0089c3c4 	movi	r2,9999
10004444:	18800015 	stw	r2,0(r3)
10004448:	90017c26 	beq	r18,zero,10004a3c <_dtoa_r+0x6ec>
1000444c:	00840074 	movhi	r2,4097
10004450:	10835504 	addi	r2,r2,3412
10004454:	d9002517 	ldw	r4,148(sp)
10004458:	203fec26 	beq	r4,zero,1000440c <__alt_data_end+0xf800440c>
1000445c:	10c000c7 	ldb	r3,3(r2)
10004460:	18017d1e 	bne	r3,zero,10004a58 <_dtoa_r+0x708>
10004464:	10c000c4 	addi	r3,r2,3
10004468:	d9802517 	ldw	r6,148(sp)
1000446c:	30c00015 	stw	r3,0(r6)
10004470:	003fe606 	br	1000440c <__alt_data_end+0xf800440c>
10004474:	04e00034 	movhi	r19,32768
10004478:	9cffffc4 	addi	r19,r19,-1
1000447c:	00800044 	movi	r2,1
10004480:	ace6703a 	and	r19,r21,r19
10004484:	88800015 	stw	r2,0(r17)
10004488:	982b883a 	mov	r21,r19
1000448c:	003fcd06 	br	100043c4 <__alt_data_end+0xf80043c4>
10004490:	d8800204 	addi	r2,sp,8
10004494:	a822d53a 	srli	r17,r21,20
10004498:	d8800015 	stw	r2,0(sp)
1000449c:	8009883a 	mov	r4,r16
100044a0:	900b883a 	mov	r5,r18
100044a4:	980d883a 	mov	r6,r19
100044a8:	d9c00104 	addi	r7,sp,4
100044ac:	0007d9c0 	call	10007d9c <__d2b>
100044b0:	1039883a 	mov	fp,r2
100044b4:	88016a1e 	bne	r17,zero,10004a60 <_dtoa_r+0x710>
100044b8:	dd000217 	ldw	r20,8(sp)
100044bc:	dc400117 	ldw	r17,4(sp)
100044c0:	00befbc4 	movi	r2,-1041
100044c4:	a463883a 	add	r17,r20,r17
100044c8:	8882ea16 	blt	r17,r2,10005074 <_dtoa_r+0xd24>
100044cc:	00bf0384 	movi	r2,-1010
100044d0:	1445c83a 	sub	r2,r2,r17
100044d4:	89010484 	addi	r4,r17,1042
100044d8:	a8aa983a 	sll	r21,r21,r2
100044dc:	9108d83a 	srl	r4,r18,r4
100044e0:	a908b03a 	or	r4,r21,r4
100044e4:	000dc0c0 	call	1000dc0c <__floatunsidf>
100044e8:	017f8434 	movhi	r5,65040
100044ec:	01800044 	movi	r6,1
100044f0:	1009883a 	mov	r4,r2
100044f4:	194b883a 	add	r5,r3,r5
100044f8:	8c7fffc4 	addi	r17,r17,-1
100044fc:	d9800f15 	stw	r6,60(sp)
10004500:	000d883a 	mov	r6,zero
10004504:	01cffe34 	movhi	r7,16376
10004508:	000d1e40 	call	1000d1e4 <__subdf3>
1000450c:	0198dbf4 	movhi	r6,25455
10004510:	01cff4f4 	movhi	r7,16339
10004514:	1009883a 	mov	r4,r2
10004518:	180b883a 	mov	r5,r3
1000451c:	3190d844 	addi	r6,r6,17249
10004520:	39e1e9c4 	addi	r7,r7,-30809
10004524:	000c9780 	call	1000c978 <__muldf3>
10004528:	01a2d874 	movhi	r6,35681
1000452c:	01cff1f4 	movhi	r7,16327
10004530:	180b883a 	mov	r5,r3
10004534:	31b22cc4 	addi	r6,r6,-14157
10004538:	39e28a04 	addi	r7,r7,-30168
1000453c:	1009883a 	mov	r4,r2
10004540:	000b5180 	call	1000b518 <__adddf3>
10004544:	8809883a 	mov	r4,r17
10004548:	102d883a 	mov	r22,r2
1000454c:	182b883a 	mov	r21,r3
10004550:	000db3c0 	call	1000db3c <__floatsidf>
10004554:	019427f4 	movhi	r6,20639
10004558:	01cff4f4 	movhi	r7,16339
1000455c:	1009883a 	mov	r4,r2
10004560:	180b883a 	mov	r5,r3
10004564:	319e7ec4 	addi	r6,r6,31227
10004568:	39d104c4 	addi	r7,r7,17427
1000456c:	000c9780 	call	1000c978 <__muldf3>
10004570:	b009883a 	mov	r4,r22
10004574:	a80b883a 	mov	r5,r21
10004578:	100d883a 	mov	r6,r2
1000457c:	180f883a 	mov	r7,r3
10004580:	000b5180 	call	1000b518 <__adddf3>
10004584:	1009883a 	mov	r4,r2
10004588:	180b883a 	mov	r5,r3
1000458c:	102d883a 	mov	r22,r2
10004590:	182b883a 	mov	r21,r3
10004594:	000dab40 	call	1000dab4 <__fixdfsi>
10004598:	b009883a 	mov	r4,r22
1000459c:	a80b883a 	mov	r5,r21
100045a0:	000d883a 	mov	r6,zero
100045a4:	000f883a 	mov	r7,zero
100045a8:	d8800515 	stw	r2,20(sp)
100045ac:	000c8980 	call	1000c898 <__ledf2>
100045b0:	10023116 	blt	r2,zero,10004e78 <_dtoa_r+0xb28>
100045b4:	d8c00517 	ldw	r3,20(sp)
100045b8:	00800584 	movi	r2,22
100045bc:	10c21f36 	bltu	r2,r3,10004e3c <_dtoa_r+0xaec>
100045c0:	180490fa 	slli	r2,r3,3
100045c4:	00c40074 	movhi	r3,4097
100045c8:	18c37104 	addi	r3,r3,3524
100045cc:	1885883a 	add	r2,r3,r2
100045d0:	11000017 	ldw	r4,0(r2)
100045d4:	11400117 	ldw	r5,4(r2)
100045d8:	900d883a 	mov	r6,r18
100045dc:	980f883a 	mov	r7,r19
100045e0:	000c7b80 	call	1000c7b8 <__gedf2>
100045e4:	0082a70e 	bge	zero,r2,10005084 <_dtoa_r+0xd34>
100045e8:	d9000517 	ldw	r4,20(sp)
100045ec:	d8000c15 	stw	zero,48(sp)
100045f0:	213fffc4 	addi	r4,r4,-1
100045f4:	d9000515 	stw	r4,20(sp)
100045f8:	a463c83a 	sub	r17,r20,r17
100045fc:	8dbfffc4 	addi	r22,r17,-1
10004600:	b0021916 	blt	r22,zero,10004e68 <_dtoa_r+0xb18>
10004604:	d8000815 	stw	zero,32(sp)
10004608:	d8800517 	ldw	r2,20(sp)
1000460c:	10020e16 	blt	r2,zero,10004e48 <_dtoa_r+0xaf8>
10004610:	b0ad883a 	add	r22,r22,r2
10004614:	d8800a15 	stw	r2,40(sp)
10004618:	d8000915 	stw	zero,36(sp)
1000461c:	d8c00317 	ldw	r3,12(sp)
10004620:	00800244 	movi	r2,9
10004624:	10c11a36 	bltu	r2,r3,10004a90 <_dtoa_r+0x740>
10004628:	00800144 	movi	r2,5
1000462c:	10c4fc0e 	bge	r2,r3,10005a20 <_dtoa_r+0x16d0>
10004630:	18ffff04 	addi	r3,r3,-4
10004634:	d8c00315 	stw	r3,12(sp)
10004638:	0029883a 	mov	r20,zero
1000463c:	d9800317 	ldw	r6,12(sp)
10004640:	008000c4 	movi	r2,3
10004644:	3083bd26 	beq	r6,r2,1000553c <_dtoa_r+0x11ec>
10004648:	1183670e 	bge	r2,r6,100053e8 <_dtoa_r+0x1098>
1000464c:	d8c00317 	ldw	r3,12(sp)
10004650:	00800104 	movi	r2,4
10004654:	1882e726 	beq	r3,r2,100051f4 <_dtoa_r+0xea4>
10004658:	00800144 	movi	r2,5
1000465c:	1884f21e 	bne	r3,r2,10005a28 <_dtoa_r+0x16d8>
10004660:	00800044 	movi	r2,1
10004664:	d8800b15 	stw	r2,44(sp)
10004668:	d8c02217 	ldw	r3,136(sp)
1000466c:	d9000517 	ldw	r4,20(sp)
10004670:	1907883a 	add	r3,r3,r4
10004674:	19800044 	addi	r6,r3,1
10004678:	d8c00d15 	stw	r3,52(sp)
1000467c:	d9800615 	stw	r6,24(sp)
10004680:	0183c30e 	bge	zero,r6,10005590 <_dtoa_r+0x1240>
10004684:	d9800617 	ldw	r6,24(sp)
10004688:	3023883a 	mov	r17,r6
1000468c:	80001115 	stw	zero,68(r16)
10004690:	008005c4 	movi	r2,23
10004694:	1184f62e 	bgeu	r2,r6,10005a70 <_dtoa_r+0x1720>
10004698:	00c00044 	movi	r3,1
1000469c:	00800104 	movi	r2,4
100046a0:	1085883a 	add	r2,r2,r2
100046a4:	11000504 	addi	r4,r2,20
100046a8:	180b883a 	mov	r5,r3
100046ac:	18c00044 	addi	r3,r3,1
100046b0:	313ffb2e 	bgeu	r6,r4,100046a0 <__alt_data_end+0xf80046a0>
100046b4:	81401115 	stw	r5,68(r16)
100046b8:	8009883a 	mov	r4,r16
100046bc:	00070ac0 	call	100070ac <_Balloc>
100046c0:	d8800715 	stw	r2,28(sp)
100046c4:	80801015 	stw	r2,64(r16)
100046c8:	00800384 	movi	r2,14
100046cc:	1440fd36 	bltu	r2,r17,10004ac4 <_dtoa_r+0x774>
100046d0:	a000fc26 	beq	r20,zero,10004ac4 <_dtoa_r+0x774>
100046d4:	d8800517 	ldw	r2,20(sp)
100046d8:	0083b90e 	bge	zero,r2,100055c0 <_dtoa_r+0x1270>
100046dc:	d8c00517 	ldw	r3,20(sp)
100046e0:	108003cc 	andi	r2,r2,15
100046e4:	100490fa 	slli	r2,r2,3
100046e8:	182fd13a 	srai	r23,r3,4
100046ec:	00c40074 	movhi	r3,4097
100046f0:	18c37104 	addi	r3,r3,3524
100046f4:	1885883a 	add	r2,r3,r2
100046f8:	b8c0040c 	andi	r3,r23,16
100046fc:	12c00017 	ldw	r11,0(r2)
10004700:	12800117 	ldw	r10,4(r2)
10004704:	18039726 	beq	r3,zero,10005564 <_dtoa_r+0x1214>
10004708:	00840074 	movhi	r2,4097
1000470c:	10836704 	addi	r2,r2,3484
10004710:	11800817 	ldw	r6,32(r2)
10004714:	11c00917 	ldw	r7,36(r2)
10004718:	9009883a 	mov	r4,r18
1000471c:	980b883a 	mov	r5,r19
10004720:	da801615 	stw	r10,88(sp)
10004724:	dac01515 	stw	r11,84(sp)
10004728:	000bdb40 	call	1000bdb4 <__divdf3>
1000472c:	da801617 	ldw	r10,88(sp)
10004730:	dac01517 	ldw	r11,84(sp)
10004734:	bdc003cc 	andi	r23,r23,15
10004738:	044000c4 	movi	r17,3
1000473c:	d8800e15 	stw	r2,56(sp)
10004740:	182b883a 	mov	r21,r3
10004744:	b8001126 	beq	r23,zero,1000478c <_dtoa_r+0x43c>
10004748:	05040074 	movhi	r20,4097
1000474c:	a5036704 	addi	r20,r20,3484
10004750:	5805883a 	mov	r2,r11
10004754:	5007883a 	mov	r3,r10
10004758:	b980004c 	andi	r6,r23,1
1000475c:	1009883a 	mov	r4,r2
10004760:	b82fd07a 	srai	r23,r23,1
10004764:	180b883a 	mov	r5,r3
10004768:	30000426 	beq	r6,zero,1000477c <_dtoa_r+0x42c>
1000476c:	a1800017 	ldw	r6,0(r20)
10004770:	a1c00117 	ldw	r7,4(r20)
10004774:	8c400044 	addi	r17,r17,1
10004778:	000c9780 	call	1000c978 <__muldf3>
1000477c:	a5000204 	addi	r20,r20,8
10004780:	b83ff51e 	bne	r23,zero,10004758 <__alt_data_end+0xf8004758>
10004784:	1017883a 	mov	r11,r2
10004788:	1815883a 	mov	r10,r3
1000478c:	d9000e17 	ldw	r4,56(sp)
10004790:	a80b883a 	mov	r5,r21
10004794:	580d883a 	mov	r6,r11
10004798:	500f883a 	mov	r7,r10
1000479c:	000bdb40 	call	1000bdb4 <__divdf3>
100047a0:	1029883a 	mov	r20,r2
100047a4:	182b883a 	mov	r21,r3
100047a8:	d9800c17 	ldw	r6,48(sp)
100047ac:	30000626 	beq	r6,zero,100047c8 <_dtoa_r+0x478>
100047b0:	a009883a 	mov	r4,r20
100047b4:	a80b883a 	mov	r5,r21
100047b8:	000d883a 	mov	r6,zero
100047bc:	01cffc34 	movhi	r7,16368
100047c0:	000c8980 	call	1000c898 <__ledf2>
100047c4:	10043216 	blt	r2,zero,10005890 <_dtoa_r+0x1540>
100047c8:	8809883a 	mov	r4,r17
100047cc:	000db3c0 	call	1000db3c <__floatsidf>
100047d0:	1009883a 	mov	r4,r2
100047d4:	180b883a 	mov	r5,r3
100047d8:	a00d883a 	mov	r6,r20
100047dc:	a80f883a 	mov	r7,r21
100047e0:	000c9780 	call	1000c978 <__muldf3>
100047e4:	000d883a 	mov	r6,zero
100047e8:	1009883a 	mov	r4,r2
100047ec:	180b883a 	mov	r5,r3
100047f0:	01d00734 	movhi	r7,16412
100047f4:	000b5180 	call	1000b518 <__adddf3>
100047f8:	1023883a 	mov	r17,r2
100047fc:	d9800617 	ldw	r6,24(sp)
10004800:	00bf3034 	movhi	r2,64704
10004804:	1885883a 	add	r2,r3,r2
10004808:	d8800e15 	stw	r2,56(sp)
1000480c:	30032e26 	beq	r6,zero,100054c8 <_dtoa_r+0x1178>
10004810:	d8c00517 	ldw	r3,20(sp)
10004814:	da800617 	ldw	r10,24(sp)
10004818:	d8c01215 	stw	r3,72(sp)
1000481c:	d9000b17 	ldw	r4,44(sp)
10004820:	2003b026 	beq	r4,zero,100056e4 <_dtoa_r+0x1394>
10004824:	50bfffc4 	addi	r2,r10,-1
10004828:	100490fa 	slli	r2,r2,3
1000482c:	00c40074 	movhi	r3,4097
10004830:	18c37104 	addi	r3,r3,3524
10004834:	1885883a 	add	r2,r3,r2
10004838:	11800017 	ldw	r6,0(r2)
1000483c:	11c00117 	ldw	r7,4(r2)
10004840:	d8800717 	ldw	r2,28(sp)
10004844:	0009883a 	mov	r4,zero
10004848:	014ff834 	movhi	r5,16352
1000484c:	da801615 	stw	r10,88(sp)
10004850:	15c00044 	addi	r23,r2,1
10004854:	000bdb40 	call	1000bdb4 <__divdf3>
10004858:	d9c00e17 	ldw	r7,56(sp)
1000485c:	880d883a 	mov	r6,r17
10004860:	1009883a 	mov	r4,r2
10004864:	180b883a 	mov	r5,r3
10004868:	000d1e40 	call	1000d1e4 <__subdf3>
1000486c:	a80b883a 	mov	r5,r21
10004870:	a009883a 	mov	r4,r20
10004874:	d8c01015 	stw	r3,64(sp)
10004878:	d8800e15 	stw	r2,56(sp)
1000487c:	000dab40 	call	1000dab4 <__fixdfsi>
10004880:	1009883a 	mov	r4,r2
10004884:	d8801715 	stw	r2,92(sp)
10004888:	000db3c0 	call	1000db3c <__floatsidf>
1000488c:	a009883a 	mov	r4,r20
10004890:	a80b883a 	mov	r5,r21
10004894:	100d883a 	mov	r6,r2
10004898:	180f883a 	mov	r7,r3
1000489c:	000d1e40 	call	1000d1e4 <__subdf3>
100048a0:	da001717 	ldw	r8,92(sp)
100048a4:	1829883a 	mov	r20,r3
100048a8:	d8c00717 	ldw	r3,28(sp)
100048ac:	d9000e17 	ldw	r4,56(sp)
100048b0:	d9401017 	ldw	r5,64(sp)
100048b4:	42000c04 	addi	r8,r8,48
100048b8:	1023883a 	mov	r17,r2
100048bc:	1a000005 	stb	r8,0(r3)
100048c0:	880d883a 	mov	r6,r17
100048c4:	a00f883a 	mov	r7,r20
100048c8:	402b883a 	mov	r21,r8
100048cc:	000c7b80 	call	1000c7b8 <__gedf2>
100048d0:	00844516 	blt	zero,r2,100059e8 <_dtoa_r+0x1698>
100048d4:	0009883a 	mov	r4,zero
100048d8:	014ffc34 	movhi	r5,16368
100048dc:	880d883a 	mov	r6,r17
100048e0:	a00f883a 	mov	r7,r20
100048e4:	000d1e40 	call	1000d1e4 <__subdf3>
100048e8:	d9000e17 	ldw	r4,56(sp)
100048ec:	d9401017 	ldw	r5,64(sp)
100048f0:	100d883a 	mov	r6,r2
100048f4:	180f883a 	mov	r7,r3
100048f8:	000c7b80 	call	1000c7b8 <__gedf2>
100048fc:	da801617 	ldw	r10,88(sp)
10004900:	00843616 	blt	zero,r2,100059dc <_dtoa_r+0x168c>
10004904:	00800044 	movi	r2,1
10004908:	12806e0e 	bge	r2,r10,10004ac4 <_dtoa_r+0x774>
1000490c:	d9000717 	ldw	r4,28(sp)
10004910:	dd801315 	stw	r22,76(sp)
10004914:	dc001115 	stw	r16,68(sp)
10004918:	2295883a 	add	r10,r4,r10
1000491c:	dcc01415 	stw	r19,80(sp)
10004920:	502d883a 	mov	r22,r10
10004924:	dcc01017 	ldw	r19,64(sp)
10004928:	b821883a 	mov	r16,r23
1000492c:	dc801015 	stw	r18,64(sp)
10004930:	dc800e17 	ldw	r18,56(sp)
10004934:	00000906 	br	1000495c <_dtoa_r+0x60c>
10004938:	000d1e40 	call	1000d1e4 <__subdf3>
1000493c:	1009883a 	mov	r4,r2
10004940:	180b883a 	mov	r5,r3
10004944:	900d883a 	mov	r6,r18
10004948:	980f883a 	mov	r7,r19
1000494c:	000c8980 	call	1000c898 <__ledf2>
10004950:	10040e16 	blt	r2,zero,1000598c <_dtoa_r+0x163c>
10004954:	b821883a 	mov	r16,r23
10004958:	bd841026 	beq	r23,r22,1000599c <_dtoa_r+0x164c>
1000495c:	9009883a 	mov	r4,r18
10004960:	980b883a 	mov	r5,r19
10004964:	000d883a 	mov	r6,zero
10004968:	01d00934 	movhi	r7,16420
1000496c:	000c9780 	call	1000c978 <__muldf3>
10004970:	000d883a 	mov	r6,zero
10004974:	01d00934 	movhi	r7,16420
10004978:	8809883a 	mov	r4,r17
1000497c:	a00b883a 	mov	r5,r20
10004980:	1025883a 	mov	r18,r2
10004984:	1827883a 	mov	r19,r3
10004988:	000c9780 	call	1000c978 <__muldf3>
1000498c:	180b883a 	mov	r5,r3
10004990:	1009883a 	mov	r4,r2
10004994:	1823883a 	mov	r17,r3
10004998:	1029883a 	mov	r20,r2
1000499c:	000dab40 	call	1000dab4 <__fixdfsi>
100049a0:	1009883a 	mov	r4,r2
100049a4:	102b883a 	mov	r21,r2
100049a8:	000db3c0 	call	1000db3c <__floatsidf>
100049ac:	a009883a 	mov	r4,r20
100049b0:	880b883a 	mov	r5,r17
100049b4:	100d883a 	mov	r6,r2
100049b8:	180f883a 	mov	r7,r3
100049bc:	000d1e40 	call	1000d1e4 <__subdf3>
100049c0:	ad400c04 	addi	r21,r21,48
100049c4:	1009883a 	mov	r4,r2
100049c8:	180b883a 	mov	r5,r3
100049cc:	900d883a 	mov	r6,r18
100049d0:	980f883a 	mov	r7,r19
100049d4:	85400005 	stb	r21,0(r16)
100049d8:	1023883a 	mov	r17,r2
100049dc:	1829883a 	mov	r20,r3
100049e0:	000c8980 	call	1000c898 <__ledf2>
100049e4:	bdc00044 	addi	r23,r23,1
100049e8:	0009883a 	mov	r4,zero
100049ec:	014ffc34 	movhi	r5,16368
100049f0:	880d883a 	mov	r6,r17
100049f4:	a00f883a 	mov	r7,r20
100049f8:	103fcf0e 	bge	r2,zero,10004938 <__alt_data_end+0xf8004938>
100049fc:	d9801217 	ldw	r6,72(sp)
10004a00:	dc001117 	ldw	r16,68(sp)
10004a04:	d9800515 	stw	r6,20(sp)
10004a08:	8009883a 	mov	r4,r16
10004a0c:	e00b883a 	mov	r5,fp
10004a10:	00071540 	call	10007154 <_Bfree>
10004a14:	d8c00517 	ldw	r3,20(sp)
10004a18:	d9002317 	ldw	r4,140(sp)
10004a1c:	d9802517 	ldw	r6,148(sp)
10004a20:	b8000005 	stb	zero,0(r23)
10004a24:	18800044 	addi	r2,r3,1
10004a28:	20800015 	stw	r2,0(r4)
10004a2c:	30027226 	beq	r6,zero,100053f8 <_dtoa_r+0x10a8>
10004a30:	35c00015 	stw	r23,0(r6)
10004a34:	d8800717 	ldw	r2,28(sp)
10004a38:	003e7406 	br	1000440c <__alt_data_end+0xf800440c>
10004a3c:	00800434 	movhi	r2,16
10004a40:	10bfffc4 	addi	r2,r2,-1
10004a44:	a8aa703a 	and	r21,r21,r2
10004a48:	a83e801e 	bne	r21,zero,1000444c <__alt_data_end+0xf800444c>
10004a4c:	00840074 	movhi	r2,4097
10004a50:	10835204 	addi	r2,r2,3400
10004a54:	003e7f06 	br	10004454 <__alt_data_end+0xf8004454>
10004a58:	10c00204 	addi	r3,r2,8
10004a5c:	003e8206 	br	10004468 <__alt_data_end+0xf8004468>
10004a60:	01400434 	movhi	r5,16
10004a64:	297fffc4 	addi	r5,r5,-1
10004a68:	994a703a 	and	r5,r19,r5
10004a6c:	9009883a 	mov	r4,r18
10004a70:	8c7f0044 	addi	r17,r17,-1023
10004a74:	294ffc34 	orhi	r5,r5,16368
10004a78:	dd000217 	ldw	r20,8(sp)
10004a7c:	d8000f15 	stw	zero,60(sp)
10004a80:	003e9f06 	br	10004500 <__alt_data_end+0xf8004500>
10004a84:	00840074 	movhi	r2,4097
10004a88:	10834904 	addi	r2,r2,3364
10004a8c:	003e5f06 	br	1000440c <__alt_data_end+0xf800440c>
10004a90:	80001115 	stw	zero,68(r16)
10004a94:	8009883a 	mov	r4,r16
10004a98:	000b883a 	mov	r5,zero
10004a9c:	00070ac0 	call	100070ac <_Balloc>
10004aa0:	01bfffc4 	movi	r6,-1
10004aa4:	d8800715 	stw	r2,28(sp)
10004aa8:	80801015 	stw	r2,64(r16)
10004aac:	00800044 	movi	r2,1
10004ab0:	d9800615 	stw	r6,24(sp)
10004ab4:	d8800b15 	stw	r2,44(sp)
10004ab8:	d8002215 	stw	zero,136(sp)
10004abc:	d9800d15 	stw	r6,52(sp)
10004ac0:	d8000315 	stw	zero,12(sp)
10004ac4:	d8800117 	ldw	r2,4(sp)
10004ac8:	10008e16 	blt	r2,zero,10004d04 <_dtoa_r+0x9b4>
10004acc:	d9000517 	ldw	r4,20(sp)
10004ad0:	00c00384 	movi	r3,14
10004ad4:	19008b16 	blt	r3,r4,10004d04 <_dtoa_r+0x9b4>
10004ad8:	200490fa 	slli	r2,r4,3
10004adc:	00c40074 	movhi	r3,4097
10004ae0:	d9802217 	ldw	r6,136(sp)
10004ae4:	18c37104 	addi	r3,r3,3524
10004ae8:	1885883a 	add	r2,r3,r2
10004aec:	14400017 	ldw	r17,0(r2)
10004af0:	15000117 	ldw	r20,4(r2)
10004af4:	3001c716 	blt	r6,zero,10005214 <_dtoa_r+0xec4>
10004af8:	880d883a 	mov	r6,r17
10004afc:	a00f883a 	mov	r7,r20
10004b00:	9009883a 	mov	r4,r18
10004b04:	980b883a 	mov	r5,r19
10004b08:	000bdb40 	call	1000bdb4 <__divdf3>
10004b0c:	180b883a 	mov	r5,r3
10004b10:	1009883a 	mov	r4,r2
10004b14:	000dab40 	call	1000dab4 <__fixdfsi>
10004b18:	1009883a 	mov	r4,r2
10004b1c:	102d883a 	mov	r22,r2
10004b20:	000db3c0 	call	1000db3c <__floatsidf>
10004b24:	1009883a 	mov	r4,r2
10004b28:	180b883a 	mov	r5,r3
10004b2c:	880d883a 	mov	r6,r17
10004b30:	a00f883a 	mov	r7,r20
10004b34:	000c9780 	call	1000c978 <__muldf3>
10004b38:	9009883a 	mov	r4,r18
10004b3c:	980b883a 	mov	r5,r19
10004b40:	100d883a 	mov	r6,r2
10004b44:	180f883a 	mov	r7,r3
10004b48:	000d1e40 	call	1000d1e4 <__subdf3>
10004b4c:	d9000717 	ldw	r4,28(sp)
10004b50:	d9800617 	ldw	r6,24(sp)
10004b54:	180b883a 	mov	r5,r3
10004b58:	b0c00c04 	addi	r3,r22,48
10004b5c:	20c00005 	stb	r3,0(r4)
10004b60:	25c00044 	addi	r23,r4,1
10004b64:	01000044 	movi	r4,1
10004b68:	1011883a 	mov	r8,r2
10004b6c:	2807883a 	mov	r3,r5
10004b70:	31003d26 	beq	r6,r4,10004c68 <_dtoa_r+0x918>
10004b74:	000d883a 	mov	r6,zero
10004b78:	01d00934 	movhi	r7,16420
10004b7c:	1009883a 	mov	r4,r2
10004b80:	000c9780 	call	1000c978 <__muldf3>
10004b84:	1009883a 	mov	r4,r2
10004b88:	180b883a 	mov	r5,r3
10004b8c:	000d883a 	mov	r6,zero
10004b90:	000f883a 	mov	r7,zero
10004b94:	1027883a 	mov	r19,r2
10004b98:	182b883a 	mov	r21,r3
10004b9c:	000c7340 	call	1000c734 <__eqdf2>
10004ba0:	103f9926 	beq	r2,zero,10004a08 <__alt_data_end+0xf8004a08>
10004ba4:	d8c00617 	ldw	r3,24(sp)
10004ba8:	d9000717 	ldw	r4,28(sp)
10004bac:	b825883a 	mov	r18,r23
10004bb0:	18bfffc4 	addi	r2,r3,-1
10004bb4:	20ad883a 	add	r22,r4,r2
10004bb8:	dc000315 	stw	r16,12(sp)
10004bbc:	00000a06 	br	10004be8 <_dtoa_r+0x898>
10004bc0:	000c9780 	call	1000c978 <__muldf3>
10004bc4:	1009883a 	mov	r4,r2
10004bc8:	180b883a 	mov	r5,r3
10004bcc:	000d883a 	mov	r6,zero
10004bd0:	000f883a 	mov	r7,zero
10004bd4:	1027883a 	mov	r19,r2
10004bd8:	182b883a 	mov	r21,r3
10004bdc:	b825883a 	mov	r18,r23
10004be0:	000c7340 	call	1000c734 <__eqdf2>
10004be4:	10022626 	beq	r2,zero,10005480 <_dtoa_r+0x1130>
10004be8:	880d883a 	mov	r6,r17
10004bec:	a00f883a 	mov	r7,r20
10004bf0:	9809883a 	mov	r4,r19
10004bf4:	a80b883a 	mov	r5,r21
10004bf8:	000bdb40 	call	1000bdb4 <__divdf3>
10004bfc:	180b883a 	mov	r5,r3
10004c00:	1009883a 	mov	r4,r2
10004c04:	000dab40 	call	1000dab4 <__fixdfsi>
10004c08:	1009883a 	mov	r4,r2
10004c0c:	1021883a 	mov	r16,r2
10004c10:	000db3c0 	call	1000db3c <__floatsidf>
10004c14:	1009883a 	mov	r4,r2
10004c18:	180b883a 	mov	r5,r3
10004c1c:	880d883a 	mov	r6,r17
10004c20:	a00f883a 	mov	r7,r20
10004c24:	000c9780 	call	1000c978 <__muldf3>
10004c28:	9809883a 	mov	r4,r19
10004c2c:	a80b883a 	mov	r5,r21
10004c30:	100d883a 	mov	r6,r2
10004c34:	180f883a 	mov	r7,r3
10004c38:	000d1e40 	call	1000d1e4 <__subdf3>
10004c3c:	82000c04 	addi	r8,r16,48
10004c40:	92000005 	stb	r8,0(r18)
10004c44:	1009883a 	mov	r4,r2
10004c48:	180b883a 	mov	r5,r3
10004c4c:	000d883a 	mov	r6,zero
10004c50:	01d00934 	movhi	r7,16420
10004c54:	1011883a 	mov	r8,r2
10004c58:	bdc00044 	addi	r23,r23,1
10004c5c:	95bfd81e 	bne	r18,r22,10004bc0 <__alt_data_end+0xf8004bc0>
10004c60:	802d883a 	mov	r22,r16
10004c64:	dc000317 	ldw	r16,12(sp)
10004c68:	4009883a 	mov	r4,r8
10004c6c:	180b883a 	mov	r5,r3
10004c70:	400d883a 	mov	r6,r8
10004c74:	180f883a 	mov	r7,r3
10004c78:	000b5180 	call	1000b518 <__adddf3>
10004c7c:	8809883a 	mov	r4,r17
10004c80:	a00b883a 	mov	r5,r20
10004c84:	100d883a 	mov	r6,r2
10004c88:	180f883a 	mov	r7,r3
10004c8c:	1027883a 	mov	r19,r2
10004c90:	1825883a 	mov	r18,r3
10004c94:	000c8980 	call	1000c898 <__ledf2>
10004c98:	10000816 	blt	r2,zero,10004cbc <_dtoa_r+0x96c>
10004c9c:	8809883a 	mov	r4,r17
10004ca0:	a00b883a 	mov	r5,r20
10004ca4:	980d883a 	mov	r6,r19
10004ca8:	900f883a 	mov	r7,r18
10004cac:	000c7340 	call	1000c734 <__eqdf2>
10004cb0:	103f551e 	bne	r2,zero,10004a08 <__alt_data_end+0xf8004a08>
10004cb4:	b580004c 	andi	r22,r22,1
10004cb8:	b03f5326 	beq	r22,zero,10004a08 <__alt_data_end+0xf8004a08>
10004cbc:	bd7fffc3 	ldbu	r21,-1(r23)
10004cc0:	b8bfffc4 	addi	r2,r23,-1
10004cc4:	1007883a 	mov	r3,r2
10004cc8:	01400e44 	movi	r5,57
10004ccc:	d9800717 	ldw	r6,28(sp)
10004cd0:	00000506 	br	10004ce8 <_dtoa_r+0x998>
10004cd4:	18ffffc4 	addi	r3,r3,-1
10004cd8:	30825e26 	beq	r6,r2,10005654 <_dtoa_r+0x1304>
10004cdc:	1d400003 	ldbu	r21,0(r3)
10004ce0:	102f883a 	mov	r23,r2
10004ce4:	10bfffc4 	addi	r2,r2,-1
10004ce8:	a9003fcc 	andi	r4,r21,255
10004cec:	2100201c 	xori	r4,r4,128
10004cf0:	213fe004 	addi	r4,r4,-128
10004cf4:	217ff726 	beq	r4,r5,10004cd4 <__alt_data_end+0xf8004cd4>
10004cf8:	aa000044 	addi	r8,r21,1
10004cfc:	12000005 	stb	r8,0(r2)
10004d00:	003f4106 	br	10004a08 <__alt_data_end+0xf8004a08>
10004d04:	d8c00b17 	ldw	r3,44(sp)
10004d08:	18006726 	beq	r3,zero,10004ea8 <_dtoa_r+0xb58>
10004d0c:	d9000317 	ldw	r4,12(sp)
10004d10:	00c00044 	movi	r3,1
10004d14:	19016a0e 	bge	r3,r4,100052c0 <_dtoa_r+0xf70>
10004d18:	d8800617 	ldw	r2,24(sp)
10004d1c:	d8c00917 	ldw	r3,36(sp)
10004d20:	157fffc4 	addi	r21,r2,-1
10004d24:	1d420716 	blt	r3,r21,10005544 <_dtoa_r+0x11f4>
10004d28:	1d6bc83a 	sub	r21,r3,r21
10004d2c:	d8800617 	ldw	r2,24(sp)
10004d30:	1002c716 	blt	r2,zero,10005850 <_dtoa_r+0x1500>
10004d34:	dd000817 	ldw	r20,32(sp)
10004d38:	d8800617 	ldw	r2,24(sp)
10004d3c:	d9800817 	ldw	r6,32(sp)
10004d40:	8009883a 	mov	r4,r16
10004d44:	01400044 	movi	r5,1
10004d48:	308d883a 	add	r6,r6,r2
10004d4c:	d9800815 	stw	r6,32(sp)
10004d50:	b0ad883a 	add	r22,r22,r2
10004d54:	00074d40 	call	100074d4 <__i2b>
10004d58:	1023883a 	mov	r17,r2
10004d5c:	a0000826 	beq	r20,zero,10004d80 <_dtoa_r+0xa30>
10004d60:	0580070e 	bge	zero,r22,10004d80 <_dtoa_r+0xa30>
10004d64:	b005883a 	mov	r2,r22
10004d68:	a5812016 	blt	r20,r22,100051ec <_dtoa_r+0xe9c>
10004d6c:	d8c00817 	ldw	r3,32(sp)
10004d70:	a0a9c83a 	sub	r20,r20,r2
10004d74:	b0adc83a 	sub	r22,r22,r2
10004d78:	1887c83a 	sub	r3,r3,r2
10004d7c:	d8c00815 	stw	r3,32(sp)
10004d80:	d9000917 	ldw	r4,36(sp)
10004d84:	0100140e 	bge	zero,r4,10004dd8 <_dtoa_r+0xa88>
10004d88:	d9800b17 	ldw	r6,44(sp)
10004d8c:	3001e526 	beq	r6,zero,10005524 <_dtoa_r+0x11d4>
10004d90:	05400e0e 	bge	zero,r21,10004dcc <_dtoa_r+0xa7c>
10004d94:	880b883a 	mov	r5,r17
10004d98:	8009883a 	mov	r4,r16
10004d9c:	a80d883a 	mov	r6,r21
10004da0:	00077a00 	call	100077a0 <__pow5mult>
10004da4:	e00d883a 	mov	r6,fp
10004da8:	8009883a 	mov	r4,r16
10004dac:	100b883a 	mov	r5,r2
10004db0:	1023883a 	mov	r17,r2
10004db4:	00075100 	call	10007510 <__multiply>
10004db8:	102f883a 	mov	r23,r2
10004dbc:	e00b883a 	mov	r5,fp
10004dc0:	8009883a 	mov	r4,r16
10004dc4:	00071540 	call	10007154 <_Bfree>
10004dc8:	b839883a 	mov	fp,r23
10004dcc:	d8800917 	ldw	r2,36(sp)
10004dd0:	154dc83a 	sub	r6,r2,r21
10004dd4:	3001281e 	bne	r6,zero,10005278 <_dtoa_r+0xf28>
10004dd8:	05c00044 	movi	r23,1
10004ddc:	8009883a 	mov	r4,r16
10004de0:	b80b883a 	mov	r5,r23
10004de4:	00074d40 	call	100074d4 <__i2b>
10004de8:	d8c00a17 	ldw	r3,40(sp)
10004dec:	102b883a 	mov	r21,r2
10004df0:	00c0310e 	bge	zero,r3,10004eb8 <_dtoa_r+0xb68>
10004df4:	8009883a 	mov	r4,r16
10004df8:	100b883a 	mov	r5,r2
10004dfc:	180d883a 	mov	r6,r3
10004e00:	00077a00 	call	100077a0 <__pow5mult>
10004e04:	d9000317 	ldw	r4,12(sp)
10004e08:	102b883a 	mov	r21,r2
10004e0c:	b9011f0e 	bge	r23,r4,1000528c <_dtoa_r+0xf3c>
10004e10:	0027883a 	mov	r19,zero
10004e14:	a8800417 	ldw	r2,16(r21)
10004e18:	10800104 	addi	r2,r2,4
10004e1c:	1085883a 	add	r2,r2,r2
10004e20:	1085883a 	add	r2,r2,r2
10004e24:	a885883a 	add	r2,r21,r2
10004e28:	11000017 	ldw	r4,0(r2)
10004e2c:	00073bc0 	call	100073bc <__hi0bits>
10004e30:	00c00804 	movi	r3,32
10004e34:	1885c83a 	sub	r2,r3,r2
10004e38:	00002506 	br	10004ed0 <_dtoa_r+0xb80>
10004e3c:	01800044 	movi	r6,1
10004e40:	d9800c15 	stw	r6,48(sp)
10004e44:	003dec06 	br	100045f8 <__alt_data_end+0xf80045f8>
10004e48:	d8c00817 	ldw	r3,32(sp)
10004e4c:	d9000517 	ldw	r4,20(sp)
10004e50:	d8000a15 	stw	zero,40(sp)
10004e54:	1907c83a 	sub	r3,r3,r4
10004e58:	010dc83a 	sub	r6,zero,r4
10004e5c:	d8c00815 	stw	r3,32(sp)
10004e60:	d9800915 	stw	r6,36(sp)
10004e64:	003ded06 	br	1000461c <__alt_data_end+0xf800461c>
10004e68:	05adc83a 	sub	r22,zero,r22
10004e6c:	dd800815 	stw	r22,32(sp)
10004e70:	002d883a 	mov	r22,zero
10004e74:	003de406 	br	10004608 <__alt_data_end+0xf8004608>
10004e78:	d9000517 	ldw	r4,20(sp)
10004e7c:	000db3c0 	call	1000db3c <__floatsidf>
10004e80:	1009883a 	mov	r4,r2
10004e84:	180b883a 	mov	r5,r3
10004e88:	b00d883a 	mov	r6,r22
10004e8c:	a80f883a 	mov	r7,r21
10004e90:	000c7340 	call	1000c734 <__eqdf2>
10004e94:	103dc726 	beq	r2,zero,100045b4 <__alt_data_end+0xf80045b4>
10004e98:	d8800517 	ldw	r2,20(sp)
10004e9c:	10bfffc4 	addi	r2,r2,-1
10004ea0:	d8800515 	stw	r2,20(sp)
10004ea4:	003dc306 	br	100045b4 <__alt_data_end+0xf80045b4>
10004ea8:	dd400917 	ldw	r21,36(sp)
10004eac:	dd000817 	ldw	r20,32(sp)
10004eb0:	0023883a 	mov	r17,zero
10004eb4:	003fa906 	br	10004d5c <__alt_data_end+0xf8004d5c>
10004eb8:	d9800317 	ldw	r6,12(sp)
10004ebc:	b981670e 	bge	r23,r6,1000545c <_dtoa_r+0x110c>
10004ec0:	0027883a 	mov	r19,zero
10004ec4:	d8c00a17 	ldw	r3,40(sp)
10004ec8:	183fd21e 	bne	r3,zero,10004e14 <__alt_data_end+0xf8004e14>
10004ecc:	00800044 	movi	r2,1
10004ed0:	1585883a 	add	r2,r2,r22
10004ed4:	108007cc 	andi	r2,r2,31
10004ed8:	10005f26 	beq	r2,zero,10005058 <_dtoa_r+0xd08>
10004edc:	00c00804 	movi	r3,32
10004ee0:	1887c83a 	sub	r3,r3,r2
10004ee4:	01000104 	movi	r4,4
10004ee8:	20c2dd0e 	bge	r4,r3,10005a60 <_dtoa_r+0x1710>
10004eec:	d9000817 	ldw	r4,32(sp)
10004ef0:	00c00704 	movi	r3,28
10004ef4:	1885c83a 	sub	r2,r3,r2
10004ef8:	2089883a 	add	r4,r4,r2
10004efc:	d9000815 	stw	r4,32(sp)
10004f00:	a0a9883a 	add	r20,r20,r2
10004f04:	b0ad883a 	add	r22,r22,r2
10004f08:	d8800817 	ldw	r2,32(sp)
10004f0c:	0080050e 	bge	zero,r2,10004f24 <_dtoa_r+0xbd4>
10004f10:	e00b883a 	mov	r5,fp
10004f14:	8009883a 	mov	r4,r16
10004f18:	100d883a 	mov	r6,r2
10004f1c:	00078e00 	call	100078e0 <__lshift>
10004f20:	1039883a 	mov	fp,r2
10004f24:	0580050e 	bge	zero,r22,10004f3c <_dtoa_r+0xbec>
10004f28:	a80b883a 	mov	r5,r21
10004f2c:	8009883a 	mov	r4,r16
10004f30:	b00d883a 	mov	r6,r22
10004f34:	00078e00 	call	100078e0 <__lshift>
10004f38:	102b883a 	mov	r21,r2
10004f3c:	d8c00c17 	ldw	r3,48(sp)
10004f40:	1801161e 	bne	r3,zero,1000539c <_dtoa_r+0x104c>
10004f44:	d8c00617 	ldw	r3,24(sp)
10004f48:	00c12d0e 	bge	zero,r3,10005400 <_dtoa_r+0x10b0>
10004f4c:	d8c00b17 	ldw	r3,44(sp)
10004f50:	1800571e 	bne	r3,zero,100050b0 <_dtoa_r+0xd60>
10004f54:	dc800717 	ldw	r18,28(sp)
10004f58:	dcc00617 	ldw	r19,24(sp)
10004f5c:	9029883a 	mov	r20,r18
10004f60:	00000206 	br	10004f6c <_dtoa_r+0xc1c>
10004f64:	000717c0 	call	1000717c <__multadd>
10004f68:	1039883a 	mov	fp,r2
10004f6c:	e009883a 	mov	r4,fp
10004f70:	a80b883a 	mov	r5,r21
10004f74:	00041280 	call	10004128 <quorem>
10004f78:	10800c04 	addi	r2,r2,48
10004f7c:	90800005 	stb	r2,0(r18)
10004f80:	94800044 	addi	r18,r18,1
10004f84:	9507c83a 	sub	r3,r18,r20
10004f88:	8009883a 	mov	r4,r16
10004f8c:	e00b883a 	mov	r5,fp
10004f90:	01800284 	movi	r6,10
10004f94:	000f883a 	mov	r7,zero
10004f98:	1cfff216 	blt	r3,r19,10004f64 <__alt_data_end+0xf8004f64>
10004f9c:	1011883a 	mov	r8,r2
10004fa0:	d8800617 	ldw	r2,24(sp)
10004fa4:	00822e0e 	bge	zero,r2,10005860 <_dtoa_r+0x1510>
10004fa8:	d9000717 	ldw	r4,28(sp)
10004fac:	0025883a 	mov	r18,zero
10004fb0:	20af883a 	add	r23,r4,r2
10004fb4:	e00b883a 	mov	r5,fp
10004fb8:	01800044 	movi	r6,1
10004fbc:	8009883a 	mov	r4,r16
10004fc0:	da001715 	stw	r8,92(sp)
10004fc4:	00078e00 	call	100078e0 <__lshift>
10004fc8:	1009883a 	mov	r4,r2
10004fcc:	a80b883a 	mov	r5,r21
10004fd0:	1039883a 	mov	fp,r2
10004fd4:	0007a280 	call	10007a28 <__mcmp>
10004fd8:	da001717 	ldw	r8,92(sp)
10004fdc:	00816e0e 	bge	zero,r2,10005598 <_dtoa_r+0x1248>
10004fe0:	b93fffc3 	ldbu	r4,-1(r23)
10004fe4:	b8bfffc4 	addi	r2,r23,-1
10004fe8:	1007883a 	mov	r3,r2
10004fec:	01800e44 	movi	r6,57
10004ff0:	d9c00717 	ldw	r7,28(sp)
10004ff4:	00000506 	br	1000500c <_dtoa_r+0xcbc>
10004ff8:	18ffffc4 	addi	r3,r3,-1
10004ffc:	38811926 	beq	r7,r2,10005464 <_dtoa_r+0x1114>
10005000:	19000003 	ldbu	r4,0(r3)
10005004:	102f883a 	mov	r23,r2
10005008:	10bfffc4 	addi	r2,r2,-1
1000500c:	21403fcc 	andi	r5,r4,255
10005010:	2940201c 	xori	r5,r5,128
10005014:	297fe004 	addi	r5,r5,-128
10005018:	29bff726 	beq	r5,r6,10004ff8 <__alt_data_end+0xf8004ff8>
1000501c:	21000044 	addi	r4,r4,1
10005020:	11000005 	stb	r4,0(r2)
10005024:	8009883a 	mov	r4,r16
10005028:	a80b883a 	mov	r5,r21
1000502c:	00071540 	call	10007154 <_Bfree>
10005030:	883e7526 	beq	r17,zero,10004a08 <__alt_data_end+0xf8004a08>
10005034:	90000426 	beq	r18,zero,10005048 <_dtoa_r+0xcf8>
10005038:	94400326 	beq	r18,r17,10005048 <_dtoa_r+0xcf8>
1000503c:	8009883a 	mov	r4,r16
10005040:	900b883a 	mov	r5,r18
10005044:	00071540 	call	10007154 <_Bfree>
10005048:	8009883a 	mov	r4,r16
1000504c:	880b883a 	mov	r5,r17
10005050:	00071540 	call	10007154 <_Bfree>
10005054:	003e6c06 	br	10004a08 <__alt_data_end+0xf8004a08>
10005058:	00800704 	movi	r2,28
1000505c:	d9800817 	ldw	r6,32(sp)
10005060:	a0a9883a 	add	r20,r20,r2
10005064:	b0ad883a 	add	r22,r22,r2
10005068:	308d883a 	add	r6,r6,r2
1000506c:	d9800815 	stw	r6,32(sp)
10005070:	003fa506 	br	10004f08 <__alt_data_end+0xf8004f08>
10005074:	013efb84 	movi	r4,-1042
10005078:	246bc83a 	sub	r21,r4,r17
1000507c:	9548983a 	sll	r4,r18,r21
10005080:	003d1806 	br	100044e4 <__alt_data_end+0xf80044e4>
10005084:	d8000c15 	stw	zero,48(sp)
10005088:	003d5b06 	br	100045f8 <__alt_data_end+0xf80045f8>
1000508c:	880b883a 	mov	r5,r17
10005090:	8009883a 	mov	r4,r16
10005094:	01800284 	movi	r6,10
10005098:	000f883a 	mov	r7,zero
1000509c:	000717c0 	call	1000717c <__multadd>
100050a0:	1023883a 	mov	r17,r2
100050a4:	d8800d17 	ldw	r2,52(sp)
100050a8:	0082550e 	bge	zero,r2,10005a00 <_dtoa_r+0x16b0>
100050ac:	d8800615 	stw	r2,24(sp)
100050b0:	0500050e 	bge	zero,r20,100050c8 <_dtoa_r+0xd78>
100050b4:	880b883a 	mov	r5,r17
100050b8:	8009883a 	mov	r4,r16
100050bc:	a00d883a 	mov	r6,r20
100050c0:	00078e00 	call	100078e0 <__lshift>
100050c4:	1023883a 	mov	r17,r2
100050c8:	98016a1e 	bne	r19,zero,10005674 <_dtoa_r+0x1324>
100050cc:	8829883a 	mov	r20,r17
100050d0:	d9000617 	ldw	r4,24(sp)
100050d4:	dcc00717 	ldw	r19,28(sp)
100050d8:	9480004c 	andi	r18,r18,1
100050dc:	20bfffc4 	addi	r2,r4,-1
100050e0:	9885883a 	add	r2,r19,r2
100050e4:	d8800415 	stw	r2,16(sp)
100050e8:	dc800615 	stw	r18,24(sp)
100050ec:	e009883a 	mov	r4,fp
100050f0:	a80b883a 	mov	r5,r21
100050f4:	00041280 	call	10004128 <quorem>
100050f8:	e009883a 	mov	r4,fp
100050fc:	880b883a 	mov	r5,r17
10005100:	102f883a 	mov	r23,r2
10005104:	0007a280 	call	10007a28 <__mcmp>
10005108:	8009883a 	mov	r4,r16
1000510c:	a80b883a 	mov	r5,r21
10005110:	a00d883a 	mov	r6,r20
10005114:	102d883a 	mov	r22,r2
10005118:	0007a880 	call	10007a88 <__mdiff>
1000511c:	1007883a 	mov	r3,r2
10005120:	10800317 	ldw	r2,12(r2)
10005124:	bc800c04 	addi	r18,r23,48
10005128:	1000971e 	bne	r2,zero,10005388 <_dtoa_r+0x1038>
1000512c:	180b883a 	mov	r5,r3
10005130:	e009883a 	mov	r4,fp
10005134:	d8c01515 	stw	r3,84(sp)
10005138:	0007a280 	call	10007a28 <__mcmp>
1000513c:	d8c01517 	ldw	r3,84(sp)
10005140:	8009883a 	mov	r4,r16
10005144:	d8801515 	stw	r2,84(sp)
10005148:	180b883a 	mov	r5,r3
1000514c:	00071540 	call	10007154 <_Bfree>
10005150:	d8801517 	ldw	r2,84(sp)
10005154:	1000041e 	bne	r2,zero,10005168 <_dtoa_r+0xe18>
10005158:	d9800317 	ldw	r6,12(sp)
1000515c:	3000021e 	bne	r6,zero,10005168 <_dtoa_r+0xe18>
10005160:	d8c00617 	ldw	r3,24(sp)
10005164:	18007626 	beq	r3,zero,10005340 <_dtoa_r+0xff0>
10005168:	b0005b16 	blt	r22,zero,100052d8 <_dtoa_r+0xf88>
1000516c:	b000041e 	bne	r22,zero,10005180 <_dtoa_r+0xe30>
10005170:	d9000317 	ldw	r4,12(sp)
10005174:	2000021e 	bne	r4,zero,10005180 <_dtoa_r+0xe30>
10005178:	d8c00617 	ldw	r3,24(sp)
1000517c:	18005626 	beq	r3,zero,100052d8 <_dtoa_r+0xf88>
10005180:	00814d16 	blt	zero,r2,100056b8 <_dtoa_r+0x1368>
10005184:	d8c00417 	ldw	r3,16(sp)
10005188:	9d800044 	addi	r22,r19,1
1000518c:	9c800005 	stb	r18,0(r19)
10005190:	b02f883a 	mov	r23,r22
10005194:	98c14c26 	beq	r19,r3,100056c8 <_dtoa_r+0x1378>
10005198:	e00b883a 	mov	r5,fp
1000519c:	8009883a 	mov	r4,r16
100051a0:	01800284 	movi	r6,10
100051a4:	000f883a 	mov	r7,zero
100051a8:	000717c0 	call	1000717c <__multadd>
100051ac:	1039883a 	mov	fp,r2
100051b0:	8d006d26 	beq	r17,r20,10005368 <_dtoa_r+0x1018>
100051b4:	880b883a 	mov	r5,r17
100051b8:	01800284 	movi	r6,10
100051bc:	000f883a 	mov	r7,zero
100051c0:	8009883a 	mov	r4,r16
100051c4:	000717c0 	call	1000717c <__multadd>
100051c8:	a00b883a 	mov	r5,r20
100051cc:	8009883a 	mov	r4,r16
100051d0:	01800284 	movi	r6,10
100051d4:	000f883a 	mov	r7,zero
100051d8:	1023883a 	mov	r17,r2
100051dc:	000717c0 	call	1000717c <__multadd>
100051e0:	1029883a 	mov	r20,r2
100051e4:	b027883a 	mov	r19,r22
100051e8:	003fc006 	br	100050ec <__alt_data_end+0xf80050ec>
100051ec:	a005883a 	mov	r2,r20
100051f0:	003ede06 	br	10004d6c <__alt_data_end+0xf8004d6c>
100051f4:	01000044 	movi	r4,1
100051f8:	d9000b15 	stw	r4,44(sp)
100051fc:	d9802217 	ldw	r6,136(sp)
10005200:	0180dc0e 	bge	zero,r6,10005574 <_dtoa_r+0x1224>
10005204:	3023883a 	mov	r17,r6
10005208:	d9800d15 	stw	r6,52(sp)
1000520c:	d9800615 	stw	r6,24(sp)
10005210:	003d1e06 	br	1000468c <__alt_data_end+0xf800468c>
10005214:	d8800617 	ldw	r2,24(sp)
10005218:	00be3716 	blt	zero,r2,10004af8 <__alt_data_end+0xf8004af8>
1000521c:	1000be1e 	bne	r2,zero,10005518 <_dtoa_r+0x11c8>
10005220:	8809883a 	mov	r4,r17
10005224:	a00b883a 	mov	r5,r20
10005228:	000d883a 	mov	r6,zero
1000522c:	01d00534 	movhi	r7,16404
10005230:	000c9780 	call	1000c978 <__muldf3>
10005234:	1009883a 	mov	r4,r2
10005238:	180b883a 	mov	r5,r3
1000523c:	900d883a 	mov	r6,r18
10005240:	980f883a 	mov	r7,r19
10005244:	000c7b80 	call	1000c7b8 <__gedf2>
10005248:	002b883a 	mov	r21,zero
1000524c:	0023883a 	mov	r17,zero
10005250:	10007a16 	blt	r2,zero,1000543c <_dtoa_r+0x10ec>
10005254:	d9002217 	ldw	r4,136(sp)
10005258:	ddc00717 	ldw	r23,28(sp)
1000525c:	0108303a 	nor	r4,zero,r4
10005260:	d9000515 	stw	r4,20(sp)
10005264:	8009883a 	mov	r4,r16
10005268:	a80b883a 	mov	r5,r21
1000526c:	00071540 	call	10007154 <_Bfree>
10005270:	883f751e 	bne	r17,zero,10005048 <__alt_data_end+0xf8005048>
10005274:	003de406 	br	10004a08 <__alt_data_end+0xf8004a08>
10005278:	e00b883a 	mov	r5,fp
1000527c:	8009883a 	mov	r4,r16
10005280:	00077a00 	call	100077a0 <__pow5mult>
10005284:	1039883a 	mov	fp,r2
10005288:	003ed306 	br	10004dd8 <__alt_data_end+0xf8004dd8>
1000528c:	903ee01e 	bne	r18,zero,10004e10 <__alt_data_end+0xf8004e10>
10005290:	00800434 	movhi	r2,16
10005294:	10bfffc4 	addi	r2,r2,-1
10005298:	9884703a 	and	r2,r19,r2
1000529c:	103f081e 	bne	r2,zero,10004ec0 <__alt_data_end+0xf8004ec0>
100052a0:	9cdffc2c 	andhi	r19,r19,32752
100052a4:	983f0626 	beq	r19,zero,10004ec0 <__alt_data_end+0xf8004ec0>
100052a8:	d8800817 	ldw	r2,32(sp)
100052ac:	b5800044 	addi	r22,r22,1
100052b0:	04c00044 	movi	r19,1
100052b4:	10800044 	addi	r2,r2,1
100052b8:	d8800815 	stw	r2,32(sp)
100052bc:	003f0106 	br	10004ec4 <__alt_data_end+0xf8004ec4>
100052c0:	d9800f17 	ldw	r6,60(sp)
100052c4:	30016826 	beq	r6,zero,10005868 <_dtoa_r+0x1518>
100052c8:	10810cc4 	addi	r2,r2,1075
100052cc:	dd400917 	ldw	r21,36(sp)
100052d0:	dd000817 	ldw	r20,32(sp)
100052d4:	003e9906 	br	10004d3c <__alt_data_end+0xf8004d3c>
100052d8:	9011883a 	mov	r8,r18
100052dc:	4007883a 	mov	r3,r8
100052e0:	e02d883a 	mov	r22,fp
100052e4:	0080100e 	bge	zero,r2,10005328 <_dtoa_r+0xfd8>
100052e8:	01800044 	movi	r6,1
100052ec:	8009883a 	mov	r4,r16
100052f0:	e00b883a 	mov	r5,fp
100052f4:	da001515 	stw	r8,84(sp)
100052f8:	da001715 	stw	r8,92(sp)
100052fc:	00078e00 	call	100078e0 <__lshift>
10005300:	1009883a 	mov	r4,r2
10005304:	a80b883a 	mov	r5,r21
10005308:	102d883a 	mov	r22,r2
1000530c:	0007a280 	call	10007a28 <__mcmp>
10005310:	d8c01517 	ldw	r3,84(sp)
10005314:	da001717 	ldw	r8,92(sp)
10005318:	0081a50e 	bge	zero,r2,100059b0 <_dtoa_r+0x1660>
1000531c:	00800e44 	movi	r2,57
10005320:	40817b26 	beq	r8,r2,10005910 <_dtoa_r+0x15c0>
10005324:	40c00044 	addi	r3,r8,1
10005328:	8825883a 	mov	r18,r17
1000532c:	9dc00044 	addi	r23,r19,1
10005330:	98c00005 	stb	r3,0(r19)
10005334:	a023883a 	mov	r17,r20
10005338:	b039883a 	mov	fp,r22
1000533c:	003f3906 	br	10005024 <__alt_data_end+0xf8005024>
10005340:	00800e44 	movi	r2,57
10005344:	9011883a 	mov	r8,r18
10005348:	90817226 	beq	r18,r2,10005914 <_dtoa_r+0x15c4>
1000534c:	0580010e 	bge	zero,r22,10005354 <_dtoa_r+0x1004>
10005350:	ba000c44 	addi	r8,r23,49
10005354:	8825883a 	mov	r18,r17
10005358:	9dc00044 	addi	r23,r19,1
1000535c:	9a000005 	stb	r8,0(r19)
10005360:	a023883a 	mov	r17,r20
10005364:	003f2f06 	br	10005024 <__alt_data_end+0xf8005024>
10005368:	880b883a 	mov	r5,r17
1000536c:	8009883a 	mov	r4,r16
10005370:	01800284 	movi	r6,10
10005374:	000f883a 	mov	r7,zero
10005378:	000717c0 	call	1000717c <__multadd>
1000537c:	1023883a 	mov	r17,r2
10005380:	1029883a 	mov	r20,r2
10005384:	003f9706 	br	100051e4 <__alt_data_end+0xf80051e4>
10005388:	8009883a 	mov	r4,r16
1000538c:	180b883a 	mov	r5,r3
10005390:	00071540 	call	10007154 <_Bfree>
10005394:	00800044 	movi	r2,1
10005398:	003f7306 	br	10005168 <__alt_data_end+0xf8005168>
1000539c:	e009883a 	mov	r4,fp
100053a0:	a80b883a 	mov	r5,r21
100053a4:	0007a280 	call	10007a28 <__mcmp>
100053a8:	103ee60e 	bge	r2,zero,10004f44 <__alt_data_end+0xf8004f44>
100053ac:	8009883a 	mov	r4,r16
100053b0:	e00b883a 	mov	r5,fp
100053b4:	01800284 	movi	r6,10
100053b8:	000f883a 	mov	r7,zero
100053bc:	000717c0 	call	1000717c <__multadd>
100053c0:	d9000517 	ldw	r4,20(sp)
100053c4:	d9800b17 	ldw	r6,44(sp)
100053c8:	1039883a 	mov	fp,r2
100053cc:	213fffc4 	addi	r4,r4,-1
100053d0:	d9000515 	stw	r4,20(sp)
100053d4:	303f2d1e 	bne	r6,zero,1000508c <__alt_data_end+0xf800508c>
100053d8:	d9000d17 	ldw	r4,52(sp)
100053dc:	0101780e 	bge	zero,r4,100059c0 <_dtoa_r+0x1670>
100053e0:	d9000615 	stw	r4,24(sp)
100053e4:	003edb06 	br	10004f54 <__alt_data_end+0xf8004f54>
100053e8:	00800084 	movi	r2,2
100053ec:	30818e1e 	bne	r6,r2,10005a28 <_dtoa_r+0x16d8>
100053f0:	d8000b15 	stw	zero,44(sp)
100053f4:	003f8106 	br	100051fc <__alt_data_end+0xf80051fc>
100053f8:	d8800717 	ldw	r2,28(sp)
100053fc:	003c0306 	br	1000440c <__alt_data_end+0xf800440c>
10005400:	d9000317 	ldw	r4,12(sp)
10005404:	00800084 	movi	r2,2
10005408:	113ed00e 	bge	r2,r4,10004f4c <__alt_data_end+0xf8004f4c>
1000540c:	d8c00617 	ldw	r3,24(sp)
10005410:	183f901e 	bne	r3,zero,10005254 <__alt_data_end+0xf8005254>
10005414:	a80b883a 	mov	r5,r21
10005418:	8009883a 	mov	r4,r16
1000541c:	01800144 	movi	r6,5
10005420:	000f883a 	mov	r7,zero
10005424:	000717c0 	call	1000717c <__multadd>
10005428:	e009883a 	mov	r4,fp
1000542c:	100b883a 	mov	r5,r2
10005430:	102b883a 	mov	r21,r2
10005434:	0007a280 	call	10007a28 <__mcmp>
10005438:	00bf860e 	bge	zero,r2,10005254 <__alt_data_end+0xf8005254>
1000543c:	d9800717 	ldw	r6,28(sp)
10005440:	00800c44 	movi	r2,49
10005444:	30800005 	stb	r2,0(r6)
10005448:	d8800517 	ldw	r2,20(sp)
1000544c:	35c00044 	addi	r23,r6,1
10005450:	10800044 	addi	r2,r2,1
10005454:	d8800515 	stw	r2,20(sp)
10005458:	003f8206 	br	10005264 <__alt_data_end+0xf8005264>
1000545c:	903e981e 	bne	r18,zero,10004ec0 <__alt_data_end+0xf8004ec0>
10005460:	003f8b06 	br	10005290 <__alt_data_end+0xf8005290>
10005464:	d9800517 	ldw	r6,20(sp)
10005468:	d8c00717 	ldw	r3,28(sp)
1000546c:	00800c44 	movi	r2,49
10005470:	31800044 	addi	r6,r6,1
10005474:	d9800515 	stw	r6,20(sp)
10005478:	18800005 	stb	r2,0(r3)
1000547c:	003ee906 	br	10005024 <__alt_data_end+0xf8005024>
10005480:	dc000317 	ldw	r16,12(sp)
10005484:	003d6006 	br	10004a08 <__alt_data_end+0xf8004a08>
10005488:	8809883a 	mov	r4,r17
1000548c:	000db3c0 	call	1000db3c <__floatsidf>
10005490:	a009883a 	mov	r4,r20
10005494:	a80b883a 	mov	r5,r21
10005498:	100d883a 	mov	r6,r2
1000549c:	180f883a 	mov	r7,r3
100054a0:	000c9780 	call	1000c978 <__muldf3>
100054a4:	1009883a 	mov	r4,r2
100054a8:	180b883a 	mov	r5,r3
100054ac:	000d883a 	mov	r6,zero
100054b0:	01d00734 	movhi	r7,16412
100054b4:	000b5180 	call	1000b518 <__adddf3>
100054b8:	1023883a 	mov	r17,r2
100054bc:	00bf3034 	movhi	r2,64704
100054c0:	1885883a 	add	r2,r3,r2
100054c4:	d8800e15 	stw	r2,56(sp)
100054c8:	a009883a 	mov	r4,r20
100054cc:	a80b883a 	mov	r5,r21
100054d0:	000d883a 	mov	r6,zero
100054d4:	01d00534 	movhi	r7,16404
100054d8:	000d1e40 	call	1000d1e4 <__subdf3>
100054dc:	d9c00e17 	ldw	r7,56(sp)
100054e0:	1009883a 	mov	r4,r2
100054e4:	180b883a 	mov	r5,r3
100054e8:	880d883a 	mov	r6,r17
100054ec:	102b883a 	mov	r21,r2
100054f0:	1829883a 	mov	r20,r3
100054f4:	000c7b80 	call	1000c7b8 <__gedf2>
100054f8:	00807716 	blt	zero,r2,100056d8 <_dtoa_r+0x1388>
100054fc:	d8800e17 	ldw	r2,56(sp)
10005500:	a809883a 	mov	r4,r21
10005504:	a00b883a 	mov	r5,r20
10005508:	11e0003c 	xorhi	r7,r2,32768
1000550c:	880d883a 	mov	r6,r17
10005510:	000c8980 	call	1000c898 <__ledf2>
10005514:	103d6b0e 	bge	r2,zero,10004ac4 <__alt_data_end+0xf8004ac4>
10005518:	002b883a 	mov	r21,zero
1000551c:	0023883a 	mov	r17,zero
10005520:	003f4c06 	br	10005254 <__alt_data_end+0xf8005254>
10005524:	d9800917 	ldw	r6,36(sp)
10005528:	e00b883a 	mov	r5,fp
1000552c:	8009883a 	mov	r4,r16
10005530:	00077a00 	call	100077a0 <__pow5mult>
10005534:	1039883a 	mov	fp,r2
10005538:	003e2706 	br	10004dd8 <__alt_data_end+0xf8004dd8>
1000553c:	d8000b15 	stw	zero,44(sp)
10005540:	003c4906 	br	10004668 <__alt_data_end+0xf8004668>
10005544:	d9000917 	ldw	r4,36(sp)
10005548:	d9800a17 	ldw	r6,40(sp)
1000554c:	dd400915 	stw	r21,36(sp)
10005550:	a905c83a 	sub	r2,r21,r4
10005554:	308d883a 	add	r6,r6,r2
10005558:	d9800a15 	stw	r6,40(sp)
1000555c:	002b883a 	mov	r21,zero
10005560:	003df206 	br	10004d2c <__alt_data_end+0xf8004d2c>
10005564:	dc800e15 	stw	r18,56(sp)
10005568:	982b883a 	mov	r21,r19
1000556c:	04400084 	movi	r17,2
10005570:	003c7406 	br	10004744 <__alt_data_end+0xf8004744>
10005574:	04400044 	movi	r17,1
10005578:	dc400d15 	stw	r17,52(sp)
1000557c:	dc400615 	stw	r17,24(sp)
10005580:	dc402215 	stw	r17,136(sp)
10005584:	80001115 	stw	zero,68(r16)
10005588:	000b883a 	mov	r5,zero
1000558c:	003c4a06 	br	100046b8 <__alt_data_end+0xf80046b8>
10005590:	3023883a 	mov	r17,r6
10005594:	003ffb06 	br	10005584 <__alt_data_end+0xf8005584>
10005598:	1000021e 	bne	r2,zero,100055a4 <_dtoa_r+0x1254>
1000559c:	4200004c 	andi	r8,r8,1
100055a0:	403e8f1e 	bne	r8,zero,10004fe0 <__alt_data_end+0xf8004fe0>
100055a4:	01000c04 	movi	r4,48
100055a8:	00000106 	br	100055b0 <_dtoa_r+0x1260>
100055ac:	102f883a 	mov	r23,r2
100055b0:	b8bfffc4 	addi	r2,r23,-1
100055b4:	10c00007 	ldb	r3,0(r2)
100055b8:	193ffc26 	beq	r3,r4,100055ac <__alt_data_end+0xf80055ac>
100055bc:	003e9906 	br	10005024 <__alt_data_end+0xf8005024>
100055c0:	d9000517 	ldw	r4,20(sp)
100055c4:	012fc83a 	sub	r23,zero,r4
100055c8:	b800ad26 	beq	r23,zero,10005880 <_dtoa_r+0x1530>
100055cc:	b88003cc 	andi	r2,r23,15
100055d0:	100490fa 	slli	r2,r2,3
100055d4:	00c40074 	movhi	r3,4097
100055d8:	18c37104 	addi	r3,r3,3524
100055dc:	1885883a 	add	r2,r3,r2
100055e0:	11800017 	ldw	r6,0(r2)
100055e4:	11c00117 	ldw	r7,4(r2)
100055e8:	b82fd13a 	srai	r23,r23,4
100055ec:	9009883a 	mov	r4,r18
100055f0:	980b883a 	mov	r5,r19
100055f4:	000c9780 	call	1000c978 <__muldf3>
100055f8:	1029883a 	mov	r20,r2
100055fc:	182b883a 	mov	r21,r3
10005600:	b800f426 	beq	r23,zero,100059d4 <_dtoa_r+0x1684>
10005604:	02040074 	movhi	r8,4097
10005608:	42036704 	addi	r8,r8,3484
1000560c:	8029883a 	mov	r20,r16
10005610:	04400084 	movi	r17,2
10005614:	4021883a 	mov	r16,r8
10005618:	b980004c 	andi	r6,r23,1
1000561c:	1009883a 	mov	r4,r2
10005620:	b82fd07a 	srai	r23,r23,1
10005624:	180b883a 	mov	r5,r3
10005628:	30000426 	beq	r6,zero,1000563c <_dtoa_r+0x12ec>
1000562c:	81800017 	ldw	r6,0(r16)
10005630:	81c00117 	ldw	r7,4(r16)
10005634:	8c400044 	addi	r17,r17,1
10005638:	000c9780 	call	1000c978 <__muldf3>
1000563c:	84000204 	addi	r16,r16,8
10005640:	b83ff51e 	bne	r23,zero,10005618 <__alt_data_end+0xf8005618>
10005644:	a021883a 	mov	r16,r20
10005648:	182b883a 	mov	r21,r3
1000564c:	1029883a 	mov	r20,r2
10005650:	003c5506 	br	100047a8 <__alt_data_end+0xf80047a8>
10005654:	d9800517 	ldw	r6,20(sp)
10005658:	d9000717 	ldw	r4,28(sp)
1000565c:	00c00c04 	movi	r3,48
10005660:	31800044 	addi	r6,r6,1
10005664:	d9800515 	stw	r6,20(sp)
10005668:	20c00005 	stb	r3,0(r4)
1000566c:	02000c44 	movi	r8,49
10005670:	003da206 	br	10004cfc <__alt_data_end+0xf8004cfc>
10005674:	89400117 	ldw	r5,4(r17)
10005678:	8009883a 	mov	r4,r16
1000567c:	00070ac0 	call	100070ac <_Balloc>
10005680:	89800417 	ldw	r6,16(r17)
10005684:	11000304 	addi	r4,r2,12
10005688:	89400304 	addi	r5,r17,12
1000568c:	31800084 	addi	r6,r6,2
10005690:	318d883a 	add	r6,r6,r6
10005694:	318d883a 	add	r6,r6,r6
10005698:	1027883a 	mov	r19,r2
1000569c:	0001b800 	call	10001b80 <memcpy>
100056a0:	8009883a 	mov	r4,r16
100056a4:	980b883a 	mov	r5,r19
100056a8:	01800044 	movi	r6,1
100056ac:	00078e00 	call	100078e0 <__lshift>
100056b0:	1029883a 	mov	r20,r2
100056b4:	003e8606 	br	100050d0 <__alt_data_end+0xf80050d0>
100056b8:	00800e44 	movi	r2,57
100056bc:	90809526 	beq	r18,r2,10005914 <_dtoa_r+0x15c4>
100056c0:	92000044 	addi	r8,r18,1
100056c4:	003f2306 	br	10005354 <__alt_data_end+0xf8005354>
100056c8:	9011883a 	mov	r8,r18
100056cc:	8825883a 	mov	r18,r17
100056d0:	a023883a 	mov	r17,r20
100056d4:	003e3706 	br	10004fb4 <__alt_data_end+0xf8004fb4>
100056d8:	002b883a 	mov	r21,zero
100056dc:	0023883a 	mov	r17,zero
100056e0:	003f5606 	br	1000543c <__alt_data_end+0xf800543c>
100056e4:	51bfffc4 	addi	r6,r10,-1
100056e8:	300490fa 	slli	r2,r6,3
100056ec:	00c40074 	movhi	r3,4097
100056f0:	18c37104 	addi	r3,r3,3524
100056f4:	1885883a 	add	r2,r3,r2
100056f8:	d9c00e17 	ldw	r7,56(sp)
100056fc:	11000017 	ldw	r4,0(r2)
10005700:	11400117 	ldw	r5,4(r2)
10005704:	d8800717 	ldw	r2,28(sp)
10005708:	d9801015 	stw	r6,64(sp)
1000570c:	880d883a 	mov	r6,r17
10005710:	da801615 	stw	r10,88(sp)
10005714:	15c00044 	addi	r23,r2,1
10005718:	000c9780 	call	1000c978 <__muldf3>
1000571c:	a80b883a 	mov	r5,r21
10005720:	a009883a 	mov	r4,r20
10005724:	d8c01115 	stw	r3,68(sp)
10005728:	d8800e15 	stw	r2,56(sp)
1000572c:	000dab40 	call	1000dab4 <__fixdfsi>
10005730:	1009883a 	mov	r4,r2
10005734:	1023883a 	mov	r17,r2
10005738:	000db3c0 	call	1000db3c <__floatsidf>
1000573c:	a009883a 	mov	r4,r20
10005740:	a80b883a 	mov	r5,r21
10005744:	100d883a 	mov	r6,r2
10005748:	180f883a 	mov	r7,r3
1000574c:	000d1e40 	call	1000d1e4 <__subdf3>
10005750:	1813883a 	mov	r9,r3
10005754:	d8c00717 	ldw	r3,28(sp)
10005758:	8c400c04 	addi	r17,r17,48
1000575c:	1011883a 	mov	r8,r2
10005760:	1c400005 	stb	r17,0(r3)
10005764:	da801617 	ldw	r10,88(sp)
10005768:	00800044 	movi	r2,1
1000576c:	50802326 	beq	r10,r2,100057fc <_dtoa_r+0x14ac>
10005770:	d8800717 	ldw	r2,28(sp)
10005774:	b82b883a 	mov	r21,r23
10005778:	dc001315 	stw	r16,76(sp)
1000577c:	12a9883a 	add	r20,r2,r10
10005780:	4807883a 	mov	r3,r9
10005784:	4005883a 	mov	r2,r8
10005788:	dc801415 	stw	r18,80(sp)
1000578c:	000d883a 	mov	r6,zero
10005790:	01d00934 	movhi	r7,16420
10005794:	1009883a 	mov	r4,r2
10005798:	180b883a 	mov	r5,r3
1000579c:	000c9780 	call	1000c978 <__muldf3>
100057a0:	180b883a 	mov	r5,r3
100057a4:	1009883a 	mov	r4,r2
100057a8:	1821883a 	mov	r16,r3
100057ac:	1025883a 	mov	r18,r2
100057b0:	000dab40 	call	1000dab4 <__fixdfsi>
100057b4:	1009883a 	mov	r4,r2
100057b8:	1023883a 	mov	r17,r2
100057bc:	000db3c0 	call	1000db3c <__floatsidf>
100057c0:	9009883a 	mov	r4,r18
100057c4:	800b883a 	mov	r5,r16
100057c8:	100d883a 	mov	r6,r2
100057cc:	180f883a 	mov	r7,r3
100057d0:	8c400c04 	addi	r17,r17,48
100057d4:	000d1e40 	call	1000d1e4 <__subdf3>
100057d8:	ad400044 	addi	r21,r21,1
100057dc:	ac7fffc5 	stb	r17,-1(r21)
100057e0:	ad3fea1e 	bne	r21,r20,1000578c <__alt_data_end+0xf800578c>
100057e4:	1813883a 	mov	r9,r3
100057e8:	d8c01017 	ldw	r3,64(sp)
100057ec:	dc001317 	ldw	r16,76(sp)
100057f0:	dc801417 	ldw	r18,80(sp)
100057f4:	1011883a 	mov	r8,r2
100057f8:	b8ef883a 	add	r23,r23,r3
100057fc:	d9000e17 	ldw	r4,56(sp)
10005800:	d9401117 	ldw	r5,68(sp)
10005804:	000d883a 	mov	r6,zero
10005808:	01cff834 	movhi	r7,16352
1000580c:	da001715 	stw	r8,92(sp)
10005810:	da401515 	stw	r9,84(sp)
10005814:	000b5180 	call	1000b518 <__adddf3>
10005818:	da001717 	ldw	r8,92(sp)
1000581c:	da401517 	ldw	r9,84(sp)
10005820:	1009883a 	mov	r4,r2
10005824:	400d883a 	mov	r6,r8
10005828:	480f883a 	mov	r7,r9
1000582c:	180b883a 	mov	r5,r3
10005830:	000c8980 	call	1000c898 <__ledf2>
10005834:	da001717 	ldw	r8,92(sp)
10005838:	da401517 	ldw	r9,84(sp)
1000583c:	10003b0e 	bge	r2,zero,1000592c <_dtoa_r+0x15dc>
10005840:	d9001217 	ldw	r4,72(sp)
10005844:	bd7fffc3 	ldbu	r21,-1(r23)
10005848:	d9000515 	stw	r4,20(sp)
1000584c:	003d1c06 	br	10004cc0 <__alt_data_end+0xf8004cc0>
10005850:	d8c00817 	ldw	r3,32(sp)
10005854:	18a9c83a 	sub	r20,r3,r2
10005858:	0005883a 	mov	r2,zero
1000585c:	003d3706 	br	10004d3c <__alt_data_end+0xf8004d3c>
10005860:	00800044 	movi	r2,1
10005864:	003dd006 	br	10004fa8 <__alt_data_end+0xf8004fa8>
10005868:	d8c00217 	ldw	r3,8(sp)
1000586c:	00800d84 	movi	r2,54
10005870:	dd400917 	ldw	r21,36(sp)
10005874:	10c5c83a 	sub	r2,r2,r3
10005878:	dd000817 	ldw	r20,32(sp)
1000587c:	003d2f06 	br	10004d3c <__alt_data_end+0xf8004d3c>
10005880:	9029883a 	mov	r20,r18
10005884:	982b883a 	mov	r21,r19
10005888:	04400084 	movi	r17,2
1000588c:	003bc606 	br	100047a8 <__alt_data_end+0xf80047a8>
10005890:	d8800617 	ldw	r2,24(sp)
10005894:	103efc26 	beq	r2,zero,10005488 <__alt_data_end+0xf8005488>
10005898:	d8c00d17 	ldw	r3,52(sp)
1000589c:	00fc890e 	bge	zero,r3,10004ac4 <__alt_data_end+0xf8004ac4>
100058a0:	a80b883a 	mov	r5,r21
100058a4:	a009883a 	mov	r4,r20
100058a8:	000d883a 	mov	r6,zero
100058ac:	01d00934 	movhi	r7,16420
100058b0:	000c9780 	call	1000c978 <__muldf3>
100058b4:	89000044 	addi	r4,r17,1
100058b8:	1029883a 	mov	r20,r2
100058bc:	182b883a 	mov	r21,r3
100058c0:	000db3c0 	call	1000db3c <__floatsidf>
100058c4:	a009883a 	mov	r4,r20
100058c8:	a80b883a 	mov	r5,r21
100058cc:	100d883a 	mov	r6,r2
100058d0:	180f883a 	mov	r7,r3
100058d4:	000c9780 	call	1000c978 <__muldf3>
100058d8:	1009883a 	mov	r4,r2
100058dc:	180b883a 	mov	r5,r3
100058e0:	000d883a 	mov	r6,zero
100058e4:	01d00734 	movhi	r7,16412
100058e8:	000b5180 	call	1000b518 <__adddf3>
100058ec:	d9000517 	ldw	r4,20(sp)
100058f0:	1023883a 	mov	r17,r2
100058f4:	00bf3034 	movhi	r2,64704
100058f8:	213fffc4 	addi	r4,r4,-1
100058fc:	1885883a 	add	r2,r3,r2
10005900:	d9001215 	stw	r4,72(sp)
10005904:	d8800e15 	stw	r2,56(sp)
10005908:	da800d17 	ldw	r10,52(sp)
1000590c:	003bc306 	br	1000481c <__alt_data_end+0xf800481c>
10005910:	b039883a 	mov	fp,r22
10005914:	01000e44 	movi	r4,57
10005918:	8825883a 	mov	r18,r17
1000591c:	9dc00044 	addi	r23,r19,1
10005920:	99000005 	stb	r4,0(r19)
10005924:	a023883a 	mov	r17,r20
10005928:	003dae06 	br	10004fe4 <__alt_data_end+0xf8004fe4>
1000592c:	d9800e17 	ldw	r6,56(sp)
10005930:	d9c01117 	ldw	r7,68(sp)
10005934:	0009883a 	mov	r4,zero
10005938:	014ff834 	movhi	r5,16352
1000593c:	da001715 	stw	r8,92(sp)
10005940:	da401515 	stw	r9,84(sp)
10005944:	000d1e40 	call	1000d1e4 <__subdf3>
10005948:	da001717 	ldw	r8,92(sp)
1000594c:	da401517 	ldw	r9,84(sp)
10005950:	1009883a 	mov	r4,r2
10005954:	180b883a 	mov	r5,r3
10005958:	400d883a 	mov	r6,r8
1000595c:	480f883a 	mov	r7,r9
10005960:	000c7b80 	call	1000c7b8 <__gedf2>
10005964:	00bc570e 	bge	zero,r2,10004ac4 <__alt_data_end+0xf8004ac4>
10005968:	01000c04 	movi	r4,48
1000596c:	00000106 	br	10005974 <_dtoa_r+0x1624>
10005970:	102f883a 	mov	r23,r2
10005974:	b8bfffc4 	addi	r2,r23,-1
10005978:	10c00007 	ldb	r3,0(r2)
1000597c:	193ffc26 	beq	r3,r4,10005970 <__alt_data_end+0xf8005970>
10005980:	d9801217 	ldw	r6,72(sp)
10005984:	d9800515 	stw	r6,20(sp)
10005988:	003c1f06 	br	10004a08 <__alt_data_end+0xf8004a08>
1000598c:	d8801217 	ldw	r2,72(sp)
10005990:	dc001117 	ldw	r16,68(sp)
10005994:	d8800515 	stw	r2,20(sp)
10005998:	003cc906 	br	10004cc0 <__alt_data_end+0xf8004cc0>
1000599c:	dd801317 	ldw	r22,76(sp)
100059a0:	dc001117 	ldw	r16,68(sp)
100059a4:	dcc01417 	ldw	r19,80(sp)
100059a8:	dc801017 	ldw	r18,64(sp)
100059ac:	003c4506 	br	10004ac4 <__alt_data_end+0xf8004ac4>
100059b0:	103e5d1e 	bne	r2,zero,10005328 <__alt_data_end+0xf8005328>
100059b4:	4080004c 	andi	r2,r8,1
100059b8:	103e5b26 	beq	r2,zero,10005328 <__alt_data_end+0xf8005328>
100059bc:	003e5706 	br	1000531c <__alt_data_end+0xf800531c>
100059c0:	d8c00317 	ldw	r3,12(sp)
100059c4:	00800084 	movi	r2,2
100059c8:	10c00a16 	blt	r2,r3,100059f4 <_dtoa_r+0x16a4>
100059cc:	d9000d17 	ldw	r4,52(sp)
100059d0:	003e8306 	br	100053e0 <__alt_data_end+0xf80053e0>
100059d4:	04400084 	movi	r17,2
100059d8:	003b7306 	br	100047a8 <__alt_data_end+0xf80047a8>
100059dc:	d9801217 	ldw	r6,72(sp)
100059e0:	d9800515 	stw	r6,20(sp)
100059e4:	003cb606 	br	10004cc0 <__alt_data_end+0xf8004cc0>
100059e8:	d9001217 	ldw	r4,72(sp)
100059ec:	d9000515 	stw	r4,20(sp)
100059f0:	003c0506 	br	10004a08 <__alt_data_end+0xf8004a08>
100059f4:	d9800d17 	ldw	r6,52(sp)
100059f8:	d9800615 	stw	r6,24(sp)
100059fc:	003e8306 	br	1000540c <__alt_data_end+0xf800540c>
10005a00:	d9800317 	ldw	r6,12(sp)
10005a04:	00800084 	movi	r2,2
10005a08:	11800216 	blt	r2,r6,10005a14 <_dtoa_r+0x16c4>
10005a0c:	d8800d17 	ldw	r2,52(sp)
10005a10:	003da606 	br	100050ac <__alt_data_end+0xf80050ac>
10005a14:	d8800d17 	ldw	r2,52(sp)
10005a18:	d8800615 	stw	r2,24(sp)
10005a1c:	003e7b06 	br	1000540c <__alt_data_end+0xf800540c>
10005a20:	05000044 	movi	r20,1
10005a24:	003b0506 	br	1000463c <__alt_data_end+0xf800463c>
10005a28:	8009883a 	mov	r4,r16
10005a2c:	80001115 	stw	zero,68(r16)
10005a30:	000b883a 	mov	r5,zero
10005a34:	00070ac0 	call	100070ac <_Balloc>
10005a38:	d8800715 	stw	r2,28(sp)
10005a3c:	d8c00717 	ldw	r3,28(sp)
10005a40:	00bfffc4 	movi	r2,-1
10005a44:	01000044 	movi	r4,1
10005a48:	d8800615 	stw	r2,24(sp)
10005a4c:	80c01015 	stw	r3,64(r16)
10005a50:	d9000b15 	stw	r4,44(sp)
10005a54:	d8002215 	stw	zero,136(sp)
10005a58:	d8800d15 	stw	r2,52(sp)
10005a5c:	003c1906 	br	10004ac4 <__alt_data_end+0xf8004ac4>
10005a60:	193d2926 	beq	r3,r4,10004f08 <__alt_data_end+0xf8004f08>
10005a64:	00c00f04 	movi	r3,60
10005a68:	1885c83a 	sub	r2,r3,r2
10005a6c:	003d7b06 	br	1000505c <__alt_data_end+0xf800505c>
10005a70:	000b883a 	mov	r5,zero
10005a74:	003b1006 	br	100046b8 <__alt_data_end+0xf80046b8>

10005a78 <_fflush_r>:
10005a78:	defffb04 	addi	sp,sp,-20
10005a7c:	dcc00315 	stw	r19,12(sp)
10005a80:	dc000015 	stw	r16,0(sp)
10005a84:	dfc00415 	stw	ra,16(sp)
10005a88:	dc800215 	stw	r18,8(sp)
10005a8c:	dc400115 	stw	r17,4(sp)
10005a90:	2027883a 	mov	r19,r4
10005a94:	2821883a 	mov	r16,r5
10005a98:	20000226 	beq	r4,zero,10005aa4 <_fflush_r+0x2c>
10005a9c:	20800e17 	ldw	r2,56(r4)
10005aa0:	10005326 	beq	r2,zero,10005bf0 <_fflush_r+0x178>
10005aa4:	8080030b 	ldhu	r2,12(r16)
10005aa8:	10ffffcc 	andi	r3,r2,65535
10005aac:	18e0001c 	xori	r3,r3,32768
10005ab0:	18e00004 	addi	r3,r3,-32768
10005ab4:	18002c26 	beq	r3,zero,10005b68 <_fflush_r+0xf0>
10005ab8:	10c0020c 	andi	r3,r2,8
10005abc:	1800321e 	bne	r3,zero,10005b88 <_fflush_r+0x110>
10005ac0:	80c00117 	ldw	r3,4(r16)
10005ac4:	10820014 	ori	r2,r2,2048
10005ac8:	8080030d 	sth	r2,12(r16)
10005acc:	00c0570e 	bge	zero,r3,10005c2c <_fflush_r+0x1b4>
10005ad0:	82000a17 	ldw	r8,40(r16)
10005ad4:	40002426 	beq	r8,zero,10005b68 <_fflush_r+0xf0>
10005ad8:	9c400017 	ldw	r17,0(r19)
10005adc:	10c4000c 	andi	r3,r2,4096
10005ae0:	98000015 	stw	zero,0(r19)
10005ae4:	18004626 	beq	r3,zero,10005c00 <_fflush_r+0x188>
10005ae8:	81801417 	ldw	r6,80(r16)
10005aec:	10c0010c 	andi	r3,r2,4
10005af0:	18000626 	beq	r3,zero,10005b0c <_fflush_r+0x94>
10005af4:	80c00117 	ldw	r3,4(r16)
10005af8:	80800c17 	ldw	r2,48(r16)
10005afc:	30cdc83a 	sub	r6,r6,r3
10005b00:	10000226 	beq	r2,zero,10005b0c <_fflush_r+0x94>
10005b04:	80800f17 	ldw	r2,60(r16)
10005b08:	308dc83a 	sub	r6,r6,r2
10005b0c:	81400717 	ldw	r5,28(r16)
10005b10:	9809883a 	mov	r4,r19
10005b14:	000f883a 	mov	r7,zero
10005b18:	403ee83a 	callr	r8
10005b1c:	00ffffc4 	movi	r3,-1
10005b20:	10c04526 	beq	r2,r3,10005c38 <_fflush_r+0x1c0>
10005b24:	80c0030b 	ldhu	r3,12(r16)
10005b28:	81000417 	ldw	r4,16(r16)
10005b2c:	80000115 	stw	zero,4(r16)
10005b30:	197dffcc 	andi	r5,r3,63487
10005b34:	8140030d 	sth	r5,12(r16)
10005b38:	81000015 	stw	r4,0(r16)
10005b3c:	18c4000c 	andi	r3,r3,4096
10005b40:	18000126 	beq	r3,zero,10005b48 <_fflush_r+0xd0>
10005b44:	80801415 	stw	r2,80(r16)
10005b48:	81400c17 	ldw	r5,48(r16)
10005b4c:	9c400015 	stw	r17,0(r19)
10005b50:	28000526 	beq	r5,zero,10005b68 <_fflush_r+0xf0>
10005b54:	80801004 	addi	r2,r16,64
10005b58:	28800226 	beq	r5,r2,10005b64 <_fflush_r+0xec>
10005b5c:	9809883a 	mov	r4,r19
10005b60:	00061a80 	call	100061a8 <_free_r>
10005b64:	80000c15 	stw	zero,48(r16)
10005b68:	0005883a 	mov	r2,zero
10005b6c:	dfc00417 	ldw	ra,16(sp)
10005b70:	dcc00317 	ldw	r19,12(sp)
10005b74:	dc800217 	ldw	r18,8(sp)
10005b78:	dc400117 	ldw	r17,4(sp)
10005b7c:	dc000017 	ldw	r16,0(sp)
10005b80:	dec00504 	addi	sp,sp,20
10005b84:	f800283a 	ret
10005b88:	84800417 	ldw	r18,16(r16)
10005b8c:	903ff626 	beq	r18,zero,10005b68 <__alt_data_end+0xf8005b68>
10005b90:	84400017 	ldw	r17,0(r16)
10005b94:	108000cc 	andi	r2,r2,3
10005b98:	84800015 	stw	r18,0(r16)
10005b9c:	8ca3c83a 	sub	r17,r17,r18
10005ba0:	10001526 	beq	r2,zero,10005bf8 <_fflush_r+0x180>
10005ba4:	0005883a 	mov	r2,zero
10005ba8:	80800215 	stw	r2,8(r16)
10005bac:	04400316 	blt	zero,r17,10005bbc <_fflush_r+0x144>
10005bb0:	003fed06 	br	10005b68 <__alt_data_end+0xf8005b68>
10005bb4:	90a5883a 	add	r18,r18,r2
10005bb8:	047feb0e 	bge	zero,r17,10005b68 <__alt_data_end+0xf8005b68>
10005bbc:	80800917 	ldw	r2,36(r16)
10005bc0:	81400717 	ldw	r5,28(r16)
10005bc4:	880f883a 	mov	r7,r17
10005bc8:	900d883a 	mov	r6,r18
10005bcc:	9809883a 	mov	r4,r19
10005bd0:	103ee83a 	callr	r2
10005bd4:	88a3c83a 	sub	r17,r17,r2
10005bd8:	00bff616 	blt	zero,r2,10005bb4 <__alt_data_end+0xf8005bb4>
10005bdc:	80c0030b 	ldhu	r3,12(r16)
10005be0:	00bfffc4 	movi	r2,-1
10005be4:	18c01014 	ori	r3,r3,64
10005be8:	80c0030d 	sth	r3,12(r16)
10005bec:	003fdf06 	br	10005b6c <__alt_data_end+0xf8005b6c>
10005bf0:	00060340 	call	10006034 <__sinit>
10005bf4:	003fab06 	br	10005aa4 <__alt_data_end+0xf8005aa4>
10005bf8:	80800517 	ldw	r2,20(r16)
10005bfc:	003fea06 	br	10005ba8 <__alt_data_end+0xf8005ba8>
10005c00:	81400717 	ldw	r5,28(r16)
10005c04:	000d883a 	mov	r6,zero
10005c08:	9809883a 	mov	r4,r19
10005c0c:	01c00044 	movi	r7,1
10005c10:	403ee83a 	callr	r8
10005c14:	100d883a 	mov	r6,r2
10005c18:	00bfffc4 	movi	r2,-1
10005c1c:	30801326 	beq	r6,r2,10005c6c <_fflush_r+0x1f4>
10005c20:	8080030b 	ldhu	r2,12(r16)
10005c24:	82000a17 	ldw	r8,40(r16)
10005c28:	003fb006 	br	10005aec <__alt_data_end+0xf8005aec>
10005c2c:	80c00f17 	ldw	r3,60(r16)
10005c30:	00ffa716 	blt	zero,r3,10005ad0 <__alt_data_end+0xf8005ad0>
10005c34:	003fcc06 	br	10005b68 <__alt_data_end+0xf8005b68>
10005c38:	98c00017 	ldw	r3,0(r19)
10005c3c:	183fb926 	beq	r3,zero,10005b24 <__alt_data_end+0xf8005b24>
10005c40:	01000744 	movi	r4,29
10005c44:	19000226 	beq	r3,r4,10005c50 <_fflush_r+0x1d8>
10005c48:	01000584 	movi	r4,22
10005c4c:	1900101e 	bne	r3,r4,10005c90 <_fflush_r+0x218>
10005c50:	8080030b 	ldhu	r2,12(r16)
10005c54:	80c00417 	ldw	r3,16(r16)
10005c58:	80000115 	stw	zero,4(r16)
10005c5c:	10bdffcc 	andi	r2,r2,63487
10005c60:	8080030d 	sth	r2,12(r16)
10005c64:	80c00015 	stw	r3,0(r16)
10005c68:	003fb706 	br	10005b48 <__alt_data_end+0xf8005b48>
10005c6c:	98800017 	ldw	r2,0(r19)
10005c70:	103feb26 	beq	r2,zero,10005c20 <__alt_data_end+0xf8005c20>
10005c74:	00c00744 	movi	r3,29
10005c78:	10c00226 	beq	r2,r3,10005c84 <_fflush_r+0x20c>
10005c7c:	00c00584 	movi	r3,22
10005c80:	10ffd61e 	bne	r2,r3,10005bdc <__alt_data_end+0xf8005bdc>
10005c84:	9c400015 	stw	r17,0(r19)
10005c88:	0005883a 	mov	r2,zero
10005c8c:	003fb706 	br	10005b6c <__alt_data_end+0xf8005b6c>
10005c90:	80c0030b 	ldhu	r3,12(r16)
10005c94:	18c01014 	ori	r3,r3,64
10005c98:	80c0030d 	sth	r3,12(r16)
10005c9c:	003fb306 	br	10005b6c <__alt_data_end+0xf8005b6c>

10005ca0 <fflush>:
10005ca0:	20000526 	beq	r4,zero,10005cb8 <fflush+0x18>
10005ca4:	00840074 	movhi	r2,4097
10005ca8:	108ab504 	addi	r2,r2,10964
10005cac:	200b883a 	mov	r5,r4
10005cb0:	11000017 	ldw	r4,0(r2)
10005cb4:	0005a781 	jmpi	10005a78 <_fflush_r>
10005cb8:	00840074 	movhi	r2,4097
10005cbc:	108ab404 	addi	r2,r2,10960
10005cc0:	11000017 	ldw	r4,0(r2)
10005cc4:	01440034 	movhi	r5,4096
10005cc8:	29569e04 	addi	r5,r5,23160
10005ccc:	00069f41 	jmpi	100069f4 <_fwalk_reent>

10005cd0 <__fp_lock>:
10005cd0:	0005883a 	mov	r2,zero
10005cd4:	f800283a 	ret

10005cd8 <__fp_unlock>:
10005cd8:	0005883a 	mov	r2,zero
10005cdc:	f800283a 	ret

10005ce0 <_cleanup_r>:
10005ce0:	01440074 	movhi	r5,4097
10005ce4:	29683304 	addi	r5,r5,-24372
10005ce8:	000693c1 	jmpi	1000693c <_fwalk>

10005cec <__sinit.part.1>:
10005cec:	defff604 	addi	sp,sp,-40
10005cf0:	00c40034 	movhi	r3,4096
10005cf4:	dfc00915 	stw	ra,36(sp)
10005cf8:	df000815 	stw	fp,32(sp)
10005cfc:	ddc00715 	stw	r23,28(sp)
10005d00:	dd800615 	stw	r22,24(sp)
10005d04:	dd400515 	stw	r21,20(sp)
10005d08:	dd000415 	stw	r20,16(sp)
10005d0c:	dcc00315 	stw	r19,12(sp)
10005d10:	dc800215 	stw	r18,8(sp)
10005d14:	dc400115 	stw	r17,4(sp)
10005d18:	dc000015 	stw	r16,0(sp)
10005d1c:	18d73804 	addi	r3,r3,23776
10005d20:	24000117 	ldw	r16,4(r4)
10005d24:	20c00f15 	stw	r3,60(r4)
10005d28:	07000044 	movi	fp,1
10005d2c:	00c000c4 	movi	r3,3
10005d30:	2080bb04 	addi	r2,r4,748
10005d34:	20c0b915 	stw	r3,740(r4)
10005d38:	27000e15 	stw	fp,56(r4)
10005d3c:	2080ba15 	stw	r2,744(r4)
10005d40:	2000b815 	stw	zero,736(r4)
10005d44:	05c00204 	movi	r23,8
10005d48:	00800104 	movi	r2,4
10005d4c:	2025883a 	mov	r18,r4
10005d50:	b80d883a 	mov	r6,r23
10005d54:	81001704 	addi	r4,r16,92
10005d58:	000b883a 	mov	r5,zero
10005d5c:	80000015 	stw	zero,0(r16)
10005d60:	80000115 	stw	zero,4(r16)
10005d64:	80000215 	stw	zero,8(r16)
10005d68:	8080030d 	sth	r2,12(r16)
10005d6c:	80001915 	stw	zero,100(r16)
10005d70:	8000038d 	sth	zero,14(r16)
10005d74:	80000415 	stw	zero,16(r16)
10005d78:	80000515 	stw	zero,20(r16)
10005d7c:	80000615 	stw	zero,24(r16)
10005d80:	0006f880 	call	10006f88 <memset>
10005d84:	05840074 	movhi	r22,4097
10005d88:	94400217 	ldw	r17,8(r18)
10005d8c:	05440074 	movhi	r21,4097
10005d90:	05040074 	movhi	r20,4097
10005d94:	04c40074 	movhi	r19,4097
10005d98:	b5a1c204 	addi	r22,r22,-30968
10005d9c:	ad61d904 	addi	r21,r21,-30876
10005da0:	a521f804 	addi	r20,r20,-30752
10005da4:	9ce20f04 	addi	r19,r19,-30660
10005da8:	85800815 	stw	r22,32(r16)
10005dac:	85400915 	stw	r21,36(r16)
10005db0:	85000a15 	stw	r20,40(r16)
10005db4:	84c00b15 	stw	r19,44(r16)
10005db8:	84000715 	stw	r16,28(r16)
10005dbc:	00800284 	movi	r2,10
10005dc0:	89001704 	addi	r4,r17,92
10005dc4:	b80d883a 	mov	r6,r23
10005dc8:	000b883a 	mov	r5,zero
10005dcc:	88000015 	stw	zero,0(r17)
10005dd0:	88000115 	stw	zero,4(r17)
10005dd4:	88000215 	stw	zero,8(r17)
10005dd8:	8880030d 	sth	r2,12(r17)
10005ddc:	88001915 	stw	zero,100(r17)
10005de0:	8f00038d 	sth	fp,14(r17)
10005de4:	88000415 	stw	zero,16(r17)
10005de8:	88000515 	stw	zero,20(r17)
10005dec:	88000615 	stw	zero,24(r17)
10005df0:	0006f880 	call	10006f88 <memset>
10005df4:	94000317 	ldw	r16,12(r18)
10005df8:	00800484 	movi	r2,18
10005dfc:	8c400715 	stw	r17,28(r17)
10005e00:	8d800815 	stw	r22,32(r17)
10005e04:	8d400915 	stw	r21,36(r17)
10005e08:	8d000a15 	stw	r20,40(r17)
10005e0c:	8cc00b15 	stw	r19,44(r17)
10005e10:	8080030d 	sth	r2,12(r16)
10005e14:	00800084 	movi	r2,2
10005e18:	80000015 	stw	zero,0(r16)
10005e1c:	80000115 	stw	zero,4(r16)
10005e20:	80000215 	stw	zero,8(r16)
10005e24:	80001915 	stw	zero,100(r16)
10005e28:	8080038d 	sth	r2,14(r16)
10005e2c:	80000415 	stw	zero,16(r16)
10005e30:	80000515 	stw	zero,20(r16)
10005e34:	80000615 	stw	zero,24(r16)
10005e38:	81001704 	addi	r4,r16,92
10005e3c:	000b883a 	mov	r5,zero
10005e40:	b80d883a 	mov	r6,r23
10005e44:	0006f880 	call	10006f88 <memset>
10005e48:	84000715 	stw	r16,28(r16)
10005e4c:	85800815 	stw	r22,32(r16)
10005e50:	85400915 	stw	r21,36(r16)
10005e54:	85000a15 	stw	r20,40(r16)
10005e58:	84c00b15 	stw	r19,44(r16)
10005e5c:	dfc00917 	ldw	ra,36(sp)
10005e60:	df000817 	ldw	fp,32(sp)
10005e64:	ddc00717 	ldw	r23,28(sp)
10005e68:	dd800617 	ldw	r22,24(sp)
10005e6c:	dd400517 	ldw	r21,20(sp)
10005e70:	dd000417 	ldw	r20,16(sp)
10005e74:	dcc00317 	ldw	r19,12(sp)
10005e78:	dc800217 	ldw	r18,8(sp)
10005e7c:	dc400117 	ldw	r17,4(sp)
10005e80:	dc000017 	ldw	r16,0(sp)
10005e84:	dec00a04 	addi	sp,sp,40
10005e88:	f800283a 	ret

10005e8c <__sfmoreglue>:
10005e8c:	defffc04 	addi	sp,sp,-16
10005e90:	dc800215 	stw	r18,8(sp)
10005e94:	2825883a 	mov	r18,r5
10005e98:	dc000015 	stw	r16,0(sp)
10005e9c:	01401a04 	movi	r5,104
10005ea0:	2021883a 	mov	r16,r4
10005ea4:	9009883a 	mov	r4,r18
10005ea8:	dfc00315 	stw	ra,12(sp)
10005eac:	dc400115 	stw	r17,4(sp)
10005eb0:	00013880 	call	10001388 <__mulsi3>
10005eb4:	8009883a 	mov	r4,r16
10005eb8:	11400304 	addi	r5,r2,12
10005ebc:	1023883a 	mov	r17,r2
10005ec0:	00013d80 	call	100013d8 <_malloc_r>
10005ec4:	1021883a 	mov	r16,r2
10005ec8:	10000726 	beq	r2,zero,10005ee8 <__sfmoreglue+0x5c>
10005ecc:	11000304 	addi	r4,r2,12
10005ed0:	10000015 	stw	zero,0(r2)
10005ed4:	14800115 	stw	r18,4(r2)
10005ed8:	11000215 	stw	r4,8(r2)
10005edc:	000b883a 	mov	r5,zero
10005ee0:	880d883a 	mov	r6,r17
10005ee4:	0006f880 	call	10006f88 <memset>
10005ee8:	8005883a 	mov	r2,r16
10005eec:	dfc00317 	ldw	ra,12(sp)
10005ef0:	dc800217 	ldw	r18,8(sp)
10005ef4:	dc400117 	ldw	r17,4(sp)
10005ef8:	dc000017 	ldw	r16,0(sp)
10005efc:	dec00404 	addi	sp,sp,16
10005f00:	f800283a 	ret

10005f04 <__sfp>:
10005f04:	00840074 	movhi	r2,4097
10005f08:	defffb04 	addi	sp,sp,-20
10005f0c:	108ab404 	addi	r2,r2,10960
10005f10:	dc800215 	stw	r18,8(sp)
10005f14:	14800017 	ldw	r18,0(r2)
10005f18:	dcc00315 	stw	r19,12(sp)
10005f1c:	dfc00415 	stw	ra,16(sp)
10005f20:	90800e17 	ldw	r2,56(r18)
10005f24:	dc400115 	stw	r17,4(sp)
10005f28:	dc000015 	stw	r16,0(sp)
10005f2c:	2027883a 	mov	r19,r4
10005f30:	1000021e 	bne	r2,zero,10005f3c <__sfp+0x38>
10005f34:	9009883a 	mov	r4,r18
10005f38:	0005cec0 	call	10005cec <__sinit.part.1>
10005f3c:	9480b804 	addi	r18,r18,736
10005f40:	047fffc4 	movi	r17,-1
10005f44:	91400117 	ldw	r5,4(r18)
10005f48:	94000217 	ldw	r16,8(r18)
10005f4c:	297fffc4 	addi	r5,r5,-1
10005f50:	28000a16 	blt	r5,zero,10005f7c <__sfp+0x78>
10005f54:	8080030f 	ldh	r2,12(r16)
10005f58:	10000c26 	beq	r2,zero,10005f8c <__sfp+0x88>
10005f5c:	80c01d04 	addi	r3,r16,116
10005f60:	00000206 	br	10005f6c <__sfp+0x68>
10005f64:	18bfe60f 	ldh	r2,-104(r3)
10005f68:	10000826 	beq	r2,zero,10005f8c <__sfp+0x88>
10005f6c:	297fffc4 	addi	r5,r5,-1
10005f70:	1c3ffd04 	addi	r16,r3,-12
10005f74:	18c01a04 	addi	r3,r3,104
10005f78:	2c7ffa1e 	bne	r5,r17,10005f64 <__alt_data_end+0xf8005f64>
10005f7c:	90800017 	ldw	r2,0(r18)
10005f80:	10001d26 	beq	r2,zero,10005ff8 <__sfp+0xf4>
10005f84:	1025883a 	mov	r18,r2
10005f88:	003fee06 	br	10005f44 <__alt_data_end+0xf8005f44>
10005f8c:	00bfffc4 	movi	r2,-1
10005f90:	8080038d 	sth	r2,14(r16)
10005f94:	00800044 	movi	r2,1
10005f98:	8080030d 	sth	r2,12(r16)
10005f9c:	80001915 	stw	zero,100(r16)
10005fa0:	80000015 	stw	zero,0(r16)
10005fa4:	80000215 	stw	zero,8(r16)
10005fa8:	80000115 	stw	zero,4(r16)
10005fac:	80000415 	stw	zero,16(r16)
10005fb0:	80000515 	stw	zero,20(r16)
10005fb4:	80000615 	stw	zero,24(r16)
10005fb8:	81001704 	addi	r4,r16,92
10005fbc:	000b883a 	mov	r5,zero
10005fc0:	01800204 	movi	r6,8
10005fc4:	0006f880 	call	10006f88 <memset>
10005fc8:	8005883a 	mov	r2,r16
10005fcc:	80000c15 	stw	zero,48(r16)
10005fd0:	80000d15 	stw	zero,52(r16)
10005fd4:	80001115 	stw	zero,68(r16)
10005fd8:	80001215 	stw	zero,72(r16)
10005fdc:	dfc00417 	ldw	ra,16(sp)
10005fe0:	dcc00317 	ldw	r19,12(sp)
10005fe4:	dc800217 	ldw	r18,8(sp)
10005fe8:	dc400117 	ldw	r17,4(sp)
10005fec:	dc000017 	ldw	r16,0(sp)
10005ff0:	dec00504 	addi	sp,sp,20
10005ff4:	f800283a 	ret
10005ff8:	9809883a 	mov	r4,r19
10005ffc:	01400104 	movi	r5,4
10006000:	0005e8c0 	call	10005e8c <__sfmoreglue>
10006004:	90800015 	stw	r2,0(r18)
10006008:	103fde1e 	bne	r2,zero,10005f84 <__alt_data_end+0xf8005f84>
1000600c:	00800304 	movi	r2,12
10006010:	98800015 	stw	r2,0(r19)
10006014:	0005883a 	mov	r2,zero
10006018:	003ff006 	br	10005fdc <__alt_data_end+0xf8005fdc>

1000601c <_cleanup>:
1000601c:	00840074 	movhi	r2,4097
10006020:	108ab404 	addi	r2,r2,10960
10006024:	11000017 	ldw	r4,0(r2)
10006028:	01440074 	movhi	r5,4097
1000602c:	29683304 	addi	r5,r5,-24372
10006030:	000693c1 	jmpi	1000693c <_fwalk>

10006034 <__sinit>:
10006034:	20800e17 	ldw	r2,56(r4)
10006038:	10000126 	beq	r2,zero,10006040 <__sinit+0xc>
1000603c:	f800283a 	ret
10006040:	0005cec1 	jmpi	10005cec <__sinit.part.1>

10006044 <__sfp_lock_acquire>:
10006044:	f800283a 	ret

10006048 <__sfp_lock_release>:
10006048:	f800283a 	ret

1000604c <__sinit_lock_acquire>:
1000604c:	f800283a 	ret

10006050 <__sinit_lock_release>:
10006050:	f800283a 	ret

10006054 <__fp_lock_all>:
10006054:	00840074 	movhi	r2,4097
10006058:	108ab504 	addi	r2,r2,10964
1000605c:	11000017 	ldw	r4,0(r2)
10006060:	01440034 	movhi	r5,4096
10006064:	29573404 	addi	r5,r5,23760
10006068:	000693c1 	jmpi	1000693c <_fwalk>

1000606c <__fp_unlock_all>:
1000606c:	00840074 	movhi	r2,4097
10006070:	108ab504 	addi	r2,r2,10964
10006074:	11000017 	ldw	r4,0(r2)
10006078:	01440034 	movhi	r5,4096
1000607c:	29573604 	addi	r5,r5,23768
10006080:	000693c1 	jmpi	1000693c <_fwalk>

10006084 <_malloc_trim_r>:
10006084:	defffb04 	addi	sp,sp,-20
10006088:	dcc00315 	stw	r19,12(sp)
1000608c:	04c40074 	movhi	r19,4097
10006090:	dc800215 	stw	r18,8(sp)
10006094:	dc400115 	stw	r17,4(sp)
10006098:	dc000015 	stw	r16,0(sp)
1000609c:	dfc00415 	stw	ra,16(sp)
100060a0:	2821883a 	mov	r16,r5
100060a4:	9cc40704 	addi	r19,r19,4124
100060a8:	2025883a 	mov	r18,r4
100060ac:	000e2f40 	call	1000e2f4 <__malloc_lock>
100060b0:	98800217 	ldw	r2,8(r19)
100060b4:	14400117 	ldw	r17,4(r2)
100060b8:	00bfff04 	movi	r2,-4
100060bc:	88a2703a 	and	r17,r17,r2
100060c0:	8c21c83a 	sub	r16,r17,r16
100060c4:	8403fbc4 	addi	r16,r16,4079
100060c8:	8020d33a 	srli	r16,r16,12
100060cc:	0083ffc4 	movi	r2,4095
100060d0:	843fffc4 	addi	r16,r16,-1
100060d4:	8020933a 	slli	r16,r16,12
100060d8:	1400060e 	bge	r2,r16,100060f4 <_malloc_trim_r+0x70>
100060dc:	9009883a 	mov	r4,r18
100060e0:	000b883a 	mov	r5,zero
100060e4:	0001dec0 	call	10001dec <_sbrk_r>
100060e8:	98c00217 	ldw	r3,8(r19)
100060ec:	1c47883a 	add	r3,r3,r17
100060f0:	10c00a26 	beq	r2,r3,1000611c <_malloc_trim_r+0x98>
100060f4:	9009883a 	mov	r4,r18
100060f8:	000e3140 	call	1000e314 <__malloc_unlock>
100060fc:	0005883a 	mov	r2,zero
10006100:	dfc00417 	ldw	ra,16(sp)
10006104:	dcc00317 	ldw	r19,12(sp)
10006108:	dc800217 	ldw	r18,8(sp)
1000610c:	dc400117 	ldw	r17,4(sp)
10006110:	dc000017 	ldw	r16,0(sp)
10006114:	dec00504 	addi	sp,sp,20
10006118:	f800283a 	ret
1000611c:	9009883a 	mov	r4,r18
10006120:	040bc83a 	sub	r5,zero,r16
10006124:	0001dec0 	call	10001dec <_sbrk_r>
10006128:	00ffffc4 	movi	r3,-1
1000612c:	10c00d26 	beq	r2,r3,10006164 <_malloc_trim_r+0xe0>
10006130:	00c40074 	movhi	r3,4097
10006134:	18d19a04 	addi	r3,r3,18024
10006138:	18800017 	ldw	r2,0(r3)
1000613c:	99000217 	ldw	r4,8(r19)
10006140:	8c23c83a 	sub	r17,r17,r16
10006144:	8c400054 	ori	r17,r17,1
10006148:	1421c83a 	sub	r16,r2,r16
1000614c:	24400115 	stw	r17,4(r4)
10006150:	9009883a 	mov	r4,r18
10006154:	1c000015 	stw	r16,0(r3)
10006158:	000e3140 	call	1000e314 <__malloc_unlock>
1000615c:	00800044 	movi	r2,1
10006160:	003fe706 	br	10006100 <__alt_data_end+0xf8006100>
10006164:	9009883a 	mov	r4,r18
10006168:	000b883a 	mov	r5,zero
1000616c:	0001dec0 	call	10001dec <_sbrk_r>
10006170:	99000217 	ldw	r4,8(r19)
10006174:	014003c4 	movi	r5,15
10006178:	1107c83a 	sub	r3,r2,r4
1000617c:	28ffdd0e 	bge	r5,r3,100060f4 <__alt_data_end+0xf80060f4>
10006180:	01440074 	movhi	r5,4097
10006184:	294ab204 	addi	r5,r5,10952
10006188:	29400017 	ldw	r5,0(r5)
1000618c:	18c00054 	ori	r3,r3,1
10006190:	20c00115 	stw	r3,4(r4)
10006194:	00c40074 	movhi	r3,4097
10006198:	1145c83a 	sub	r2,r2,r5
1000619c:	18d19a04 	addi	r3,r3,18024
100061a0:	18800015 	stw	r2,0(r3)
100061a4:	003fd306 	br	100060f4 <__alt_data_end+0xf80060f4>

100061a8 <_free_r>:
100061a8:	28004c26 	beq	r5,zero,100062dc <_free_r+0x134>
100061ac:	defffd04 	addi	sp,sp,-12
100061b0:	dc400115 	stw	r17,4(sp)
100061b4:	dc000015 	stw	r16,0(sp)
100061b8:	2023883a 	mov	r17,r4
100061bc:	2821883a 	mov	r16,r5
100061c0:	dfc00215 	stw	ra,8(sp)
100061c4:	000e2f40 	call	1000e2f4 <__malloc_lock>
100061c8:	813fff17 	ldw	r4,-4(r16)
100061cc:	00bfff84 	movi	r2,-2
100061d0:	02440074 	movhi	r9,4097
100061d4:	81bffe04 	addi	r6,r16,-8
100061d8:	2084703a 	and	r2,r4,r2
100061dc:	4a440704 	addi	r9,r9,4124
100061e0:	308b883a 	add	r5,r6,r2
100061e4:	2a000117 	ldw	r8,4(r5)
100061e8:	49c00217 	ldw	r7,8(r9)
100061ec:	00ffff04 	movi	r3,-4
100061f0:	40c6703a 	and	r3,r8,r3
100061f4:	39405326 	beq	r7,r5,10006344 <_free_r+0x19c>
100061f8:	28c00115 	stw	r3,4(r5)
100061fc:	2100004c 	andi	r4,r4,1
10006200:	2000091e 	bne	r4,zero,10006228 <_free_r+0x80>
10006204:	81fffe17 	ldw	r7,-8(r16)
10006208:	4a000204 	addi	r8,r9,8
1000620c:	31cdc83a 	sub	r6,r6,r7
10006210:	31000217 	ldw	r4,8(r6)
10006214:	11c5883a 	add	r2,r2,r7
10006218:	22006126 	beq	r4,r8,100063a0 <_free_r+0x1f8>
1000621c:	31c00317 	ldw	r7,12(r6)
10006220:	21c00315 	stw	r7,12(r4)
10006224:	39000215 	stw	r4,8(r7)
10006228:	28c9883a 	add	r4,r5,r3
1000622c:	21c00117 	ldw	r7,4(r4)
10006230:	39c0004c 	andi	r7,r7,1
10006234:	38000d1e 	bne	r7,zero,1000626c <_free_r+0xc4>
10006238:	29000217 	ldw	r4,8(r5)
1000623c:	10c5883a 	add	r2,r2,r3
10006240:	00c40074 	movhi	r3,4097
10006244:	18c40904 	addi	r3,r3,4132
10006248:	20c07526 	beq	r4,r3,10006420 <_free_r+0x278>
1000624c:	29c00317 	ldw	r7,12(r5)
10006250:	11400054 	ori	r5,r2,1
10006254:	3087883a 	add	r3,r6,r2
10006258:	21c00315 	stw	r7,12(r4)
1000625c:	39000215 	stw	r4,8(r7)
10006260:	31400115 	stw	r5,4(r6)
10006264:	18800015 	stw	r2,0(r3)
10006268:	00000406 	br	1000627c <_free_r+0xd4>
1000626c:	10c00054 	ori	r3,r2,1
10006270:	30c00115 	stw	r3,4(r6)
10006274:	3087883a 	add	r3,r6,r2
10006278:	18800015 	stw	r2,0(r3)
1000627c:	00c07fc4 	movi	r3,511
10006280:	18801736 	bltu	r3,r2,100062e0 <_free_r+0x138>
10006284:	1004d0fa 	srli	r2,r2,3
10006288:	01400044 	movi	r5,1
1000628c:	49000117 	ldw	r4,4(r9)
10006290:	1087883a 	add	r3,r2,r2
10006294:	18c7883a 	add	r3,r3,r3
10006298:	1005d0ba 	srai	r2,r2,2
1000629c:	18c7883a 	add	r3,r3,r3
100062a0:	1a47883a 	add	r3,r3,r9
100062a4:	19c00217 	ldw	r7,8(r3)
100062a8:	2884983a 	sll	r2,r5,r2
100062ac:	30c00315 	stw	r3,12(r6)
100062b0:	31c00215 	stw	r7,8(r6)
100062b4:	1104b03a 	or	r2,r2,r4
100062b8:	19800215 	stw	r6,8(r3)
100062bc:	48800115 	stw	r2,4(r9)
100062c0:	39800315 	stw	r6,12(r7)
100062c4:	8809883a 	mov	r4,r17
100062c8:	dfc00217 	ldw	ra,8(sp)
100062cc:	dc400117 	ldw	r17,4(sp)
100062d0:	dc000017 	ldw	r16,0(sp)
100062d4:	dec00304 	addi	sp,sp,12
100062d8:	000e3141 	jmpi	1000e314 <__malloc_unlock>
100062dc:	f800283a 	ret
100062e0:	1006d27a 	srli	r3,r2,9
100062e4:	01000104 	movi	r4,4
100062e8:	20c04036 	bltu	r4,r3,100063ec <_free_r+0x244>
100062ec:	1006d1ba 	srli	r3,r2,6
100062f0:	19400e04 	addi	r5,r3,56
100062f4:	2947883a 	add	r3,r5,r5
100062f8:	18c7883a 	add	r3,r3,r3
100062fc:	18c7883a 	add	r3,r3,r3
10006300:	1a49883a 	add	r4,r3,r9
10006304:	20c00217 	ldw	r3,8(r4)
10006308:	01c40074 	movhi	r7,4097
1000630c:	39c40704 	addi	r7,r7,4124
10006310:	19003b26 	beq	r3,r4,10006400 <_free_r+0x258>
10006314:	01ffff04 	movi	r7,-4
10006318:	19400117 	ldw	r5,4(r3)
1000631c:	29ca703a 	and	r5,r5,r7
10006320:	1140022e 	bgeu	r2,r5,1000632c <_free_r+0x184>
10006324:	18c00217 	ldw	r3,8(r3)
10006328:	20fffb1e 	bne	r4,r3,10006318 <__alt_data_end+0xf8006318>
1000632c:	18800317 	ldw	r2,12(r3)
10006330:	30800315 	stw	r2,12(r6)
10006334:	30c00215 	stw	r3,8(r6)
10006338:	11800215 	stw	r6,8(r2)
1000633c:	19800315 	stw	r6,12(r3)
10006340:	003fe006 	br	100062c4 <__alt_data_end+0xf80062c4>
10006344:	2100004c 	andi	r4,r4,1
10006348:	1885883a 	add	r2,r3,r2
1000634c:	2000071e 	bne	r4,zero,1000636c <_free_r+0x1c4>
10006350:	817ffe17 	ldw	r5,-8(r16)
10006354:	314dc83a 	sub	r6,r6,r5
10006358:	30c00317 	ldw	r3,12(r6)
1000635c:	31000217 	ldw	r4,8(r6)
10006360:	1145883a 	add	r2,r2,r5
10006364:	20c00315 	stw	r3,12(r4)
10006368:	19000215 	stw	r4,8(r3)
1000636c:	10c00054 	ori	r3,r2,1
10006370:	30c00115 	stw	r3,4(r6)
10006374:	00c40074 	movhi	r3,4097
10006378:	18cab304 	addi	r3,r3,10956
1000637c:	18c00017 	ldw	r3,0(r3)
10006380:	49800215 	stw	r6,8(r9)
10006384:	10ffcf36 	bltu	r2,r3,100062c4 <__alt_data_end+0xf80062c4>
10006388:	00840074 	movhi	r2,4097
1000638c:	10918e04 	addi	r2,r2,17976
10006390:	11400017 	ldw	r5,0(r2)
10006394:	8809883a 	mov	r4,r17
10006398:	00060840 	call	10006084 <_malloc_trim_r>
1000639c:	003fc906 	br	100062c4 <__alt_data_end+0xf80062c4>
100063a0:	28c9883a 	add	r4,r5,r3
100063a4:	21000117 	ldw	r4,4(r4)
100063a8:	2100004c 	andi	r4,r4,1
100063ac:	20000a1e 	bne	r4,zero,100063d8 <_free_r+0x230>
100063b0:	29000317 	ldw	r4,12(r5)
100063b4:	29400217 	ldw	r5,8(r5)
100063b8:	10c5883a 	add	r2,r2,r3
100063bc:	10c00054 	ori	r3,r2,1
100063c0:	29000315 	stw	r4,12(r5)
100063c4:	21400215 	stw	r5,8(r4)
100063c8:	30c00115 	stw	r3,4(r6)
100063cc:	308d883a 	add	r6,r6,r2
100063d0:	30800015 	stw	r2,0(r6)
100063d4:	003fbb06 	br	100062c4 <__alt_data_end+0xf80062c4>
100063d8:	10c00054 	ori	r3,r2,1
100063dc:	30c00115 	stw	r3,4(r6)
100063e0:	308d883a 	add	r6,r6,r2
100063e4:	30800015 	stw	r2,0(r6)
100063e8:	003fb606 	br	100062c4 <__alt_data_end+0xf80062c4>
100063ec:	01000504 	movi	r4,20
100063f0:	20c01436 	bltu	r4,r3,10006444 <_free_r+0x29c>
100063f4:	194016c4 	addi	r5,r3,91
100063f8:	2947883a 	add	r3,r5,r5
100063fc:	003fbe06 	br	100062f8 <__alt_data_end+0xf80062f8>
10006400:	280bd0ba 	srai	r5,r5,2
10006404:	00800044 	movi	r2,1
10006408:	39000117 	ldw	r4,4(r7)
1000640c:	114a983a 	sll	r5,r2,r5
10006410:	1805883a 	mov	r2,r3
10006414:	2908b03a 	or	r4,r5,r4
10006418:	39000115 	stw	r4,4(r7)
1000641c:	003fc406 	br	10006330 <__alt_data_end+0xf8006330>
10006420:	49800515 	stw	r6,20(r9)
10006424:	49800415 	stw	r6,16(r9)
10006428:	10c00054 	ori	r3,r2,1
1000642c:	31000315 	stw	r4,12(r6)
10006430:	31000215 	stw	r4,8(r6)
10006434:	30c00115 	stw	r3,4(r6)
10006438:	308d883a 	add	r6,r6,r2
1000643c:	30800015 	stw	r2,0(r6)
10006440:	003fa006 	br	100062c4 <__alt_data_end+0xf80062c4>
10006444:	01001504 	movi	r4,84
10006448:	20c00436 	bltu	r4,r3,1000645c <_free_r+0x2b4>
1000644c:	1006d33a 	srli	r3,r2,12
10006450:	19401b84 	addi	r5,r3,110
10006454:	2947883a 	add	r3,r5,r5
10006458:	003fa706 	br	100062f8 <__alt_data_end+0xf80062f8>
1000645c:	01005504 	movi	r4,340
10006460:	20c00436 	bltu	r4,r3,10006474 <_free_r+0x2cc>
10006464:	1006d3fa 	srli	r3,r2,15
10006468:	19401dc4 	addi	r5,r3,119
1000646c:	2947883a 	add	r3,r5,r5
10006470:	003fa106 	br	100062f8 <__alt_data_end+0xf80062f8>
10006474:	01015504 	movi	r4,1364
10006478:	20c00436 	bltu	r4,r3,1000648c <_free_r+0x2e4>
1000647c:	1006d4ba 	srli	r3,r2,18
10006480:	19401f04 	addi	r5,r3,124
10006484:	2947883a 	add	r3,r5,r5
10006488:	003f9b06 	br	100062f8 <__alt_data_end+0xf80062f8>
1000648c:	00c03f04 	movi	r3,252
10006490:	01401f84 	movi	r5,126
10006494:	003f9806 	br	100062f8 <__alt_data_end+0xf80062f8>

10006498 <__sfvwrite_r>:
10006498:	30800217 	ldw	r2,8(r6)
1000649c:	10004526 	beq	r2,zero,100065b4 <__sfvwrite_r+0x11c>
100064a0:	28c0030b 	ldhu	r3,12(r5)
100064a4:	defff404 	addi	sp,sp,-48
100064a8:	dd400715 	stw	r21,28(sp)
100064ac:	dcc00515 	stw	r19,20(sp)
100064b0:	dc000215 	stw	r16,8(sp)
100064b4:	dfc00b15 	stw	ra,44(sp)
100064b8:	df000a15 	stw	fp,40(sp)
100064bc:	ddc00915 	stw	r23,36(sp)
100064c0:	dd800815 	stw	r22,32(sp)
100064c4:	dd000615 	stw	r20,24(sp)
100064c8:	dc800415 	stw	r18,16(sp)
100064cc:	dc400315 	stw	r17,12(sp)
100064d0:	1880020c 	andi	r2,r3,8
100064d4:	2821883a 	mov	r16,r5
100064d8:	202b883a 	mov	r21,r4
100064dc:	3027883a 	mov	r19,r6
100064e0:	10002526 	beq	r2,zero,10006578 <__sfvwrite_r+0xe0>
100064e4:	28800417 	ldw	r2,16(r5)
100064e8:	10002326 	beq	r2,zero,10006578 <__sfvwrite_r+0xe0>
100064ec:	1880008c 	andi	r2,r3,2
100064f0:	9c400017 	ldw	r17,0(r19)
100064f4:	10003126 	beq	r2,zero,100065bc <__sfvwrite_r+0x124>
100064f8:	0029883a 	mov	r20,zero
100064fc:	0025883a 	mov	r18,zero
10006500:	05810004 	movi	r22,1024
10006504:	a00d883a 	mov	r6,r20
10006508:	a809883a 	mov	r4,r21
1000650c:	90002526 	beq	r18,zero,100065a4 <__sfvwrite_r+0x10c>
10006510:	900f883a 	mov	r7,r18
10006514:	81400717 	ldw	r5,28(r16)
10006518:	b480012e 	bgeu	r22,r18,10006520 <__sfvwrite_r+0x88>
1000651c:	01c10004 	movi	r7,1024
10006520:	80800917 	ldw	r2,36(r16)
10006524:	103ee83a 	callr	r2
10006528:	0080510e 	bge	zero,r2,10006670 <__sfvwrite_r+0x1d8>
1000652c:	98c00217 	ldw	r3,8(r19)
10006530:	a0a9883a 	add	r20,r20,r2
10006534:	90a5c83a 	sub	r18,r18,r2
10006538:	1885c83a 	sub	r2,r3,r2
1000653c:	98800215 	stw	r2,8(r19)
10006540:	103ff01e 	bne	r2,zero,10006504 <__alt_data_end+0xf8006504>
10006544:	0005883a 	mov	r2,zero
10006548:	dfc00b17 	ldw	ra,44(sp)
1000654c:	df000a17 	ldw	fp,40(sp)
10006550:	ddc00917 	ldw	r23,36(sp)
10006554:	dd800817 	ldw	r22,32(sp)
10006558:	dd400717 	ldw	r21,28(sp)
1000655c:	dd000617 	ldw	r20,24(sp)
10006560:	dcc00517 	ldw	r19,20(sp)
10006564:	dc800417 	ldw	r18,16(sp)
10006568:	dc400317 	ldw	r17,12(sp)
1000656c:	dc000217 	ldw	r16,8(sp)
10006570:	dec00c04 	addi	sp,sp,48
10006574:	f800283a 	ret
10006578:	a809883a 	mov	r4,r21
1000657c:	800b883a 	mov	r5,r16
10006580:	0003ff80 	call	10003ff8 <__swsetup_r>
10006584:	80c0030b 	ldhu	r3,12(r16)
10006588:	103fd826 	beq	r2,zero,100064ec <__alt_data_end+0xf80064ec>
1000658c:	18c01014 	ori	r3,r3,64
10006590:	80c0030d 	sth	r3,12(r16)
10006594:	00c00244 	movi	r3,9
10006598:	00bfffc4 	movi	r2,-1
1000659c:	a8c00015 	stw	r3,0(r21)
100065a0:	003fe906 	br	10006548 <__alt_data_end+0xf8006548>
100065a4:	8d000017 	ldw	r20,0(r17)
100065a8:	8c800117 	ldw	r18,4(r17)
100065ac:	8c400204 	addi	r17,r17,8
100065b0:	003fd406 	br	10006504 <__alt_data_end+0xf8006504>
100065b4:	0005883a 	mov	r2,zero
100065b8:	f800283a 	ret
100065bc:	1880004c 	andi	r2,r3,1
100065c0:	1000301e 	bne	r2,zero,10006684 <__sfvwrite_r+0x1ec>
100065c4:	002f883a 	mov	r23,zero
100065c8:	0025883a 	mov	r18,zero
100065cc:	90001c26 	beq	r18,zero,10006640 <__sfvwrite_r+0x1a8>
100065d0:	1880800c 	andi	r2,r3,512
100065d4:	85000217 	ldw	r20,8(r16)
100065d8:	10006c26 	beq	r2,zero,1000678c <__sfvwrite_r+0x2f4>
100065dc:	a02d883a 	mov	r22,r20
100065e0:	95008536 	bltu	r18,r20,100067f8 <__sfvwrite_r+0x360>
100065e4:	1881200c 	andi	r2,r3,1152
100065e8:	10009d1e 	bne	r2,zero,10006860 <__sfvwrite_r+0x3c8>
100065ec:	81000017 	ldw	r4,0(r16)
100065f0:	a039883a 	mov	fp,r20
100065f4:	9029883a 	mov	r20,r18
100065f8:	b80b883a 	mov	r5,r23
100065fc:	b00d883a 	mov	r6,r22
10006600:	0006e2c0 	call	10006e2c <memmove>
10006604:	80c00217 	ldw	r3,8(r16)
10006608:	81000017 	ldw	r4,0(r16)
1000660c:	9005883a 	mov	r2,r18
10006610:	1f39c83a 	sub	fp,r3,fp
10006614:	258f883a 	add	r7,r4,r22
10006618:	87000215 	stw	fp,8(r16)
1000661c:	81c00015 	stw	r7,0(r16)
10006620:	98c00217 	ldw	r3,8(r19)
10006624:	b8af883a 	add	r23,r23,r2
10006628:	90a5c83a 	sub	r18,r18,r2
1000662c:	1d05c83a 	sub	r2,r3,r20
10006630:	98800215 	stw	r2,8(r19)
10006634:	103fc326 	beq	r2,zero,10006544 <__alt_data_end+0xf8006544>
10006638:	80c0030b 	ldhu	r3,12(r16)
1000663c:	903fe41e 	bne	r18,zero,100065d0 <__alt_data_end+0xf80065d0>
10006640:	8dc00017 	ldw	r23,0(r17)
10006644:	8c800117 	ldw	r18,4(r17)
10006648:	8c400204 	addi	r17,r17,8
1000664c:	003fdf06 	br	100065cc <__alt_data_end+0xf80065cc>
10006650:	00080f40 	call	100080f4 <_realloc_r>
10006654:	102d883a 	mov	r22,r2
10006658:	1000a01e 	bne	r2,zero,100068dc <__sfvwrite_r+0x444>
1000665c:	81400417 	ldw	r5,16(r16)
10006660:	a809883a 	mov	r4,r21
10006664:	00061a80 	call	100061a8 <_free_r>
10006668:	00800304 	movi	r2,12
1000666c:	a8800015 	stw	r2,0(r21)
10006670:	80c0030b 	ldhu	r3,12(r16)
10006674:	00bfffc4 	movi	r2,-1
10006678:	18c01014 	ori	r3,r3,64
1000667c:	80c0030d 	sth	r3,12(r16)
10006680:	003fb106 	br	10006548 <__alt_data_end+0xf8006548>
10006684:	0029883a 	mov	r20,zero
10006688:	0011883a 	mov	r8,zero
1000668c:	0039883a 	mov	fp,zero
10006690:	0025883a 	mov	r18,zero
10006694:	90001f26 	beq	r18,zero,10006714 <__sfvwrite_r+0x27c>
10006698:	40006826 	beq	r8,zero,1000683c <__sfvwrite_r+0x3a4>
1000669c:	a02f883a 	mov	r23,r20
100066a0:	9500012e 	bgeu	r18,r20,100066a8 <__sfvwrite_r+0x210>
100066a4:	902f883a 	mov	r23,r18
100066a8:	81000017 	ldw	r4,0(r16)
100066ac:	80800417 	ldw	r2,16(r16)
100066b0:	b82d883a 	mov	r22,r23
100066b4:	81800217 	ldw	r6,8(r16)
100066b8:	81c00517 	ldw	r7,20(r16)
100066bc:	1100022e 	bgeu	r2,r4,100066c8 <__sfvwrite_r+0x230>
100066c0:	31c7883a 	add	r3,r6,r7
100066c4:	1dc01816 	blt	r3,r23,10006728 <__sfvwrite_r+0x290>
100066c8:	b9c03f16 	blt	r23,r7,100067c8 <__sfvwrite_r+0x330>
100066cc:	80800917 	ldw	r2,36(r16)
100066d0:	81400717 	ldw	r5,28(r16)
100066d4:	a809883a 	mov	r4,r21
100066d8:	da000115 	stw	r8,4(sp)
100066dc:	e00d883a 	mov	r6,fp
100066e0:	103ee83a 	callr	r2
100066e4:	102d883a 	mov	r22,r2
100066e8:	da000117 	ldw	r8,4(sp)
100066ec:	00bfe00e 	bge	zero,r2,10006670 <__alt_data_end+0xf8006670>
100066f0:	a5a9c83a 	sub	r20,r20,r22
100066f4:	a0001f26 	beq	r20,zero,10006774 <__sfvwrite_r+0x2dc>
100066f8:	98800217 	ldw	r2,8(r19)
100066fc:	e5b9883a 	add	fp,fp,r22
10006700:	95a5c83a 	sub	r18,r18,r22
10006704:	15adc83a 	sub	r22,r2,r22
10006708:	9d800215 	stw	r22,8(r19)
1000670c:	b03f8d26 	beq	r22,zero,10006544 <__alt_data_end+0xf8006544>
10006710:	903fe11e 	bne	r18,zero,10006698 <__alt_data_end+0xf8006698>
10006714:	8f000017 	ldw	fp,0(r17)
10006718:	8c800117 	ldw	r18,4(r17)
1000671c:	0011883a 	mov	r8,zero
10006720:	8c400204 	addi	r17,r17,8
10006724:	003fdb06 	br	10006694 <__alt_data_end+0xf8006694>
10006728:	180d883a 	mov	r6,r3
1000672c:	e00b883a 	mov	r5,fp
10006730:	da000115 	stw	r8,4(sp)
10006734:	d8c00015 	stw	r3,0(sp)
10006738:	0006e2c0 	call	10006e2c <memmove>
1000673c:	d8c00017 	ldw	r3,0(sp)
10006740:	80800017 	ldw	r2,0(r16)
10006744:	a809883a 	mov	r4,r21
10006748:	800b883a 	mov	r5,r16
1000674c:	10c5883a 	add	r2,r2,r3
10006750:	80800015 	stw	r2,0(r16)
10006754:	d8c00015 	stw	r3,0(sp)
10006758:	0005a780 	call	10005a78 <_fflush_r>
1000675c:	d8c00017 	ldw	r3,0(sp)
10006760:	da000117 	ldw	r8,4(sp)
10006764:	103fc21e 	bne	r2,zero,10006670 <__alt_data_end+0xf8006670>
10006768:	182d883a 	mov	r22,r3
1000676c:	a5a9c83a 	sub	r20,r20,r22
10006770:	a03fe11e 	bne	r20,zero,100066f8 <__alt_data_end+0xf80066f8>
10006774:	a809883a 	mov	r4,r21
10006778:	800b883a 	mov	r5,r16
1000677c:	0005a780 	call	10005a78 <_fflush_r>
10006780:	103fbb1e 	bne	r2,zero,10006670 <__alt_data_end+0xf8006670>
10006784:	0011883a 	mov	r8,zero
10006788:	003fdb06 	br	100066f8 <__alt_data_end+0xf80066f8>
1000678c:	81000017 	ldw	r4,0(r16)
10006790:	80800417 	ldw	r2,16(r16)
10006794:	1100012e 	bgeu	r2,r4,1000679c <__sfvwrite_r+0x304>
10006798:	a4805a36 	bltu	r20,r18,10006904 <__sfvwrite_r+0x46c>
1000679c:	81c00517 	ldw	r7,20(r16)
100067a0:	91c01a36 	bltu	r18,r7,1000680c <__sfvwrite_r+0x374>
100067a4:	80800917 	ldw	r2,36(r16)
100067a8:	81400717 	ldw	r5,28(r16)
100067ac:	a809883a 	mov	r4,r21
100067b0:	b80d883a 	mov	r6,r23
100067b4:	103ee83a 	callr	r2
100067b8:	1029883a 	mov	r20,r2
100067bc:	00bfac0e 	bge	zero,r2,10006670 <__alt_data_end+0xf8006670>
100067c0:	a005883a 	mov	r2,r20
100067c4:	003f9606 	br	10006620 <__alt_data_end+0xf8006620>
100067c8:	b80d883a 	mov	r6,r23
100067cc:	e00b883a 	mov	r5,fp
100067d0:	da000115 	stw	r8,4(sp)
100067d4:	0006e2c0 	call	10006e2c <memmove>
100067d8:	80800217 	ldw	r2,8(r16)
100067dc:	80c00017 	ldw	r3,0(r16)
100067e0:	da000117 	ldw	r8,4(sp)
100067e4:	15c5c83a 	sub	r2,r2,r23
100067e8:	1def883a 	add	r23,r3,r23
100067ec:	80800215 	stw	r2,8(r16)
100067f0:	85c00015 	stw	r23,0(r16)
100067f4:	003fbe06 	br	100066f0 <__alt_data_end+0xf80066f0>
100067f8:	81000017 	ldw	r4,0(r16)
100067fc:	9039883a 	mov	fp,r18
10006800:	9029883a 	mov	r20,r18
10006804:	902d883a 	mov	r22,r18
10006808:	003f7b06 	br	100065f8 <__alt_data_end+0xf80065f8>
1000680c:	b80b883a 	mov	r5,r23
10006810:	900d883a 	mov	r6,r18
10006814:	0006e2c0 	call	10006e2c <memmove>
10006818:	80c00217 	ldw	r3,8(r16)
1000681c:	80800017 	ldw	r2,0(r16)
10006820:	9029883a 	mov	r20,r18
10006824:	1c87c83a 	sub	r3,r3,r18
10006828:	1485883a 	add	r2,r2,r18
1000682c:	80800015 	stw	r2,0(r16)
10006830:	80c00215 	stw	r3,8(r16)
10006834:	9005883a 	mov	r2,r18
10006838:	003f7906 	br	10006620 <__alt_data_end+0xf8006620>
1000683c:	e009883a 	mov	r4,fp
10006840:	01400284 	movi	r5,10
10006844:	900d883a 	mov	r6,r18
10006848:	0006d440 	call	10006d44 <memchr>
1000684c:	10003826 	beq	r2,zero,10006930 <__sfvwrite_r+0x498>
10006850:	10800044 	addi	r2,r2,1
10006854:	1729c83a 	sub	r20,r2,fp
10006858:	02000044 	movi	r8,1
1000685c:	003f8f06 	br	1000669c <__alt_data_end+0xf800669c>
10006860:	80800517 	ldw	r2,20(r16)
10006864:	81400417 	ldw	r5,16(r16)
10006868:	87000017 	ldw	fp,0(r16)
1000686c:	10a9883a 	add	r20,r2,r2
10006870:	a085883a 	add	r2,r20,r2
10006874:	1028d7fa 	srli	r20,r2,31
10006878:	e179c83a 	sub	fp,fp,r5
1000687c:	e1000044 	addi	r4,fp,1
10006880:	a085883a 	add	r2,r20,r2
10006884:	1029d07a 	srai	r20,r2,1
10006888:	2485883a 	add	r2,r4,r18
1000688c:	a00d883a 	mov	r6,r20
10006890:	a080022e 	bgeu	r20,r2,1000689c <__sfvwrite_r+0x404>
10006894:	1029883a 	mov	r20,r2
10006898:	100d883a 	mov	r6,r2
1000689c:	18c1000c 	andi	r3,r3,1024
100068a0:	a809883a 	mov	r4,r21
100068a4:	183f6a26 	beq	r3,zero,10006650 <__alt_data_end+0xf8006650>
100068a8:	300b883a 	mov	r5,r6
100068ac:	00013d80 	call	100013d8 <_malloc_r>
100068b0:	102d883a 	mov	r22,r2
100068b4:	103f6c26 	beq	r2,zero,10006668 <__alt_data_end+0xf8006668>
100068b8:	81400417 	ldw	r5,16(r16)
100068bc:	1009883a 	mov	r4,r2
100068c0:	e00d883a 	mov	r6,fp
100068c4:	0001b800 	call	10001b80 <memcpy>
100068c8:	8080030b 	ldhu	r2,12(r16)
100068cc:	00fedfc4 	movi	r3,-1153
100068d0:	10c4703a 	and	r2,r2,r3
100068d4:	10802014 	ori	r2,r2,128
100068d8:	8080030d 	sth	r2,12(r16)
100068dc:	b709883a 	add	r4,r22,fp
100068e0:	a707c83a 	sub	r3,r20,fp
100068e4:	85800415 	stw	r22,16(r16)
100068e8:	85000515 	stw	r20,20(r16)
100068ec:	81000015 	stw	r4,0(r16)
100068f0:	9039883a 	mov	fp,r18
100068f4:	80c00215 	stw	r3,8(r16)
100068f8:	9029883a 	mov	r20,r18
100068fc:	902d883a 	mov	r22,r18
10006900:	003f3d06 	br	100065f8 <__alt_data_end+0xf80065f8>
10006904:	b80b883a 	mov	r5,r23
10006908:	a00d883a 	mov	r6,r20
1000690c:	0006e2c0 	call	10006e2c <memmove>
10006910:	80800017 	ldw	r2,0(r16)
10006914:	a809883a 	mov	r4,r21
10006918:	800b883a 	mov	r5,r16
1000691c:	1505883a 	add	r2,r2,r20
10006920:	80800015 	stw	r2,0(r16)
10006924:	0005a780 	call	10005a78 <_fflush_r>
10006928:	103fa526 	beq	r2,zero,100067c0 <__alt_data_end+0xf80067c0>
1000692c:	003f5006 	br	10006670 <__alt_data_end+0xf8006670>
10006930:	95000044 	addi	r20,r18,1
10006934:	02000044 	movi	r8,1
10006938:	003f5806 	br	1000669c <__alt_data_end+0xf800669c>

1000693c <_fwalk>:
1000693c:	defff804 	addi	sp,sp,-32
10006940:	dd400515 	stw	r21,20(sp)
10006944:	2540b804 	addi	r21,r4,736
10006948:	dd800615 	stw	r22,24(sp)
1000694c:	dd000415 	stw	r20,16(sp)
10006950:	dfc00715 	stw	ra,28(sp)
10006954:	dcc00315 	stw	r19,12(sp)
10006958:	dc800215 	stw	r18,8(sp)
1000695c:	dc400115 	stw	r17,4(sp)
10006960:	dc000015 	stw	r16,0(sp)
10006964:	2829883a 	mov	r20,r5
10006968:	002d883a 	mov	r22,zero
1000696c:	00060440 	call	10006044 <__sfp_lock_acquire>
10006970:	a8001426 	beq	r21,zero,100069c4 <_fwalk+0x88>
10006974:	04ffffc4 	movi	r19,-1
10006978:	ac400117 	ldw	r17,4(r21)
1000697c:	ac800217 	ldw	r18,8(r21)
10006980:	8c7fffc4 	addi	r17,r17,-1
10006984:	88000d16 	blt	r17,zero,100069bc <_fwalk+0x80>
10006988:	94000304 	addi	r16,r18,12
1000698c:	94800384 	addi	r18,r18,14
10006990:	80c0000f 	ldh	r3,0(r16)
10006994:	8c7fffc4 	addi	r17,r17,-1
10006998:	813ffd04 	addi	r4,r16,-12
1000699c:	18000426 	beq	r3,zero,100069b0 <_fwalk+0x74>
100069a0:	90c0000f 	ldh	r3,0(r18)
100069a4:	1cc00226 	beq	r3,r19,100069b0 <_fwalk+0x74>
100069a8:	a03ee83a 	callr	r20
100069ac:	b0acb03a 	or	r22,r22,r2
100069b0:	84001a04 	addi	r16,r16,104
100069b4:	94801a04 	addi	r18,r18,104
100069b8:	8cfff51e 	bne	r17,r19,10006990 <__alt_data_end+0xf8006990>
100069bc:	ad400017 	ldw	r21,0(r21)
100069c0:	a83fed1e 	bne	r21,zero,10006978 <__alt_data_end+0xf8006978>
100069c4:	00060480 	call	10006048 <__sfp_lock_release>
100069c8:	b005883a 	mov	r2,r22
100069cc:	dfc00717 	ldw	ra,28(sp)
100069d0:	dd800617 	ldw	r22,24(sp)
100069d4:	dd400517 	ldw	r21,20(sp)
100069d8:	dd000417 	ldw	r20,16(sp)
100069dc:	dcc00317 	ldw	r19,12(sp)
100069e0:	dc800217 	ldw	r18,8(sp)
100069e4:	dc400117 	ldw	r17,4(sp)
100069e8:	dc000017 	ldw	r16,0(sp)
100069ec:	dec00804 	addi	sp,sp,32
100069f0:	f800283a 	ret

100069f4 <_fwalk_reent>:
100069f4:	defff804 	addi	sp,sp,-32
100069f8:	dd400515 	stw	r21,20(sp)
100069fc:	2540b804 	addi	r21,r4,736
10006a00:	dd800615 	stw	r22,24(sp)
10006a04:	dd000415 	stw	r20,16(sp)
10006a08:	dcc00315 	stw	r19,12(sp)
10006a0c:	dfc00715 	stw	ra,28(sp)
10006a10:	dc800215 	stw	r18,8(sp)
10006a14:	dc400115 	stw	r17,4(sp)
10006a18:	dc000015 	stw	r16,0(sp)
10006a1c:	2027883a 	mov	r19,r4
10006a20:	2829883a 	mov	r20,r5
10006a24:	002d883a 	mov	r22,zero
10006a28:	00060440 	call	10006044 <__sfp_lock_acquire>
10006a2c:	a8001326 	beq	r21,zero,10006a7c <_fwalk_reent+0x88>
10006a30:	04bfffc4 	movi	r18,-1
10006a34:	ac400117 	ldw	r17,4(r21)
10006a38:	ac000217 	ldw	r16,8(r21)
10006a3c:	8c7fffc4 	addi	r17,r17,-1
10006a40:	88000c16 	blt	r17,zero,10006a74 <_fwalk_reent+0x80>
10006a44:	84000304 	addi	r16,r16,12
10006a48:	80c0000f 	ldh	r3,0(r16)
10006a4c:	8c7fffc4 	addi	r17,r17,-1
10006a50:	817ffd04 	addi	r5,r16,-12
10006a54:	18000526 	beq	r3,zero,10006a6c <_fwalk_reent+0x78>
10006a58:	80c0008f 	ldh	r3,2(r16)
10006a5c:	9809883a 	mov	r4,r19
10006a60:	1c800226 	beq	r3,r18,10006a6c <_fwalk_reent+0x78>
10006a64:	a03ee83a 	callr	r20
10006a68:	b0acb03a 	or	r22,r22,r2
10006a6c:	84001a04 	addi	r16,r16,104
10006a70:	8cbff51e 	bne	r17,r18,10006a48 <__alt_data_end+0xf8006a48>
10006a74:	ad400017 	ldw	r21,0(r21)
10006a78:	a83fee1e 	bne	r21,zero,10006a34 <__alt_data_end+0xf8006a34>
10006a7c:	00060480 	call	10006048 <__sfp_lock_release>
10006a80:	b005883a 	mov	r2,r22
10006a84:	dfc00717 	ldw	ra,28(sp)
10006a88:	dd800617 	ldw	r22,24(sp)
10006a8c:	dd400517 	ldw	r21,20(sp)
10006a90:	dd000417 	ldw	r20,16(sp)
10006a94:	dcc00317 	ldw	r19,12(sp)
10006a98:	dc800217 	ldw	r18,8(sp)
10006a9c:	dc400117 	ldw	r17,4(sp)
10006aa0:	dc000017 	ldw	r16,0(sp)
10006aa4:	dec00804 	addi	sp,sp,32
10006aa8:	f800283a 	ret

10006aac <_setlocale_r>:
10006aac:	30001b26 	beq	r6,zero,10006b1c <_setlocale_r+0x70>
10006ab0:	01440074 	movhi	r5,4097
10006ab4:	defffe04 	addi	sp,sp,-8
10006ab8:	29435704 	addi	r5,r5,3420
10006abc:	3009883a 	mov	r4,r6
10006ac0:	dc000015 	stw	r16,0(sp)
10006ac4:	dfc00115 	stw	ra,4(sp)
10006ac8:	3021883a 	mov	r16,r6
10006acc:	00088440 	call	10008844 <strcmp>
10006ad0:	1000061e 	bne	r2,zero,10006aec <_setlocale_r+0x40>
10006ad4:	00840074 	movhi	r2,4097
10006ad8:	10835604 	addi	r2,r2,3416
10006adc:	dfc00117 	ldw	ra,4(sp)
10006ae0:	dc000017 	ldw	r16,0(sp)
10006ae4:	dec00204 	addi	sp,sp,8
10006ae8:	f800283a 	ret
10006aec:	01440074 	movhi	r5,4097
10006af0:	29435604 	addi	r5,r5,3416
10006af4:	8009883a 	mov	r4,r16
10006af8:	00088440 	call	10008844 <strcmp>
10006afc:	103ff526 	beq	r2,zero,10006ad4 <__alt_data_end+0xf8006ad4>
10006b00:	01440074 	movhi	r5,4097
10006b04:	29434104 	addi	r5,r5,3332
10006b08:	8009883a 	mov	r4,r16
10006b0c:	00088440 	call	10008844 <strcmp>
10006b10:	103ff026 	beq	r2,zero,10006ad4 <__alt_data_end+0xf8006ad4>
10006b14:	0005883a 	mov	r2,zero
10006b18:	003ff006 	br	10006adc <__alt_data_end+0xf8006adc>
10006b1c:	00840074 	movhi	r2,4097
10006b20:	10835604 	addi	r2,r2,3416
10006b24:	f800283a 	ret

10006b28 <__locale_charset>:
10006b28:	00840074 	movhi	r2,4097
10006b2c:	10861a04 	addi	r2,r2,6248
10006b30:	f800283a 	ret

10006b34 <__locale_mb_cur_max>:
10006b34:	00840074 	movhi	r2,4097
10006b38:	108ab604 	addi	r2,r2,10968
10006b3c:	10800017 	ldw	r2,0(r2)
10006b40:	f800283a 	ret

10006b44 <__locale_msgcharset>:
10006b44:	00840074 	movhi	r2,4097
10006b48:	10861204 	addi	r2,r2,6216
10006b4c:	f800283a 	ret

10006b50 <__locale_cjk_lang>:
10006b50:	0005883a 	mov	r2,zero
10006b54:	f800283a 	ret

10006b58 <_localeconv_r>:
10006b58:	00840074 	movhi	r2,4097
10006b5c:	10862204 	addi	r2,r2,6280
10006b60:	f800283a 	ret

10006b64 <setlocale>:
10006b64:	00c40074 	movhi	r3,4097
10006b68:	18cab504 	addi	r3,r3,10964
10006b6c:	2005883a 	mov	r2,r4
10006b70:	19000017 	ldw	r4,0(r3)
10006b74:	280d883a 	mov	r6,r5
10006b78:	100b883a 	mov	r5,r2
10006b7c:	0006aac1 	jmpi	10006aac <_setlocale_r>

10006b80 <localeconv>:
10006b80:	00840074 	movhi	r2,4097
10006b84:	10862204 	addi	r2,r2,6280
10006b88:	f800283a 	ret

10006b8c <__smakebuf_r>:
10006b8c:	2880030b 	ldhu	r2,12(r5)
10006b90:	10c0008c 	andi	r3,r2,2
10006b94:	1800401e 	bne	r3,zero,10006c98 <__smakebuf_r+0x10c>
10006b98:	deffec04 	addi	sp,sp,-80
10006b9c:	dc000f15 	stw	r16,60(sp)
10006ba0:	2821883a 	mov	r16,r5
10006ba4:	2940038f 	ldh	r5,14(r5)
10006ba8:	dc401015 	stw	r17,64(sp)
10006bac:	dfc01315 	stw	ra,76(sp)
10006bb0:	dcc01215 	stw	r19,72(sp)
10006bb4:	dc801115 	stw	r18,68(sp)
10006bb8:	2023883a 	mov	r17,r4
10006bbc:	28001b16 	blt	r5,zero,10006c2c <__smakebuf_r+0xa0>
10006bc0:	d80d883a 	mov	r6,sp
10006bc4:	000a2bc0 	call	1000a2bc <_fstat_r>
10006bc8:	10001716 	blt	r2,zero,10006c28 <__smakebuf_r+0x9c>
10006bcc:	d8800117 	ldw	r2,4(sp)
10006bd0:	00e00014 	movui	r3,32768
10006bd4:	10bc000c 	andi	r2,r2,61440
10006bd8:	10c03726 	beq	r2,r3,10006cb8 <__smakebuf_r+0x12c>
10006bdc:	80c0030b 	ldhu	r3,12(r16)
10006be0:	18c20014 	ori	r3,r3,2048
10006be4:	80c0030d 	sth	r3,12(r16)
10006be8:	00c80004 	movi	r3,8192
10006bec:	10c03c1e 	bne	r2,r3,10006ce0 <__smakebuf_r+0x154>
10006bf0:	8140038f 	ldh	r5,14(r16)
10006bf4:	8809883a 	mov	r4,r17
10006bf8:	000a3140 	call	1000a314 <_isatty_r>
10006bfc:	10004e26 	beq	r2,zero,10006d38 <__smakebuf_r+0x1ac>
10006c00:	8080030b 	ldhu	r2,12(r16)
10006c04:	04c00044 	movi	r19,1
10006c08:	80c010c4 	addi	r3,r16,67
10006c0c:	14c4b03a 	or	r2,r2,r19
10006c10:	8080030d 	sth	r2,12(r16)
10006c14:	80c00015 	stw	r3,0(r16)
10006c18:	80c00415 	stw	r3,16(r16)
10006c1c:	84c00515 	stw	r19,20(r16)
10006c20:	04810004 	movi	r18,1024
10006c24:	00000706 	br	10006c44 <__smakebuf_r+0xb8>
10006c28:	8080030b 	ldhu	r2,12(r16)
10006c2c:	10c0200c 	andi	r3,r2,128
10006c30:	18001f1e 	bne	r3,zero,10006cb0 <__smakebuf_r+0x124>
10006c34:	04810004 	movi	r18,1024
10006c38:	10820014 	ori	r2,r2,2048
10006c3c:	8080030d 	sth	r2,12(r16)
10006c40:	0027883a 	mov	r19,zero
10006c44:	8809883a 	mov	r4,r17
10006c48:	900b883a 	mov	r5,r18
10006c4c:	00013d80 	call	100013d8 <_malloc_r>
10006c50:	10002e26 	beq	r2,zero,10006d0c <__smakebuf_r+0x180>
10006c54:	80c0030b 	ldhu	r3,12(r16)
10006c58:	01040034 	movhi	r4,4096
10006c5c:	21173804 	addi	r4,r4,23776
10006c60:	89000f15 	stw	r4,60(r17)
10006c64:	18c02014 	ori	r3,r3,128
10006c68:	80c0030d 	sth	r3,12(r16)
10006c6c:	80800015 	stw	r2,0(r16)
10006c70:	80800415 	stw	r2,16(r16)
10006c74:	84800515 	stw	r18,20(r16)
10006c78:	98001c1e 	bne	r19,zero,10006cec <__smakebuf_r+0x160>
10006c7c:	dfc01317 	ldw	ra,76(sp)
10006c80:	dcc01217 	ldw	r19,72(sp)
10006c84:	dc801117 	ldw	r18,68(sp)
10006c88:	dc401017 	ldw	r17,64(sp)
10006c8c:	dc000f17 	ldw	r16,60(sp)
10006c90:	dec01404 	addi	sp,sp,80
10006c94:	f800283a 	ret
10006c98:	288010c4 	addi	r2,r5,67
10006c9c:	28800015 	stw	r2,0(r5)
10006ca0:	28800415 	stw	r2,16(r5)
10006ca4:	00800044 	movi	r2,1
10006ca8:	28800515 	stw	r2,20(r5)
10006cac:	f800283a 	ret
10006cb0:	04801004 	movi	r18,64
10006cb4:	003fe006 	br	10006c38 <__alt_data_end+0xf8006c38>
10006cb8:	81000a17 	ldw	r4,40(r16)
10006cbc:	00c40074 	movhi	r3,4097
10006cc0:	18e1f804 	addi	r3,r3,-30752
10006cc4:	20ffc51e 	bne	r4,r3,10006bdc <__alt_data_end+0xf8006bdc>
10006cc8:	80c0030b 	ldhu	r3,12(r16)
10006ccc:	01010004 	movi	r4,1024
10006cd0:	81001315 	stw	r4,76(r16)
10006cd4:	1906b03a 	or	r3,r3,r4
10006cd8:	80c0030d 	sth	r3,12(r16)
10006cdc:	003fc206 	br	10006be8 <__alt_data_end+0xf8006be8>
10006ce0:	0027883a 	mov	r19,zero
10006ce4:	04810004 	movi	r18,1024
10006ce8:	003fd606 	br	10006c44 <__alt_data_end+0xf8006c44>
10006cec:	8140038f 	ldh	r5,14(r16)
10006cf0:	8809883a 	mov	r4,r17
10006cf4:	000a3140 	call	1000a314 <_isatty_r>
10006cf8:	103fe026 	beq	r2,zero,10006c7c <__alt_data_end+0xf8006c7c>
10006cfc:	8080030b 	ldhu	r2,12(r16)
10006d00:	10800054 	ori	r2,r2,1
10006d04:	8080030d 	sth	r2,12(r16)
10006d08:	003fdc06 	br	10006c7c <__alt_data_end+0xf8006c7c>
10006d0c:	8080030b 	ldhu	r2,12(r16)
10006d10:	10c0800c 	andi	r3,r2,512
10006d14:	183fd91e 	bne	r3,zero,10006c7c <__alt_data_end+0xf8006c7c>
10006d18:	10800094 	ori	r2,r2,2
10006d1c:	80c010c4 	addi	r3,r16,67
10006d20:	8080030d 	sth	r2,12(r16)
10006d24:	00800044 	movi	r2,1
10006d28:	80c00015 	stw	r3,0(r16)
10006d2c:	80c00415 	stw	r3,16(r16)
10006d30:	80800515 	stw	r2,20(r16)
10006d34:	003fd106 	br	10006c7c <__alt_data_end+0xf8006c7c>
10006d38:	04c00044 	movi	r19,1
10006d3c:	04810004 	movi	r18,1024
10006d40:	003fc006 	br	10006c44 <__alt_data_end+0xf8006c44>

10006d44 <memchr>:
10006d44:	208000cc 	andi	r2,r4,3
10006d48:	280f883a 	mov	r7,r5
10006d4c:	10003526 	beq	r2,zero,10006e24 <memchr+0xe0>
10006d50:	30bfffc4 	addi	r2,r6,-1
10006d54:	30001b26 	beq	r6,zero,10006dc4 <memchr+0x80>
10006d58:	21800003 	ldbu	r6,0(r4)
10006d5c:	28c03fcc 	andi	r3,r5,255
10006d60:	30c01a26 	beq	r6,r3,10006dcc <memchr+0x88>
10006d64:	180d883a 	mov	r6,r3
10006d68:	00000406 	br	10006d7c <memchr+0x38>
10006d6c:	10001526 	beq	r2,zero,10006dc4 <memchr+0x80>
10006d70:	20c00003 	ldbu	r3,0(r4)
10006d74:	10bfffc4 	addi	r2,r2,-1
10006d78:	19801426 	beq	r3,r6,10006dcc <memchr+0x88>
10006d7c:	21000044 	addi	r4,r4,1
10006d80:	20c000cc 	andi	r3,r4,3
10006d84:	183ff91e 	bne	r3,zero,10006d6c <__alt_data_end+0xf8006d6c>
10006d88:	024000c4 	movi	r9,3
10006d8c:	48801136 	bltu	r9,r2,10006dd4 <memchr+0x90>
10006d90:	10000c26 	beq	r2,zero,10006dc4 <memchr+0x80>
10006d94:	20c00003 	ldbu	r3,0(r4)
10006d98:	29403fcc 	andi	r5,r5,255
10006d9c:	19400b26 	beq	r3,r5,10006dcc <memchr+0x88>
10006da0:	20c00044 	addi	r3,r4,1
10006da4:	2085883a 	add	r2,r4,r2
10006da8:	39803fcc 	andi	r6,r7,255
10006dac:	00000306 	br	10006dbc <memchr+0x78>
10006db0:	18c00044 	addi	r3,r3,1
10006db4:	197fffc3 	ldbu	r5,-1(r3)
10006db8:	29800426 	beq	r5,r6,10006dcc <memchr+0x88>
10006dbc:	1809883a 	mov	r4,r3
10006dc0:	18bffb1e 	bne	r3,r2,10006db0 <__alt_data_end+0xf8006db0>
10006dc4:	0005883a 	mov	r2,zero
10006dc8:	f800283a 	ret
10006dcc:	2005883a 	mov	r2,r4
10006dd0:	f800283a 	ret
10006dd4:	28c03fcc 	andi	r3,r5,255
10006dd8:	1810923a 	slli	r8,r3,8
10006ddc:	02ffbff4 	movhi	r11,65279
10006de0:	02a02074 	movhi	r10,32897
10006de4:	40c6b03a 	or	r3,r8,r3
10006de8:	1810943a 	slli	r8,r3,16
10006dec:	5affbfc4 	addi	r11,r11,-257
10006df0:	52a02004 	addi	r10,r10,-32640
10006df4:	40d0b03a 	or	r8,r8,r3
10006df8:	20c00017 	ldw	r3,0(r4)
10006dfc:	40c6f03a 	xor	r3,r8,r3
10006e00:	1acd883a 	add	r6,r3,r11
10006e04:	00c6303a 	nor	r3,zero,r3
10006e08:	30c6703a 	and	r3,r6,r3
10006e0c:	1a86703a 	and	r3,r3,r10
10006e10:	183fdf1e 	bne	r3,zero,10006d90 <__alt_data_end+0xf8006d90>
10006e14:	10bfff04 	addi	r2,r2,-4
10006e18:	21000104 	addi	r4,r4,4
10006e1c:	48bff636 	bltu	r9,r2,10006df8 <__alt_data_end+0xf8006df8>
10006e20:	003fdb06 	br	10006d90 <__alt_data_end+0xf8006d90>
10006e24:	3005883a 	mov	r2,r6
10006e28:	003fd706 	br	10006d88 <__alt_data_end+0xf8006d88>

10006e2c <memmove>:
10006e2c:	2005883a 	mov	r2,r4
10006e30:	29000b2e 	bgeu	r5,r4,10006e60 <memmove+0x34>
10006e34:	298f883a 	add	r7,r5,r6
10006e38:	21c0092e 	bgeu	r4,r7,10006e60 <memmove+0x34>
10006e3c:	2187883a 	add	r3,r4,r6
10006e40:	198bc83a 	sub	r5,r3,r6
10006e44:	30004b26 	beq	r6,zero,10006f74 <memmove+0x148>
10006e48:	39ffffc4 	addi	r7,r7,-1
10006e4c:	39000003 	ldbu	r4,0(r7)
10006e50:	18ffffc4 	addi	r3,r3,-1
10006e54:	19000005 	stb	r4,0(r3)
10006e58:	197ffb1e 	bne	r3,r5,10006e48 <__alt_data_end+0xf8006e48>
10006e5c:	f800283a 	ret
10006e60:	00c003c4 	movi	r3,15
10006e64:	1980412e 	bgeu	r3,r6,10006f6c <memmove+0x140>
10006e68:	1146b03a 	or	r3,r2,r5
10006e6c:	18c000cc 	andi	r3,r3,3
10006e70:	1800411e 	bne	r3,zero,10006f78 <memmove+0x14c>
10006e74:	33fffc04 	addi	r15,r6,-16
10006e78:	781ed13a 	srli	r15,r15,4
10006e7c:	28c00104 	addi	r3,r5,4
10006e80:	13400104 	addi	r13,r2,4
10006e84:	781c913a 	slli	r14,r15,4
10006e88:	2b000204 	addi	r12,r5,8
10006e8c:	12c00204 	addi	r11,r2,8
10006e90:	73800504 	addi	r14,r14,20
10006e94:	2a800304 	addi	r10,r5,12
10006e98:	12400304 	addi	r9,r2,12
10006e9c:	2b9d883a 	add	r14,r5,r14
10006ea0:	2811883a 	mov	r8,r5
10006ea4:	100f883a 	mov	r7,r2
10006ea8:	41000017 	ldw	r4,0(r8)
10006eac:	39c00404 	addi	r7,r7,16
10006eb0:	18c00404 	addi	r3,r3,16
10006eb4:	393ffc15 	stw	r4,-16(r7)
10006eb8:	193ffc17 	ldw	r4,-16(r3)
10006ebc:	6b400404 	addi	r13,r13,16
10006ec0:	5ac00404 	addi	r11,r11,16
10006ec4:	693ffc15 	stw	r4,-16(r13)
10006ec8:	61000017 	ldw	r4,0(r12)
10006ecc:	4a400404 	addi	r9,r9,16
10006ed0:	42000404 	addi	r8,r8,16
10006ed4:	593ffc15 	stw	r4,-16(r11)
10006ed8:	51000017 	ldw	r4,0(r10)
10006edc:	63000404 	addi	r12,r12,16
10006ee0:	52800404 	addi	r10,r10,16
10006ee4:	493ffc15 	stw	r4,-16(r9)
10006ee8:	1bbfef1e 	bne	r3,r14,10006ea8 <__alt_data_end+0xf8006ea8>
10006eec:	79000044 	addi	r4,r15,1
10006ef0:	2008913a 	slli	r4,r4,4
10006ef4:	328003cc 	andi	r10,r6,15
10006ef8:	02c000c4 	movi	r11,3
10006efc:	1107883a 	add	r3,r2,r4
10006f00:	290b883a 	add	r5,r5,r4
10006f04:	5a801e2e 	bgeu	r11,r10,10006f80 <memmove+0x154>
10006f08:	1813883a 	mov	r9,r3
10006f0c:	2811883a 	mov	r8,r5
10006f10:	500f883a 	mov	r7,r10
10006f14:	41000017 	ldw	r4,0(r8)
10006f18:	4a400104 	addi	r9,r9,4
10006f1c:	39ffff04 	addi	r7,r7,-4
10006f20:	493fff15 	stw	r4,-4(r9)
10006f24:	42000104 	addi	r8,r8,4
10006f28:	59fffa36 	bltu	r11,r7,10006f14 <__alt_data_end+0xf8006f14>
10006f2c:	513fff04 	addi	r4,r10,-4
10006f30:	2008d0ba 	srli	r4,r4,2
10006f34:	318000cc 	andi	r6,r6,3
10006f38:	21000044 	addi	r4,r4,1
10006f3c:	2109883a 	add	r4,r4,r4
10006f40:	2109883a 	add	r4,r4,r4
10006f44:	1907883a 	add	r3,r3,r4
10006f48:	290b883a 	add	r5,r5,r4
10006f4c:	30000926 	beq	r6,zero,10006f74 <memmove+0x148>
10006f50:	198d883a 	add	r6,r3,r6
10006f54:	29c00003 	ldbu	r7,0(r5)
10006f58:	18c00044 	addi	r3,r3,1
10006f5c:	29400044 	addi	r5,r5,1
10006f60:	19ffffc5 	stb	r7,-1(r3)
10006f64:	19bffb1e 	bne	r3,r6,10006f54 <__alt_data_end+0xf8006f54>
10006f68:	f800283a 	ret
10006f6c:	1007883a 	mov	r3,r2
10006f70:	003ff606 	br	10006f4c <__alt_data_end+0xf8006f4c>
10006f74:	f800283a 	ret
10006f78:	1007883a 	mov	r3,r2
10006f7c:	003ff406 	br	10006f50 <__alt_data_end+0xf8006f50>
10006f80:	500d883a 	mov	r6,r10
10006f84:	003ff106 	br	10006f4c <__alt_data_end+0xf8006f4c>

10006f88 <memset>:
10006f88:	20c000cc 	andi	r3,r4,3
10006f8c:	2005883a 	mov	r2,r4
10006f90:	18004326 	beq	r3,zero,100070a0 <memset+0x118>
10006f94:	31ffffc4 	addi	r7,r6,-1
10006f98:	30004026 	beq	r6,zero,1000709c <memset+0x114>
10006f9c:	2813883a 	mov	r9,r5
10006fa0:	200d883a 	mov	r6,r4
10006fa4:	2007883a 	mov	r3,r4
10006fa8:	00000406 	br	10006fbc <memset+0x34>
10006fac:	3a3fffc4 	addi	r8,r7,-1
10006fb0:	31800044 	addi	r6,r6,1
10006fb4:	38003926 	beq	r7,zero,1000709c <memset+0x114>
10006fb8:	400f883a 	mov	r7,r8
10006fbc:	18c00044 	addi	r3,r3,1
10006fc0:	32400005 	stb	r9,0(r6)
10006fc4:	1a0000cc 	andi	r8,r3,3
10006fc8:	403ff81e 	bne	r8,zero,10006fac <__alt_data_end+0xf8006fac>
10006fcc:	010000c4 	movi	r4,3
10006fd0:	21c02d2e 	bgeu	r4,r7,10007088 <memset+0x100>
10006fd4:	29803fcc 	andi	r6,r5,255
10006fd8:	3008923a 	slli	r4,r6,8
10006fdc:	218cb03a 	or	r6,r4,r6
10006fe0:	3008943a 	slli	r4,r6,16
10006fe4:	218cb03a 	or	r6,r4,r6
10006fe8:	010003c4 	movi	r4,15
10006fec:	21c0182e 	bgeu	r4,r7,10007050 <memset+0xc8>
10006ff0:	3b3ffc04 	addi	r12,r7,-16
10006ff4:	6018d13a 	srli	r12,r12,4
10006ff8:	1a000104 	addi	r8,r3,4
10006ffc:	1ac00204 	addi	r11,r3,8
10007000:	6008913a 	slli	r4,r12,4
10007004:	1a800304 	addi	r10,r3,12
10007008:	1813883a 	mov	r9,r3
1000700c:	21000504 	addi	r4,r4,20
10007010:	1909883a 	add	r4,r3,r4
10007014:	49800015 	stw	r6,0(r9)
10007018:	41800015 	stw	r6,0(r8)
1000701c:	59800015 	stw	r6,0(r11)
10007020:	51800015 	stw	r6,0(r10)
10007024:	42000404 	addi	r8,r8,16
10007028:	4a400404 	addi	r9,r9,16
1000702c:	5ac00404 	addi	r11,r11,16
10007030:	52800404 	addi	r10,r10,16
10007034:	413ff71e 	bne	r8,r4,10007014 <__alt_data_end+0xf8007014>
10007038:	63000044 	addi	r12,r12,1
1000703c:	6018913a 	slli	r12,r12,4
10007040:	39c003cc 	andi	r7,r7,15
10007044:	010000c4 	movi	r4,3
10007048:	1b07883a 	add	r3,r3,r12
1000704c:	21c00e2e 	bgeu	r4,r7,10007088 <memset+0x100>
10007050:	1813883a 	mov	r9,r3
10007054:	3811883a 	mov	r8,r7
10007058:	010000c4 	movi	r4,3
1000705c:	49800015 	stw	r6,0(r9)
10007060:	423fff04 	addi	r8,r8,-4
10007064:	4a400104 	addi	r9,r9,4
10007068:	223ffc36 	bltu	r4,r8,1000705c <__alt_data_end+0xf800705c>
1000706c:	393fff04 	addi	r4,r7,-4
10007070:	2008d0ba 	srli	r4,r4,2
10007074:	39c000cc 	andi	r7,r7,3
10007078:	21000044 	addi	r4,r4,1
1000707c:	2109883a 	add	r4,r4,r4
10007080:	2109883a 	add	r4,r4,r4
10007084:	1907883a 	add	r3,r3,r4
10007088:	38000426 	beq	r7,zero,1000709c <memset+0x114>
1000708c:	19cf883a 	add	r7,r3,r7
10007090:	19400005 	stb	r5,0(r3)
10007094:	18c00044 	addi	r3,r3,1
10007098:	19fffd1e 	bne	r3,r7,10007090 <__alt_data_end+0xf8007090>
1000709c:	f800283a 	ret
100070a0:	2007883a 	mov	r3,r4
100070a4:	300f883a 	mov	r7,r6
100070a8:	003fc806 	br	10006fcc <__alt_data_end+0xf8006fcc>

100070ac <_Balloc>:
100070ac:	20801317 	ldw	r2,76(r4)
100070b0:	defffc04 	addi	sp,sp,-16
100070b4:	dc400115 	stw	r17,4(sp)
100070b8:	dc000015 	stw	r16,0(sp)
100070bc:	dfc00315 	stw	ra,12(sp)
100070c0:	dc800215 	stw	r18,8(sp)
100070c4:	2023883a 	mov	r17,r4
100070c8:	2821883a 	mov	r16,r5
100070cc:	10000f26 	beq	r2,zero,1000710c <_Balloc+0x60>
100070d0:	8407883a 	add	r3,r16,r16
100070d4:	18c7883a 	add	r3,r3,r3
100070d8:	10c7883a 	add	r3,r2,r3
100070dc:	18800017 	ldw	r2,0(r3)
100070e0:	10001126 	beq	r2,zero,10007128 <_Balloc+0x7c>
100070e4:	11000017 	ldw	r4,0(r2)
100070e8:	19000015 	stw	r4,0(r3)
100070ec:	10000415 	stw	zero,16(r2)
100070f0:	10000315 	stw	zero,12(r2)
100070f4:	dfc00317 	ldw	ra,12(sp)
100070f8:	dc800217 	ldw	r18,8(sp)
100070fc:	dc400117 	ldw	r17,4(sp)
10007100:	dc000017 	ldw	r16,0(sp)
10007104:	dec00404 	addi	sp,sp,16
10007108:	f800283a 	ret
1000710c:	01400104 	movi	r5,4
10007110:	01800844 	movi	r6,33
10007114:	0009ef40 	call	10009ef4 <_calloc_r>
10007118:	88801315 	stw	r2,76(r17)
1000711c:	103fec1e 	bne	r2,zero,100070d0 <__alt_data_end+0xf80070d0>
10007120:	0005883a 	mov	r2,zero
10007124:	003ff306 	br	100070f4 <__alt_data_end+0xf80070f4>
10007128:	01400044 	movi	r5,1
1000712c:	2c24983a 	sll	r18,r5,r16
10007130:	8809883a 	mov	r4,r17
10007134:	91800144 	addi	r6,r18,5
10007138:	318d883a 	add	r6,r6,r6
1000713c:	318d883a 	add	r6,r6,r6
10007140:	0009ef40 	call	10009ef4 <_calloc_r>
10007144:	103ff626 	beq	r2,zero,10007120 <__alt_data_end+0xf8007120>
10007148:	14000115 	stw	r16,4(r2)
1000714c:	14800215 	stw	r18,8(r2)
10007150:	003fe606 	br	100070ec <__alt_data_end+0xf80070ec>

10007154 <_Bfree>:
10007154:	28000826 	beq	r5,zero,10007178 <_Bfree+0x24>
10007158:	28c00117 	ldw	r3,4(r5)
1000715c:	20801317 	ldw	r2,76(r4)
10007160:	18c7883a 	add	r3,r3,r3
10007164:	18c7883a 	add	r3,r3,r3
10007168:	10c5883a 	add	r2,r2,r3
1000716c:	10c00017 	ldw	r3,0(r2)
10007170:	28c00015 	stw	r3,0(r5)
10007174:	11400015 	stw	r5,0(r2)
10007178:	f800283a 	ret

1000717c <__multadd>:
1000717c:	defff704 	addi	sp,sp,-36
10007180:	dc800215 	stw	r18,8(sp)
10007184:	2c800417 	ldw	r18,16(r5)
10007188:	ddc00715 	stw	r23,28(sp)
1000718c:	dd800615 	stw	r22,24(sp)
10007190:	dd000415 	stw	r20,16(sp)
10007194:	dcc00315 	stw	r19,12(sp)
10007198:	dc400115 	stw	r17,4(sp)
1000719c:	dc000015 	stw	r16,0(sp)
100071a0:	dfc00815 	stw	ra,32(sp)
100071a4:	dd400515 	stw	r21,20(sp)
100071a8:	2827883a 	mov	r19,r5
100071ac:	2029883a 	mov	r20,r4
100071b0:	3023883a 	mov	r17,r6
100071b4:	3821883a 	mov	r16,r7
100071b8:	2d800504 	addi	r22,r5,20
100071bc:	002f883a 	mov	r23,zero
100071c0:	b5400017 	ldw	r21,0(r22)
100071c4:	880b883a 	mov	r5,r17
100071c8:	bdc00044 	addi	r23,r23,1
100071cc:	a93fffcc 	andi	r4,r21,65535
100071d0:	00013880 	call	10001388 <__mulsi3>
100071d4:	1421883a 	add	r16,r2,r16
100071d8:	a808d43a 	srli	r4,r21,16
100071dc:	802ad43a 	srli	r21,r16,16
100071e0:	880b883a 	mov	r5,r17
100071e4:	00013880 	call	10001388 <__mulsi3>
100071e8:	a88f883a 	add	r7,r21,r2
100071ec:	3804943a 	slli	r2,r7,16
100071f0:	80ffffcc 	andi	r3,r16,65535
100071f4:	b5800104 	addi	r22,r22,4
100071f8:	10c7883a 	add	r3,r2,r3
100071fc:	b0ffff15 	stw	r3,-4(r22)
10007200:	3820d43a 	srli	r16,r7,16
10007204:	bcbfee16 	blt	r23,r18,100071c0 <__alt_data_end+0xf80071c0>
10007208:	80000926 	beq	r16,zero,10007230 <__multadd+0xb4>
1000720c:	98800217 	ldw	r2,8(r19)
10007210:	9080130e 	bge	r18,r2,10007260 <__multadd+0xe4>
10007214:	90800144 	addi	r2,r18,5
10007218:	1085883a 	add	r2,r2,r2
1000721c:	1085883a 	add	r2,r2,r2
10007220:	9885883a 	add	r2,r19,r2
10007224:	14000015 	stw	r16,0(r2)
10007228:	94800044 	addi	r18,r18,1
1000722c:	9c800415 	stw	r18,16(r19)
10007230:	9805883a 	mov	r2,r19
10007234:	dfc00817 	ldw	ra,32(sp)
10007238:	ddc00717 	ldw	r23,28(sp)
1000723c:	dd800617 	ldw	r22,24(sp)
10007240:	dd400517 	ldw	r21,20(sp)
10007244:	dd000417 	ldw	r20,16(sp)
10007248:	dcc00317 	ldw	r19,12(sp)
1000724c:	dc800217 	ldw	r18,8(sp)
10007250:	dc400117 	ldw	r17,4(sp)
10007254:	dc000017 	ldw	r16,0(sp)
10007258:	dec00904 	addi	sp,sp,36
1000725c:	f800283a 	ret
10007260:	99400117 	ldw	r5,4(r19)
10007264:	a009883a 	mov	r4,r20
10007268:	29400044 	addi	r5,r5,1
1000726c:	00070ac0 	call	100070ac <_Balloc>
10007270:	99800417 	ldw	r6,16(r19)
10007274:	99400304 	addi	r5,r19,12
10007278:	11000304 	addi	r4,r2,12
1000727c:	31800084 	addi	r6,r6,2
10007280:	318d883a 	add	r6,r6,r6
10007284:	318d883a 	add	r6,r6,r6
10007288:	1023883a 	mov	r17,r2
1000728c:	0001b800 	call	10001b80 <memcpy>
10007290:	99000117 	ldw	r4,4(r19)
10007294:	a0c01317 	ldw	r3,76(r20)
10007298:	2109883a 	add	r4,r4,r4
1000729c:	2109883a 	add	r4,r4,r4
100072a0:	1907883a 	add	r3,r3,r4
100072a4:	18800017 	ldw	r2,0(r3)
100072a8:	98800015 	stw	r2,0(r19)
100072ac:	1cc00015 	stw	r19,0(r3)
100072b0:	8827883a 	mov	r19,r17
100072b4:	003fd706 	br	10007214 <__alt_data_end+0xf8007214>

100072b8 <__s2b>:
100072b8:	defff904 	addi	sp,sp,-28
100072bc:	dc400115 	stw	r17,4(sp)
100072c0:	dc000015 	stw	r16,0(sp)
100072c4:	2023883a 	mov	r17,r4
100072c8:	2821883a 	mov	r16,r5
100072cc:	39000204 	addi	r4,r7,8
100072d0:	01400244 	movi	r5,9
100072d4:	dcc00315 	stw	r19,12(sp)
100072d8:	dc800215 	stw	r18,8(sp)
100072dc:	dfc00615 	stw	ra,24(sp)
100072e0:	dd400515 	stw	r21,20(sp)
100072e4:	dd000415 	stw	r20,16(sp)
100072e8:	3825883a 	mov	r18,r7
100072ec:	3027883a 	mov	r19,r6
100072f0:	000b4580 	call	1000b458 <__divsi3>
100072f4:	00c00044 	movi	r3,1
100072f8:	000b883a 	mov	r5,zero
100072fc:	1880030e 	bge	r3,r2,1000730c <__s2b+0x54>
10007300:	18c7883a 	add	r3,r3,r3
10007304:	29400044 	addi	r5,r5,1
10007308:	18bffd16 	blt	r3,r2,10007300 <__alt_data_end+0xf8007300>
1000730c:	8809883a 	mov	r4,r17
10007310:	00070ac0 	call	100070ac <_Balloc>
10007314:	d8c00717 	ldw	r3,28(sp)
10007318:	10c00515 	stw	r3,20(r2)
1000731c:	00c00044 	movi	r3,1
10007320:	10c00415 	stw	r3,16(r2)
10007324:	00c00244 	movi	r3,9
10007328:	1cc0210e 	bge	r3,r19,100073b0 <__s2b+0xf8>
1000732c:	80eb883a 	add	r21,r16,r3
10007330:	a829883a 	mov	r20,r21
10007334:	84e1883a 	add	r16,r16,r19
10007338:	a1c00007 	ldb	r7,0(r20)
1000733c:	8809883a 	mov	r4,r17
10007340:	a5000044 	addi	r20,r20,1
10007344:	100b883a 	mov	r5,r2
10007348:	01800284 	movi	r6,10
1000734c:	39fff404 	addi	r7,r7,-48
10007350:	000717c0 	call	1000717c <__multadd>
10007354:	a43ff81e 	bne	r20,r16,10007338 <__alt_data_end+0xf8007338>
10007358:	ace1883a 	add	r16,r21,r19
1000735c:	843ffe04 	addi	r16,r16,-8
10007360:	9c800a0e 	bge	r19,r18,1000738c <__s2b+0xd4>
10007364:	94e5c83a 	sub	r18,r18,r19
10007368:	84a5883a 	add	r18,r16,r18
1000736c:	81c00007 	ldb	r7,0(r16)
10007370:	8809883a 	mov	r4,r17
10007374:	84000044 	addi	r16,r16,1
10007378:	100b883a 	mov	r5,r2
1000737c:	01800284 	movi	r6,10
10007380:	39fff404 	addi	r7,r7,-48
10007384:	000717c0 	call	1000717c <__multadd>
10007388:	84bff81e 	bne	r16,r18,1000736c <__alt_data_end+0xf800736c>
1000738c:	dfc00617 	ldw	ra,24(sp)
10007390:	dd400517 	ldw	r21,20(sp)
10007394:	dd000417 	ldw	r20,16(sp)
10007398:	dcc00317 	ldw	r19,12(sp)
1000739c:	dc800217 	ldw	r18,8(sp)
100073a0:	dc400117 	ldw	r17,4(sp)
100073a4:	dc000017 	ldw	r16,0(sp)
100073a8:	dec00704 	addi	sp,sp,28
100073ac:	f800283a 	ret
100073b0:	84000284 	addi	r16,r16,10
100073b4:	1827883a 	mov	r19,r3
100073b8:	003fe906 	br	10007360 <__alt_data_end+0xf8007360>

100073bc <__hi0bits>:
100073bc:	20bfffec 	andhi	r2,r4,65535
100073c0:	1000141e 	bne	r2,zero,10007414 <__hi0bits+0x58>
100073c4:	2008943a 	slli	r4,r4,16
100073c8:	00800404 	movi	r2,16
100073cc:	20ffc02c 	andhi	r3,r4,65280
100073d0:	1800021e 	bne	r3,zero,100073dc <__hi0bits+0x20>
100073d4:	2008923a 	slli	r4,r4,8
100073d8:	10800204 	addi	r2,r2,8
100073dc:	20fc002c 	andhi	r3,r4,61440
100073e0:	1800021e 	bne	r3,zero,100073ec <__hi0bits+0x30>
100073e4:	2008913a 	slli	r4,r4,4
100073e8:	10800104 	addi	r2,r2,4
100073ec:	20f0002c 	andhi	r3,r4,49152
100073f0:	1800031e 	bne	r3,zero,10007400 <__hi0bits+0x44>
100073f4:	2109883a 	add	r4,r4,r4
100073f8:	10800084 	addi	r2,r2,2
100073fc:	2109883a 	add	r4,r4,r4
10007400:	20000316 	blt	r4,zero,10007410 <__hi0bits+0x54>
10007404:	2110002c 	andhi	r4,r4,16384
10007408:	2000041e 	bne	r4,zero,1000741c <__hi0bits+0x60>
1000740c:	00800804 	movi	r2,32
10007410:	f800283a 	ret
10007414:	0005883a 	mov	r2,zero
10007418:	003fec06 	br	100073cc <__alt_data_end+0xf80073cc>
1000741c:	10800044 	addi	r2,r2,1
10007420:	f800283a 	ret

10007424 <__lo0bits>:
10007424:	20c00017 	ldw	r3,0(r4)
10007428:	188001cc 	andi	r2,r3,7
1000742c:	10000826 	beq	r2,zero,10007450 <__lo0bits+0x2c>
10007430:	1880004c 	andi	r2,r3,1
10007434:	1000211e 	bne	r2,zero,100074bc <__lo0bits+0x98>
10007438:	1880008c 	andi	r2,r3,2
1000743c:	1000211e 	bne	r2,zero,100074c4 <__lo0bits+0xa0>
10007440:	1806d0ba 	srli	r3,r3,2
10007444:	00800084 	movi	r2,2
10007448:	20c00015 	stw	r3,0(r4)
1000744c:	f800283a 	ret
10007450:	18bfffcc 	andi	r2,r3,65535
10007454:	10001326 	beq	r2,zero,100074a4 <__lo0bits+0x80>
10007458:	0005883a 	mov	r2,zero
1000745c:	19403fcc 	andi	r5,r3,255
10007460:	2800021e 	bne	r5,zero,1000746c <__lo0bits+0x48>
10007464:	1806d23a 	srli	r3,r3,8
10007468:	10800204 	addi	r2,r2,8
1000746c:	194003cc 	andi	r5,r3,15
10007470:	2800021e 	bne	r5,zero,1000747c <__lo0bits+0x58>
10007474:	1806d13a 	srli	r3,r3,4
10007478:	10800104 	addi	r2,r2,4
1000747c:	194000cc 	andi	r5,r3,3
10007480:	2800021e 	bne	r5,zero,1000748c <__lo0bits+0x68>
10007484:	1806d0ba 	srli	r3,r3,2
10007488:	10800084 	addi	r2,r2,2
1000748c:	1940004c 	andi	r5,r3,1
10007490:	2800081e 	bne	r5,zero,100074b4 <__lo0bits+0x90>
10007494:	1806d07a 	srli	r3,r3,1
10007498:	1800051e 	bne	r3,zero,100074b0 <__lo0bits+0x8c>
1000749c:	00800804 	movi	r2,32
100074a0:	f800283a 	ret
100074a4:	1806d43a 	srli	r3,r3,16
100074a8:	00800404 	movi	r2,16
100074ac:	003feb06 	br	1000745c <__alt_data_end+0xf800745c>
100074b0:	10800044 	addi	r2,r2,1
100074b4:	20c00015 	stw	r3,0(r4)
100074b8:	f800283a 	ret
100074bc:	0005883a 	mov	r2,zero
100074c0:	f800283a 	ret
100074c4:	1806d07a 	srli	r3,r3,1
100074c8:	00800044 	movi	r2,1
100074cc:	20c00015 	stw	r3,0(r4)
100074d0:	f800283a 	ret

100074d4 <__i2b>:
100074d4:	defffd04 	addi	sp,sp,-12
100074d8:	dc000015 	stw	r16,0(sp)
100074dc:	04000044 	movi	r16,1
100074e0:	dc400115 	stw	r17,4(sp)
100074e4:	2823883a 	mov	r17,r5
100074e8:	800b883a 	mov	r5,r16
100074ec:	dfc00215 	stw	ra,8(sp)
100074f0:	00070ac0 	call	100070ac <_Balloc>
100074f4:	14400515 	stw	r17,20(r2)
100074f8:	14000415 	stw	r16,16(r2)
100074fc:	dfc00217 	ldw	ra,8(sp)
10007500:	dc400117 	ldw	r17,4(sp)
10007504:	dc000017 	ldw	r16,0(sp)
10007508:	dec00304 	addi	sp,sp,12
1000750c:	f800283a 	ret

10007510 <__multiply>:
10007510:	deffef04 	addi	sp,sp,-68
10007514:	dc400815 	stw	r17,32(sp)
10007518:	dc000715 	stw	r16,28(sp)
1000751c:	2c400417 	ldw	r17,16(r5)
10007520:	34000417 	ldw	r16,16(r6)
10007524:	dd800d15 	stw	r22,52(sp)
10007528:	dc800915 	stw	r18,36(sp)
1000752c:	dfc01015 	stw	ra,64(sp)
10007530:	df000f15 	stw	fp,60(sp)
10007534:	ddc00e15 	stw	r23,56(sp)
10007538:	dd400c15 	stw	r21,48(sp)
1000753c:	dd000b15 	stw	r20,44(sp)
10007540:	dcc00a15 	stw	r19,40(sp)
10007544:	2825883a 	mov	r18,r5
10007548:	302d883a 	mov	r22,r6
1000754c:	8c009116 	blt	r17,r16,10007794 <__multiply+0x284>
10007550:	8005883a 	mov	r2,r16
10007554:	8821883a 	mov	r16,r17
10007558:	1023883a 	mov	r17,r2
1000755c:	90800217 	ldw	r2,8(r18)
10007560:	8447883a 	add	r3,r16,r17
10007564:	d8c00215 	stw	r3,8(sp)
10007568:	91400117 	ldw	r5,4(r18)
1000756c:	10c0010e 	bge	r2,r3,10007574 <__multiply+0x64>
10007570:	29400044 	addi	r5,r5,1
10007574:	00070ac0 	call	100070ac <_Balloc>
10007578:	d8c00217 	ldw	r3,8(sp)
1000757c:	d8800615 	stw	r2,24(sp)
10007580:	18eb883a 	add	r21,r3,r3
10007584:	ad6b883a 	add	r21,r21,r21
10007588:	10c00504 	addi	r3,r2,20
1000758c:	1d6b883a 	add	r21,r3,r21
10007590:	d8c00115 	stw	r3,4(sp)
10007594:	dd400315 	stw	r21,12(sp)
10007598:	1805883a 	mov	r2,r3
1000759c:	1d40042e 	bgeu	r3,r21,100075b0 <__multiply+0xa0>
100075a0:	d8c00317 	ldw	r3,12(sp)
100075a4:	10000015 	stw	zero,0(r2)
100075a8:	10800104 	addi	r2,r2,4
100075ac:	10fffc36 	bltu	r2,r3,100075a0 <__alt_data_end+0xf80075a0>
100075b0:	8c63883a 	add	r17,r17,r17
100075b4:	b5800504 	addi	r22,r22,20
100075b8:	8c63883a 	add	r17,r17,r17
100075bc:	94800504 	addi	r18,r18,20
100075c0:	8421883a 	add	r16,r16,r16
100075c4:	b463883a 	add	r17,r22,r17
100075c8:	8421883a 	add	r16,r16,r16
100075cc:	dd800015 	stw	r22,0(sp)
100075d0:	dc800415 	stw	r18,16(sp)
100075d4:	dc400515 	stw	r17,20(sp)
100075d8:	9429883a 	add	r20,r18,r16
100075dc:	b4404f2e 	bgeu	r22,r17,1000771c <__multiply+0x20c>
100075e0:	d8c00017 	ldw	r3,0(sp)
100075e4:	1c800017 	ldw	r18,0(r3)
100075e8:	943fffcc 	andi	r16,r18,65535
100075ec:	80001e26 	beq	r16,zero,10007668 <__multiply+0x158>
100075f0:	dd800117 	ldw	r22,4(sp)
100075f4:	dd400417 	ldw	r21,16(sp)
100075f8:	0025883a 	mov	r18,zero
100075fc:	adc00017 	ldw	r23,0(r21)
10007600:	b4c00017 	ldw	r19,0(r22)
10007604:	800b883a 	mov	r5,r16
10007608:	b93fffcc 	andi	r4,r23,65535
1000760c:	00013880 	call	10001388 <__mulsi3>
10007610:	9c7fffcc 	andi	r17,r19,65535
10007614:	8885883a 	add	r2,r17,r2
10007618:	b808d43a 	srli	r4,r23,16
1000761c:	14a3883a 	add	r17,r2,r18
10007620:	9826d43a 	srli	r19,r19,16
10007624:	8824d43a 	srli	r18,r17,16
10007628:	800b883a 	mov	r5,r16
1000762c:	00013880 	call	10001388 <__mulsi3>
10007630:	9885883a 	add	r2,r19,r2
10007634:	14a7883a 	add	r19,r2,r18
10007638:	88ffffcc 	andi	r3,r17,65535
1000763c:	9822943a 	slli	r17,r19,16
10007640:	ad400104 	addi	r21,r21,4
10007644:	b005883a 	mov	r2,r22
10007648:	88c6b03a 	or	r3,r17,r3
1000764c:	b0c00015 	stw	r3,0(r22)
10007650:	9824d43a 	srli	r18,r19,16
10007654:	b5800104 	addi	r22,r22,4
10007658:	ad3fe836 	bltu	r21,r20,100075fc <__alt_data_end+0xf80075fc>
1000765c:	d8c00017 	ldw	r3,0(sp)
10007660:	14800115 	stw	r18,4(r2)
10007664:	1c800017 	ldw	r18,0(r3)
10007668:	9024d43a 	srli	r18,r18,16
1000766c:	90002226 	beq	r18,zero,100076f8 <__multiply+0x1e8>
10007670:	d8c00117 	ldw	r3,4(sp)
10007674:	dd800417 	ldw	r22,16(sp)
10007678:	002f883a 	mov	r23,zero
1000767c:	1f000017 	ldw	fp,0(r3)
10007680:	1823883a 	mov	r17,r3
10007684:	182b883a 	mov	r21,r3
10007688:	e021883a 	mov	r16,fp
1000768c:	00000106 	br	10007694 <__multiply+0x184>
10007690:	982b883a 	mov	r21,r19
10007694:	b100000b 	ldhu	r4,0(r22)
10007698:	8020d43a 	srli	r16,r16,16
1000769c:	900b883a 	mov	r5,r18
100076a0:	00013880 	call	10001388 <__mulsi3>
100076a4:	1405883a 	add	r2,r2,r16
100076a8:	15ef883a 	add	r23,r2,r23
100076ac:	b804943a 	slli	r2,r23,16
100076b0:	e0ffffcc 	andi	r3,fp,65535
100076b4:	8c400104 	addi	r17,r17,4
100076b8:	10c6b03a 	or	r3,r2,r3
100076bc:	88ffff15 	stw	r3,-4(r17)
100076c0:	b5800104 	addi	r22,r22,4
100076c4:	b13fff17 	ldw	r4,-4(r22)
100076c8:	acc00104 	addi	r19,r21,4
100076cc:	900b883a 	mov	r5,r18
100076d0:	2008d43a 	srli	r4,r4,16
100076d4:	9c000017 	ldw	r16,0(r19)
100076d8:	00013880 	call	10001388 <__mulsi3>
100076dc:	b806d43a 	srli	r3,r23,16
100076e0:	813fffcc 	andi	r4,r16,65535
100076e4:	1105883a 	add	r2,r2,r4
100076e8:	10f9883a 	add	fp,r2,r3
100076ec:	e02ed43a 	srli	r23,fp,16
100076f0:	b53fe736 	bltu	r22,r20,10007690 <__alt_data_end+0xf8007690>
100076f4:	af000115 	stw	fp,4(r21)
100076f8:	d8c00017 	ldw	r3,0(sp)
100076fc:	d9000517 	ldw	r4,20(sp)
10007700:	18c00104 	addi	r3,r3,4
10007704:	d8c00015 	stw	r3,0(sp)
10007708:	d8c00117 	ldw	r3,4(sp)
1000770c:	18c00104 	addi	r3,r3,4
10007710:	d8c00115 	stw	r3,4(sp)
10007714:	d8c00017 	ldw	r3,0(sp)
10007718:	193fb136 	bltu	r3,r4,100075e0 <__alt_data_end+0xf80075e0>
1000771c:	d8c00217 	ldw	r3,8(sp)
10007720:	00c00c0e 	bge	zero,r3,10007754 <__multiply+0x244>
10007724:	d8c00317 	ldw	r3,12(sp)
10007728:	18bfff17 	ldw	r2,-4(r3)
1000772c:	1d7fff04 	addi	r21,r3,-4
10007730:	10000326 	beq	r2,zero,10007740 <__multiply+0x230>
10007734:	00000706 	br	10007754 <__multiply+0x244>
10007738:	a8800017 	ldw	r2,0(r21)
1000773c:	1000051e 	bne	r2,zero,10007754 <__multiply+0x244>
10007740:	d8c00217 	ldw	r3,8(sp)
10007744:	ad7fff04 	addi	r21,r21,-4
10007748:	18ffffc4 	addi	r3,r3,-1
1000774c:	d8c00215 	stw	r3,8(sp)
10007750:	183ff91e 	bne	r3,zero,10007738 <__alt_data_end+0xf8007738>
10007754:	d8c00617 	ldw	r3,24(sp)
10007758:	d9000217 	ldw	r4,8(sp)
1000775c:	1805883a 	mov	r2,r3
10007760:	19000415 	stw	r4,16(r3)
10007764:	dfc01017 	ldw	ra,64(sp)
10007768:	df000f17 	ldw	fp,60(sp)
1000776c:	ddc00e17 	ldw	r23,56(sp)
10007770:	dd800d17 	ldw	r22,52(sp)
10007774:	dd400c17 	ldw	r21,48(sp)
10007778:	dd000b17 	ldw	r20,44(sp)
1000777c:	dcc00a17 	ldw	r19,40(sp)
10007780:	dc800917 	ldw	r18,36(sp)
10007784:	dc400817 	ldw	r17,32(sp)
10007788:	dc000717 	ldw	r16,28(sp)
1000778c:	dec01104 	addi	sp,sp,68
10007790:	f800283a 	ret
10007794:	3025883a 	mov	r18,r6
10007798:	282d883a 	mov	r22,r5
1000779c:	003f6f06 	br	1000755c <__alt_data_end+0xf800755c>

100077a0 <__pow5mult>:
100077a0:	defffa04 	addi	sp,sp,-24
100077a4:	dcc00315 	stw	r19,12(sp)
100077a8:	dc800215 	stw	r18,8(sp)
100077ac:	dc000015 	stw	r16,0(sp)
100077b0:	dfc00515 	stw	ra,20(sp)
100077b4:	dd000415 	stw	r20,16(sp)
100077b8:	dc400115 	stw	r17,4(sp)
100077bc:	308000cc 	andi	r2,r6,3
100077c0:	3021883a 	mov	r16,r6
100077c4:	2027883a 	mov	r19,r4
100077c8:	2825883a 	mov	r18,r5
100077cc:	10002e1e 	bne	r2,zero,10007888 <__pow5mult+0xe8>
100077d0:	8021d0ba 	srai	r16,r16,2
100077d4:	80001a26 	beq	r16,zero,10007840 <__pow5mult+0xa0>
100077d8:	9c401217 	ldw	r17,72(r19)
100077dc:	8800061e 	bne	r17,zero,100077f8 <__pow5mult+0x58>
100077e0:	00003406 	br	100078b4 <__pow5mult+0x114>
100077e4:	8021d07a 	srai	r16,r16,1
100077e8:	80001526 	beq	r16,zero,10007840 <__pow5mult+0xa0>
100077ec:	88800017 	ldw	r2,0(r17)
100077f0:	10001c26 	beq	r2,zero,10007864 <__pow5mult+0xc4>
100077f4:	1023883a 	mov	r17,r2
100077f8:	80c0004c 	andi	r3,r16,1
100077fc:	183ff926 	beq	r3,zero,100077e4 <__alt_data_end+0xf80077e4>
10007800:	900b883a 	mov	r5,r18
10007804:	880d883a 	mov	r6,r17
10007808:	9809883a 	mov	r4,r19
1000780c:	00075100 	call	10007510 <__multiply>
10007810:	90001b26 	beq	r18,zero,10007880 <__pow5mult+0xe0>
10007814:	91c00117 	ldw	r7,4(r18)
10007818:	98c01317 	ldw	r3,76(r19)
1000781c:	8021d07a 	srai	r16,r16,1
10007820:	39cf883a 	add	r7,r7,r7
10007824:	39cf883a 	add	r7,r7,r7
10007828:	19c7883a 	add	r3,r3,r7
1000782c:	19000017 	ldw	r4,0(r3)
10007830:	91000015 	stw	r4,0(r18)
10007834:	1c800015 	stw	r18,0(r3)
10007838:	1025883a 	mov	r18,r2
1000783c:	803feb1e 	bne	r16,zero,100077ec <__alt_data_end+0xf80077ec>
10007840:	9005883a 	mov	r2,r18
10007844:	dfc00517 	ldw	ra,20(sp)
10007848:	dd000417 	ldw	r20,16(sp)
1000784c:	dcc00317 	ldw	r19,12(sp)
10007850:	dc800217 	ldw	r18,8(sp)
10007854:	dc400117 	ldw	r17,4(sp)
10007858:	dc000017 	ldw	r16,0(sp)
1000785c:	dec00604 	addi	sp,sp,24
10007860:	f800283a 	ret
10007864:	9809883a 	mov	r4,r19
10007868:	880b883a 	mov	r5,r17
1000786c:	880d883a 	mov	r6,r17
10007870:	00075100 	call	10007510 <__multiply>
10007874:	88800015 	stw	r2,0(r17)
10007878:	10000015 	stw	zero,0(r2)
1000787c:	003fdd06 	br	100077f4 <__alt_data_end+0xf80077f4>
10007880:	1025883a 	mov	r18,r2
10007884:	003fd706 	br	100077e4 <__alt_data_end+0xf80077e4>
10007888:	10bfffc4 	addi	r2,r2,-1
1000788c:	1085883a 	add	r2,r2,r2
10007890:	00c40074 	movhi	r3,4097
10007894:	18c35a04 	addi	r3,r3,3432
10007898:	1085883a 	add	r2,r2,r2
1000789c:	1885883a 	add	r2,r3,r2
100078a0:	11800017 	ldw	r6,0(r2)
100078a4:	000f883a 	mov	r7,zero
100078a8:	000717c0 	call	1000717c <__multadd>
100078ac:	1025883a 	mov	r18,r2
100078b0:	003fc706 	br	100077d0 <__alt_data_end+0xf80077d0>
100078b4:	05000044 	movi	r20,1
100078b8:	9809883a 	mov	r4,r19
100078bc:	a00b883a 	mov	r5,r20
100078c0:	00070ac0 	call	100070ac <_Balloc>
100078c4:	1023883a 	mov	r17,r2
100078c8:	00809c44 	movi	r2,625
100078cc:	88800515 	stw	r2,20(r17)
100078d0:	8d000415 	stw	r20,16(r17)
100078d4:	9c401215 	stw	r17,72(r19)
100078d8:	88000015 	stw	zero,0(r17)
100078dc:	003fc606 	br	100077f8 <__alt_data_end+0xf80077f8>

100078e0 <__lshift>:
100078e0:	defff904 	addi	sp,sp,-28
100078e4:	dd000415 	stw	r20,16(sp)
100078e8:	dcc00315 	stw	r19,12(sp)
100078ec:	3029d17a 	srai	r20,r6,5
100078f0:	2cc00417 	ldw	r19,16(r5)
100078f4:	28800217 	ldw	r2,8(r5)
100078f8:	dd400515 	stw	r21,20(sp)
100078fc:	a4e7883a 	add	r19,r20,r19
10007900:	dc800215 	stw	r18,8(sp)
10007904:	dc400115 	stw	r17,4(sp)
10007908:	dc000015 	stw	r16,0(sp)
1000790c:	dfc00615 	stw	ra,24(sp)
10007910:	9c000044 	addi	r16,r19,1
10007914:	2823883a 	mov	r17,r5
10007918:	302b883a 	mov	r21,r6
1000791c:	2025883a 	mov	r18,r4
10007920:	29400117 	ldw	r5,4(r5)
10007924:	1400030e 	bge	r2,r16,10007934 <__lshift+0x54>
10007928:	1085883a 	add	r2,r2,r2
1000792c:	29400044 	addi	r5,r5,1
10007930:	143ffd16 	blt	r2,r16,10007928 <__alt_data_end+0xf8007928>
10007934:	9009883a 	mov	r4,r18
10007938:	00070ac0 	call	100070ac <_Balloc>
1000793c:	11c00504 	addi	r7,r2,20
10007940:	0500090e 	bge	zero,r20,10007968 <__lshift+0x88>
10007944:	3811883a 	mov	r8,r7
10007948:	0007883a 	mov	r3,zero
1000794c:	40000015 	stw	zero,0(r8)
10007950:	18c00044 	addi	r3,r3,1
10007954:	42000104 	addi	r8,r8,4
10007958:	1d3ffc1e 	bne	r3,r20,1000794c <__alt_data_end+0xf800794c>
1000795c:	18c7883a 	add	r3,r3,r3
10007960:	18c7883a 	add	r3,r3,r3
10007964:	38cf883a 	add	r7,r7,r3
10007968:	89000417 	ldw	r4,16(r17)
1000796c:	88c00504 	addi	r3,r17,20
10007970:	a98007cc 	andi	r6,r21,31
10007974:	2109883a 	add	r4,r4,r4
10007978:	2109883a 	add	r4,r4,r4
1000797c:	1909883a 	add	r4,r3,r4
10007980:	30002326 	beq	r6,zero,10007a10 <__lshift+0x130>
10007984:	01400804 	movi	r5,32
10007988:	298bc83a 	sub	r5,r5,r6
1000798c:	0013883a 	mov	r9,zero
10007990:	1a000017 	ldw	r8,0(r3)
10007994:	3815883a 	mov	r10,r7
10007998:	39c00104 	addi	r7,r7,4
1000799c:	4190983a 	sll	r8,r8,r6
100079a0:	18c00104 	addi	r3,r3,4
100079a4:	4a10b03a 	or	r8,r9,r8
100079a8:	3a3fff15 	stw	r8,-4(r7)
100079ac:	1a3fff17 	ldw	r8,-4(r3)
100079b0:	4152d83a 	srl	r9,r8,r5
100079b4:	193ff636 	bltu	r3,r4,10007990 <__alt_data_end+0xf8007990>
100079b8:	52400115 	stw	r9,4(r10)
100079bc:	48000126 	beq	r9,zero,100079c4 <__lshift+0xe4>
100079c0:	9c000084 	addi	r16,r19,2
100079c4:	89000117 	ldw	r4,4(r17)
100079c8:	90c01317 	ldw	r3,76(r18)
100079cc:	843fffc4 	addi	r16,r16,-1
100079d0:	2109883a 	add	r4,r4,r4
100079d4:	2109883a 	add	r4,r4,r4
100079d8:	1907883a 	add	r3,r3,r4
100079dc:	19000017 	ldw	r4,0(r3)
100079e0:	14000415 	stw	r16,16(r2)
100079e4:	89000015 	stw	r4,0(r17)
100079e8:	1c400015 	stw	r17,0(r3)
100079ec:	dfc00617 	ldw	ra,24(sp)
100079f0:	dd400517 	ldw	r21,20(sp)
100079f4:	dd000417 	ldw	r20,16(sp)
100079f8:	dcc00317 	ldw	r19,12(sp)
100079fc:	dc800217 	ldw	r18,8(sp)
10007a00:	dc400117 	ldw	r17,4(sp)
10007a04:	dc000017 	ldw	r16,0(sp)
10007a08:	dec00704 	addi	sp,sp,28
10007a0c:	f800283a 	ret
10007a10:	19400017 	ldw	r5,0(r3)
10007a14:	39c00104 	addi	r7,r7,4
10007a18:	18c00104 	addi	r3,r3,4
10007a1c:	397fff15 	stw	r5,-4(r7)
10007a20:	193ffb36 	bltu	r3,r4,10007a10 <__alt_data_end+0xf8007a10>
10007a24:	003fe706 	br	100079c4 <__alt_data_end+0xf80079c4>

10007a28 <__mcmp>:
10007a28:	20800417 	ldw	r2,16(r4)
10007a2c:	28c00417 	ldw	r3,16(r5)
10007a30:	10c5c83a 	sub	r2,r2,r3
10007a34:	1000111e 	bne	r2,zero,10007a7c <__mcmp+0x54>
10007a38:	18c7883a 	add	r3,r3,r3
10007a3c:	18c7883a 	add	r3,r3,r3
10007a40:	21000504 	addi	r4,r4,20
10007a44:	29400504 	addi	r5,r5,20
10007a48:	20c5883a 	add	r2,r4,r3
10007a4c:	28cb883a 	add	r5,r5,r3
10007a50:	00000106 	br	10007a58 <__mcmp+0x30>
10007a54:	20800a2e 	bgeu	r4,r2,10007a80 <__mcmp+0x58>
10007a58:	10bfff04 	addi	r2,r2,-4
10007a5c:	297fff04 	addi	r5,r5,-4
10007a60:	11800017 	ldw	r6,0(r2)
10007a64:	28c00017 	ldw	r3,0(r5)
10007a68:	30fffa26 	beq	r6,r3,10007a54 <__alt_data_end+0xf8007a54>
10007a6c:	30c00236 	bltu	r6,r3,10007a78 <__mcmp+0x50>
10007a70:	00800044 	movi	r2,1
10007a74:	f800283a 	ret
10007a78:	00bfffc4 	movi	r2,-1
10007a7c:	f800283a 	ret
10007a80:	0005883a 	mov	r2,zero
10007a84:	f800283a 	ret

10007a88 <__mdiff>:
10007a88:	defffb04 	addi	sp,sp,-20
10007a8c:	dc000015 	stw	r16,0(sp)
10007a90:	2821883a 	mov	r16,r5
10007a94:	dcc00315 	stw	r19,12(sp)
10007a98:	300b883a 	mov	r5,r6
10007a9c:	2027883a 	mov	r19,r4
10007aa0:	8009883a 	mov	r4,r16
10007aa4:	dc800215 	stw	r18,8(sp)
10007aa8:	dfc00415 	stw	ra,16(sp)
10007aac:	dc400115 	stw	r17,4(sp)
10007ab0:	3025883a 	mov	r18,r6
10007ab4:	0007a280 	call	10007a28 <__mcmp>
10007ab8:	10005226 	beq	r2,zero,10007c04 <__mdiff+0x17c>
10007abc:	10004c16 	blt	r2,zero,10007bf0 <__mdiff+0x168>
10007ac0:	0023883a 	mov	r17,zero
10007ac4:	81400117 	ldw	r5,4(r16)
10007ac8:	9809883a 	mov	r4,r19
10007acc:	00070ac0 	call	100070ac <_Balloc>
10007ad0:	83400417 	ldw	r13,16(r16)
10007ad4:	93800417 	ldw	r14,16(r18)
10007ad8:	81000504 	addi	r4,r16,20
10007adc:	6b59883a 	add	r12,r13,r13
10007ae0:	739d883a 	add	r14,r14,r14
10007ae4:	6319883a 	add	r12,r12,r12
10007ae8:	91800504 	addi	r6,r18,20
10007aec:	739d883a 	add	r14,r14,r14
10007af0:	14400315 	stw	r17,12(r2)
10007af4:	2319883a 	add	r12,r4,r12
10007af8:	339d883a 	add	r14,r6,r14
10007afc:	12400504 	addi	r9,r2,20
10007b00:	0007883a 	mov	r3,zero
10007b04:	22000017 	ldw	r8,0(r4)
10007b08:	32800017 	ldw	r10,0(r6)
10007b0c:	4ac00104 	addi	r11,r9,4
10007b10:	41ffffcc 	andi	r7,r8,65535
10007b14:	38c7883a 	add	r3,r7,r3
10007b18:	51ffffcc 	andi	r7,r10,65535
10007b1c:	19cfc83a 	sub	r7,r3,r7
10007b20:	4010d43a 	srli	r8,r8,16
10007b24:	5014d43a 	srli	r10,r10,16
10007b28:	3807d43a 	srai	r3,r7,16
10007b2c:	39ffffcc 	andi	r7,r7,65535
10007b30:	4291c83a 	sub	r8,r8,r10
10007b34:	40c7883a 	add	r3,r8,r3
10007b38:	1810943a 	slli	r8,r3,16
10007b3c:	31800104 	addi	r6,r6,4
10007b40:	21000104 	addi	r4,r4,4
10007b44:	41ceb03a 	or	r7,r8,r7
10007b48:	49c00015 	stw	r7,0(r9)
10007b4c:	1807d43a 	srai	r3,r3,16
10007b50:	580b883a 	mov	r5,r11
10007b54:	5813883a 	mov	r9,r11
10007b58:	33bfea36 	bltu	r6,r14,10007b04 <__alt_data_end+0xf8007b04>
10007b5c:	2011883a 	mov	r8,r4
10007b60:	2300152e 	bgeu	r4,r12,10007bb8 <__mdiff+0x130>
10007b64:	21400017 	ldw	r5,0(r4)
10007b68:	4a400104 	addi	r9,r9,4
10007b6c:	21000104 	addi	r4,r4,4
10007b70:	29ffffcc 	andi	r7,r5,65535
10007b74:	38c7883a 	add	r3,r7,r3
10007b78:	280ad43a 	srli	r5,r5,16
10007b7c:	180dd43a 	srai	r6,r3,16
10007b80:	19ffffcc 	andi	r7,r3,65535
10007b84:	3147883a 	add	r3,r6,r5
10007b88:	180a943a 	slli	r5,r3,16
10007b8c:	1807d43a 	srai	r3,r3,16
10007b90:	29ceb03a 	or	r7,r5,r7
10007b94:	49ffff15 	stw	r7,-4(r9)
10007b98:	233ff236 	bltu	r4,r12,10007b64 <__alt_data_end+0xf8007b64>
10007b9c:	0206303a 	nor	r3,zero,r8
10007ba0:	1b07883a 	add	r3,r3,r12
10007ba4:	1806d0ba 	srli	r3,r3,2
10007ba8:	18c00044 	addi	r3,r3,1
10007bac:	18c7883a 	add	r3,r3,r3
10007bb0:	18c7883a 	add	r3,r3,r3
10007bb4:	58cb883a 	add	r5,r11,r3
10007bb8:	28ffff04 	addi	r3,r5,-4
10007bbc:	3800041e 	bne	r7,zero,10007bd0 <__mdiff+0x148>
10007bc0:	18ffff04 	addi	r3,r3,-4
10007bc4:	19000017 	ldw	r4,0(r3)
10007bc8:	6b7fffc4 	addi	r13,r13,-1
10007bcc:	203ffc26 	beq	r4,zero,10007bc0 <__alt_data_end+0xf8007bc0>
10007bd0:	13400415 	stw	r13,16(r2)
10007bd4:	dfc00417 	ldw	ra,16(sp)
10007bd8:	dcc00317 	ldw	r19,12(sp)
10007bdc:	dc800217 	ldw	r18,8(sp)
10007be0:	dc400117 	ldw	r17,4(sp)
10007be4:	dc000017 	ldw	r16,0(sp)
10007be8:	dec00504 	addi	sp,sp,20
10007bec:	f800283a 	ret
10007bf0:	8005883a 	mov	r2,r16
10007bf4:	04400044 	movi	r17,1
10007bf8:	9021883a 	mov	r16,r18
10007bfc:	1025883a 	mov	r18,r2
10007c00:	003fb006 	br	10007ac4 <__alt_data_end+0xf8007ac4>
10007c04:	9809883a 	mov	r4,r19
10007c08:	000b883a 	mov	r5,zero
10007c0c:	00070ac0 	call	100070ac <_Balloc>
10007c10:	00c00044 	movi	r3,1
10007c14:	10c00415 	stw	r3,16(r2)
10007c18:	10000515 	stw	zero,20(r2)
10007c1c:	003fed06 	br	10007bd4 <__alt_data_end+0xf8007bd4>

10007c20 <__ulp>:
10007c20:	295ffc2c 	andhi	r5,r5,32752
10007c24:	00bf3034 	movhi	r2,64704
10007c28:	2887883a 	add	r3,r5,r2
10007c2c:	00c0020e 	bge	zero,r3,10007c38 <__ulp+0x18>
10007c30:	0005883a 	mov	r2,zero
10007c34:	f800283a 	ret
10007c38:	00c7c83a 	sub	r3,zero,r3
10007c3c:	180bd53a 	srai	r5,r3,20
10007c40:	008004c4 	movi	r2,19
10007c44:	11400a0e 	bge	r2,r5,10007c70 <__ulp+0x50>
10007c48:	00800c84 	movi	r2,50
10007c4c:	0007883a 	mov	r3,zero
10007c50:	11400516 	blt	r2,r5,10007c68 <__ulp+0x48>
10007c54:	00800cc4 	movi	r2,51
10007c58:	114bc83a 	sub	r5,r2,r5
10007c5c:	00800044 	movi	r2,1
10007c60:	1144983a 	sll	r2,r2,r5
10007c64:	f800283a 	ret
10007c68:	00800044 	movi	r2,1
10007c6c:	f800283a 	ret
10007c70:	00800234 	movhi	r2,8
10007c74:	1147d83a 	sra	r3,r2,r5
10007c78:	0005883a 	mov	r2,zero
10007c7c:	f800283a 	ret

10007c80 <__b2d>:
10007c80:	defffa04 	addi	sp,sp,-24
10007c84:	dc000015 	stw	r16,0(sp)
10007c88:	24000417 	ldw	r16,16(r4)
10007c8c:	dc400115 	stw	r17,4(sp)
10007c90:	24400504 	addi	r17,r4,20
10007c94:	8421883a 	add	r16,r16,r16
10007c98:	8421883a 	add	r16,r16,r16
10007c9c:	8c21883a 	add	r16,r17,r16
10007ca0:	dc800215 	stw	r18,8(sp)
10007ca4:	84bfff17 	ldw	r18,-4(r16)
10007ca8:	dd000415 	stw	r20,16(sp)
10007cac:	dcc00315 	stw	r19,12(sp)
10007cb0:	9009883a 	mov	r4,r18
10007cb4:	2829883a 	mov	r20,r5
10007cb8:	dfc00515 	stw	ra,20(sp)
10007cbc:	00073bc0 	call	100073bc <__hi0bits>
10007cc0:	00c00804 	movi	r3,32
10007cc4:	1887c83a 	sub	r3,r3,r2
10007cc8:	a0c00015 	stw	r3,0(r20)
10007ccc:	00c00284 	movi	r3,10
10007cd0:	84ffff04 	addi	r19,r16,-4
10007cd4:	18801216 	blt	r3,r2,10007d20 <__b2d+0xa0>
10007cd8:	014002c4 	movi	r5,11
10007cdc:	2889c83a 	sub	r4,r5,r2
10007ce0:	9106d83a 	srl	r3,r18,r4
10007ce4:	18cffc34 	orhi	r3,r3,16368
10007ce8:	8cc0282e 	bgeu	r17,r19,10007d8c <__b2d+0x10c>
10007cec:	817ffe17 	ldw	r5,-8(r16)
10007cf0:	290ad83a 	srl	r5,r5,r4
10007cf4:	10800544 	addi	r2,r2,21
10007cf8:	9084983a 	sll	r2,r18,r2
10007cfc:	2884b03a 	or	r2,r5,r2
10007d00:	dfc00517 	ldw	ra,20(sp)
10007d04:	dd000417 	ldw	r20,16(sp)
10007d08:	dcc00317 	ldw	r19,12(sp)
10007d0c:	dc800217 	ldw	r18,8(sp)
10007d10:	dc400117 	ldw	r17,4(sp)
10007d14:	dc000017 	ldw	r16,0(sp)
10007d18:	dec00604 	addi	sp,sp,24
10007d1c:	f800283a 	ret
10007d20:	113ffd44 	addi	r4,r2,-11
10007d24:	8cc00f2e 	bgeu	r17,r19,10007d64 <__b2d+0xe4>
10007d28:	81bffe04 	addi	r6,r16,-8
10007d2c:	817ffe17 	ldw	r5,-8(r16)
10007d30:	20001326 	beq	r4,zero,10007d80 <__b2d+0x100>
10007d34:	00c00ac4 	movi	r3,43
10007d38:	1885c83a 	sub	r2,r3,r2
10007d3c:	2886d83a 	srl	r3,r5,r2
10007d40:	9124983a 	sll	r18,r18,r4
10007d44:	90e4b03a 	or	r18,r18,r3
10007d48:	90cffc34 	orhi	r3,r18,16368
10007d4c:	8980112e 	bgeu	r17,r6,10007d94 <__b2d+0x114>
10007d50:	81bffd17 	ldw	r6,-12(r16)
10007d54:	308cd83a 	srl	r6,r6,r2
10007d58:	2904983a 	sll	r2,r5,r4
10007d5c:	1184b03a 	or	r2,r2,r6
10007d60:	003fe706 	br	10007d00 <__alt_data_end+0xf8007d00>
10007d64:	20000526 	beq	r4,zero,10007d7c <__b2d+0xfc>
10007d68:	9124983a 	sll	r18,r18,r4
10007d6c:	000d883a 	mov	r6,zero
10007d70:	000b883a 	mov	r5,zero
10007d74:	90cffc34 	orhi	r3,r18,16368
10007d78:	003ff706 	br	10007d58 <__alt_data_end+0xf8007d58>
10007d7c:	000b883a 	mov	r5,zero
10007d80:	90cffc34 	orhi	r3,r18,16368
10007d84:	2805883a 	mov	r2,r5
10007d88:	003fdd06 	br	10007d00 <__alt_data_end+0xf8007d00>
10007d8c:	000b883a 	mov	r5,zero
10007d90:	003fd806 	br	10007cf4 <__alt_data_end+0xf8007cf4>
10007d94:	000d883a 	mov	r6,zero
10007d98:	003fef06 	br	10007d58 <__alt_data_end+0xf8007d58>

10007d9c <__d2b>:
10007d9c:	defff704 	addi	sp,sp,-36
10007da0:	dc000215 	stw	r16,8(sp)
10007da4:	3021883a 	mov	r16,r6
10007da8:	dc400315 	stw	r17,12(sp)
10007dac:	8022907a 	slli	r17,r16,1
10007db0:	dd400715 	stw	r21,28(sp)
10007db4:	282b883a 	mov	r21,r5
10007db8:	01400044 	movi	r5,1
10007dbc:	dd000615 	stw	r20,24(sp)
10007dc0:	dcc00515 	stw	r19,20(sp)
10007dc4:	dc800415 	stw	r18,16(sp)
10007dc8:	dfc00815 	stw	ra,32(sp)
10007dcc:	3829883a 	mov	r20,r7
10007dd0:	dc800917 	ldw	r18,36(sp)
10007dd4:	8822d57a 	srli	r17,r17,21
10007dd8:	00070ac0 	call	100070ac <_Balloc>
10007ddc:	1027883a 	mov	r19,r2
10007de0:	00800434 	movhi	r2,16
10007de4:	10bfffc4 	addi	r2,r2,-1
10007de8:	808c703a 	and	r6,r16,r2
10007dec:	88000126 	beq	r17,zero,10007df4 <__d2b+0x58>
10007df0:	31800434 	orhi	r6,r6,16
10007df4:	d9800015 	stw	r6,0(sp)
10007df8:	a8001f26 	beq	r21,zero,10007e78 <__d2b+0xdc>
10007dfc:	d9000104 	addi	r4,sp,4
10007e00:	dd400115 	stw	r21,4(sp)
10007e04:	00074240 	call	10007424 <__lo0bits>
10007e08:	d8c00017 	ldw	r3,0(sp)
10007e0c:	1000291e 	bne	r2,zero,10007eb4 <__d2b+0x118>
10007e10:	d9000117 	ldw	r4,4(sp)
10007e14:	99000515 	stw	r4,20(r19)
10007e18:	1820c03a 	cmpne	r16,r3,zero
10007e1c:	84000044 	addi	r16,r16,1
10007e20:	98c00615 	stw	r3,24(r19)
10007e24:	9c000415 	stw	r16,16(r19)
10007e28:	88001b1e 	bne	r17,zero,10007e98 <__d2b+0xfc>
10007e2c:	800690ba 	slli	r3,r16,2
10007e30:	10bef384 	addi	r2,r2,-1074
10007e34:	a0800015 	stw	r2,0(r20)
10007e38:	98c5883a 	add	r2,r19,r3
10007e3c:	11000417 	ldw	r4,16(r2)
10007e40:	8020917a 	slli	r16,r16,5
10007e44:	00073bc0 	call	100073bc <__hi0bits>
10007e48:	8085c83a 	sub	r2,r16,r2
10007e4c:	90800015 	stw	r2,0(r18)
10007e50:	9805883a 	mov	r2,r19
10007e54:	dfc00817 	ldw	ra,32(sp)
10007e58:	dd400717 	ldw	r21,28(sp)
10007e5c:	dd000617 	ldw	r20,24(sp)
10007e60:	dcc00517 	ldw	r19,20(sp)
10007e64:	dc800417 	ldw	r18,16(sp)
10007e68:	dc400317 	ldw	r17,12(sp)
10007e6c:	dc000217 	ldw	r16,8(sp)
10007e70:	dec00904 	addi	sp,sp,36
10007e74:	f800283a 	ret
10007e78:	d809883a 	mov	r4,sp
10007e7c:	00074240 	call	10007424 <__lo0bits>
10007e80:	d8c00017 	ldw	r3,0(sp)
10007e84:	04000044 	movi	r16,1
10007e88:	9c000415 	stw	r16,16(r19)
10007e8c:	98c00515 	stw	r3,20(r19)
10007e90:	10800804 	addi	r2,r2,32
10007e94:	883fe526 	beq	r17,zero,10007e2c <__alt_data_end+0xf8007e2c>
10007e98:	8c7ef344 	addi	r17,r17,-1075
10007e9c:	88a3883a 	add	r17,r17,r2
10007ea0:	00c00d44 	movi	r3,53
10007ea4:	a4400015 	stw	r17,0(r20)
10007ea8:	1885c83a 	sub	r2,r3,r2
10007eac:	90800015 	stw	r2,0(r18)
10007eb0:	003fe706 	br	10007e50 <__alt_data_end+0xf8007e50>
10007eb4:	01000804 	movi	r4,32
10007eb8:	2089c83a 	sub	r4,r4,r2
10007ebc:	1908983a 	sll	r4,r3,r4
10007ec0:	d9400117 	ldw	r5,4(sp)
10007ec4:	1886d83a 	srl	r3,r3,r2
10007ec8:	2148b03a 	or	r4,r4,r5
10007ecc:	99000515 	stw	r4,20(r19)
10007ed0:	d8c00015 	stw	r3,0(sp)
10007ed4:	003fd006 	br	10007e18 <__alt_data_end+0xf8007e18>

10007ed8 <__ratio>:
10007ed8:	defff904 	addi	sp,sp,-28
10007edc:	dc400315 	stw	r17,12(sp)
10007ee0:	2823883a 	mov	r17,r5
10007ee4:	d9400104 	addi	r5,sp,4
10007ee8:	dfc00615 	stw	ra,24(sp)
10007eec:	dcc00515 	stw	r19,20(sp)
10007ef0:	dc800415 	stw	r18,16(sp)
10007ef4:	2027883a 	mov	r19,r4
10007ef8:	dc000215 	stw	r16,8(sp)
10007efc:	0007c800 	call	10007c80 <__b2d>
10007f00:	8809883a 	mov	r4,r17
10007f04:	d80b883a 	mov	r5,sp
10007f08:	1025883a 	mov	r18,r2
10007f0c:	1821883a 	mov	r16,r3
10007f10:	0007c800 	call	10007c80 <__b2d>
10007f14:	8a400417 	ldw	r9,16(r17)
10007f18:	9a000417 	ldw	r8,16(r19)
10007f1c:	100d883a 	mov	r6,r2
10007f20:	d8800017 	ldw	r2,0(sp)
10007f24:	4251c83a 	sub	r8,r8,r9
10007f28:	4012917a 	slli	r9,r8,5
10007f2c:	da000117 	ldw	r8,4(sp)
10007f30:	4091c83a 	sub	r8,r8,r2
10007f34:	4251883a 	add	r8,r8,r9
10007f38:	02000d0e 	bge	zero,r8,10007f70 <__ratio+0x98>
10007f3c:	4010953a 	slli	r8,r8,20
10007f40:	4421883a 	add	r16,r8,r16
10007f44:	9009883a 	mov	r4,r18
10007f48:	800b883a 	mov	r5,r16
10007f4c:	180f883a 	mov	r7,r3
10007f50:	000bdb40 	call	1000bdb4 <__divdf3>
10007f54:	dfc00617 	ldw	ra,24(sp)
10007f58:	dcc00517 	ldw	r19,20(sp)
10007f5c:	dc800417 	ldw	r18,16(sp)
10007f60:	dc400317 	ldw	r17,12(sp)
10007f64:	dc000217 	ldw	r16,8(sp)
10007f68:	dec00704 	addi	sp,sp,28
10007f6c:	f800283a 	ret
10007f70:	4010953a 	slli	r8,r8,20
10007f74:	1a07c83a 	sub	r3,r3,r8
10007f78:	003ff206 	br	10007f44 <__alt_data_end+0xf8007f44>

10007f7c <_mprec_log10>:
10007f7c:	defffe04 	addi	sp,sp,-8
10007f80:	dc000015 	stw	r16,0(sp)
10007f84:	dfc00115 	stw	ra,4(sp)
10007f88:	008005c4 	movi	r2,23
10007f8c:	2021883a 	mov	r16,r4
10007f90:	11000d0e 	bge	r2,r4,10007fc8 <_mprec_log10+0x4c>
10007f94:	0005883a 	mov	r2,zero
10007f98:	00cffc34 	movhi	r3,16368
10007f9c:	843fffc4 	addi	r16,r16,-1
10007fa0:	1009883a 	mov	r4,r2
10007fa4:	180b883a 	mov	r5,r3
10007fa8:	000d883a 	mov	r6,zero
10007fac:	01d00934 	movhi	r7,16420
10007fb0:	000c9780 	call	1000c978 <__muldf3>
10007fb4:	803ff91e 	bne	r16,zero,10007f9c <__alt_data_end+0xf8007f9c>
10007fb8:	dfc00117 	ldw	ra,4(sp)
10007fbc:	dc000017 	ldw	r16,0(sp)
10007fc0:	dec00204 	addi	sp,sp,8
10007fc4:	f800283a 	ret
10007fc8:	202090fa 	slli	r16,r4,3
10007fcc:	00840074 	movhi	r2,4097
10007fd0:	10837104 	addi	r2,r2,3524
10007fd4:	1421883a 	add	r16,r2,r16
10007fd8:	80800017 	ldw	r2,0(r16)
10007fdc:	80c00117 	ldw	r3,4(r16)
10007fe0:	dfc00117 	ldw	ra,4(sp)
10007fe4:	dc000017 	ldw	r16,0(sp)
10007fe8:	dec00204 	addi	sp,sp,8
10007fec:	f800283a 	ret

10007ff0 <__copybits>:
10007ff0:	297fffc4 	addi	r5,r5,-1
10007ff4:	280fd17a 	srai	r7,r5,5
10007ff8:	30c00417 	ldw	r3,16(r6)
10007ffc:	30800504 	addi	r2,r6,20
10008000:	39c00044 	addi	r7,r7,1
10008004:	18c7883a 	add	r3,r3,r3
10008008:	39cf883a 	add	r7,r7,r7
1000800c:	18c7883a 	add	r3,r3,r3
10008010:	39cf883a 	add	r7,r7,r7
10008014:	10c7883a 	add	r3,r2,r3
10008018:	21cf883a 	add	r7,r4,r7
1000801c:	10c00d2e 	bgeu	r2,r3,10008054 <__copybits+0x64>
10008020:	200b883a 	mov	r5,r4
10008024:	12000017 	ldw	r8,0(r2)
10008028:	29400104 	addi	r5,r5,4
1000802c:	10800104 	addi	r2,r2,4
10008030:	2a3fff15 	stw	r8,-4(r5)
10008034:	10fffb36 	bltu	r2,r3,10008024 <__alt_data_end+0xf8008024>
10008038:	1985c83a 	sub	r2,r3,r6
1000803c:	10bffac4 	addi	r2,r2,-21
10008040:	1004d0ba 	srli	r2,r2,2
10008044:	10800044 	addi	r2,r2,1
10008048:	1085883a 	add	r2,r2,r2
1000804c:	1085883a 	add	r2,r2,r2
10008050:	2089883a 	add	r4,r4,r2
10008054:	21c0032e 	bgeu	r4,r7,10008064 <__copybits+0x74>
10008058:	20000015 	stw	zero,0(r4)
1000805c:	21000104 	addi	r4,r4,4
10008060:	21fffd36 	bltu	r4,r7,10008058 <__alt_data_end+0xf8008058>
10008064:	f800283a 	ret

10008068 <__any_on>:
10008068:	20c00417 	ldw	r3,16(r4)
1000806c:	2805d17a 	srai	r2,r5,5
10008070:	21000504 	addi	r4,r4,20
10008074:	18800d0e 	bge	r3,r2,100080ac <__any_on+0x44>
10008078:	18c7883a 	add	r3,r3,r3
1000807c:	18c7883a 	add	r3,r3,r3
10008080:	20c7883a 	add	r3,r4,r3
10008084:	20c0192e 	bgeu	r4,r3,100080ec <__any_on+0x84>
10008088:	18bfff17 	ldw	r2,-4(r3)
1000808c:	18ffff04 	addi	r3,r3,-4
10008090:	1000041e 	bne	r2,zero,100080a4 <__any_on+0x3c>
10008094:	20c0142e 	bgeu	r4,r3,100080e8 <__any_on+0x80>
10008098:	18ffff04 	addi	r3,r3,-4
1000809c:	19400017 	ldw	r5,0(r3)
100080a0:	283ffc26 	beq	r5,zero,10008094 <__alt_data_end+0xf8008094>
100080a4:	00800044 	movi	r2,1
100080a8:	f800283a 	ret
100080ac:	10c00a0e 	bge	r2,r3,100080d8 <__any_on+0x70>
100080b0:	1085883a 	add	r2,r2,r2
100080b4:	1085883a 	add	r2,r2,r2
100080b8:	294007cc 	andi	r5,r5,31
100080bc:	2087883a 	add	r3,r4,r2
100080c0:	283ff026 	beq	r5,zero,10008084 <__alt_data_end+0xf8008084>
100080c4:	19800017 	ldw	r6,0(r3)
100080c8:	3144d83a 	srl	r2,r6,r5
100080cc:	114a983a 	sll	r5,r2,r5
100080d0:	29bff41e 	bne	r5,r6,100080a4 <__alt_data_end+0xf80080a4>
100080d4:	003feb06 	br	10008084 <__alt_data_end+0xf8008084>
100080d8:	1085883a 	add	r2,r2,r2
100080dc:	1085883a 	add	r2,r2,r2
100080e0:	2087883a 	add	r3,r4,r2
100080e4:	003fe706 	br	10008084 <__alt_data_end+0xf8008084>
100080e8:	f800283a 	ret
100080ec:	0005883a 	mov	r2,zero
100080f0:	f800283a 	ret

100080f4 <_realloc_r>:
100080f4:	defff604 	addi	sp,sp,-40
100080f8:	dcc00315 	stw	r19,12(sp)
100080fc:	dc400115 	stw	r17,4(sp)
10008100:	dfc00915 	stw	ra,36(sp)
10008104:	df000815 	stw	fp,32(sp)
10008108:	ddc00715 	stw	r23,28(sp)
1000810c:	dd800615 	stw	r22,24(sp)
10008110:	dd400515 	stw	r21,20(sp)
10008114:	dd000415 	stw	r20,16(sp)
10008118:	dc800215 	stw	r18,8(sp)
1000811c:	dc000015 	stw	r16,0(sp)
10008120:	2827883a 	mov	r19,r5
10008124:	3023883a 	mov	r17,r6
10008128:	2800bf26 	beq	r5,zero,10008428 <_realloc_r+0x334>
1000812c:	2025883a 	mov	r18,r4
10008130:	000e2f40 	call	1000e2f4 <__malloc_lock>
10008134:	98ffff17 	ldw	r3,-4(r19)
10008138:	01bfff04 	movi	r6,-4
1000813c:	890002c4 	addi	r4,r17,11
10008140:	01c00584 	movi	r7,22
10008144:	9d7ffe04 	addi	r21,r19,-8
10008148:	19a0703a 	and	r16,r3,r6
1000814c:	39003f2e 	bgeu	r7,r4,1000824c <_realloc_r+0x158>
10008150:	053ffe04 	movi	r20,-8
10008154:	2528703a 	and	r20,r4,r20
10008158:	a00f883a 	mov	r7,r20
1000815c:	a0008216 	blt	r20,zero,10008368 <_realloc_r+0x274>
10008160:	a4408136 	bltu	r20,r17,10008368 <_realloc_r+0x274>
10008164:	81c03c0e 	bge	r16,r7,10008258 <_realloc_r+0x164>
10008168:	07040074 	movhi	fp,4097
1000816c:	e7040704 	addi	fp,fp,4124
10008170:	e1000217 	ldw	r4,8(fp)
10008174:	ac05883a 	add	r2,r21,r16
10008178:	2080bf26 	beq	r4,r2,10008478 <_realloc_r+0x384>
1000817c:	11000117 	ldw	r4,4(r2)
10008180:	023fff84 	movi	r8,-2
10008184:	2210703a 	and	r8,r4,r8
10008188:	1211883a 	add	r8,r2,r8
1000818c:	41400117 	ldw	r5,4(r8)
10008190:	2940004c 	andi	r5,r5,1
10008194:	28004a1e 	bne	r5,zero,100082c0 <_realloc_r+0x1cc>
10008198:	017fff04 	movi	r5,-4
1000819c:	2148703a 	and	r4,r4,r5
100081a0:	2409883a 	add	r4,r4,r16
100081a4:	21c0ad0e 	bge	r4,r7,1000845c <_realloc_r+0x368>
100081a8:	18c0004c 	andi	r3,r3,1
100081ac:	18007f1e 	bne	r3,zero,100083ac <_realloc_r+0x2b8>
100081b0:	9dfffe17 	ldw	r23,-8(r19)
100081b4:	adefc83a 	sub	r23,r21,r23
100081b8:	bd800117 	ldw	r22,4(r23)
100081bc:	b14a703a 	and	r5,r22,r5
100081c0:	216d883a 	add	r22,r4,r5
100081c4:	b1c04516 	blt	r22,r7,100082dc <_realloc_r+0x1e8>
100081c8:	10c00317 	ldw	r3,12(r2)
100081cc:	10800217 	ldw	r2,8(r2)
100081d0:	81bfff04 	addi	r6,r16,-4
100081d4:	bc400204 	addi	r17,r23,8
100081d8:	10c00315 	stw	r3,12(r2)
100081dc:	18800215 	stw	r2,8(r3)
100081e0:	b9400217 	ldw	r5,8(r23)
100081e4:	b8c00317 	ldw	r3,12(r23)
100081e8:	00800904 	movi	r2,36
100081ec:	28c00315 	stw	r3,12(r5)
100081f0:	19400215 	stw	r5,8(r3)
100081f4:	1180ef36 	bltu	r2,r6,100085b4 <_realloc_r+0x4c0>
100081f8:	008004c4 	movi	r2,19
100081fc:	1180da2e 	bgeu	r2,r6,10008568 <_realloc_r+0x474>
10008200:	98800017 	ldw	r2,0(r19)
10008204:	b8800215 	stw	r2,8(r23)
10008208:	98800117 	ldw	r2,4(r19)
1000820c:	b8800315 	stw	r2,12(r23)
10008210:	008006c4 	movi	r2,27
10008214:	1180fc2e 	bgeu	r2,r6,10008608 <_realloc_r+0x514>
10008218:	98800217 	ldw	r2,8(r19)
1000821c:	b8800415 	stw	r2,16(r23)
10008220:	98800317 	ldw	r2,12(r19)
10008224:	b8800515 	stw	r2,20(r23)
10008228:	00800904 	movi	r2,36
1000822c:	3080421e 	bne	r6,r2,10008338 <_realloc_r+0x244>
10008230:	98800417 	ldw	r2,16(r19)
10008234:	9cc00604 	addi	r19,r19,24
10008238:	b8c00804 	addi	r3,r23,32
1000823c:	b8800615 	stw	r2,24(r23)
10008240:	98bfff17 	ldw	r2,-4(r19)
10008244:	b8800715 	stw	r2,28(r23)
10008248:	00003d06 	br	10008340 <_realloc_r+0x24c>
1000824c:	01c00404 	movi	r7,16
10008250:	3829883a 	mov	r20,r7
10008254:	003fc206 	br	10008160 <__alt_data_end+0xf8008160>
10008258:	9823883a 	mov	r17,r19
1000825c:	850fc83a 	sub	r7,r16,r20
10008260:	008003c4 	movi	r2,15
10008264:	18c0004c 	andi	r3,r3,1
10008268:	11c04336 	bltu	r2,r7,10008378 <_realloc_r+0x284>
1000826c:	1c06b03a 	or	r3,r3,r16
10008270:	a8c00115 	stw	r3,4(r21)
10008274:	ac21883a 	add	r16,r21,r16
10008278:	80c00117 	ldw	r3,4(r16)
1000827c:	18c00054 	ori	r3,r3,1
10008280:	80c00115 	stw	r3,4(r16)
10008284:	9009883a 	mov	r4,r18
10008288:	000e3140 	call	1000e314 <__malloc_unlock>
1000828c:	8805883a 	mov	r2,r17
10008290:	dfc00917 	ldw	ra,36(sp)
10008294:	df000817 	ldw	fp,32(sp)
10008298:	ddc00717 	ldw	r23,28(sp)
1000829c:	dd800617 	ldw	r22,24(sp)
100082a0:	dd400517 	ldw	r21,20(sp)
100082a4:	dd000417 	ldw	r20,16(sp)
100082a8:	dcc00317 	ldw	r19,12(sp)
100082ac:	dc800217 	ldw	r18,8(sp)
100082b0:	dc400117 	ldw	r17,4(sp)
100082b4:	dc000017 	ldw	r16,0(sp)
100082b8:	dec00a04 	addi	sp,sp,40
100082bc:	f800283a 	ret
100082c0:	18c0004c 	andi	r3,r3,1
100082c4:	1800391e 	bne	r3,zero,100083ac <_realloc_r+0x2b8>
100082c8:	9dfffe17 	ldw	r23,-8(r19)
100082cc:	00bfff04 	movi	r2,-4
100082d0:	adefc83a 	sub	r23,r21,r23
100082d4:	b9400117 	ldw	r5,4(r23)
100082d8:	288a703a 	and	r5,r5,r2
100082dc:	2c2d883a 	add	r22,r5,r16
100082e0:	b1c03216 	blt	r22,r7,100083ac <_realloc_r+0x2b8>
100082e4:	b8800317 	ldw	r2,12(r23)
100082e8:	b8c00217 	ldw	r3,8(r23)
100082ec:	81bfff04 	addi	r6,r16,-4
100082f0:	01000904 	movi	r4,36
100082f4:	18800315 	stw	r2,12(r3)
100082f8:	10c00215 	stw	r3,8(r2)
100082fc:	bc400204 	addi	r17,r23,8
10008300:	2180ac36 	bltu	r4,r6,100085b4 <_realloc_r+0x4c0>
10008304:	008004c4 	movi	r2,19
10008308:	1180972e 	bgeu	r2,r6,10008568 <_realloc_r+0x474>
1000830c:	98800017 	ldw	r2,0(r19)
10008310:	b8800215 	stw	r2,8(r23)
10008314:	98800117 	ldw	r2,4(r19)
10008318:	b8800315 	stw	r2,12(r23)
1000831c:	008006c4 	movi	r2,27
10008320:	1180b92e 	bgeu	r2,r6,10008608 <_realloc_r+0x514>
10008324:	98800217 	ldw	r2,8(r19)
10008328:	b8800415 	stw	r2,16(r23)
1000832c:	98800317 	ldw	r2,12(r19)
10008330:	b8800515 	stw	r2,20(r23)
10008334:	313fbe26 	beq	r6,r4,10008230 <__alt_data_end+0xf8008230>
10008338:	b8c00604 	addi	r3,r23,24
1000833c:	9cc00404 	addi	r19,r19,16
10008340:	98800017 	ldw	r2,0(r19)
10008344:	b021883a 	mov	r16,r22
10008348:	b82b883a 	mov	r21,r23
1000834c:	18800015 	stw	r2,0(r3)
10008350:	98800117 	ldw	r2,4(r19)
10008354:	18800115 	stw	r2,4(r3)
10008358:	98800217 	ldw	r2,8(r19)
1000835c:	18800215 	stw	r2,8(r3)
10008360:	b8c00117 	ldw	r3,4(r23)
10008364:	003fbd06 	br	1000825c <__alt_data_end+0xf800825c>
10008368:	00800304 	movi	r2,12
1000836c:	90800015 	stw	r2,0(r18)
10008370:	0005883a 	mov	r2,zero
10008374:	003fc606 	br	10008290 <__alt_data_end+0xf8008290>
10008378:	1d06b03a 	or	r3,r3,r20
1000837c:	ad0b883a 	add	r5,r21,r20
10008380:	a8c00115 	stw	r3,4(r21)
10008384:	38800054 	ori	r2,r7,1
10008388:	28800115 	stw	r2,4(r5)
1000838c:	29cf883a 	add	r7,r5,r7
10008390:	38800117 	ldw	r2,4(r7)
10008394:	9009883a 	mov	r4,r18
10008398:	29400204 	addi	r5,r5,8
1000839c:	10800054 	ori	r2,r2,1
100083a0:	38800115 	stw	r2,4(r7)
100083a4:	00061a80 	call	100061a8 <_free_r>
100083a8:	003fb606 	br	10008284 <__alt_data_end+0xf8008284>
100083ac:	880b883a 	mov	r5,r17
100083b0:	9009883a 	mov	r4,r18
100083b4:	00013d80 	call	100013d8 <_malloc_r>
100083b8:	1023883a 	mov	r17,r2
100083bc:	1000aa26 	beq	r2,zero,10008668 <_realloc_r+0x574>
100083c0:	98ffff17 	ldw	r3,-4(r19)
100083c4:	113ffe04 	addi	r4,r2,-8
100083c8:	00bfff84 	movi	r2,-2
100083cc:	1884703a 	and	r2,r3,r2
100083d0:	a885883a 	add	r2,r21,r2
100083d4:	20808626 	beq	r4,r2,100085f0 <_realloc_r+0x4fc>
100083d8:	81bfff04 	addi	r6,r16,-4
100083dc:	00800904 	movi	r2,36
100083e0:	11807036 	bltu	r2,r6,100085a4 <_realloc_r+0x4b0>
100083e4:	00c004c4 	movi	r3,19
100083e8:	19805636 	bltu	r3,r6,10008544 <_realloc_r+0x450>
100083ec:	8805883a 	mov	r2,r17
100083f0:	9807883a 	mov	r3,r19
100083f4:	19000017 	ldw	r4,0(r3)
100083f8:	11000015 	stw	r4,0(r2)
100083fc:	19000117 	ldw	r4,4(r3)
10008400:	11000115 	stw	r4,4(r2)
10008404:	18c00217 	ldw	r3,8(r3)
10008408:	10c00215 	stw	r3,8(r2)
1000840c:	980b883a 	mov	r5,r19
10008410:	9009883a 	mov	r4,r18
10008414:	00061a80 	call	100061a8 <_free_r>
10008418:	9009883a 	mov	r4,r18
1000841c:	000e3140 	call	1000e314 <__malloc_unlock>
10008420:	8805883a 	mov	r2,r17
10008424:	003f9a06 	br	10008290 <__alt_data_end+0xf8008290>
10008428:	300b883a 	mov	r5,r6
1000842c:	dfc00917 	ldw	ra,36(sp)
10008430:	df000817 	ldw	fp,32(sp)
10008434:	ddc00717 	ldw	r23,28(sp)
10008438:	dd800617 	ldw	r22,24(sp)
1000843c:	dd400517 	ldw	r21,20(sp)
10008440:	dd000417 	ldw	r20,16(sp)
10008444:	dcc00317 	ldw	r19,12(sp)
10008448:	dc800217 	ldw	r18,8(sp)
1000844c:	dc400117 	ldw	r17,4(sp)
10008450:	dc000017 	ldw	r16,0(sp)
10008454:	dec00a04 	addi	sp,sp,40
10008458:	00013d81 	jmpi	100013d8 <_malloc_r>
1000845c:	11400317 	ldw	r5,12(r2)
10008460:	10800217 	ldw	r2,8(r2)
10008464:	9823883a 	mov	r17,r19
10008468:	2021883a 	mov	r16,r4
1000846c:	11400315 	stw	r5,12(r2)
10008470:	28800215 	stw	r2,8(r5)
10008474:	003f7906 	br	1000825c <__alt_data_end+0xf800825c>
10008478:	21000117 	ldw	r4,4(r4)
1000847c:	00bfff04 	movi	r2,-4
10008480:	a1800404 	addi	r6,r20,16
10008484:	2088703a 	and	r4,r4,r2
10008488:	2409883a 	add	r4,r4,r16
1000848c:	2180380e 	bge	r4,r6,10008570 <_realloc_r+0x47c>
10008490:	18c0004c 	andi	r3,r3,1
10008494:	183fc51e 	bne	r3,zero,100083ac <__alt_data_end+0xf80083ac>
10008498:	9dfffe17 	ldw	r23,-8(r19)
1000849c:	adefc83a 	sub	r23,r21,r23
100084a0:	b9400117 	ldw	r5,4(r23)
100084a4:	288a703a 	and	r5,r5,r2
100084a8:	216d883a 	add	r22,r4,r5
100084ac:	b1bf8b16 	blt	r22,r6,100082dc <__alt_data_end+0xf80082dc>
100084b0:	b8800317 	ldw	r2,12(r23)
100084b4:	b8c00217 	ldw	r3,8(r23)
100084b8:	81bfff04 	addi	r6,r16,-4
100084bc:	01000904 	movi	r4,36
100084c0:	18800315 	stw	r2,12(r3)
100084c4:	10c00215 	stw	r3,8(r2)
100084c8:	bc400204 	addi	r17,r23,8
100084cc:	21805a36 	bltu	r4,r6,10008638 <_realloc_r+0x544>
100084d0:	008004c4 	movi	r2,19
100084d4:	1180562e 	bgeu	r2,r6,10008630 <_realloc_r+0x53c>
100084d8:	98800017 	ldw	r2,0(r19)
100084dc:	b8800215 	stw	r2,8(r23)
100084e0:	98800117 	ldw	r2,4(r19)
100084e4:	b8800315 	stw	r2,12(r23)
100084e8:	008006c4 	movi	r2,27
100084ec:	11805636 	bltu	r2,r6,10008648 <_realloc_r+0x554>
100084f0:	b8800404 	addi	r2,r23,16
100084f4:	9cc00204 	addi	r19,r19,8
100084f8:	98c00017 	ldw	r3,0(r19)
100084fc:	10c00015 	stw	r3,0(r2)
10008500:	98c00117 	ldw	r3,4(r19)
10008504:	10c00115 	stw	r3,4(r2)
10008508:	98c00217 	ldw	r3,8(r19)
1000850c:	10c00215 	stw	r3,8(r2)
10008510:	bd07883a 	add	r3,r23,r20
10008514:	b505c83a 	sub	r2,r22,r20
10008518:	e0c00215 	stw	r3,8(fp)
1000851c:	10800054 	ori	r2,r2,1
10008520:	18800115 	stw	r2,4(r3)
10008524:	b8800117 	ldw	r2,4(r23)
10008528:	9009883a 	mov	r4,r18
1000852c:	1080004c 	andi	r2,r2,1
10008530:	a0a8b03a 	or	r20,r20,r2
10008534:	bd000115 	stw	r20,4(r23)
10008538:	000e3140 	call	1000e314 <__malloc_unlock>
1000853c:	8805883a 	mov	r2,r17
10008540:	003f5306 	br	10008290 <__alt_data_end+0xf8008290>
10008544:	98c00017 	ldw	r3,0(r19)
10008548:	88c00015 	stw	r3,0(r17)
1000854c:	98c00117 	ldw	r3,4(r19)
10008550:	88c00115 	stw	r3,4(r17)
10008554:	00c006c4 	movi	r3,27
10008558:	19801d36 	bltu	r3,r6,100085d0 <_realloc_r+0x4dc>
1000855c:	88800204 	addi	r2,r17,8
10008560:	98c00204 	addi	r3,r19,8
10008564:	003fa306 	br	100083f4 <__alt_data_end+0xf80083f4>
10008568:	8807883a 	mov	r3,r17
1000856c:	003f7406 	br	10008340 <__alt_data_end+0xf8008340>
10008570:	ad2b883a 	add	r21,r21,r20
10008574:	2505c83a 	sub	r2,r4,r20
10008578:	e5400215 	stw	r21,8(fp)
1000857c:	10800054 	ori	r2,r2,1
10008580:	a8800115 	stw	r2,4(r21)
10008584:	98bfff17 	ldw	r2,-4(r19)
10008588:	9009883a 	mov	r4,r18
1000858c:	1080004c 	andi	r2,r2,1
10008590:	a0a8b03a 	or	r20,r20,r2
10008594:	9d3fff15 	stw	r20,-4(r19)
10008598:	000e3140 	call	1000e314 <__malloc_unlock>
1000859c:	9805883a 	mov	r2,r19
100085a0:	003f3b06 	br	10008290 <__alt_data_end+0xf8008290>
100085a4:	8809883a 	mov	r4,r17
100085a8:	980b883a 	mov	r5,r19
100085ac:	0006e2c0 	call	10006e2c <memmove>
100085b0:	003f9606 	br	1000840c <__alt_data_end+0xf800840c>
100085b4:	8809883a 	mov	r4,r17
100085b8:	980b883a 	mov	r5,r19
100085bc:	0006e2c0 	call	10006e2c <memmove>
100085c0:	b8c00117 	ldw	r3,4(r23)
100085c4:	b021883a 	mov	r16,r22
100085c8:	b82b883a 	mov	r21,r23
100085cc:	003f2306 	br	1000825c <__alt_data_end+0xf800825c>
100085d0:	98c00217 	ldw	r3,8(r19)
100085d4:	88c00215 	stw	r3,8(r17)
100085d8:	98c00317 	ldw	r3,12(r19)
100085dc:	88c00315 	stw	r3,12(r17)
100085e0:	30800c26 	beq	r6,r2,10008614 <_realloc_r+0x520>
100085e4:	88800404 	addi	r2,r17,16
100085e8:	98c00404 	addi	r3,r19,16
100085ec:	003f8106 	br	100083f4 <__alt_data_end+0xf80083f4>
100085f0:	893fff17 	ldw	r4,-4(r17)
100085f4:	00bfff04 	movi	r2,-4
100085f8:	9823883a 	mov	r17,r19
100085fc:	2084703a 	and	r2,r4,r2
10008600:	80a1883a 	add	r16,r16,r2
10008604:	003f1506 	br	1000825c <__alt_data_end+0xf800825c>
10008608:	b8c00404 	addi	r3,r23,16
1000860c:	9cc00204 	addi	r19,r19,8
10008610:	003f4b06 	br	10008340 <__alt_data_end+0xf8008340>
10008614:	99000417 	ldw	r4,16(r19)
10008618:	88800604 	addi	r2,r17,24
1000861c:	98c00604 	addi	r3,r19,24
10008620:	89000415 	stw	r4,16(r17)
10008624:	99000517 	ldw	r4,20(r19)
10008628:	89000515 	stw	r4,20(r17)
1000862c:	003f7106 	br	100083f4 <__alt_data_end+0xf80083f4>
10008630:	8805883a 	mov	r2,r17
10008634:	003fb006 	br	100084f8 <__alt_data_end+0xf80084f8>
10008638:	8809883a 	mov	r4,r17
1000863c:	980b883a 	mov	r5,r19
10008640:	0006e2c0 	call	10006e2c <memmove>
10008644:	003fb206 	br	10008510 <__alt_data_end+0xf8008510>
10008648:	98800217 	ldw	r2,8(r19)
1000864c:	b8800415 	stw	r2,16(r23)
10008650:	98800317 	ldw	r2,12(r19)
10008654:	b8800515 	stw	r2,20(r23)
10008658:	31000726 	beq	r6,r4,10008678 <_realloc_r+0x584>
1000865c:	b8800604 	addi	r2,r23,24
10008660:	9cc00404 	addi	r19,r19,16
10008664:	003fa406 	br	100084f8 <__alt_data_end+0xf80084f8>
10008668:	9009883a 	mov	r4,r18
1000866c:	000e3140 	call	1000e314 <__malloc_unlock>
10008670:	0005883a 	mov	r2,zero
10008674:	003f0606 	br	10008290 <__alt_data_end+0xf8008290>
10008678:	98c00417 	ldw	r3,16(r19)
1000867c:	9cc00604 	addi	r19,r19,24
10008680:	b8800804 	addi	r2,r23,32
10008684:	b8c00615 	stw	r3,24(r23)
10008688:	98ffff17 	ldw	r3,-4(r19)
1000868c:	b8c00715 	stw	r3,28(r23)
10008690:	003f9906 	br	100084f8 <__alt_data_end+0xf80084f8>

10008694 <__fpclassifyd>:
10008694:	00a00034 	movhi	r2,32768
10008698:	10bfffc4 	addi	r2,r2,-1
1000869c:	2884703a 	and	r2,r5,r2
100086a0:	10000726 	beq	r2,zero,100086c0 <__fpclassifyd+0x2c>
100086a4:	00fffc34 	movhi	r3,65520
100086a8:	019ff834 	movhi	r6,32736
100086ac:	28c7883a 	add	r3,r5,r3
100086b0:	31bfffc4 	addi	r6,r6,-1
100086b4:	30c00536 	bltu	r6,r3,100086cc <__fpclassifyd+0x38>
100086b8:	00800104 	movi	r2,4
100086bc:	f800283a 	ret
100086c0:	2000021e 	bne	r4,zero,100086cc <__fpclassifyd+0x38>
100086c4:	00800084 	movi	r2,2
100086c8:	f800283a 	ret
100086cc:	00dffc34 	movhi	r3,32752
100086d0:	019ff834 	movhi	r6,32736
100086d4:	28cb883a 	add	r5,r5,r3
100086d8:	31bfffc4 	addi	r6,r6,-1
100086dc:	317ff62e 	bgeu	r6,r5,100086b8 <__alt_data_end+0xf80086b8>
100086e0:	01400434 	movhi	r5,16
100086e4:	297fffc4 	addi	r5,r5,-1
100086e8:	28800236 	bltu	r5,r2,100086f4 <__fpclassifyd+0x60>
100086ec:	008000c4 	movi	r2,3
100086f0:	f800283a 	ret
100086f4:	10c00226 	beq	r2,r3,10008700 <__fpclassifyd+0x6c>
100086f8:	0005883a 	mov	r2,zero
100086fc:	f800283a 	ret
10008700:	2005003a 	cmpeq	r2,r4,zero
10008704:	f800283a 	ret

10008708 <__sread>:
10008708:	defffe04 	addi	sp,sp,-8
1000870c:	dc000015 	stw	r16,0(sp)
10008710:	2821883a 	mov	r16,r5
10008714:	2940038f 	ldh	r5,14(r5)
10008718:	dfc00115 	stw	ra,4(sp)
1000871c:	000a3c40 	call	1000a3c4 <_read_r>
10008720:	10000716 	blt	r2,zero,10008740 <__sread+0x38>
10008724:	80c01417 	ldw	r3,80(r16)
10008728:	1887883a 	add	r3,r3,r2
1000872c:	80c01415 	stw	r3,80(r16)
10008730:	dfc00117 	ldw	ra,4(sp)
10008734:	dc000017 	ldw	r16,0(sp)
10008738:	dec00204 	addi	sp,sp,8
1000873c:	f800283a 	ret
10008740:	80c0030b 	ldhu	r3,12(r16)
10008744:	18fbffcc 	andi	r3,r3,61439
10008748:	80c0030d 	sth	r3,12(r16)
1000874c:	dfc00117 	ldw	ra,4(sp)
10008750:	dc000017 	ldw	r16,0(sp)
10008754:	dec00204 	addi	sp,sp,8
10008758:	f800283a 	ret

1000875c <__seofread>:
1000875c:	0005883a 	mov	r2,zero
10008760:	f800283a 	ret

10008764 <__swrite>:
10008764:	2880030b 	ldhu	r2,12(r5)
10008768:	defffb04 	addi	sp,sp,-20
1000876c:	dcc00315 	stw	r19,12(sp)
10008770:	dc800215 	stw	r18,8(sp)
10008774:	dc400115 	stw	r17,4(sp)
10008778:	dc000015 	stw	r16,0(sp)
1000877c:	dfc00415 	stw	ra,16(sp)
10008780:	10c0400c 	andi	r3,r2,256
10008784:	2821883a 	mov	r16,r5
10008788:	2027883a 	mov	r19,r4
1000878c:	3025883a 	mov	r18,r6
10008790:	3823883a 	mov	r17,r7
10008794:	18000526 	beq	r3,zero,100087ac <__swrite+0x48>
10008798:	2940038f 	ldh	r5,14(r5)
1000879c:	000d883a 	mov	r6,zero
100087a0:	01c00084 	movi	r7,2
100087a4:	000a3680 	call	1000a368 <_lseek_r>
100087a8:	8080030b 	ldhu	r2,12(r16)
100087ac:	8140038f 	ldh	r5,14(r16)
100087b0:	10bbffcc 	andi	r2,r2,61439
100087b4:	9809883a 	mov	r4,r19
100087b8:	900d883a 	mov	r6,r18
100087bc:	880f883a 	mov	r7,r17
100087c0:	8080030d 	sth	r2,12(r16)
100087c4:	dfc00417 	ldw	ra,16(sp)
100087c8:	dcc00317 	ldw	r19,12(sp)
100087cc:	dc800217 	ldw	r18,8(sp)
100087d0:	dc400117 	ldw	r17,4(sp)
100087d4:	dc000017 	ldw	r16,0(sp)
100087d8:	dec00504 	addi	sp,sp,20
100087dc:	0009e441 	jmpi	10009e44 <_write_r>

100087e0 <__sseek>:
100087e0:	defffe04 	addi	sp,sp,-8
100087e4:	dc000015 	stw	r16,0(sp)
100087e8:	2821883a 	mov	r16,r5
100087ec:	2940038f 	ldh	r5,14(r5)
100087f0:	dfc00115 	stw	ra,4(sp)
100087f4:	000a3680 	call	1000a368 <_lseek_r>
100087f8:	00ffffc4 	movi	r3,-1
100087fc:	10c00826 	beq	r2,r3,10008820 <__sseek+0x40>
10008800:	80c0030b 	ldhu	r3,12(r16)
10008804:	80801415 	stw	r2,80(r16)
10008808:	18c40014 	ori	r3,r3,4096
1000880c:	80c0030d 	sth	r3,12(r16)
10008810:	dfc00117 	ldw	ra,4(sp)
10008814:	dc000017 	ldw	r16,0(sp)
10008818:	dec00204 	addi	sp,sp,8
1000881c:	f800283a 	ret
10008820:	80c0030b 	ldhu	r3,12(r16)
10008824:	18fbffcc 	andi	r3,r3,61439
10008828:	80c0030d 	sth	r3,12(r16)
1000882c:	dfc00117 	ldw	ra,4(sp)
10008830:	dc000017 	ldw	r16,0(sp)
10008834:	dec00204 	addi	sp,sp,8
10008838:	f800283a 	ret

1000883c <__sclose>:
1000883c:	2940038f 	ldh	r5,14(r5)
10008840:	0009ea01 	jmpi	10009ea0 <_close_r>

10008844 <strcmp>:
10008844:	2144b03a 	or	r2,r4,r5
10008848:	108000cc 	andi	r2,r2,3
1000884c:	1000171e 	bne	r2,zero,100088ac <strcmp+0x68>
10008850:	20800017 	ldw	r2,0(r4)
10008854:	28c00017 	ldw	r3,0(r5)
10008858:	10c0141e 	bne	r2,r3,100088ac <strcmp+0x68>
1000885c:	027fbff4 	movhi	r9,65279
10008860:	4a7fbfc4 	addi	r9,r9,-257
10008864:	0086303a 	nor	r3,zero,r2
10008868:	02202074 	movhi	r8,32897
1000886c:	1245883a 	add	r2,r2,r9
10008870:	42202004 	addi	r8,r8,-32640
10008874:	10c4703a 	and	r2,r2,r3
10008878:	1204703a 	and	r2,r2,r8
1000887c:	10000226 	beq	r2,zero,10008888 <strcmp+0x44>
10008880:	00001706 	br	100088e0 <strcmp+0x9c>
10008884:	1000161e 	bne	r2,zero,100088e0 <strcmp+0x9c>
10008888:	21000104 	addi	r4,r4,4
1000888c:	20c00017 	ldw	r3,0(r4)
10008890:	29400104 	addi	r5,r5,4
10008894:	29800017 	ldw	r6,0(r5)
10008898:	1a4f883a 	add	r7,r3,r9
1000889c:	00c4303a 	nor	r2,zero,r3
100088a0:	3884703a 	and	r2,r7,r2
100088a4:	1204703a 	and	r2,r2,r8
100088a8:	19bff626 	beq	r3,r6,10008884 <__alt_data_end+0xf8008884>
100088ac:	20800007 	ldb	r2,0(r4)
100088b0:	1000051e 	bne	r2,zero,100088c8 <strcmp+0x84>
100088b4:	00000606 	br	100088d0 <strcmp+0x8c>
100088b8:	21000044 	addi	r4,r4,1
100088bc:	20800007 	ldb	r2,0(r4)
100088c0:	29400044 	addi	r5,r5,1
100088c4:	10000226 	beq	r2,zero,100088d0 <strcmp+0x8c>
100088c8:	28c00007 	ldb	r3,0(r5)
100088cc:	10fffa26 	beq	r2,r3,100088b8 <__alt_data_end+0xf80088b8>
100088d0:	20800003 	ldbu	r2,0(r4)
100088d4:	28c00003 	ldbu	r3,0(r5)
100088d8:	10c5c83a 	sub	r2,r2,r3
100088dc:	f800283a 	ret
100088e0:	0005883a 	mov	r2,zero
100088e4:	f800283a 	ret

100088e8 <__sprint_r.part.0>:
100088e8:	28801917 	ldw	r2,100(r5)
100088ec:	defff604 	addi	sp,sp,-40
100088f0:	dd400515 	stw	r21,20(sp)
100088f4:	dcc00315 	stw	r19,12(sp)
100088f8:	dfc00915 	stw	ra,36(sp)
100088fc:	df000815 	stw	fp,32(sp)
10008900:	ddc00715 	stw	r23,28(sp)
10008904:	dd800615 	stw	r22,24(sp)
10008908:	dd000415 	stw	r20,16(sp)
1000890c:	dc800215 	stw	r18,8(sp)
10008910:	dc400115 	stw	r17,4(sp)
10008914:	dc000015 	stw	r16,0(sp)
10008918:	1088000c 	andi	r2,r2,8192
1000891c:	2827883a 	mov	r19,r5
10008920:	302b883a 	mov	r21,r6
10008924:	10002d26 	beq	r2,zero,100089dc <__sprint_r.part.0+0xf4>
10008928:	30800217 	ldw	r2,8(r6)
1000892c:	35800017 	ldw	r22,0(r6)
10008930:	10002826 	beq	r2,zero,100089d4 <__sprint_r.part.0+0xec>
10008934:	2029883a 	mov	r20,r4
10008938:	b5c00104 	addi	r23,r22,4
1000893c:	04bfffc4 	movi	r18,-1
10008940:	bc400017 	ldw	r17,0(r23)
10008944:	b4000017 	ldw	r16,0(r22)
10008948:	0039883a 	mov	fp,zero
1000894c:	8822d0ba 	srli	r17,r17,2
10008950:	04400316 	blt	zero,r17,10008960 <__sprint_r.part.0+0x78>
10008954:	00001706 	br	100089b4 <__sprint_r.part.0+0xcc>
10008958:	84000104 	addi	r16,r16,4
1000895c:	8f001526 	beq	r17,fp,100089b4 <__sprint_r.part.0+0xcc>
10008960:	81400017 	ldw	r5,0(r16)
10008964:	a009883a 	mov	r4,r20
10008968:	980d883a 	mov	r6,r19
1000896c:	000a0e00 	call	1000a0e0 <_fputwc_r>
10008970:	e7000044 	addi	fp,fp,1
10008974:	14bff81e 	bne	r2,r18,10008958 <__alt_data_end+0xf8008958>
10008978:	9005883a 	mov	r2,r18
1000897c:	a8000215 	stw	zero,8(r21)
10008980:	a8000115 	stw	zero,4(r21)
10008984:	dfc00917 	ldw	ra,36(sp)
10008988:	df000817 	ldw	fp,32(sp)
1000898c:	ddc00717 	ldw	r23,28(sp)
10008990:	dd800617 	ldw	r22,24(sp)
10008994:	dd400517 	ldw	r21,20(sp)
10008998:	dd000417 	ldw	r20,16(sp)
1000899c:	dcc00317 	ldw	r19,12(sp)
100089a0:	dc800217 	ldw	r18,8(sp)
100089a4:	dc400117 	ldw	r17,4(sp)
100089a8:	dc000017 	ldw	r16,0(sp)
100089ac:	dec00a04 	addi	sp,sp,40
100089b0:	f800283a 	ret
100089b4:	a8c00217 	ldw	r3,8(r21)
100089b8:	8c63883a 	add	r17,r17,r17
100089bc:	8c63883a 	add	r17,r17,r17
100089c0:	1c45c83a 	sub	r2,r3,r17
100089c4:	a8800215 	stw	r2,8(r21)
100089c8:	b5800204 	addi	r22,r22,8
100089cc:	bdc00204 	addi	r23,r23,8
100089d0:	103fdb1e 	bne	r2,zero,10008940 <__alt_data_end+0xf8008940>
100089d4:	0005883a 	mov	r2,zero
100089d8:	003fe806 	br	1000897c <__alt_data_end+0xf800897c>
100089dc:	00064980 	call	10006498 <__sfvwrite_r>
100089e0:	003fe606 	br	1000897c <__alt_data_end+0xf800897c>

100089e4 <__sprint_r>:
100089e4:	30c00217 	ldw	r3,8(r6)
100089e8:	18000126 	beq	r3,zero,100089f0 <__sprint_r+0xc>
100089ec:	00088e81 	jmpi	100088e8 <__sprint_r.part.0>
100089f0:	30000115 	stw	zero,4(r6)
100089f4:	0005883a 	mov	r2,zero
100089f8:	f800283a 	ret

100089fc <___vfiprintf_internal_r>:
100089fc:	defeca04 	addi	sp,sp,-1240
10008a00:	dcc12f15 	stw	r19,1212(sp)
10008a04:	dfc13515 	stw	ra,1236(sp)
10008a08:	df013415 	stw	fp,1232(sp)
10008a0c:	ddc13315 	stw	r23,1228(sp)
10008a10:	dd813215 	stw	r22,1224(sp)
10008a14:	dd413115 	stw	r21,1220(sp)
10008a18:	dd013015 	stw	r20,1216(sp)
10008a1c:	dc812e15 	stw	r18,1208(sp)
10008a20:	dc412d15 	stw	r17,1204(sp)
10008a24:	dc012c15 	stw	r16,1200(sp)
10008a28:	d9012115 	stw	r4,1156(sp)
10008a2c:	d9412015 	stw	r5,1152(sp)
10008a30:	d9c12315 	stw	r7,1164(sp)
10008a34:	3027883a 	mov	r19,r6
10008a38:	20000226 	beq	r4,zero,10008a44 <___vfiprintf_internal_r+0x48>
10008a3c:	20800e17 	ldw	r2,56(r4)
10008a40:	1000f726 	beq	r2,zero,10008e20 <___vfiprintf_internal_r+0x424>
10008a44:	d8812017 	ldw	r2,1152(sp)
10008a48:	10c0030b 	ldhu	r3,12(r2)
10008a4c:	1908000c 	andi	r4,r3,8192
10008a50:	1805883a 	mov	r2,r3
10008a54:	2000081e 	bne	r4,zero,10008a78 <___vfiprintf_internal_r+0x7c>
10008a58:	d9412017 	ldw	r5,1152(sp)
10008a5c:	18880014 	ori	r2,r3,8192
10008a60:	00f7ffc4 	movi	r3,-8193
10008a64:	29001917 	ldw	r4,100(r5)
10008a68:	2880030d 	sth	r2,12(r5)
10008a6c:	20c8703a 	and	r4,r4,r3
10008a70:	29001915 	stw	r4,100(r5)
10008a74:	1007883a 	mov	r3,r2
10008a78:	1100020c 	andi	r4,r2,8
10008a7c:	2000a726 	beq	r4,zero,10008d1c <___vfiprintf_internal_r+0x320>
10008a80:	d9412017 	ldw	r5,1152(sp)
10008a84:	29000417 	ldw	r4,16(r5)
10008a88:	2000a426 	beq	r4,zero,10008d1c <___vfiprintf_internal_r+0x320>
10008a8c:	1080068c 	andi	r2,r2,26
10008a90:	01000284 	movi	r4,10
10008a94:	1100ab26 	beq	r2,r4,10008d44 <___vfiprintf_internal_r+0x348>
10008a98:	d9010a04 	addi	r4,sp,1064
10008a9c:	d94109c4 	addi	r5,sp,1063
10008aa0:	07040074 	movhi	fp,4097
10008aa4:	04440074 	movhi	r17,4097
10008aa8:	2145c83a 	sub	r2,r4,r5
10008aac:	e703a704 	addi	fp,fp,3740
10008ab0:	8c43a304 	addi	r17,r17,3724
10008ab4:	d9011e15 	stw	r4,1144(sp)
10008ab8:	d9411f15 	stw	r5,1148(sp)
10008abc:	dec11a15 	stw	sp,1128(sp)
10008ac0:	d8011c15 	stw	zero,1136(sp)
10008ac4:	d8011b15 	stw	zero,1132(sp)
10008ac8:	d8012715 	stw	zero,1180(sp)
10008acc:	d8012515 	stw	zero,1172(sp)
10008ad0:	d811883a 	mov	r8,sp
10008ad4:	d8812815 	stw	r2,1184(sp)
10008ad8:	982f883a 	mov	r23,r19
10008adc:	b8800007 	ldb	r2,0(r23)
10008ae0:	1003b026 	beq	r2,zero,100099a4 <___vfiprintf_internal_r+0xfa8>
10008ae4:	01000944 	movi	r4,37
10008ae8:	1103ae26 	beq	r2,r4,100099a4 <___vfiprintf_internal_r+0xfa8>
10008aec:	b805883a 	mov	r2,r23
10008af0:	00000106 	br	10008af8 <___vfiprintf_internal_r+0xfc>
10008af4:	19000326 	beq	r3,r4,10008b04 <___vfiprintf_internal_r+0x108>
10008af8:	10800044 	addi	r2,r2,1
10008afc:	10c00007 	ldb	r3,0(r2)
10008b00:	183ffc1e 	bne	r3,zero,10008af4 <__alt_data_end+0xf8008af4>
10008b04:	15e1c83a 	sub	r16,r2,r23
10008b08:	1029883a 	mov	r20,r2
10008b0c:	80001026 	beq	r16,zero,10008b50 <___vfiprintf_internal_r+0x154>
10008b10:	d8c11c17 	ldw	r3,1136(sp)
10008b14:	d8811b17 	ldw	r2,1132(sp)
10008b18:	45c00015 	stw	r23,0(r8)
10008b1c:	80c7883a 	add	r3,r16,r3
10008b20:	10800044 	addi	r2,r2,1
10008b24:	44000115 	stw	r16,4(r8)
10008b28:	d8c11c15 	stw	r3,1136(sp)
10008b2c:	d8811b15 	stw	r2,1132(sp)
10008b30:	010001c4 	movi	r4,7
10008b34:	2080740e 	bge	r4,r2,10008d08 <___vfiprintf_internal_r+0x30c>
10008b38:	1803a71e 	bne	r3,zero,100099d8 <___vfiprintf_internal_r+0xfdc>
10008b3c:	d8c12517 	ldw	r3,1172(sp)
10008b40:	d8011b15 	stw	zero,1132(sp)
10008b44:	d811883a 	mov	r8,sp
10008b48:	1c07883a 	add	r3,r3,r16
10008b4c:	d8c12515 	stw	r3,1172(sp)
10008b50:	a0800007 	ldb	r2,0(r20)
10008b54:	1002bf26 	beq	r2,zero,10009654 <___vfiprintf_internal_r+0xc58>
10008b58:	a5c00044 	addi	r23,r20,1
10008b5c:	a1800047 	ldb	r6,1(r20)
10008b60:	d8011d85 	stb	zero,1142(sp)
10008b64:	d8012205 	stb	zero,1160(sp)
10008b68:	043fffc4 	movi	r16,-1
10008b6c:	d8012415 	stw	zero,1168(sp)
10008b70:	0025883a 	mov	r18,zero
10008b74:	05001604 	movi	r20,88
10008b78:	05400244 	movi	r21,9
10008b7c:	4027883a 	mov	r19,r8
10008b80:	bdc00044 	addi	r23,r23,1
10008b84:	30bff804 	addi	r2,r6,-32
10008b88:	a0825636 	bltu	r20,r2,100094e4 <___vfiprintf_internal_r+0xae8>
10008b8c:	100490ba 	slli	r2,r2,2
10008b90:	01040074 	movhi	r4,4097
10008b94:	2122e904 	addi	r4,r4,-29788
10008b98:	1105883a 	add	r2,r2,r4
10008b9c:	10800017 	ldw	r2,0(r2)
10008ba0:	1000683a 	jmp	r2
10008ba4:	10009474 	orhi	zero,r2,593
10008ba8:	100094e4 	muli	zero,r2,595
10008bac:	100094e4 	muli	zero,r2,595
10008bb0:	100094d8 	cmpnei	zero,r2,595
10008bb4:	100094e4 	muli	zero,r2,595
10008bb8:	100094e4 	muli	zero,r2,595
10008bbc:	100094e4 	muli	zero,r2,595
10008bc0:	100094e4 	muli	zero,r2,595
10008bc4:	100094e4 	muli	zero,r2,595
10008bc8:	100094e4 	muli	zero,r2,595
10008bcc:	10009264 	muli	zero,r2,585
10008bd0:	1000948c 	andi	zero,r2,594
10008bd4:	100094e4 	muli	zero,r2,595
10008bd8:	10008e38 	rdprs	zero,r2,568
10008bdc:	10009288 	cmpgei	zero,r2,586
10008be0:	100094e4 	muli	zero,r2,595
10008be4:	10008e44 	addi	zero,r2,569
10008be8:	10008e50 	cmplti	zero,r2,569
10008bec:	10008e50 	cmplti	zero,r2,569
10008bf0:	10008e50 	cmplti	zero,r2,569
10008bf4:	10008e50 	cmplti	zero,r2,569
10008bf8:	10008e50 	cmplti	zero,r2,569
10008bfc:	10008e50 	cmplti	zero,r2,569
10008c00:	10008e50 	cmplti	zero,r2,569
10008c04:	10008e50 	cmplti	zero,r2,569
10008c08:	10008e50 	cmplti	zero,r2,569
10008c0c:	100094e4 	muli	zero,r2,595
10008c10:	100094e4 	muli	zero,r2,595
10008c14:	100094e4 	muli	zero,r2,595
10008c18:	100094e4 	muli	zero,r2,595
10008c1c:	100094e4 	muli	zero,r2,595
10008c20:	100094e4 	muli	zero,r2,595
10008c24:	100094e4 	muli	zero,r2,595
10008c28:	100094e4 	muli	zero,r2,595
10008c2c:	100094e4 	muli	zero,r2,595
10008c30:	100094e4 	muli	zero,r2,595
10008c34:	10008e90 	cmplti	zero,r2,570
10008c38:	100094e4 	muli	zero,r2,595
10008c3c:	100094e4 	muli	zero,r2,595
10008c40:	100094e4 	muli	zero,r2,595
10008c44:	100094e4 	muli	zero,r2,595
10008c48:	100094e4 	muli	zero,r2,595
10008c4c:	100094e4 	muli	zero,r2,595
10008c50:	100094e4 	muli	zero,r2,595
10008c54:	100094e4 	muli	zero,r2,595
10008c58:	100094e4 	muli	zero,r2,595
10008c5c:	100094e4 	muli	zero,r2,595
10008c60:	10009180 	call	11000918 <_gp+0xfe5e50>
10008c64:	100094e4 	muli	zero,r2,595
10008c68:	100094e4 	muli	zero,r2,595
10008c6c:	100094e4 	muli	zero,r2,595
10008c70:	100094e4 	muli	zero,r2,595
10008c74:	100094e4 	muli	zero,r2,595
10008c78:	100091c0 	call	1100091c <_gp+0xfe5e54>
10008c7c:	100094e4 	muli	zero,r2,595
10008c80:	100094e4 	muli	zero,r2,595
10008c84:	10009204 	addi	zero,r2,584
10008c88:	100094e4 	muli	zero,r2,595
10008c8c:	100094e4 	muli	zero,r2,595
10008c90:	100094e4 	muli	zero,r2,595
10008c94:	100094e4 	muli	zero,r2,595
10008c98:	100094e4 	muli	zero,r2,595
10008c9c:	100094e4 	muli	zero,r2,595
10008ca0:	100094e4 	muli	zero,r2,595
10008ca4:	100094e4 	muli	zero,r2,595
10008ca8:	100094e4 	muli	zero,r2,595
10008cac:	100094e4 	muli	zero,r2,595
10008cb0:	1000914c 	andi	zero,r2,581
10008cb4:	1000949c 	xori	zero,r2,594
10008cb8:	100094e4 	muli	zero,r2,595
10008cbc:	100094e4 	muli	zero,r2,595
10008cc0:	100094e4 	muli	zero,r2,595
10008cc4:	100092d8 	cmpnei	zero,r2,587
10008cc8:	1000949c 	xori	zero,r2,594
10008ccc:	100094e4 	muli	zero,r2,595
10008cd0:	100094e4 	muli	zero,r2,595
10008cd4:	100091f0 	cmpltui	zero,r2,583
10008cd8:	100094e4 	muli	zero,r2,595
10008cdc:	1000943c 	xorhi	zero,r2,592
10008ce0:	100093c4 	addi	zero,r2,591
10008ce4:	100093f8 	rdprs	zero,r2,591
10008ce8:	100092e4 	muli	zero,r2,587
10008cec:	100094e4 	muli	zero,r2,595
10008cf0:	100092f0 	cmpltui	zero,r2,587
10008cf4:	100094e4 	muli	zero,r2,595
10008cf8:	1000934c 	andi	zero,r2,589
10008cfc:	100094e4 	muli	zero,r2,595
10008d00:	100094e4 	muli	zero,r2,595
10008d04:	10009380 	call	11000938 <_gp+0xfe5e70>
10008d08:	42000204 	addi	r8,r8,8
10008d0c:	d8c12517 	ldw	r3,1172(sp)
10008d10:	1c07883a 	add	r3,r3,r16
10008d14:	d8c12515 	stw	r3,1172(sp)
10008d18:	003f8d06 	br	10008b50 <__alt_data_end+0xf8008b50>
10008d1c:	d9012117 	ldw	r4,1156(sp)
10008d20:	d9412017 	ldw	r5,1152(sp)
10008d24:	0003ff80 	call	10003ff8 <__swsetup_r>
10008d28:	1000301e 	bne	r2,zero,10008dec <___vfiprintf_internal_r+0x3f0>
10008d2c:	d8812017 	ldw	r2,1152(sp)
10008d30:	01000284 	movi	r4,10
10008d34:	10c0030b 	ldhu	r3,12(r2)
10008d38:	1805883a 	mov	r2,r3
10008d3c:	1080068c 	andi	r2,r2,26
10008d40:	113f551e 	bne	r2,r4,10008a98 <__alt_data_end+0xf8008a98>
10008d44:	d9012017 	ldw	r4,1152(sp)
10008d48:	2080038b 	ldhu	r2,14(r4)
10008d4c:	113fffcc 	andi	r4,r2,65535
10008d50:	2120001c 	xori	r4,r4,32768
10008d54:	21200004 	addi	r4,r4,-32768
10008d58:	203f4f16 	blt	r4,zero,10008a98 <__alt_data_end+0xf8008a98>
10008d5c:	d9412017 	ldw	r5,1152(sp)
10008d60:	d9012117 	ldw	r4,1156(sp)
10008d64:	d9c12317 	ldw	r7,1164(sp)
10008d68:	2b001917 	ldw	r12,100(r5)
10008d6c:	2ac00717 	ldw	r11,28(r5)
10008d70:	2a800917 	ldw	r10,36(r5)
10008d74:	02010004 	movi	r8,1024
10008d78:	18ffff4c 	andi	r3,r3,65533
10008d7c:	da0b883a 	add	r5,sp,r8
10008d80:	980d883a 	mov	r6,r19
10008d84:	d8c1030d 	sth	r3,1036(sp)
10008d88:	db011915 	stw	r12,1124(sp)
10008d8c:	d881038d 	sth	r2,1038(sp)
10008d90:	dac10715 	stw	r11,1052(sp)
10008d94:	da810915 	stw	r10,1060(sp)
10008d98:	dec10015 	stw	sp,1024(sp)
10008d9c:	dec10415 	stw	sp,1040(sp)
10008da0:	da010215 	stw	r8,1032(sp)
10008da4:	da010515 	stw	r8,1044(sp)
10008da8:	d8010615 	stw	zero,1048(sp)
10008dac:	00089fc0 	call	100089fc <___vfiprintf_internal_r>
10008db0:	1021883a 	mov	r16,r2
10008db4:	10000416 	blt	r2,zero,10008dc8 <___vfiprintf_internal_r+0x3cc>
10008db8:	d9012117 	ldw	r4,1156(sp)
10008dbc:	d9410004 	addi	r5,sp,1024
10008dc0:	0005a780 	call	10005a78 <_fflush_r>
10008dc4:	10040f1e 	bne	r2,zero,10009e04 <___vfiprintf_internal_r+0x1408>
10008dc8:	d881030b 	ldhu	r2,1036(sp)
10008dcc:	1080100c 	andi	r2,r2,64
10008dd0:	10000426 	beq	r2,zero,10008de4 <___vfiprintf_internal_r+0x3e8>
10008dd4:	d8c12017 	ldw	r3,1152(sp)
10008dd8:	1880030b 	ldhu	r2,12(r3)
10008ddc:	10801014 	ori	r2,r2,64
10008de0:	1880030d 	sth	r2,12(r3)
10008de4:	8005883a 	mov	r2,r16
10008de8:	00000106 	br	10008df0 <___vfiprintf_internal_r+0x3f4>
10008dec:	00bfffc4 	movi	r2,-1
10008df0:	dfc13517 	ldw	ra,1236(sp)
10008df4:	df013417 	ldw	fp,1232(sp)
10008df8:	ddc13317 	ldw	r23,1228(sp)
10008dfc:	dd813217 	ldw	r22,1224(sp)
10008e00:	dd413117 	ldw	r21,1220(sp)
10008e04:	dd013017 	ldw	r20,1216(sp)
10008e08:	dcc12f17 	ldw	r19,1212(sp)
10008e0c:	dc812e17 	ldw	r18,1208(sp)
10008e10:	dc412d17 	ldw	r17,1204(sp)
10008e14:	dc012c17 	ldw	r16,1200(sp)
10008e18:	dec13604 	addi	sp,sp,1240
10008e1c:	f800283a 	ret
10008e20:	00060340 	call	10006034 <__sinit>
10008e24:	003f0706 	br	10008a44 <__alt_data_end+0xf8008a44>
10008e28:	d8c12417 	ldw	r3,1168(sp)
10008e2c:	d8812315 	stw	r2,1164(sp)
10008e30:	00c7c83a 	sub	r3,zero,r3
10008e34:	d8c12415 	stw	r3,1168(sp)
10008e38:	94800114 	ori	r18,r18,4
10008e3c:	b9800007 	ldb	r6,0(r23)
10008e40:	003f4f06 	br	10008b80 <__alt_data_end+0xf8008b80>
10008e44:	94802014 	ori	r18,r18,128
10008e48:	b9800007 	ldb	r6,0(r23)
10008e4c:	003f4c06 	br	10008b80 <__alt_data_end+0xf8008b80>
10008e50:	dc012615 	stw	r16,1176(sp)
10008e54:	d8012415 	stw	zero,1168(sp)
10008e58:	35bff404 	addi	r22,r6,-48
10008e5c:	0009883a 	mov	r4,zero
10008e60:	b821883a 	mov	r16,r23
10008e64:	01400284 	movi	r5,10
10008e68:	00013880 	call	10001388 <__mulsi3>
10008e6c:	81800007 	ldb	r6,0(r16)
10008e70:	1589883a 	add	r4,r2,r22
10008e74:	bdc00044 	addi	r23,r23,1
10008e78:	35bff404 	addi	r22,r6,-48
10008e7c:	b821883a 	mov	r16,r23
10008e80:	adbff82e 	bgeu	r21,r22,10008e64 <__alt_data_end+0xf8008e64>
10008e84:	d9012415 	stw	r4,1168(sp)
10008e88:	dc012617 	ldw	r16,1176(sp)
10008e8c:	003f3d06 	br	10008b84 <__alt_data_end+0xf8008b84>
10008e90:	d8c12203 	ldbu	r3,1160(sp)
10008e94:	94800414 	ori	r18,r18,16
10008e98:	9080080c 	andi	r2,r18,32
10008e9c:	d8c11d85 	stb	r3,1142(sp)
10008ea0:	9811883a 	mov	r8,r19
10008ea4:	d8c12317 	ldw	r3,1164(sp)
10008ea8:	10018226 	beq	r2,zero,100094b4 <___vfiprintf_internal_r+0xab8>
10008eac:	d9012317 	ldw	r4,1164(sp)
10008eb0:	18800117 	ldw	r2,4(r3)
10008eb4:	1cc00017 	ldw	r19,0(r3)
10008eb8:	21000204 	addi	r4,r4,8
10008ebc:	d9012315 	stw	r4,1164(sp)
10008ec0:	102b883a 	mov	r21,r2
10008ec4:	10030016 	blt	r2,zero,10009ac8 <___vfiprintf_internal_r+0x10cc>
10008ec8:	dd811d83 	ldbu	r22,1142(sp)
10008ecc:	8029883a 	mov	r20,r16
10008ed0:	00800044 	movi	r2,1
10008ed4:	9d46b03a 	or	r3,r19,r21
10008ed8:	80000216 	blt	r16,zero,10008ee4 <___vfiprintf_internal_r+0x4e8>
10008edc:	013fdfc4 	movi	r4,-129
10008ee0:	9124703a 	and	r18,r18,r4
10008ee4:	1801b41e 	bne	r3,zero,100095b8 <___vfiprintf_internal_r+0xbbc>
10008ee8:	80028126 	beq	r16,zero,100098f0 <___vfiprintf_internal_r+0xef4>
10008eec:	10803fcc 	andi	r2,r2,255
10008ef0:	00c00044 	movi	r3,1
10008ef4:	10c1d126 	beq	r2,r3,1000963c <___vfiprintf_internal_r+0xc40>
10008ef8:	00c00084 	movi	r3,2
10008efc:	10c28626 	beq	r2,r3,10009918 <___vfiprintf_internal_r+0xf1c>
10008f00:	d8c10a04 	addi	r3,sp,1064
10008f04:	9808d0fa 	srli	r4,r19,3
10008f08:	a80a977a 	slli	r5,r21,29
10008f0c:	a82ad0fa 	srli	r21,r21,3
10008f10:	9cc001cc 	andi	r19,r19,7
10008f14:	98800c04 	addi	r2,r19,48
10008f18:	18ffffc4 	addi	r3,r3,-1
10008f1c:	2926b03a 	or	r19,r5,r4
10008f20:	18800005 	stb	r2,0(r3)
10008f24:	9d48b03a 	or	r4,r19,r21
10008f28:	203ff61e 	bne	r4,zero,10008f04 <__alt_data_end+0xf8008f04>
10008f2c:	9100004c 	andi	r4,r18,1
10008f30:	d8c12215 	stw	r3,1160(sp)
10008f34:	2002b31e 	bne	r4,zero,10009a04 <___vfiprintf_internal_r+0x1008>
10008f38:	d9411e17 	ldw	r5,1144(sp)
10008f3c:	28e9c83a 	sub	r20,r5,r3
10008f40:	a02b883a 	mov	r21,r20
10008f44:	a400010e 	bge	r20,r16,10008f4c <___vfiprintf_internal_r+0x550>
10008f48:	802b883a 	mov	r21,r16
10008f4c:	b5803fcc 	andi	r22,r22,255
10008f50:	b580201c 	xori	r22,r22,128
10008f54:	b5bfe004 	addi	r22,r22,-128
10008f58:	b0000126 	beq	r22,zero,10008f60 <___vfiprintf_internal_r+0x564>
10008f5c:	ad400044 	addi	r21,r21,1
10008f60:	9280008c 	andi	r10,r18,2
10008f64:	50000126 	beq	r10,zero,10008f6c <___vfiprintf_internal_r+0x570>
10008f68:	ad400084 	addi	r21,r21,2
10008f6c:	9580210c 	andi	r22,r18,132
10008f70:	b001751e 	bne	r22,zero,10009548 <___vfiprintf_internal_r+0xb4c>
10008f74:	d9012417 	ldw	r4,1168(sp)
10008f78:	2567c83a 	sub	r19,r4,r21
10008f7c:	04c1720e 	bge	zero,r19,10009548 <___vfiprintf_internal_r+0xb4c>
10008f80:	01c00404 	movi	r7,16
10008f84:	d8c11c17 	ldw	r3,1136(sp)
10008f88:	3cc36b0e 	bge	r7,r19,10009d38 <___vfiprintf_internal_r+0x133c>
10008f8c:	00840074 	movhi	r2,4097
10008f90:	1083a704 	addi	r2,r2,3740
10008f94:	dc012915 	stw	r16,1188(sp)
10008f98:	d9011b17 	ldw	r4,1132(sp)
10008f9c:	9821883a 	mov	r16,r19
10008fa0:	d8812615 	stw	r2,1176(sp)
10008fa4:	030001c4 	movi	r12,7
10008fa8:	5027883a 	mov	r19,r10
10008fac:	00000506 	br	10008fc4 <___vfiprintf_internal_r+0x5c8>
10008fb0:	21400084 	addi	r5,r4,2
10008fb4:	42000204 	addi	r8,r8,8
10008fb8:	1009883a 	mov	r4,r2
10008fbc:	843ffc04 	addi	r16,r16,-16
10008fc0:	3c000d0e 	bge	r7,r16,10008ff8 <___vfiprintf_internal_r+0x5fc>
10008fc4:	18c00404 	addi	r3,r3,16
10008fc8:	20800044 	addi	r2,r4,1
10008fcc:	47000015 	stw	fp,0(r8)
10008fd0:	41c00115 	stw	r7,4(r8)
10008fd4:	d8c11c15 	stw	r3,1136(sp)
10008fd8:	d8811b15 	stw	r2,1132(sp)
10008fdc:	60bff40e 	bge	r12,r2,10008fb0 <__alt_data_end+0xf8008fb0>
10008fe0:	18014b1e 	bne	r3,zero,10009510 <___vfiprintf_internal_r+0xb14>
10008fe4:	843ffc04 	addi	r16,r16,-16
10008fe8:	0009883a 	mov	r4,zero
10008fec:	01400044 	movi	r5,1
10008ff0:	d811883a 	mov	r8,sp
10008ff4:	3c3ff316 	blt	r7,r16,10008fc4 <__alt_data_end+0xf8008fc4>
10008ff8:	9815883a 	mov	r10,r19
10008ffc:	8027883a 	mov	r19,r16
10009000:	dc012917 	ldw	r16,1188(sp)
10009004:	d9012617 	ldw	r4,1176(sp)
10009008:	98c7883a 	add	r3,r19,r3
1000900c:	44c00115 	stw	r19,4(r8)
10009010:	41000015 	stw	r4,0(r8)
10009014:	d8c11c15 	stw	r3,1136(sp)
10009018:	d9411b15 	stw	r5,1132(sp)
1000901c:	008001c4 	movi	r2,7
10009020:	11425116 	blt	r2,r5,10009968 <___vfiprintf_internal_r+0xf6c>
10009024:	d9011d87 	ldb	r4,1142(sp)
10009028:	42000204 	addi	r8,r8,8
1000902c:	28800044 	addi	r2,r5,1
10009030:	20014a1e 	bne	r4,zero,1000955c <___vfiprintf_internal_r+0xb60>
10009034:	50000c26 	beq	r10,zero,10009068 <___vfiprintf_internal_r+0x66c>
10009038:	d9011d04 	addi	r4,sp,1140
1000903c:	18c00084 	addi	r3,r3,2
10009040:	41000015 	stw	r4,0(r8)
10009044:	01000084 	movi	r4,2
10009048:	41000115 	stw	r4,4(r8)
1000904c:	d8c11c15 	stw	r3,1136(sp)
10009050:	d8811b15 	stw	r2,1132(sp)
10009054:	010001c4 	movi	r4,7
10009058:	20822016 	blt	r4,r2,100098dc <___vfiprintf_internal_r+0xee0>
1000905c:	100b883a 	mov	r5,r2
10009060:	42000204 	addi	r8,r8,8
10009064:	10800044 	addi	r2,r2,1
10009068:	01002004 	movi	r4,128
1000906c:	b101de26 	beq	r22,r4,100097e8 <___vfiprintf_internal_r+0xdec>
10009070:	8521c83a 	sub	r16,r16,r20
10009074:	0400230e 	bge	zero,r16,10009104 <___vfiprintf_internal_r+0x708>
10009078:	04c00404 	movi	r19,16
1000907c:	9c030d0e 	bge	r19,r16,10009cb4 <___vfiprintf_internal_r+0x12b8>
10009080:	00840074 	movhi	r2,4097
10009084:	1083a304 	addi	r2,r2,3724
10009088:	d8812615 	stw	r2,1176(sp)
1000908c:	058001c4 	movi	r22,7
10009090:	00000506 	br	100090a8 <___vfiprintf_internal_r+0x6ac>
10009094:	28800084 	addi	r2,r5,2
10009098:	42000204 	addi	r8,r8,8
1000909c:	200b883a 	mov	r5,r4
100090a0:	843ffc04 	addi	r16,r16,-16
100090a4:	9c000d0e 	bge	r19,r16,100090dc <___vfiprintf_internal_r+0x6e0>
100090a8:	18c00404 	addi	r3,r3,16
100090ac:	29000044 	addi	r4,r5,1
100090b0:	44400015 	stw	r17,0(r8)
100090b4:	44c00115 	stw	r19,4(r8)
100090b8:	d8c11c15 	stw	r3,1136(sp)
100090bc:	d9011b15 	stw	r4,1132(sp)
100090c0:	b13ff40e 	bge	r22,r4,10009094 <__alt_data_end+0xf8009094>
100090c4:	1801321e 	bne	r3,zero,10009590 <___vfiprintf_internal_r+0xb94>
100090c8:	843ffc04 	addi	r16,r16,-16
100090cc:	000b883a 	mov	r5,zero
100090d0:	00800044 	movi	r2,1
100090d4:	d811883a 	mov	r8,sp
100090d8:	9c3ff316 	blt	r19,r16,100090a8 <__alt_data_end+0xf80090a8>
100090dc:	d9012617 	ldw	r4,1176(sp)
100090e0:	1c07883a 	add	r3,r3,r16
100090e4:	44000115 	stw	r16,4(r8)
100090e8:	41000015 	stw	r4,0(r8)
100090ec:	d8c11c15 	stw	r3,1136(sp)
100090f0:	d8811b15 	stw	r2,1132(sp)
100090f4:	010001c4 	movi	r4,7
100090f8:	20816216 	blt	r4,r2,10009684 <___vfiprintf_internal_r+0xc88>
100090fc:	42000204 	addi	r8,r8,8
10009100:	10800044 	addi	r2,r2,1
10009104:	d9012217 	ldw	r4,1160(sp)
10009108:	1d07883a 	add	r3,r3,r20
1000910c:	45000115 	stw	r20,4(r8)
10009110:	41000015 	stw	r4,0(r8)
10009114:	d8c11c15 	stw	r3,1136(sp)
10009118:	d8811b15 	stw	r2,1132(sp)
1000911c:	010001c4 	movi	r4,7
10009120:	2081610e 	bge	r4,r2,100096a8 <___vfiprintf_internal_r+0xcac>
10009124:	1802211e 	bne	r3,zero,100099ac <___vfiprintf_internal_r+0xfb0>
10009128:	d8011b15 	stw	zero,1132(sp)
1000912c:	9480010c 	andi	r18,r18,4
10009130:	9002171e 	bne	r18,zero,10009990 <___vfiprintf_internal_r+0xf94>
10009134:	d9412417 	ldw	r5,1168(sp)
10009138:	a9433716 	blt	r21,r5,10009e18 <___vfiprintf_internal_r+0x141c>
1000913c:	d8812517 	ldw	r2,1172(sp)
10009140:	1545883a 	add	r2,r2,r21
10009144:	d8812515 	stw	r2,1172(sp)
10009148:	00019a06 	br	100097b4 <___vfiprintf_internal_r+0xdb8>
1000914c:	d8c12317 	ldw	r3,1164(sp)
10009150:	05400044 	movi	r21,1
10009154:	9811883a 	mov	r8,r19
10009158:	18800017 	ldw	r2,0(r3)
1000915c:	18c00104 	addi	r3,r3,4
10009160:	d8c12315 	stw	r3,1164(sp)
10009164:	d8c10004 	addi	r3,sp,1024
10009168:	d8011d85 	stb	zero,1142(sp)
1000916c:	d8810005 	stb	r2,1024(sp)
10009170:	a829883a 	mov	r20,r21
10009174:	d8c12215 	stw	r3,1160(sp)
10009178:	0021883a 	mov	r16,zero
1000917c:	003f7806 	br	10008f60 <__alt_data_end+0xf8008f60>
10009180:	94800414 	ori	r18,r18,16
10009184:	9080080c 	andi	r2,r18,32
10009188:	9811883a 	mov	r8,r19
1000918c:	10009026 	beq	r2,zero,100093d0 <___vfiprintf_internal_r+0x9d4>
10009190:	d8812317 	ldw	r2,1164(sp)
10009194:	d8c12317 	ldw	r3,1164(sp)
10009198:	14c00017 	ldw	r19,0(r2)
1000919c:	15400117 	ldw	r21,4(r2)
100091a0:	18c00204 	addi	r3,r3,8
100091a4:	d8c12315 	stw	r3,1164(sp)
100091a8:	0005883a 	mov	r2,zero
100091ac:	9d46b03a 	or	r3,r19,r21
100091b0:	d8011d85 	stb	zero,1142(sp)
100091b4:	8029883a 	mov	r20,r16
100091b8:	002d883a 	mov	r22,zero
100091bc:	003f4606 	br	10008ed8 <__alt_data_end+0xf8008ed8>
100091c0:	94800414 	ori	r18,r18,16
100091c4:	9080080c 	andi	r2,r18,32
100091c8:	9811883a 	mov	r8,r19
100091cc:	10006226 	beq	r2,zero,10009358 <___vfiprintf_internal_r+0x95c>
100091d0:	d9012317 	ldw	r4,1164(sp)
100091d4:	00800044 	movi	r2,1
100091d8:	24c00017 	ldw	r19,0(r4)
100091dc:	25400117 	ldw	r21,4(r4)
100091e0:	21000204 	addi	r4,r4,8
100091e4:	d9012315 	stw	r4,1164(sp)
100091e8:	9d46b03a 	or	r3,r19,r21
100091ec:	003ff006 	br	100091b0 <__alt_data_end+0xf80091b0>
100091f0:	b9800007 	ldb	r6,0(r23)
100091f4:	00801b04 	movi	r2,108
100091f8:	3082b226 	beq	r6,r2,10009cc4 <___vfiprintf_internal_r+0x12c8>
100091fc:	94800414 	ori	r18,r18,16
10009200:	003e5f06 	br	10008b80 <__alt_data_end+0xf8008b80>
10009204:	d8c12203 	ldbu	r3,1160(sp)
10009208:	01040074 	movhi	r4,4097
1000920c:	21033d04 	addi	r4,r4,3316
10009210:	d8c11d85 	stb	r3,1142(sp)
10009214:	d9012715 	stw	r4,1180(sp)
10009218:	90c0080c 	andi	r3,r18,32
1000921c:	9811883a 	mov	r8,r19
10009220:	d8812317 	ldw	r2,1164(sp)
10009224:	18005f26 	beq	r3,zero,100093a4 <___vfiprintf_internal_r+0x9a8>
10009228:	d9012317 	ldw	r4,1164(sp)
1000922c:	14c00017 	ldw	r19,0(r2)
10009230:	15400117 	ldw	r21,4(r2)
10009234:	21000204 	addi	r4,r4,8
10009238:	d9012315 	stw	r4,1164(sp)
1000923c:	9080004c 	andi	r2,r18,1
10009240:	1001e226 	beq	r2,zero,100099cc <___vfiprintf_internal_r+0xfd0>
10009244:	9d46b03a 	or	r3,r19,r21
10009248:	18024e26 	beq	r3,zero,10009b84 <___vfiprintf_internal_r+0x1188>
1000924c:	00800c04 	movi	r2,48
10009250:	d8811d05 	stb	r2,1140(sp)
10009254:	d9811d45 	stb	r6,1141(sp)
10009258:	94800094 	ori	r18,r18,2
1000925c:	00800084 	movi	r2,2
10009260:	003fd306 	br	100091b0 <__alt_data_end+0xf80091b0>
10009264:	d9012317 	ldw	r4,1164(sp)
10009268:	d9412317 	ldw	r5,1164(sp)
1000926c:	21000017 	ldw	r4,0(r4)
10009270:	28800104 	addi	r2,r5,4
10009274:	d9012415 	stw	r4,1168(sp)
10009278:	203eeb16 	blt	r4,zero,10008e28 <__alt_data_end+0xf8008e28>
1000927c:	d8812315 	stw	r2,1164(sp)
10009280:	b9800007 	ldb	r6,0(r23)
10009284:	003e3e06 	br	10008b80 <__alt_data_end+0xf8008b80>
10009288:	b9800007 	ldb	r6,0(r23)
1000928c:	01000a84 	movi	r4,42
10009290:	b8800044 	addi	r2,r23,1
10009294:	3102d226 	beq	r6,r4,10009de0 <___vfiprintf_internal_r+0x13e4>
10009298:	35bff404 	addi	r22,r6,-48
1000929c:	102f883a 	mov	r23,r2
100092a0:	0021883a 	mov	r16,zero
100092a4:	adbe3736 	bltu	r21,r22,10008b84 <__alt_data_end+0xf8008b84>
100092a8:	0009883a 	mov	r4,zero
100092ac:	01400284 	movi	r5,10
100092b0:	00013880 	call	10001388 <__mulsi3>
100092b4:	b9800007 	ldb	r6,0(r23)
100092b8:	b089883a 	add	r4,r22,r2
100092bc:	bdc00044 	addi	r23,r23,1
100092c0:	35bff404 	addi	r22,r6,-48
100092c4:	adbff92e 	bgeu	r21,r22,100092ac <__alt_data_end+0xf80092ac>
100092c8:	2021883a 	mov	r16,r4
100092cc:	203e2d0e 	bge	r4,zero,10008b84 <__alt_data_end+0xf8008b84>
100092d0:	043fffc4 	movi	r16,-1
100092d4:	003e2b06 	br	10008b84 <__alt_data_end+0xf8008b84>
100092d8:	94801014 	ori	r18,r18,64
100092dc:	b9800007 	ldb	r6,0(r23)
100092e0:	003e2706 	br	10008b80 <__alt_data_end+0xf8008b80>
100092e4:	94800814 	ori	r18,r18,32
100092e8:	b9800007 	ldb	r6,0(r23)
100092ec:	003e2406 	br	10008b80 <__alt_data_end+0xf8008b80>
100092f0:	d9412317 	ldw	r5,1164(sp)
100092f4:	d8812317 	ldw	r2,1164(sp)
100092f8:	d8011d85 	stb	zero,1142(sp)
100092fc:	29400017 	ldw	r5,0(r5)
10009300:	9811883a 	mov	r8,r19
10009304:	14c00104 	addi	r19,r2,4
10009308:	d9412215 	stw	r5,1160(sp)
1000930c:	28029026 	beq	r5,zero,10009d50 <___vfiprintf_internal_r+0x1354>
10009310:	d9012217 	ldw	r4,1160(sp)
10009314:	80027616 	blt	r16,zero,10009cf0 <___vfiprintf_internal_r+0x12f4>
10009318:	000b883a 	mov	r5,zero
1000931c:	800d883a 	mov	r6,r16
10009320:	da012a15 	stw	r8,1192(sp)
10009324:	0006d440 	call	10006d44 <memchr>
10009328:	da012a17 	ldw	r8,1192(sp)
1000932c:	1002a026 	beq	r2,zero,10009db0 <___vfiprintf_internal_r+0x13b4>
10009330:	d8c12217 	ldw	r3,1160(sp)
10009334:	10e9c83a 	sub	r20,r2,r3
10009338:	85023816 	blt	r16,r20,10009c1c <___vfiprintf_internal_r+0x1220>
1000933c:	dd811d83 	ldbu	r22,1142(sp)
10009340:	dcc12315 	stw	r19,1164(sp)
10009344:	0021883a 	mov	r16,zero
10009348:	003efd06 	br	10008f40 <__alt_data_end+0xf8008f40>
1000934c:	9080080c 	andi	r2,r18,32
10009350:	9811883a 	mov	r8,r19
10009354:	103f9e1e 	bne	r2,zero,100091d0 <__alt_data_end+0xf80091d0>
10009358:	9080040c 	andi	r2,r18,16
1000935c:	10021726 	beq	r2,zero,10009bbc <___vfiprintf_internal_r+0x11c0>
10009360:	d9412317 	ldw	r5,1164(sp)
10009364:	002b883a 	mov	r21,zero
10009368:	00800044 	movi	r2,1
1000936c:	2cc00017 	ldw	r19,0(r5)
10009370:	29400104 	addi	r5,r5,4
10009374:	d9412315 	stw	r5,1164(sp)
10009378:	9807883a 	mov	r3,r19
1000937c:	003f8c06 	br	100091b0 <__alt_data_end+0xf80091b0>
10009380:	d8c12203 	ldbu	r3,1160(sp)
10009384:	01040074 	movhi	r4,4097
10009388:	21034204 	addi	r4,r4,3336
1000938c:	d8c11d85 	stb	r3,1142(sp)
10009390:	d9012715 	stw	r4,1180(sp)
10009394:	90c0080c 	andi	r3,r18,32
10009398:	9811883a 	mov	r8,r19
1000939c:	d8812317 	ldw	r2,1164(sp)
100093a0:	183fa11e 	bne	r3,zero,10009228 <__alt_data_end+0xf8009228>
100093a4:	90c0040c 	andi	r3,r18,16
100093a8:	1801e526 	beq	r3,zero,10009b40 <___vfiprintf_internal_r+0x1144>
100093ac:	d9412317 	ldw	r5,1164(sp)
100093b0:	14c00017 	ldw	r19,0(r2)
100093b4:	002b883a 	mov	r21,zero
100093b8:	29400104 	addi	r5,r5,4
100093bc:	d9412315 	stw	r5,1164(sp)
100093c0:	003f9e06 	br	1000923c <__alt_data_end+0xf800923c>
100093c4:	9080080c 	andi	r2,r18,32
100093c8:	9811883a 	mov	r8,r19
100093cc:	103f701e 	bne	r2,zero,10009190 <__alt_data_end+0xf8009190>
100093d0:	9080040c 	andi	r2,r18,16
100093d4:	1001ef26 	beq	r2,zero,10009b94 <___vfiprintf_internal_r+0x1198>
100093d8:	d9012317 	ldw	r4,1164(sp)
100093dc:	002b883a 	mov	r21,zero
100093e0:	0005883a 	mov	r2,zero
100093e4:	24c00017 	ldw	r19,0(r4)
100093e8:	21000104 	addi	r4,r4,4
100093ec:	d9012315 	stw	r4,1164(sp)
100093f0:	9807883a 	mov	r3,r19
100093f4:	003f6e06 	br	100091b0 <__alt_data_end+0xf80091b0>
100093f8:	d8c12317 	ldw	r3,1164(sp)
100093fc:	9811883a 	mov	r8,r19
10009400:	00800c04 	movi	r2,48
10009404:	1cc00017 	ldw	r19,0(r3)
10009408:	01040074 	movhi	r4,4097
1000940c:	18c00104 	addi	r3,r3,4
10009410:	d8811d05 	stb	r2,1140(sp)
10009414:	21034204 	addi	r4,r4,3336
10009418:	00801e04 	movi	r2,120
1000941c:	d8811d45 	stb	r2,1141(sp)
10009420:	d8c12315 	stw	r3,1164(sp)
10009424:	002b883a 	mov	r21,zero
10009428:	94800094 	ori	r18,r18,2
1000942c:	d9012715 	stw	r4,1180(sp)
10009430:	00800084 	movi	r2,2
10009434:	9807883a 	mov	r3,r19
10009438:	003f5d06 	br	100091b0 <__alt_data_end+0xf80091b0>
1000943c:	d8c12203 	ldbu	r3,1160(sp)
10009440:	9080080c 	andi	r2,r18,32
10009444:	9811883a 	mov	r8,r19
10009448:	d8c11d85 	stb	r3,1142(sp)
1000944c:	1001b126 	beq	r2,zero,10009b14 <___vfiprintf_internal_r+0x1118>
10009450:	d9012317 	ldw	r4,1164(sp)
10009454:	d9412517 	ldw	r5,1172(sp)
10009458:	20800017 	ldw	r2,0(r4)
1000945c:	2807d7fa 	srai	r3,r5,31
10009460:	21000104 	addi	r4,r4,4
10009464:	d9012315 	stw	r4,1164(sp)
10009468:	11400015 	stw	r5,0(r2)
1000946c:	10c00115 	stw	r3,4(r2)
10009470:	003d9a06 	br	10008adc <__alt_data_end+0xf8008adc>
10009474:	d8812207 	ldb	r2,1160(sp)
10009478:	1001c41e 	bne	r2,zero,10009b8c <___vfiprintf_internal_r+0x1190>
1000947c:	00c00804 	movi	r3,32
10009480:	d8c12205 	stb	r3,1160(sp)
10009484:	b9800007 	ldb	r6,0(r23)
10009488:	003dbd06 	br	10008b80 <__alt_data_end+0xf8008b80>
1000948c:	00c00ac4 	movi	r3,43
10009490:	d8c12205 	stb	r3,1160(sp)
10009494:	b9800007 	ldb	r6,0(r23)
10009498:	003db906 	br	10008b80 <__alt_data_end+0xf8008b80>
1000949c:	d8c12203 	ldbu	r3,1160(sp)
100094a0:	9080080c 	andi	r2,r18,32
100094a4:	9811883a 	mov	r8,r19
100094a8:	d8c11d85 	stb	r3,1142(sp)
100094ac:	d8c12317 	ldw	r3,1164(sp)
100094b0:	103e7e1e 	bne	r2,zero,10008eac <__alt_data_end+0xf8008eac>
100094b4:	9080040c 	andi	r2,r18,16
100094b8:	1001a926 	beq	r2,zero,10009b60 <___vfiprintf_internal_r+0x1164>
100094bc:	1cc00017 	ldw	r19,0(r3)
100094c0:	d9412317 	ldw	r5,1164(sp)
100094c4:	982bd7fa 	srai	r21,r19,31
100094c8:	29400104 	addi	r5,r5,4
100094cc:	d9412315 	stw	r5,1164(sp)
100094d0:	a805883a 	mov	r2,r21
100094d4:	003e7b06 	br	10008ec4 <__alt_data_end+0xf8008ec4>
100094d8:	94800054 	ori	r18,r18,1
100094dc:	b9800007 	ldb	r6,0(r23)
100094e0:	003da706 	br	10008b80 <__alt_data_end+0xf8008b80>
100094e4:	d8c12203 	ldbu	r3,1160(sp)
100094e8:	9811883a 	mov	r8,r19
100094ec:	d8c11d85 	stb	r3,1142(sp)
100094f0:	30005826 	beq	r6,zero,10009654 <___vfiprintf_internal_r+0xc58>
100094f4:	05400044 	movi	r21,1
100094f8:	d8c10004 	addi	r3,sp,1024
100094fc:	d9810005 	stb	r6,1024(sp)
10009500:	d8011d85 	stb	zero,1142(sp)
10009504:	a829883a 	mov	r20,r21
10009508:	d8c12215 	stw	r3,1160(sp)
1000950c:	003f1a06 	br	10009178 <__alt_data_end+0xf8009178>
10009510:	d9012117 	ldw	r4,1156(sp)
10009514:	d9412017 	ldw	r5,1152(sp)
10009518:	d9811a04 	addi	r6,sp,1128
1000951c:	d9c12a15 	stw	r7,1192(sp)
10009520:	db012b15 	stw	r12,1196(sp)
10009524:	00088e80 	call	100088e8 <__sprint_r.part.0>
10009528:	d9c12a17 	ldw	r7,1192(sp)
1000952c:	db012b17 	ldw	r12,1196(sp)
10009530:	10004e1e 	bne	r2,zero,1000966c <___vfiprintf_internal_r+0xc70>
10009534:	d9011b17 	ldw	r4,1132(sp)
10009538:	d8c11c17 	ldw	r3,1136(sp)
1000953c:	d811883a 	mov	r8,sp
10009540:	21400044 	addi	r5,r4,1
10009544:	003e9d06 	br	10008fbc <__alt_data_end+0xf8008fbc>
10009548:	d9411b17 	ldw	r5,1132(sp)
1000954c:	d8c11c17 	ldw	r3,1136(sp)
10009550:	28800044 	addi	r2,r5,1
10009554:	d9011d87 	ldb	r4,1142(sp)
10009558:	203eb626 	beq	r4,zero,10009034 <__alt_data_end+0xf8009034>
1000955c:	01000044 	movi	r4,1
10009560:	d9411d84 	addi	r5,sp,1142
10009564:	1907883a 	add	r3,r3,r4
10009568:	41400015 	stw	r5,0(r8)
1000956c:	41000115 	stw	r4,4(r8)
10009570:	d8c11c15 	stw	r3,1136(sp)
10009574:	d8811b15 	stw	r2,1132(sp)
10009578:	014001c4 	movi	r5,7
1000957c:	2880ce16 	blt	r5,r2,100098b8 <___vfiprintf_internal_r+0xebc>
10009580:	100b883a 	mov	r5,r2
10009584:	42000204 	addi	r8,r8,8
10009588:	10800044 	addi	r2,r2,1
1000958c:	003ea906 	br	10009034 <__alt_data_end+0xf8009034>
10009590:	d9012117 	ldw	r4,1156(sp)
10009594:	d9412017 	ldw	r5,1152(sp)
10009598:	d9811a04 	addi	r6,sp,1128
1000959c:	00088e80 	call	100088e8 <__sprint_r.part.0>
100095a0:	1000321e 	bne	r2,zero,1000966c <___vfiprintf_internal_r+0xc70>
100095a4:	d9411b17 	ldw	r5,1132(sp)
100095a8:	d8c11c17 	ldw	r3,1136(sp)
100095ac:	d811883a 	mov	r8,sp
100095b0:	28800044 	addi	r2,r5,1
100095b4:	003eba06 	br	100090a0 <__alt_data_end+0xf80090a0>
100095b8:	10803fcc 	andi	r2,r2,255
100095bc:	00c00044 	movi	r3,1
100095c0:	10fe4d1e 	bne	r2,r3,10008ef8 <__alt_data_end+0xf8008ef8>
100095c4:	a800021e 	bne	r21,zero,100095d0 <___vfiprintf_internal_r+0xbd4>
100095c8:	00800244 	movi	r2,9
100095cc:	14c01b2e 	bgeu	r2,r19,1000963c <___vfiprintf_internal_r+0xc40>
100095d0:	dc012215 	stw	r16,1160(sp)
100095d4:	dd010a04 	addi	r20,sp,1064
100095d8:	a821883a 	mov	r16,r21
100095dc:	402b883a 	mov	r21,r8
100095e0:	9809883a 	mov	r4,r19
100095e4:	800b883a 	mov	r5,r16
100095e8:	01800284 	movi	r6,10
100095ec:	000f883a 	mov	r7,zero
100095f0:	000add00 	call	1000add0 <__umoddi3>
100095f4:	10800c04 	addi	r2,r2,48
100095f8:	a53fffc4 	addi	r20,r20,-1
100095fc:	9809883a 	mov	r4,r19
10009600:	800b883a 	mov	r5,r16
10009604:	01800284 	movi	r6,10
10009608:	000f883a 	mov	r7,zero
1000960c:	a0800005 	stb	r2,0(r20)
10009610:	000a7900 	call	1000a790 <__udivdi3>
10009614:	1027883a 	mov	r19,r2
10009618:	10c4b03a 	or	r2,r2,r3
1000961c:	1821883a 	mov	r16,r3
10009620:	103fef1e 	bne	r2,zero,100095e0 <__alt_data_end+0xf80095e0>
10009624:	d9011e17 	ldw	r4,1144(sp)
10009628:	dc012217 	ldw	r16,1160(sp)
1000962c:	a811883a 	mov	r8,r21
10009630:	dd012215 	stw	r20,1160(sp)
10009634:	2529c83a 	sub	r20,r4,r20
10009638:	003e4106 	br	10008f40 <__alt_data_end+0xf8008f40>
1000963c:	9cc00c04 	addi	r19,r19,48
10009640:	d8c109c4 	addi	r3,sp,1063
10009644:	dcc109c5 	stb	r19,1063(sp)
10009648:	dd012817 	ldw	r20,1184(sp)
1000964c:	d8c12215 	stw	r3,1160(sp)
10009650:	003e3b06 	br	10008f40 <__alt_data_end+0xf8008f40>
10009654:	d8811c17 	ldw	r2,1136(sp)
10009658:	10000426 	beq	r2,zero,1000966c <___vfiprintf_internal_r+0xc70>
1000965c:	d9012117 	ldw	r4,1156(sp)
10009660:	d9412017 	ldw	r5,1152(sp)
10009664:	d9811a04 	addi	r6,sp,1128
10009668:	00088e80 	call	100088e8 <__sprint_r.part.0>
1000966c:	d9412017 	ldw	r5,1152(sp)
10009670:	2880030b 	ldhu	r2,12(r5)
10009674:	1080100c 	andi	r2,r2,64
10009678:	103ddc1e 	bne	r2,zero,10008dec <__alt_data_end+0xf8008dec>
1000967c:	d8812517 	ldw	r2,1172(sp)
10009680:	003ddb06 	br	10008df0 <__alt_data_end+0xf8008df0>
10009684:	1801061e 	bne	r3,zero,10009aa0 <___vfiprintf_internal_r+0x10a4>
10009688:	d8c12217 	ldw	r3,1160(sp)
1000968c:	00800044 	movi	r2,1
10009690:	dd000115 	stw	r20,4(sp)
10009694:	d8c00015 	stw	r3,0(sp)
10009698:	dd011c15 	stw	r20,1136(sp)
1000969c:	d8811b15 	stw	r2,1132(sp)
100096a0:	a007883a 	mov	r3,r20
100096a4:	d811883a 	mov	r8,sp
100096a8:	42000204 	addi	r8,r8,8
100096ac:	9480010c 	andi	r18,r18,4
100096b0:	90003426 	beq	r18,zero,10009784 <___vfiprintf_internal_r+0xd88>
100096b4:	d9412417 	ldw	r5,1168(sp)
100096b8:	2d65c83a 	sub	r18,r5,r21
100096bc:	0480310e 	bge	zero,r18,10009784 <___vfiprintf_internal_r+0xd88>
100096c0:	04000404 	movi	r16,16
100096c4:	8481ad0e 	bge	r16,r18,10009d7c <___vfiprintf_internal_r+0x1380>
100096c8:	01440074 	movhi	r5,4097
100096cc:	2943a704 	addi	r5,r5,3740
100096d0:	d9011b17 	ldw	r4,1132(sp)
100096d4:	d9412615 	stw	r5,1176(sp)
100096d8:	04c001c4 	movi	r19,7
100096dc:	dd012117 	ldw	r20,1156(sp)
100096e0:	dd812017 	ldw	r22,1152(sp)
100096e4:	00000506 	br	100096fc <___vfiprintf_internal_r+0xd00>
100096e8:	21400084 	addi	r5,r4,2
100096ec:	42000204 	addi	r8,r8,8
100096f0:	1009883a 	mov	r4,r2
100096f4:	94bffc04 	addi	r18,r18,-16
100096f8:	84800d0e 	bge	r16,r18,10009730 <___vfiprintf_internal_r+0xd34>
100096fc:	18c00404 	addi	r3,r3,16
10009700:	20800044 	addi	r2,r4,1
10009704:	47000015 	stw	fp,0(r8)
10009708:	44000115 	stw	r16,4(r8)
1000970c:	d8c11c15 	stw	r3,1136(sp)
10009710:	d8811b15 	stw	r2,1132(sp)
10009714:	98bff40e 	bge	r19,r2,100096e8 <__alt_data_end+0xf80096e8>
10009718:	1800291e 	bne	r3,zero,100097c0 <___vfiprintf_internal_r+0xdc4>
1000971c:	94bffc04 	addi	r18,r18,-16
10009720:	0009883a 	mov	r4,zero
10009724:	01400044 	movi	r5,1
10009728:	d811883a 	mov	r8,sp
1000972c:	84bff316 	blt	r16,r18,100096fc <__alt_data_end+0xf80096fc>
10009730:	d8812617 	ldw	r2,1176(sp)
10009734:	1c87883a 	add	r3,r3,r18
10009738:	44800115 	stw	r18,4(r8)
1000973c:	40800015 	stw	r2,0(r8)
10009740:	d8c11c15 	stw	r3,1136(sp)
10009744:	d9411b15 	stw	r5,1132(sp)
10009748:	008001c4 	movi	r2,7
1000974c:	11400d0e 	bge	r2,r5,10009784 <___vfiprintf_internal_r+0xd88>
10009750:	1800061e 	bne	r3,zero,1000976c <___vfiprintf_internal_r+0xd70>
10009754:	d8c12417 	ldw	r3,1168(sp)
10009758:	a8c12e16 	blt	r21,r3,10009c14 <___vfiprintf_internal_r+0x1218>
1000975c:	d9012517 	ldw	r4,1172(sp)
10009760:	2549883a 	add	r4,r4,r21
10009764:	d9012515 	stw	r4,1172(sp)
10009768:	00001206 	br	100097b4 <___vfiprintf_internal_r+0xdb8>
1000976c:	d9012117 	ldw	r4,1156(sp)
10009770:	d9412017 	ldw	r5,1152(sp)
10009774:	d9811a04 	addi	r6,sp,1128
10009778:	00088e80 	call	100088e8 <__sprint_r.part.0>
1000977c:	103fbb1e 	bne	r2,zero,1000966c <__alt_data_end+0xf800966c>
10009780:	d8c11c17 	ldw	r3,1136(sp)
10009784:	d8812417 	ldw	r2,1168(sp)
10009788:	a880010e 	bge	r21,r2,10009790 <___vfiprintf_internal_r+0xd94>
1000978c:	102b883a 	mov	r21,r2
10009790:	d9012517 	ldw	r4,1172(sp)
10009794:	2549883a 	add	r4,r4,r21
10009798:	d9012515 	stw	r4,1172(sp)
1000979c:	18000526 	beq	r3,zero,100097b4 <___vfiprintf_internal_r+0xdb8>
100097a0:	d9012117 	ldw	r4,1156(sp)
100097a4:	d9412017 	ldw	r5,1152(sp)
100097a8:	d9811a04 	addi	r6,sp,1128
100097ac:	00088e80 	call	100088e8 <__sprint_r.part.0>
100097b0:	103fae1e 	bne	r2,zero,1000966c <__alt_data_end+0xf800966c>
100097b4:	d8011b15 	stw	zero,1132(sp)
100097b8:	d811883a 	mov	r8,sp
100097bc:	003cc706 	br	10008adc <__alt_data_end+0xf8008adc>
100097c0:	a009883a 	mov	r4,r20
100097c4:	b00b883a 	mov	r5,r22
100097c8:	d9811a04 	addi	r6,sp,1128
100097cc:	00088e80 	call	100088e8 <__sprint_r.part.0>
100097d0:	103fa61e 	bne	r2,zero,1000966c <__alt_data_end+0xf800966c>
100097d4:	d9011b17 	ldw	r4,1132(sp)
100097d8:	d8c11c17 	ldw	r3,1136(sp)
100097dc:	d811883a 	mov	r8,sp
100097e0:	21400044 	addi	r5,r4,1
100097e4:	003fc306 	br	100096f4 <__alt_data_end+0xf80096f4>
100097e8:	d9012417 	ldw	r4,1168(sp)
100097ec:	256dc83a 	sub	r22,r4,r21
100097f0:	05be1f0e 	bge	zero,r22,10009070 <__alt_data_end+0xf8009070>
100097f4:	04c00404 	movi	r19,16
100097f8:	9d81720e 	bge	r19,r22,10009dc4 <___vfiprintf_internal_r+0x13c8>
100097fc:	00840074 	movhi	r2,4097
10009800:	1083a304 	addi	r2,r2,3724
10009804:	d8812615 	stw	r2,1176(sp)
10009808:	028001c4 	movi	r10,7
1000980c:	00000506 	br	10009824 <___vfiprintf_internal_r+0xe28>
10009810:	29000084 	addi	r4,r5,2
10009814:	42000204 	addi	r8,r8,8
10009818:	100b883a 	mov	r5,r2
1000981c:	b5bffc04 	addi	r22,r22,-16
10009820:	9d800d0e 	bge	r19,r22,10009858 <___vfiprintf_internal_r+0xe5c>
10009824:	18c00404 	addi	r3,r3,16
10009828:	28800044 	addi	r2,r5,1
1000982c:	44400015 	stw	r17,0(r8)
10009830:	44c00115 	stw	r19,4(r8)
10009834:	d8c11c15 	stw	r3,1136(sp)
10009838:	d8811b15 	stw	r2,1132(sp)
1000983c:	50bff40e 	bge	r10,r2,10009810 <__alt_data_end+0xf8009810>
10009840:	1800111e 	bne	r3,zero,10009888 <___vfiprintf_internal_r+0xe8c>
10009844:	b5bffc04 	addi	r22,r22,-16
10009848:	000b883a 	mov	r5,zero
1000984c:	01000044 	movi	r4,1
10009850:	d811883a 	mov	r8,sp
10009854:	9dbff316 	blt	r19,r22,10009824 <__alt_data_end+0xf8009824>
10009858:	d9412617 	ldw	r5,1176(sp)
1000985c:	1d87883a 	add	r3,r3,r22
10009860:	45800115 	stw	r22,4(r8)
10009864:	41400015 	stw	r5,0(r8)
10009868:	d8c11c15 	stw	r3,1136(sp)
1000986c:	d9011b15 	stw	r4,1132(sp)
10009870:	008001c4 	movi	r2,7
10009874:	11008516 	blt	r2,r4,10009a8c <___vfiprintf_internal_r+0x1090>
10009878:	42000204 	addi	r8,r8,8
1000987c:	20800044 	addi	r2,r4,1
10009880:	200b883a 	mov	r5,r4
10009884:	003dfa06 	br	10009070 <__alt_data_end+0xf8009070>
10009888:	d9012117 	ldw	r4,1156(sp)
1000988c:	d9412017 	ldw	r5,1152(sp)
10009890:	d9811a04 	addi	r6,sp,1128
10009894:	da812a15 	stw	r10,1192(sp)
10009898:	00088e80 	call	100088e8 <__sprint_r.part.0>
1000989c:	da812a17 	ldw	r10,1192(sp)
100098a0:	103f721e 	bne	r2,zero,1000966c <__alt_data_end+0xf800966c>
100098a4:	d9411b17 	ldw	r5,1132(sp)
100098a8:	d8c11c17 	ldw	r3,1136(sp)
100098ac:	d811883a 	mov	r8,sp
100098b0:	29000044 	addi	r4,r5,1
100098b4:	003fd906 	br	1000981c <__alt_data_end+0xf800981c>
100098b8:	1800681e 	bne	r3,zero,10009a5c <___vfiprintf_internal_r+0x1060>
100098bc:	50004d26 	beq	r10,zero,100099f4 <___vfiprintf_internal_r+0xff8>
100098c0:	d8811d04 	addi	r2,sp,1140
100098c4:	00c00084 	movi	r3,2
100098c8:	d8800015 	stw	r2,0(sp)
100098cc:	d8c00115 	stw	r3,4(sp)
100098d0:	2005883a 	mov	r2,r4
100098d4:	d811883a 	mov	r8,sp
100098d8:	003de006 	br	1000905c <__alt_data_end+0xf800905c>
100098dc:	1800551e 	bne	r3,zero,10009a34 <___vfiprintf_internal_r+0x1038>
100098e0:	000b883a 	mov	r5,zero
100098e4:	00800044 	movi	r2,1
100098e8:	d811883a 	mov	r8,sp
100098ec:	003dde06 	br	10009068 <__alt_data_end+0xf8009068>
100098f0:	10803fcc 	andi	r2,r2,255
100098f4:	1000191e 	bne	r2,zero,1000995c <___vfiprintf_internal_r+0xf60>
100098f8:	9080004c 	andi	r2,r18,1
100098fc:	10001726 	beq	r2,zero,1000995c <___vfiprintf_internal_r+0xf60>
10009900:	00800c04 	movi	r2,48
10009904:	d8c109c4 	addi	r3,sp,1063
10009908:	d88109c5 	stb	r2,1063(sp)
1000990c:	dd012817 	ldw	r20,1184(sp)
10009910:	d8c12215 	stw	r3,1160(sp)
10009914:	003d8a06 	br	10008f40 <__alt_data_end+0xf8008f40>
10009918:	d9012717 	ldw	r4,1180(sp)
1000991c:	dd010a04 	addi	r20,sp,1064
10009920:	988003cc 	andi	r2,r19,15
10009924:	a806973a 	slli	r3,r21,28
10009928:	2085883a 	add	r2,r4,r2
1000992c:	9826d13a 	srli	r19,r19,4
10009930:	10800003 	ldbu	r2,0(r2)
10009934:	a82ad13a 	srli	r21,r21,4
10009938:	a53fffc4 	addi	r20,r20,-1
1000993c:	1ce6b03a 	or	r19,r3,r19
10009940:	a0800005 	stb	r2,0(r20)
10009944:	9d44b03a 	or	r2,r19,r21
10009948:	103ff51e 	bne	r2,zero,10009920 <__alt_data_end+0xf8009920>
1000994c:	d9411e17 	ldw	r5,1144(sp)
10009950:	dd012215 	stw	r20,1160(sp)
10009954:	2d29c83a 	sub	r20,r5,r20
10009958:	003d7906 	br	10008f40 <__alt_data_end+0xf8008f40>
1000995c:	d8c10a04 	addi	r3,sp,1064
10009960:	d8c12215 	stw	r3,1160(sp)
10009964:	003d7606 	br	10008f40 <__alt_data_end+0xf8008f40>
10009968:	18009e1e 	bne	r3,zero,10009be4 <___vfiprintf_internal_r+0x11e8>
1000996c:	d8811d87 	ldb	r2,1142(sp)
10009970:	10005f26 	beq	r2,zero,10009af0 <___vfiprintf_internal_r+0x10f4>
10009974:	00c00044 	movi	r3,1
10009978:	d9011d84 	addi	r4,sp,1142
1000997c:	1805883a 	mov	r2,r3
10009980:	d9000015 	stw	r4,0(sp)
10009984:	d8c00115 	stw	r3,4(sp)
10009988:	d811883a 	mov	r8,sp
1000998c:	003efc06 	br	10009580 <__alt_data_end+0xf8009580>
10009990:	d9412417 	ldw	r5,1168(sp)
10009994:	d811883a 	mov	r8,sp
10009998:	2d65c83a 	sub	r18,r5,r21
1000999c:	04bf4816 	blt	zero,r18,100096c0 <__alt_data_end+0xf80096c0>
100099a0:	003f6c06 	br	10009754 <__alt_data_end+0xf8009754>
100099a4:	b829883a 	mov	r20,r23
100099a8:	003c6906 	br	10008b50 <__alt_data_end+0xf8008b50>
100099ac:	d9012117 	ldw	r4,1156(sp)
100099b0:	d9412017 	ldw	r5,1152(sp)
100099b4:	d9811a04 	addi	r6,sp,1128
100099b8:	00088e80 	call	100088e8 <__sprint_r.part.0>
100099bc:	103f2b1e 	bne	r2,zero,1000966c <__alt_data_end+0xf800966c>
100099c0:	d8c11c17 	ldw	r3,1136(sp)
100099c4:	d811883a 	mov	r8,sp
100099c8:	003f3806 	br	100096ac <__alt_data_end+0xf80096ac>
100099cc:	00800084 	movi	r2,2
100099d0:	9d46b03a 	or	r3,r19,r21
100099d4:	003df606 	br	100091b0 <__alt_data_end+0xf80091b0>
100099d8:	d9012117 	ldw	r4,1156(sp)
100099dc:	d9412017 	ldw	r5,1152(sp)
100099e0:	d9811a04 	addi	r6,sp,1128
100099e4:	00088e80 	call	100088e8 <__sprint_r.part.0>
100099e8:	103f201e 	bne	r2,zero,1000966c <__alt_data_end+0xf800966c>
100099ec:	d811883a 	mov	r8,sp
100099f0:	003cc606 	br	10008d0c <__alt_data_end+0xf8008d0c>
100099f4:	000b883a 	mov	r5,zero
100099f8:	2005883a 	mov	r2,r4
100099fc:	d811883a 	mov	r8,sp
10009a00:	003d9906 	br	10009068 <__alt_data_end+0xf8009068>
10009a04:	10803fcc 	andi	r2,r2,255
10009a08:	1080201c 	xori	r2,r2,128
10009a0c:	10bfe004 	addi	r2,r2,-128
10009a10:	01000c04 	movi	r4,48
10009a14:	1100b226 	beq	r2,r4,10009ce0 <___vfiprintf_internal_r+0x12e4>
10009a18:	d9412217 	ldw	r5,1160(sp)
10009a1c:	d8811e17 	ldw	r2,1144(sp)
10009a20:	193fffc5 	stb	r4,-1(r3)
10009a24:	297fffc4 	addi	r5,r5,-1
10009a28:	d9412215 	stw	r5,1160(sp)
10009a2c:	1169c83a 	sub	r20,r2,r5
10009a30:	003d4306 	br	10008f40 <__alt_data_end+0xf8008f40>
10009a34:	d9012117 	ldw	r4,1156(sp)
10009a38:	d9412017 	ldw	r5,1152(sp)
10009a3c:	d9811a04 	addi	r6,sp,1128
10009a40:	00088e80 	call	100088e8 <__sprint_r.part.0>
10009a44:	103f091e 	bne	r2,zero,1000966c <__alt_data_end+0xf800966c>
10009a48:	d9411b17 	ldw	r5,1132(sp)
10009a4c:	d8c11c17 	ldw	r3,1136(sp)
10009a50:	d811883a 	mov	r8,sp
10009a54:	28800044 	addi	r2,r5,1
10009a58:	003d8306 	br	10009068 <__alt_data_end+0xf8009068>
10009a5c:	d9012117 	ldw	r4,1156(sp)
10009a60:	d9412017 	ldw	r5,1152(sp)
10009a64:	d9811a04 	addi	r6,sp,1128
10009a68:	da812a15 	stw	r10,1192(sp)
10009a6c:	00088e80 	call	100088e8 <__sprint_r.part.0>
10009a70:	da812a17 	ldw	r10,1192(sp)
10009a74:	103efd1e 	bne	r2,zero,1000966c <__alt_data_end+0xf800966c>
10009a78:	d9411b17 	ldw	r5,1132(sp)
10009a7c:	d8c11c17 	ldw	r3,1136(sp)
10009a80:	d811883a 	mov	r8,sp
10009a84:	28800044 	addi	r2,r5,1
10009a88:	003d6a06 	br	10009034 <__alt_data_end+0xf8009034>
10009a8c:	1800a01e 	bne	r3,zero,10009d10 <___vfiprintf_internal_r+0x1314>
10009a90:	000b883a 	mov	r5,zero
10009a94:	00800044 	movi	r2,1
10009a98:	d811883a 	mov	r8,sp
10009a9c:	003d7406 	br	10009070 <__alt_data_end+0xf8009070>
10009aa0:	d9012117 	ldw	r4,1156(sp)
10009aa4:	d9412017 	ldw	r5,1152(sp)
10009aa8:	d9811a04 	addi	r6,sp,1128
10009aac:	00088e80 	call	100088e8 <__sprint_r.part.0>
10009ab0:	103eee1e 	bne	r2,zero,1000966c <__alt_data_end+0xf800966c>
10009ab4:	d8811b17 	ldw	r2,1132(sp)
10009ab8:	d8c11c17 	ldw	r3,1136(sp)
10009abc:	d811883a 	mov	r8,sp
10009ac0:	10800044 	addi	r2,r2,1
10009ac4:	003d8f06 	br	10009104 <__alt_data_end+0xf8009104>
10009ac8:	04e7c83a 	sub	r19,zero,r19
10009acc:	9804c03a 	cmpne	r2,r19,zero
10009ad0:	056bc83a 	sub	r21,zero,r21
10009ad4:	a8abc83a 	sub	r21,r21,r2
10009ad8:	05800b44 	movi	r22,45
10009adc:	dd811d85 	stb	r22,1142(sp)
10009ae0:	8029883a 	mov	r20,r16
10009ae4:	00800044 	movi	r2,1
10009ae8:	9d46b03a 	or	r3,r19,r21
10009aec:	003cfa06 	br	10008ed8 <__alt_data_end+0xf8008ed8>
10009af0:	000b883a 	mov	r5,zero
10009af4:	00800044 	movi	r2,1
10009af8:	d811883a 	mov	r8,sp
10009afc:	503d5a26 	beq	r10,zero,10009068 <__alt_data_end+0xf8009068>
10009b00:	00c00084 	movi	r3,2
10009b04:	d9011d04 	addi	r4,sp,1140
10009b08:	d9000015 	stw	r4,0(sp)
10009b0c:	d8c00115 	stw	r3,4(sp)
10009b10:	003d5206 	br	1000905c <__alt_data_end+0xf800905c>
10009b14:	9080040c 	andi	r2,r18,16
10009b18:	1000421e 	bne	r2,zero,10009c24 <___vfiprintf_internal_r+0x1228>
10009b1c:	9480100c 	andi	r18,r18,64
10009b20:	90009c26 	beq	r18,zero,10009d94 <___vfiprintf_internal_r+0x1398>
10009b24:	d9412317 	ldw	r5,1164(sp)
10009b28:	d8c12517 	ldw	r3,1172(sp)
10009b2c:	28800017 	ldw	r2,0(r5)
10009b30:	29400104 	addi	r5,r5,4
10009b34:	d9412315 	stw	r5,1164(sp)
10009b38:	10c0000d 	sth	r3,0(r2)
10009b3c:	003be706 	br	10008adc <__alt_data_end+0xf8008adc>
10009b40:	90c0100c 	andi	r3,r18,64
10009b44:	18003e26 	beq	r3,zero,10009c40 <___vfiprintf_internal_r+0x1244>
10009b48:	d8c12317 	ldw	r3,1164(sp)
10009b4c:	14c0000b 	ldhu	r19,0(r2)
10009b50:	002b883a 	mov	r21,zero
10009b54:	18c00104 	addi	r3,r3,4
10009b58:	d8c12315 	stw	r3,1164(sp)
10009b5c:	003db706 	br	1000923c <__alt_data_end+0xf800923c>
10009b60:	9080100c 	andi	r2,r18,64
10009b64:	10004c26 	beq	r2,zero,10009c98 <___vfiprintf_internal_r+0x129c>
10009b68:	1cc0000f 	ldh	r19,0(r3)
10009b6c:	d8812317 	ldw	r2,1164(sp)
10009b70:	982bd7fa 	srai	r21,r19,31
10009b74:	10800104 	addi	r2,r2,4
10009b78:	d8812315 	stw	r2,1164(sp)
10009b7c:	a805883a 	mov	r2,r21
10009b80:	003cd006 	br	10008ec4 <__alt_data_end+0xf8008ec4>
10009b84:	00800084 	movi	r2,2
10009b88:	003d8906 	br	100091b0 <__alt_data_end+0xf80091b0>
10009b8c:	b9800007 	ldb	r6,0(r23)
10009b90:	003bfb06 	br	10008b80 <__alt_data_end+0xf8008b80>
10009b94:	9080100c 	andi	r2,r18,64
10009b98:	10003726 	beq	r2,zero,10009c78 <___vfiprintf_internal_r+0x127c>
10009b9c:	d9412317 	ldw	r5,1164(sp)
10009ba0:	002b883a 	mov	r21,zero
10009ba4:	0005883a 	mov	r2,zero
10009ba8:	2cc0000b 	ldhu	r19,0(r5)
10009bac:	29400104 	addi	r5,r5,4
10009bb0:	d9412315 	stw	r5,1164(sp)
10009bb4:	9807883a 	mov	r3,r19
10009bb8:	003d7d06 	br	100091b0 <__alt_data_end+0xf80091b0>
10009bbc:	9080100c 	andi	r2,r18,64
10009bc0:	10002526 	beq	r2,zero,10009c58 <___vfiprintf_internal_r+0x125c>
10009bc4:	d8812317 	ldw	r2,1164(sp)
10009bc8:	002b883a 	mov	r21,zero
10009bcc:	14c0000b 	ldhu	r19,0(r2)
10009bd0:	10800104 	addi	r2,r2,4
10009bd4:	d8812315 	stw	r2,1164(sp)
10009bd8:	9807883a 	mov	r3,r19
10009bdc:	00800044 	movi	r2,1
10009be0:	003d7306 	br	100091b0 <__alt_data_end+0xf80091b0>
10009be4:	d9012117 	ldw	r4,1156(sp)
10009be8:	d9412017 	ldw	r5,1152(sp)
10009bec:	d9811a04 	addi	r6,sp,1128
10009bf0:	da812a15 	stw	r10,1192(sp)
10009bf4:	00088e80 	call	100088e8 <__sprint_r.part.0>
10009bf8:	da812a17 	ldw	r10,1192(sp)
10009bfc:	103e9b1e 	bne	r2,zero,1000966c <__alt_data_end+0xf800966c>
10009c00:	d9411b17 	ldw	r5,1132(sp)
10009c04:	d8c11c17 	ldw	r3,1136(sp)
10009c08:	d811883a 	mov	r8,sp
10009c0c:	28800044 	addi	r2,r5,1
10009c10:	003e5006 	br	10009554 <__alt_data_end+0xf8009554>
10009c14:	182b883a 	mov	r21,r3
10009c18:	003ed006 	br	1000975c <__alt_data_end+0xf800975c>
10009c1c:	8029883a 	mov	r20,r16
10009c20:	003dc606 	br	1000933c <__alt_data_end+0xf800933c>
10009c24:	d8c12317 	ldw	r3,1164(sp)
10009c28:	d9012517 	ldw	r4,1172(sp)
10009c2c:	18800017 	ldw	r2,0(r3)
10009c30:	18c00104 	addi	r3,r3,4
10009c34:	d8c12315 	stw	r3,1164(sp)
10009c38:	11000015 	stw	r4,0(r2)
10009c3c:	003ba706 	br	10008adc <__alt_data_end+0xf8008adc>
10009c40:	d9012317 	ldw	r4,1164(sp)
10009c44:	14c00017 	ldw	r19,0(r2)
10009c48:	002b883a 	mov	r21,zero
10009c4c:	21000104 	addi	r4,r4,4
10009c50:	d9012315 	stw	r4,1164(sp)
10009c54:	003d7906 	br	1000923c <__alt_data_end+0xf800923c>
10009c58:	d8c12317 	ldw	r3,1164(sp)
10009c5c:	002b883a 	mov	r21,zero
10009c60:	00800044 	movi	r2,1
10009c64:	1cc00017 	ldw	r19,0(r3)
10009c68:	18c00104 	addi	r3,r3,4
10009c6c:	d8c12315 	stw	r3,1164(sp)
10009c70:	9807883a 	mov	r3,r19
10009c74:	003d4e06 	br	100091b0 <__alt_data_end+0xf80091b0>
10009c78:	d8812317 	ldw	r2,1164(sp)
10009c7c:	002b883a 	mov	r21,zero
10009c80:	14c00017 	ldw	r19,0(r2)
10009c84:	10800104 	addi	r2,r2,4
10009c88:	d8812315 	stw	r2,1164(sp)
10009c8c:	9807883a 	mov	r3,r19
10009c90:	0005883a 	mov	r2,zero
10009c94:	003d4606 	br	100091b0 <__alt_data_end+0xf80091b0>
10009c98:	1cc00017 	ldw	r19,0(r3)
10009c9c:	d8c12317 	ldw	r3,1164(sp)
10009ca0:	982bd7fa 	srai	r21,r19,31
10009ca4:	18c00104 	addi	r3,r3,4
10009ca8:	d8c12315 	stw	r3,1164(sp)
10009cac:	a805883a 	mov	r2,r21
10009cb0:	003c8406 	br	10008ec4 <__alt_data_end+0xf8008ec4>
10009cb4:	01040074 	movhi	r4,4097
10009cb8:	2103a304 	addi	r4,r4,3724
10009cbc:	d9012615 	stw	r4,1176(sp)
10009cc0:	003d0606 	br	100090dc <__alt_data_end+0xf80090dc>
10009cc4:	b9800043 	ldbu	r6,1(r23)
10009cc8:	94800814 	ori	r18,r18,32
10009ccc:	bdc00044 	addi	r23,r23,1
10009cd0:	31803fcc 	andi	r6,r6,255
10009cd4:	3180201c 	xori	r6,r6,128
10009cd8:	31bfe004 	addi	r6,r6,-128
10009cdc:	003ba806 	br	10008b80 <__alt_data_end+0xf8008b80>
10009ce0:	d8811e17 	ldw	r2,1144(sp)
10009ce4:	d8c12217 	ldw	r3,1160(sp)
10009ce8:	10e9c83a 	sub	r20,r2,r3
10009cec:	003c9406 	br	10008f40 <__alt_data_end+0xf8008f40>
10009cf0:	da012a15 	stw	r8,1192(sp)
10009cf4:	0001e400 	call	10001e40 <strlen>
10009cf8:	1029883a 	mov	r20,r2
10009cfc:	dd811d83 	ldbu	r22,1142(sp)
10009d00:	dcc12315 	stw	r19,1164(sp)
10009d04:	0021883a 	mov	r16,zero
10009d08:	da012a17 	ldw	r8,1192(sp)
10009d0c:	003c8c06 	br	10008f40 <__alt_data_end+0xf8008f40>
10009d10:	d9012117 	ldw	r4,1156(sp)
10009d14:	d9412017 	ldw	r5,1152(sp)
10009d18:	d9811a04 	addi	r6,sp,1128
10009d1c:	00088e80 	call	100088e8 <__sprint_r.part.0>
10009d20:	103e521e 	bne	r2,zero,1000966c <__alt_data_end+0xf800966c>
10009d24:	d9411b17 	ldw	r5,1132(sp)
10009d28:	d8c11c17 	ldw	r3,1136(sp)
10009d2c:	d811883a 	mov	r8,sp
10009d30:	28800044 	addi	r2,r5,1
10009d34:	003cce06 	br	10009070 <__alt_data_end+0xf8009070>
10009d38:	01440074 	movhi	r5,4097
10009d3c:	2943a704 	addi	r5,r5,3740
10009d40:	d9412615 	stw	r5,1176(sp)
10009d44:	d9411b17 	ldw	r5,1132(sp)
10009d48:	29400044 	addi	r5,r5,1
10009d4c:	003cad06 	br	10009004 <__alt_data_end+0xf8009004>
10009d50:	00800184 	movi	r2,6
10009d54:	1400012e 	bgeu	r2,r16,10009d5c <___vfiprintf_internal_r+0x1360>
10009d58:	1021883a 	mov	r16,r2
10009d5c:	8029883a 	mov	r20,r16
10009d60:	802b883a 	mov	r21,r16
10009d64:	80001c16 	blt	r16,zero,10009dd8 <___vfiprintf_internal_r+0x13dc>
10009d68:	00c40074 	movhi	r3,4097
10009d6c:	18c34704 	addi	r3,r3,3356
10009d70:	dcc12315 	stw	r19,1164(sp)
10009d74:	d8c12215 	stw	r3,1160(sp)
10009d78:	003cff06 	br	10009178 <__alt_data_end+0xf8009178>
10009d7c:	d9411b17 	ldw	r5,1132(sp)
10009d80:	00840074 	movhi	r2,4097
10009d84:	1083a704 	addi	r2,r2,3740
10009d88:	d8812615 	stw	r2,1176(sp)
10009d8c:	29400044 	addi	r5,r5,1
10009d90:	003e6706 	br	10009730 <__alt_data_end+0xf8009730>
10009d94:	d9012317 	ldw	r4,1164(sp)
10009d98:	d9412517 	ldw	r5,1172(sp)
10009d9c:	20800017 	ldw	r2,0(r4)
10009da0:	21000104 	addi	r4,r4,4
10009da4:	d9012315 	stw	r4,1164(sp)
10009da8:	11400015 	stw	r5,0(r2)
10009dac:	003b4b06 	br	10008adc <__alt_data_end+0xf8008adc>
10009db0:	8029883a 	mov	r20,r16
10009db4:	dd811d83 	ldbu	r22,1142(sp)
10009db8:	dcc12315 	stw	r19,1164(sp)
10009dbc:	0021883a 	mov	r16,zero
10009dc0:	003c5f06 	br	10008f40 <__alt_data_end+0xf8008f40>
10009dc4:	01040074 	movhi	r4,4097
10009dc8:	2103a304 	addi	r4,r4,3724
10009dcc:	d9012615 	stw	r4,1176(sp)
10009dd0:	1009883a 	mov	r4,r2
10009dd4:	003ea006 	br	10009858 <__alt_data_end+0xf8009858>
10009dd8:	002b883a 	mov	r21,zero
10009ddc:	003fe206 	br	10009d68 <__alt_data_end+0xf8009d68>
10009de0:	d9412317 	ldw	r5,1164(sp)
10009de4:	b807883a 	mov	r3,r23
10009de8:	102f883a 	mov	r23,r2
10009dec:	2c000017 	ldw	r16,0(r5)
10009df0:	29000104 	addi	r4,r5,4
10009df4:	d9012315 	stw	r4,1164(sp)
10009df8:	80000416 	blt	r16,zero,10009e0c <___vfiprintf_internal_r+0x1410>
10009dfc:	19800047 	ldb	r6,1(r3)
10009e00:	003b5f06 	br	10008b80 <__alt_data_end+0xf8008b80>
10009e04:	043fffc4 	movi	r16,-1
10009e08:	003bef06 	br	10008dc8 <__alt_data_end+0xf8008dc8>
10009e0c:	043fffc4 	movi	r16,-1
10009e10:	19800047 	ldb	r6,1(r3)
10009e14:	003b5a06 	br	10008b80 <__alt_data_end+0xf8008b80>
10009e18:	282b883a 	mov	r21,r5
10009e1c:	003cc706 	br	1000913c <__alt_data_end+0xf800913c>

10009e20 <__vfiprintf_internal>:
10009e20:	2007883a 	mov	r3,r4
10009e24:	01040074 	movhi	r4,4097
10009e28:	210ab504 	addi	r4,r4,10964
10009e2c:	21000017 	ldw	r4,0(r4)
10009e30:	2805883a 	mov	r2,r5
10009e34:	300f883a 	mov	r7,r6
10009e38:	180b883a 	mov	r5,r3
10009e3c:	100d883a 	mov	r6,r2
10009e40:	00089fc1 	jmpi	100089fc <___vfiprintf_internal_r>

10009e44 <_write_r>:
10009e44:	defffd04 	addi	sp,sp,-12
10009e48:	dc000015 	stw	r16,0(sp)
10009e4c:	04040074 	movhi	r16,4097
10009e50:	dc400115 	stw	r17,4(sp)
10009e54:	84118f04 	addi	r16,r16,17980
10009e58:	2023883a 	mov	r17,r4
10009e5c:	2809883a 	mov	r4,r5
10009e60:	300b883a 	mov	r5,r6
10009e64:	380d883a 	mov	r6,r7
10009e68:	dfc00215 	stw	ra,8(sp)
10009e6c:	80000015 	stw	zero,0(r16)
10009e70:	000e6080 	call	1000e608 <write>
10009e74:	00ffffc4 	movi	r3,-1
10009e78:	10c00526 	beq	r2,r3,10009e90 <_write_r+0x4c>
10009e7c:	dfc00217 	ldw	ra,8(sp)
10009e80:	dc400117 	ldw	r17,4(sp)
10009e84:	dc000017 	ldw	r16,0(sp)
10009e88:	dec00304 	addi	sp,sp,12
10009e8c:	f800283a 	ret
10009e90:	80c00017 	ldw	r3,0(r16)
10009e94:	183ff926 	beq	r3,zero,10009e7c <__alt_data_end+0xf8009e7c>
10009e98:	88c00015 	stw	r3,0(r17)
10009e9c:	003ff706 	br	10009e7c <__alt_data_end+0xf8009e7c>

10009ea0 <_close_r>:
10009ea0:	defffd04 	addi	sp,sp,-12
10009ea4:	dc000015 	stw	r16,0(sp)
10009ea8:	04040074 	movhi	r16,4097
10009eac:	dc400115 	stw	r17,4(sp)
10009eb0:	84118f04 	addi	r16,r16,17980
10009eb4:	2023883a 	mov	r17,r4
10009eb8:	2809883a 	mov	r4,r5
10009ebc:	dfc00215 	stw	ra,8(sp)
10009ec0:	80000015 	stw	zero,0(r16)
10009ec4:	000dd640 	call	1000dd64 <close>
10009ec8:	00ffffc4 	movi	r3,-1
10009ecc:	10c00526 	beq	r2,r3,10009ee4 <_close_r+0x44>
10009ed0:	dfc00217 	ldw	ra,8(sp)
10009ed4:	dc400117 	ldw	r17,4(sp)
10009ed8:	dc000017 	ldw	r16,0(sp)
10009edc:	dec00304 	addi	sp,sp,12
10009ee0:	f800283a 	ret
10009ee4:	80c00017 	ldw	r3,0(r16)
10009ee8:	183ff926 	beq	r3,zero,10009ed0 <__alt_data_end+0xf8009ed0>
10009eec:	88c00015 	stw	r3,0(r17)
10009ef0:	003ff706 	br	10009ed0 <__alt_data_end+0xf8009ed0>

10009ef4 <_calloc_r>:
10009ef4:	defffe04 	addi	sp,sp,-8
10009ef8:	dc000015 	stw	r16,0(sp)
10009efc:	2021883a 	mov	r16,r4
10009f00:	2809883a 	mov	r4,r5
10009f04:	300b883a 	mov	r5,r6
10009f08:	dfc00115 	stw	ra,4(sp)
10009f0c:	00013880 	call	10001388 <__mulsi3>
10009f10:	8009883a 	mov	r4,r16
10009f14:	100b883a 	mov	r5,r2
10009f18:	00013d80 	call	100013d8 <_malloc_r>
10009f1c:	1021883a 	mov	r16,r2
10009f20:	10002826 	beq	r2,zero,10009fc4 <_calloc_r+0xd0>
10009f24:	11bfff17 	ldw	r6,-4(r2)
10009f28:	00bfff04 	movi	r2,-4
10009f2c:	00c00904 	movi	r3,36
10009f30:	308c703a 	and	r6,r6,r2
10009f34:	308d883a 	add	r6,r6,r2
10009f38:	19801436 	bltu	r3,r6,10009f8c <_calloc_r+0x98>
10009f3c:	008004c4 	movi	r2,19
10009f40:	11800936 	bltu	r2,r6,10009f68 <_calloc_r+0x74>
10009f44:	8005883a 	mov	r2,r16
10009f48:	10000015 	stw	zero,0(r2)
10009f4c:	10000115 	stw	zero,4(r2)
10009f50:	10000215 	stw	zero,8(r2)
10009f54:	8005883a 	mov	r2,r16
10009f58:	dfc00117 	ldw	ra,4(sp)
10009f5c:	dc000017 	ldw	r16,0(sp)
10009f60:	dec00204 	addi	sp,sp,8
10009f64:	f800283a 	ret
10009f68:	80000015 	stw	zero,0(r16)
10009f6c:	80000115 	stw	zero,4(r16)
10009f70:	008006c4 	movi	r2,27
10009f74:	11800d2e 	bgeu	r2,r6,10009fac <_calloc_r+0xb8>
10009f78:	80000215 	stw	zero,8(r16)
10009f7c:	80000315 	stw	zero,12(r16)
10009f80:	30c00c26 	beq	r6,r3,10009fb4 <_calloc_r+0xc0>
10009f84:	80800404 	addi	r2,r16,16
10009f88:	003fef06 	br	10009f48 <__alt_data_end+0xf8009f48>
10009f8c:	8009883a 	mov	r4,r16
10009f90:	000b883a 	mov	r5,zero
10009f94:	0006f880 	call	10006f88 <memset>
10009f98:	8005883a 	mov	r2,r16
10009f9c:	dfc00117 	ldw	ra,4(sp)
10009fa0:	dc000017 	ldw	r16,0(sp)
10009fa4:	dec00204 	addi	sp,sp,8
10009fa8:	f800283a 	ret
10009fac:	80800204 	addi	r2,r16,8
10009fb0:	003fe506 	br	10009f48 <__alt_data_end+0xf8009f48>
10009fb4:	80000415 	stw	zero,16(r16)
10009fb8:	80800604 	addi	r2,r16,24
10009fbc:	80000515 	stw	zero,20(r16)
10009fc0:	003fe106 	br	10009f48 <__alt_data_end+0xf8009f48>
10009fc4:	0005883a 	mov	r2,zero
10009fc8:	003fe306 	br	10009f58 <__alt_data_end+0xf8009f58>

10009fcc <_fclose_r>:
10009fcc:	28003226 	beq	r5,zero,1000a098 <_fclose_r+0xcc>
10009fd0:	defffc04 	addi	sp,sp,-16
10009fd4:	dc400115 	stw	r17,4(sp)
10009fd8:	2023883a 	mov	r17,r4
10009fdc:	dc000015 	stw	r16,0(sp)
10009fe0:	dfc00315 	stw	ra,12(sp)
10009fe4:	dc800215 	stw	r18,8(sp)
10009fe8:	2821883a 	mov	r16,r5
10009fec:	00060440 	call	10006044 <__sfp_lock_acquire>
10009ff0:	88000226 	beq	r17,zero,10009ffc <_fclose_r+0x30>
10009ff4:	88800e17 	ldw	r2,56(r17)
10009ff8:	10002926 	beq	r2,zero,1000a0a0 <_fclose_r+0xd4>
10009ffc:	8080030f 	ldh	r2,12(r16)
1000a000:	10002226 	beq	r2,zero,1000a08c <_fclose_r+0xc0>
1000a004:	8809883a 	mov	r4,r17
1000a008:	800b883a 	mov	r5,r16
1000a00c:	0005a780 	call	10005a78 <_fflush_r>
1000a010:	1025883a 	mov	r18,r2
1000a014:	80800b17 	ldw	r2,44(r16)
1000a018:	10000426 	beq	r2,zero,1000a02c <_fclose_r+0x60>
1000a01c:	81400717 	ldw	r5,28(r16)
1000a020:	8809883a 	mov	r4,r17
1000a024:	103ee83a 	callr	r2
1000a028:	10002616 	blt	r2,zero,1000a0c4 <_fclose_r+0xf8>
1000a02c:	8080030b 	ldhu	r2,12(r16)
1000a030:	1080200c 	andi	r2,r2,128
1000a034:	10001f1e 	bne	r2,zero,1000a0b4 <_fclose_r+0xe8>
1000a038:	81400c17 	ldw	r5,48(r16)
1000a03c:	28000526 	beq	r5,zero,1000a054 <_fclose_r+0x88>
1000a040:	80801004 	addi	r2,r16,64
1000a044:	28800226 	beq	r5,r2,1000a050 <_fclose_r+0x84>
1000a048:	8809883a 	mov	r4,r17
1000a04c:	00061a80 	call	100061a8 <_free_r>
1000a050:	80000c15 	stw	zero,48(r16)
1000a054:	81401117 	ldw	r5,68(r16)
1000a058:	28000326 	beq	r5,zero,1000a068 <_fclose_r+0x9c>
1000a05c:	8809883a 	mov	r4,r17
1000a060:	00061a80 	call	100061a8 <_free_r>
1000a064:	80001115 	stw	zero,68(r16)
1000a068:	8000030d 	sth	zero,12(r16)
1000a06c:	00060480 	call	10006048 <__sfp_lock_release>
1000a070:	9005883a 	mov	r2,r18
1000a074:	dfc00317 	ldw	ra,12(sp)
1000a078:	dc800217 	ldw	r18,8(sp)
1000a07c:	dc400117 	ldw	r17,4(sp)
1000a080:	dc000017 	ldw	r16,0(sp)
1000a084:	dec00404 	addi	sp,sp,16
1000a088:	f800283a 	ret
1000a08c:	00060480 	call	10006048 <__sfp_lock_release>
1000a090:	0005883a 	mov	r2,zero
1000a094:	003ff706 	br	1000a074 <__alt_data_end+0xf800a074>
1000a098:	0005883a 	mov	r2,zero
1000a09c:	f800283a 	ret
1000a0a0:	8809883a 	mov	r4,r17
1000a0a4:	00060340 	call	10006034 <__sinit>
1000a0a8:	8080030f 	ldh	r2,12(r16)
1000a0ac:	103fd51e 	bne	r2,zero,1000a004 <__alt_data_end+0xf800a004>
1000a0b0:	003ff606 	br	1000a08c <__alt_data_end+0xf800a08c>
1000a0b4:	81400417 	ldw	r5,16(r16)
1000a0b8:	8809883a 	mov	r4,r17
1000a0bc:	00061a80 	call	100061a8 <_free_r>
1000a0c0:	003fdd06 	br	1000a038 <__alt_data_end+0xf800a038>
1000a0c4:	04bfffc4 	movi	r18,-1
1000a0c8:	003fd806 	br	1000a02c <__alt_data_end+0xf800a02c>

1000a0cc <fclose>:
1000a0cc:	00840074 	movhi	r2,4097
1000a0d0:	108ab504 	addi	r2,r2,10964
1000a0d4:	200b883a 	mov	r5,r4
1000a0d8:	11000017 	ldw	r4,0(r2)
1000a0dc:	0009fcc1 	jmpi	10009fcc <_fclose_r>

1000a0e0 <_fputwc_r>:
1000a0e0:	3080030b 	ldhu	r2,12(r6)
1000a0e4:	defff804 	addi	sp,sp,-32
1000a0e8:	dcc00415 	stw	r19,16(sp)
1000a0ec:	dc800315 	stw	r18,12(sp)
1000a0f0:	dc000115 	stw	r16,4(sp)
1000a0f4:	dfc00715 	stw	ra,28(sp)
1000a0f8:	dd400615 	stw	r21,24(sp)
1000a0fc:	dd000515 	stw	r20,20(sp)
1000a100:	dc400215 	stw	r17,8(sp)
1000a104:	10c8000c 	andi	r3,r2,8192
1000a108:	3021883a 	mov	r16,r6
1000a10c:	2027883a 	mov	r19,r4
1000a110:	2825883a 	mov	r18,r5
1000a114:	1800051e 	bne	r3,zero,1000a12c <_fputwc_r+0x4c>
1000a118:	30c01917 	ldw	r3,100(r6)
1000a11c:	10880014 	ori	r2,r2,8192
1000a120:	3080030d 	sth	r2,12(r6)
1000a124:	18880014 	ori	r2,r3,8192
1000a128:	30801915 	stw	r2,100(r6)
1000a12c:	0006b340 	call	10006b34 <__locale_mb_cur_max>
1000a130:	00c00044 	movi	r3,1
1000a134:	10c03e26 	beq	r2,r3,1000a230 <_fputwc_r+0x150>
1000a138:	9809883a 	mov	r4,r19
1000a13c:	d80b883a 	mov	r5,sp
1000a140:	900d883a 	mov	r6,r18
1000a144:	81c01704 	addi	r7,r16,92
1000a148:	000a5900 	call	1000a590 <_wcrtomb_r>
1000a14c:	1029883a 	mov	r20,r2
1000a150:	00bfffc4 	movi	r2,-1
1000a154:	a0802026 	beq	r20,r2,1000a1d8 <_fputwc_r+0xf8>
1000a158:	d9400003 	ldbu	r5,0(sp)
1000a15c:	a0001c26 	beq	r20,zero,1000a1d0 <_fputwc_r+0xf0>
1000a160:	0023883a 	mov	r17,zero
1000a164:	05400284 	movi	r21,10
1000a168:	00000906 	br	1000a190 <_fputwc_r+0xb0>
1000a16c:	80800017 	ldw	r2,0(r16)
1000a170:	11400005 	stb	r5,0(r2)
1000a174:	80c00017 	ldw	r3,0(r16)
1000a178:	18c00044 	addi	r3,r3,1
1000a17c:	80c00015 	stw	r3,0(r16)
1000a180:	8c400044 	addi	r17,r17,1
1000a184:	dc45883a 	add	r2,sp,r17
1000a188:	8d00112e 	bgeu	r17,r20,1000a1d0 <_fputwc_r+0xf0>
1000a18c:	11400003 	ldbu	r5,0(r2)
1000a190:	80c00217 	ldw	r3,8(r16)
1000a194:	18ffffc4 	addi	r3,r3,-1
1000a198:	80c00215 	stw	r3,8(r16)
1000a19c:	183ff30e 	bge	r3,zero,1000a16c <__alt_data_end+0xf800a16c>
1000a1a0:	80800617 	ldw	r2,24(r16)
1000a1a4:	18801916 	blt	r3,r2,1000a20c <_fputwc_r+0x12c>
1000a1a8:	80800017 	ldw	r2,0(r16)
1000a1ac:	11400005 	stb	r5,0(r2)
1000a1b0:	80800017 	ldw	r2,0(r16)
1000a1b4:	10c00003 	ldbu	r3,0(r2)
1000a1b8:	10800044 	addi	r2,r2,1
1000a1bc:	1d402326 	beq	r3,r21,1000a24c <_fputwc_r+0x16c>
1000a1c0:	80800015 	stw	r2,0(r16)
1000a1c4:	8c400044 	addi	r17,r17,1
1000a1c8:	dc45883a 	add	r2,sp,r17
1000a1cc:	8d3fef36 	bltu	r17,r20,1000a18c <__alt_data_end+0xf800a18c>
1000a1d0:	9005883a 	mov	r2,r18
1000a1d4:	00000406 	br	1000a1e8 <_fputwc_r+0x108>
1000a1d8:	80c0030b 	ldhu	r3,12(r16)
1000a1dc:	a005883a 	mov	r2,r20
1000a1e0:	18c01014 	ori	r3,r3,64
1000a1e4:	80c0030d 	sth	r3,12(r16)
1000a1e8:	dfc00717 	ldw	ra,28(sp)
1000a1ec:	dd400617 	ldw	r21,24(sp)
1000a1f0:	dd000517 	ldw	r20,20(sp)
1000a1f4:	dcc00417 	ldw	r19,16(sp)
1000a1f8:	dc800317 	ldw	r18,12(sp)
1000a1fc:	dc400217 	ldw	r17,8(sp)
1000a200:	dc000117 	ldw	r16,4(sp)
1000a204:	dec00804 	addi	sp,sp,32
1000a208:	f800283a 	ret
1000a20c:	9809883a 	mov	r4,r19
1000a210:	29403fcc 	andi	r5,r5,255
1000a214:	800d883a 	mov	r6,r16
1000a218:	000a4200 	call	1000a420 <__swbuf_r>
1000a21c:	10bfffe0 	cmpeqi	r2,r2,-1
1000a220:	10803fcc 	andi	r2,r2,255
1000a224:	103fd626 	beq	r2,zero,1000a180 <__alt_data_end+0xf800a180>
1000a228:	00bfffc4 	movi	r2,-1
1000a22c:	003fee06 	br	1000a1e8 <__alt_data_end+0xf800a1e8>
1000a230:	90ffffc4 	addi	r3,r18,-1
1000a234:	01003f84 	movi	r4,254
1000a238:	20ffbf36 	bltu	r4,r3,1000a138 <__alt_data_end+0xf800a138>
1000a23c:	900b883a 	mov	r5,r18
1000a240:	dc800005 	stb	r18,0(sp)
1000a244:	1029883a 	mov	r20,r2
1000a248:	003fc506 	br	1000a160 <__alt_data_end+0xf800a160>
1000a24c:	9809883a 	mov	r4,r19
1000a250:	a80b883a 	mov	r5,r21
1000a254:	800d883a 	mov	r6,r16
1000a258:	000a4200 	call	1000a420 <__swbuf_r>
1000a25c:	10bfffe0 	cmpeqi	r2,r2,-1
1000a260:	003fef06 	br	1000a220 <__alt_data_end+0xf800a220>

1000a264 <fputwc>:
1000a264:	defffc04 	addi	sp,sp,-16
1000a268:	dc000115 	stw	r16,4(sp)
1000a26c:	04040074 	movhi	r16,4097
1000a270:	840ab504 	addi	r16,r16,10964
1000a274:	dc400215 	stw	r17,8(sp)
1000a278:	2023883a 	mov	r17,r4
1000a27c:	81000017 	ldw	r4,0(r16)
1000a280:	dfc00315 	stw	ra,12(sp)
1000a284:	280d883a 	mov	r6,r5
1000a288:	20000626 	beq	r4,zero,1000a2a4 <fputwc+0x40>
1000a28c:	20800e17 	ldw	r2,56(r4)
1000a290:	1000041e 	bne	r2,zero,1000a2a4 <fputwc+0x40>
1000a294:	d9400015 	stw	r5,0(sp)
1000a298:	00060340 	call	10006034 <__sinit>
1000a29c:	81000017 	ldw	r4,0(r16)
1000a2a0:	d9800017 	ldw	r6,0(sp)
1000a2a4:	880b883a 	mov	r5,r17
1000a2a8:	dfc00317 	ldw	ra,12(sp)
1000a2ac:	dc400217 	ldw	r17,8(sp)
1000a2b0:	dc000117 	ldw	r16,4(sp)
1000a2b4:	dec00404 	addi	sp,sp,16
1000a2b8:	000a0e01 	jmpi	1000a0e0 <_fputwc_r>

1000a2bc <_fstat_r>:
1000a2bc:	defffd04 	addi	sp,sp,-12
1000a2c0:	dc000015 	stw	r16,0(sp)
1000a2c4:	04040074 	movhi	r16,4097
1000a2c8:	dc400115 	stw	r17,4(sp)
1000a2cc:	84118f04 	addi	r16,r16,17980
1000a2d0:	2023883a 	mov	r17,r4
1000a2d4:	2809883a 	mov	r4,r5
1000a2d8:	300b883a 	mov	r5,r6
1000a2dc:	dfc00215 	stw	ra,8(sp)
1000a2e0:	80000015 	stw	zero,0(r16)
1000a2e4:	000deb80 	call	1000deb8 <fstat>
1000a2e8:	00ffffc4 	movi	r3,-1
1000a2ec:	10c00526 	beq	r2,r3,1000a304 <_fstat_r+0x48>
1000a2f0:	dfc00217 	ldw	ra,8(sp)
1000a2f4:	dc400117 	ldw	r17,4(sp)
1000a2f8:	dc000017 	ldw	r16,0(sp)
1000a2fc:	dec00304 	addi	sp,sp,12
1000a300:	f800283a 	ret
1000a304:	80c00017 	ldw	r3,0(r16)
1000a308:	183ff926 	beq	r3,zero,1000a2f0 <__alt_data_end+0xf800a2f0>
1000a30c:	88c00015 	stw	r3,0(r17)
1000a310:	003ff706 	br	1000a2f0 <__alt_data_end+0xf800a2f0>

1000a314 <_isatty_r>:
1000a314:	defffd04 	addi	sp,sp,-12
1000a318:	dc000015 	stw	r16,0(sp)
1000a31c:	04040074 	movhi	r16,4097
1000a320:	dc400115 	stw	r17,4(sp)
1000a324:	84118f04 	addi	r16,r16,17980
1000a328:	2023883a 	mov	r17,r4
1000a32c:	2809883a 	mov	r4,r5
1000a330:	dfc00215 	stw	ra,8(sp)
1000a334:	80000015 	stw	zero,0(r16)
1000a338:	000dfc00 	call	1000dfc0 <isatty>
1000a33c:	00ffffc4 	movi	r3,-1
1000a340:	10c00526 	beq	r2,r3,1000a358 <_isatty_r+0x44>
1000a344:	dfc00217 	ldw	ra,8(sp)
1000a348:	dc400117 	ldw	r17,4(sp)
1000a34c:	dc000017 	ldw	r16,0(sp)
1000a350:	dec00304 	addi	sp,sp,12
1000a354:	f800283a 	ret
1000a358:	80c00017 	ldw	r3,0(r16)
1000a35c:	183ff926 	beq	r3,zero,1000a344 <__alt_data_end+0xf800a344>
1000a360:	88c00015 	stw	r3,0(r17)
1000a364:	003ff706 	br	1000a344 <__alt_data_end+0xf800a344>

1000a368 <_lseek_r>:
1000a368:	defffd04 	addi	sp,sp,-12
1000a36c:	dc000015 	stw	r16,0(sp)
1000a370:	04040074 	movhi	r16,4097
1000a374:	dc400115 	stw	r17,4(sp)
1000a378:	84118f04 	addi	r16,r16,17980
1000a37c:	2023883a 	mov	r17,r4
1000a380:	2809883a 	mov	r4,r5
1000a384:	300b883a 	mov	r5,r6
1000a388:	380d883a 	mov	r6,r7
1000a38c:	dfc00215 	stw	ra,8(sp)
1000a390:	80000015 	stw	zero,0(r16)
1000a394:	000e1a00 	call	1000e1a0 <lseek>
1000a398:	00ffffc4 	movi	r3,-1
1000a39c:	10c00526 	beq	r2,r3,1000a3b4 <_lseek_r+0x4c>
1000a3a0:	dfc00217 	ldw	ra,8(sp)
1000a3a4:	dc400117 	ldw	r17,4(sp)
1000a3a8:	dc000017 	ldw	r16,0(sp)
1000a3ac:	dec00304 	addi	sp,sp,12
1000a3b0:	f800283a 	ret
1000a3b4:	80c00017 	ldw	r3,0(r16)
1000a3b8:	183ff926 	beq	r3,zero,1000a3a0 <__alt_data_end+0xf800a3a0>
1000a3bc:	88c00015 	stw	r3,0(r17)
1000a3c0:	003ff706 	br	1000a3a0 <__alt_data_end+0xf800a3a0>

1000a3c4 <_read_r>:
1000a3c4:	defffd04 	addi	sp,sp,-12
1000a3c8:	dc000015 	stw	r16,0(sp)
1000a3cc:	04040074 	movhi	r16,4097
1000a3d0:	dc400115 	stw	r17,4(sp)
1000a3d4:	84118f04 	addi	r16,r16,17980
1000a3d8:	2023883a 	mov	r17,r4
1000a3dc:	2809883a 	mov	r4,r5
1000a3e0:	300b883a 	mov	r5,r6
1000a3e4:	380d883a 	mov	r6,r7
1000a3e8:	dfc00215 	stw	ra,8(sp)
1000a3ec:	80000015 	stw	zero,0(r16)
1000a3f0:	000e3840 	call	1000e384 <read>
1000a3f4:	00ffffc4 	movi	r3,-1
1000a3f8:	10c00526 	beq	r2,r3,1000a410 <_read_r+0x4c>
1000a3fc:	dfc00217 	ldw	ra,8(sp)
1000a400:	dc400117 	ldw	r17,4(sp)
1000a404:	dc000017 	ldw	r16,0(sp)
1000a408:	dec00304 	addi	sp,sp,12
1000a40c:	f800283a 	ret
1000a410:	80c00017 	ldw	r3,0(r16)
1000a414:	183ff926 	beq	r3,zero,1000a3fc <__alt_data_end+0xf800a3fc>
1000a418:	88c00015 	stw	r3,0(r17)
1000a41c:	003ff706 	br	1000a3fc <__alt_data_end+0xf800a3fc>

1000a420 <__swbuf_r>:
1000a420:	defffc04 	addi	sp,sp,-16
1000a424:	dc800215 	stw	r18,8(sp)
1000a428:	dc400115 	stw	r17,4(sp)
1000a42c:	dc000015 	stw	r16,0(sp)
1000a430:	dfc00315 	stw	ra,12(sp)
1000a434:	2025883a 	mov	r18,r4
1000a438:	2823883a 	mov	r17,r5
1000a43c:	3021883a 	mov	r16,r6
1000a440:	20000226 	beq	r4,zero,1000a44c <__swbuf_r+0x2c>
1000a444:	20800e17 	ldw	r2,56(r4)
1000a448:	10004126 	beq	r2,zero,1000a550 <__swbuf_r+0x130>
1000a44c:	80c00617 	ldw	r3,24(r16)
1000a450:	8180030b 	ldhu	r6,12(r16)
1000a454:	80c00215 	stw	r3,8(r16)
1000a458:	30c0020c 	andi	r3,r6,8
1000a45c:	18003526 	beq	r3,zero,1000a534 <__swbuf_r+0x114>
1000a460:	80c00417 	ldw	r3,16(r16)
1000a464:	18003326 	beq	r3,zero,1000a534 <__swbuf_r+0x114>
1000a468:	3088000c 	andi	r2,r6,8192
1000a46c:	8c403fcc 	andi	r17,r17,255
1000a470:	10001726 	beq	r2,zero,1000a4d0 <__swbuf_r+0xb0>
1000a474:	80800017 	ldw	r2,0(r16)
1000a478:	81000517 	ldw	r4,20(r16)
1000a47c:	10c7c83a 	sub	r3,r2,r3
1000a480:	19001d0e 	bge	r3,r4,1000a4f8 <__swbuf_r+0xd8>
1000a484:	18c00044 	addi	r3,r3,1
1000a488:	81400217 	ldw	r5,8(r16)
1000a48c:	11000044 	addi	r4,r2,1
1000a490:	81000015 	stw	r4,0(r16)
1000a494:	297fffc4 	addi	r5,r5,-1
1000a498:	81400215 	stw	r5,8(r16)
1000a49c:	14400005 	stb	r17,0(r2)
1000a4a0:	80800517 	ldw	r2,20(r16)
1000a4a4:	10c01d26 	beq	r2,r3,1000a51c <__swbuf_r+0xfc>
1000a4a8:	8080030b 	ldhu	r2,12(r16)
1000a4ac:	1080004c 	andi	r2,r2,1
1000a4b0:	1000181e 	bne	r2,zero,1000a514 <__swbuf_r+0xf4>
1000a4b4:	8805883a 	mov	r2,r17
1000a4b8:	dfc00317 	ldw	ra,12(sp)
1000a4bc:	dc800217 	ldw	r18,8(sp)
1000a4c0:	dc400117 	ldw	r17,4(sp)
1000a4c4:	dc000017 	ldw	r16,0(sp)
1000a4c8:	dec00404 	addi	sp,sp,16
1000a4cc:	f800283a 	ret
1000a4d0:	81001917 	ldw	r4,100(r16)
1000a4d4:	00b7ffc4 	movi	r2,-8193
1000a4d8:	31880014 	ori	r6,r6,8192
1000a4dc:	2084703a 	and	r2,r4,r2
1000a4e0:	80801915 	stw	r2,100(r16)
1000a4e4:	80800017 	ldw	r2,0(r16)
1000a4e8:	81000517 	ldw	r4,20(r16)
1000a4ec:	8180030d 	sth	r6,12(r16)
1000a4f0:	10c7c83a 	sub	r3,r2,r3
1000a4f4:	193fe316 	blt	r3,r4,1000a484 <__alt_data_end+0xf800a484>
1000a4f8:	9009883a 	mov	r4,r18
1000a4fc:	800b883a 	mov	r5,r16
1000a500:	0005a780 	call	10005a78 <_fflush_r>
1000a504:	1000091e 	bne	r2,zero,1000a52c <__swbuf_r+0x10c>
1000a508:	80800017 	ldw	r2,0(r16)
1000a50c:	00c00044 	movi	r3,1
1000a510:	003fdd06 	br	1000a488 <__alt_data_end+0xf800a488>
1000a514:	00800284 	movi	r2,10
1000a518:	88bfe61e 	bne	r17,r2,1000a4b4 <__alt_data_end+0xf800a4b4>
1000a51c:	9009883a 	mov	r4,r18
1000a520:	800b883a 	mov	r5,r16
1000a524:	0005a780 	call	10005a78 <_fflush_r>
1000a528:	103fe226 	beq	r2,zero,1000a4b4 <__alt_data_end+0xf800a4b4>
1000a52c:	00bfffc4 	movi	r2,-1
1000a530:	003fe106 	br	1000a4b8 <__alt_data_end+0xf800a4b8>
1000a534:	9009883a 	mov	r4,r18
1000a538:	800b883a 	mov	r5,r16
1000a53c:	0003ff80 	call	10003ff8 <__swsetup_r>
1000a540:	1000051e 	bne	r2,zero,1000a558 <__swbuf_r+0x138>
1000a544:	8180030b 	ldhu	r6,12(r16)
1000a548:	80c00417 	ldw	r3,16(r16)
1000a54c:	003fc606 	br	1000a468 <__alt_data_end+0xf800a468>
1000a550:	00060340 	call	10006034 <__sinit>
1000a554:	003fbd06 	br	1000a44c <__alt_data_end+0xf800a44c>
1000a558:	80c0030b 	ldhu	r3,12(r16)
1000a55c:	00bfffc4 	movi	r2,-1
1000a560:	18c01014 	ori	r3,r3,64
1000a564:	80c0030d 	sth	r3,12(r16)
1000a568:	00c00244 	movi	r3,9
1000a56c:	90c00015 	stw	r3,0(r18)
1000a570:	003fd106 	br	1000a4b8 <__alt_data_end+0xf800a4b8>

1000a574 <__swbuf>:
1000a574:	00c40074 	movhi	r3,4097
1000a578:	18cab504 	addi	r3,r3,10964
1000a57c:	2005883a 	mov	r2,r4
1000a580:	19000017 	ldw	r4,0(r3)
1000a584:	280d883a 	mov	r6,r5
1000a588:	100b883a 	mov	r5,r2
1000a58c:	000a4201 	jmpi	1000a420 <__swbuf_r>

1000a590 <_wcrtomb_r>:
1000a590:	defff604 	addi	sp,sp,-40
1000a594:	00840074 	movhi	r2,4097
1000a598:	dc800815 	stw	r18,32(sp)
1000a59c:	dc400715 	stw	r17,28(sp)
1000a5a0:	dc000615 	stw	r16,24(sp)
1000a5a4:	108ab704 	addi	r2,r2,10972
1000a5a8:	dfc00915 	stw	ra,36(sp)
1000a5ac:	2021883a 	mov	r16,r4
1000a5b0:	3823883a 	mov	r17,r7
1000a5b4:	14800017 	ldw	r18,0(r2)
1000a5b8:	28001426 	beq	r5,zero,1000a60c <_wcrtomb_r+0x7c>
1000a5bc:	d9400415 	stw	r5,16(sp)
1000a5c0:	d9800515 	stw	r6,20(sp)
1000a5c4:	0006b280 	call	10006b28 <__locale_charset>
1000a5c8:	d9400417 	ldw	r5,16(sp)
1000a5cc:	d9800517 	ldw	r6,20(sp)
1000a5d0:	8009883a 	mov	r4,r16
1000a5d4:	dc400015 	stw	r17,0(sp)
1000a5d8:	100f883a 	mov	r7,r2
1000a5dc:	903ee83a 	callr	r18
1000a5e0:	00ffffc4 	movi	r3,-1
1000a5e4:	10c0031e 	bne	r2,r3,1000a5f4 <_wcrtomb_r+0x64>
1000a5e8:	88000015 	stw	zero,0(r17)
1000a5ec:	00c02284 	movi	r3,138
1000a5f0:	80c00015 	stw	r3,0(r16)
1000a5f4:	dfc00917 	ldw	ra,36(sp)
1000a5f8:	dc800817 	ldw	r18,32(sp)
1000a5fc:	dc400717 	ldw	r17,28(sp)
1000a600:	dc000617 	ldw	r16,24(sp)
1000a604:	dec00a04 	addi	sp,sp,40
1000a608:	f800283a 	ret
1000a60c:	0006b280 	call	10006b28 <__locale_charset>
1000a610:	8009883a 	mov	r4,r16
1000a614:	dc400015 	stw	r17,0(sp)
1000a618:	d9400104 	addi	r5,sp,4
1000a61c:	000d883a 	mov	r6,zero
1000a620:	100f883a 	mov	r7,r2
1000a624:	903ee83a 	callr	r18
1000a628:	003fed06 	br	1000a5e0 <__alt_data_end+0xf800a5e0>

1000a62c <wcrtomb>:
1000a62c:	defff504 	addi	sp,sp,-44
1000a630:	dc400515 	stw	r17,20(sp)
1000a634:	dc000415 	stw	r16,16(sp)
1000a638:	dfc00a15 	stw	ra,40(sp)
1000a63c:	dd400915 	stw	r21,36(sp)
1000a640:	dd000815 	stw	r20,32(sp)
1000a644:	dcc00715 	stw	r19,28(sp)
1000a648:	dc800615 	stw	r18,24(sp)
1000a64c:	2021883a 	mov	r16,r4
1000a650:	3023883a 	mov	r17,r6
1000a654:	20001d26 	beq	r4,zero,1000a6cc <wcrtomb+0xa0>
1000a658:	04840074 	movhi	r18,4097
1000a65c:	948ab504 	addi	r18,r18,10964
1000a660:	00840074 	movhi	r2,4097
1000a664:	95400017 	ldw	r21,0(r18)
1000a668:	108ab704 	addi	r2,r2,10972
1000a66c:	15000017 	ldw	r20,0(r2)
1000a670:	2827883a 	mov	r19,r5
1000a674:	0006b280 	call	10006b28 <__locale_charset>
1000a678:	a809883a 	mov	r4,r21
1000a67c:	dc400015 	stw	r17,0(sp)
1000a680:	800b883a 	mov	r5,r16
1000a684:	980d883a 	mov	r6,r19
1000a688:	100f883a 	mov	r7,r2
1000a68c:	a03ee83a 	callr	r20
1000a690:	00ffffc4 	movi	r3,-1
1000a694:	10c0041e 	bne	r2,r3,1000a6a8 <wcrtomb+0x7c>
1000a698:	90c00017 	ldw	r3,0(r18)
1000a69c:	01002284 	movi	r4,138
1000a6a0:	88000015 	stw	zero,0(r17)
1000a6a4:	19000015 	stw	r4,0(r3)
1000a6a8:	dfc00a17 	ldw	ra,40(sp)
1000a6ac:	dd400917 	ldw	r21,36(sp)
1000a6b0:	dd000817 	ldw	r20,32(sp)
1000a6b4:	dcc00717 	ldw	r19,28(sp)
1000a6b8:	dc800617 	ldw	r18,24(sp)
1000a6bc:	dc400517 	ldw	r17,20(sp)
1000a6c0:	dc000417 	ldw	r16,16(sp)
1000a6c4:	dec00b04 	addi	sp,sp,44
1000a6c8:	f800283a 	ret
1000a6cc:	04840074 	movhi	r18,4097
1000a6d0:	948ab504 	addi	r18,r18,10964
1000a6d4:	00840074 	movhi	r2,4097
1000a6d8:	94c00017 	ldw	r19,0(r18)
1000a6dc:	108ab704 	addi	r2,r2,10972
1000a6e0:	14000017 	ldw	r16,0(r2)
1000a6e4:	0006b280 	call	10006b28 <__locale_charset>
1000a6e8:	9809883a 	mov	r4,r19
1000a6ec:	dc400015 	stw	r17,0(sp)
1000a6f0:	d9400104 	addi	r5,sp,4
1000a6f4:	000d883a 	mov	r6,zero
1000a6f8:	100f883a 	mov	r7,r2
1000a6fc:	803ee83a 	callr	r16
1000a700:	003fe306 	br	1000a690 <__alt_data_end+0xf800a690>

1000a704 <__ascii_wctomb>:
1000a704:	28000526 	beq	r5,zero,1000a71c <__ascii_wctomb+0x18>
1000a708:	00803fc4 	movi	r2,255
1000a70c:	11800536 	bltu	r2,r6,1000a724 <__ascii_wctomb+0x20>
1000a710:	29800005 	stb	r6,0(r5)
1000a714:	00800044 	movi	r2,1
1000a718:	f800283a 	ret
1000a71c:	0005883a 	mov	r2,zero
1000a720:	f800283a 	ret
1000a724:	00802284 	movi	r2,138
1000a728:	20800015 	stw	r2,0(r4)
1000a72c:	00bfffc4 	movi	r2,-1
1000a730:	f800283a 	ret

1000a734 <_wctomb_r>:
1000a734:	00840074 	movhi	r2,4097
1000a738:	defff904 	addi	sp,sp,-28
1000a73c:	108ab704 	addi	r2,r2,10972
1000a740:	dfc00615 	stw	ra,24(sp)
1000a744:	dc400515 	stw	r17,20(sp)
1000a748:	dc000415 	stw	r16,16(sp)
1000a74c:	3823883a 	mov	r17,r7
1000a750:	14000017 	ldw	r16,0(r2)
1000a754:	d9000115 	stw	r4,4(sp)
1000a758:	d9400215 	stw	r5,8(sp)
1000a75c:	d9800315 	stw	r6,12(sp)
1000a760:	0006b280 	call	10006b28 <__locale_charset>
1000a764:	d9000117 	ldw	r4,4(sp)
1000a768:	d9400217 	ldw	r5,8(sp)
1000a76c:	d9800317 	ldw	r6,12(sp)
1000a770:	dc400015 	stw	r17,0(sp)
1000a774:	100f883a 	mov	r7,r2
1000a778:	803ee83a 	callr	r16
1000a77c:	dfc00617 	ldw	ra,24(sp)
1000a780:	dc400517 	ldw	r17,20(sp)
1000a784:	dc000417 	ldw	r16,16(sp)
1000a788:	dec00704 	addi	sp,sp,28
1000a78c:	f800283a 	ret

1000a790 <__udivdi3>:
1000a790:	defff504 	addi	sp,sp,-44
1000a794:	dcc00415 	stw	r19,16(sp)
1000a798:	dc000115 	stw	r16,4(sp)
1000a79c:	dfc00a15 	stw	ra,40(sp)
1000a7a0:	df000915 	stw	fp,36(sp)
1000a7a4:	ddc00815 	stw	r23,32(sp)
1000a7a8:	dd800715 	stw	r22,28(sp)
1000a7ac:	dd400615 	stw	r21,24(sp)
1000a7b0:	dd000515 	stw	r20,20(sp)
1000a7b4:	dc800315 	stw	r18,12(sp)
1000a7b8:	dc400215 	stw	r17,8(sp)
1000a7bc:	2027883a 	mov	r19,r4
1000a7c0:	2821883a 	mov	r16,r5
1000a7c4:	3800471e 	bne	r7,zero,1000a8e4 <__udivdi3+0x154>
1000a7c8:	3025883a 	mov	r18,r6
1000a7cc:	2023883a 	mov	r17,r4
1000a7d0:	2980592e 	bgeu	r5,r6,1000a938 <__udivdi3+0x1a8>
1000a7d4:	00bfffd4 	movui	r2,65535
1000a7d8:	2829883a 	mov	r20,r5
1000a7dc:	1180b236 	bltu	r2,r6,1000aaa8 <__udivdi3+0x318>
1000a7e0:	00803fc4 	movi	r2,255
1000a7e4:	1181622e 	bgeu	r2,r6,1000ad70 <__udivdi3+0x5e0>
1000a7e8:	00800204 	movi	r2,8
1000a7ec:	1007883a 	mov	r3,r2
1000a7f0:	3084d83a 	srl	r2,r6,r2
1000a7f4:	01040074 	movhi	r4,4097
1000a7f8:	2103ab04 	addi	r4,r4,3756
1000a7fc:	2085883a 	add	r2,r4,r2
1000a800:	11000003 	ldbu	r4,0(r2)
1000a804:	20c9883a 	add	r4,r4,r3
1000a808:	00c00804 	movi	r3,32
1000a80c:	1907c83a 	sub	r3,r3,r4
1000a810:	18000526 	beq	r3,zero,1000a828 <__udivdi3+0x98>
1000a814:	80e0983a 	sll	r16,r16,r3
1000a818:	9908d83a 	srl	r4,r19,r4
1000a81c:	30e4983a 	sll	r18,r6,r3
1000a820:	98e2983a 	sll	r17,r19,r3
1000a824:	8128b03a 	or	r20,r16,r4
1000a828:	902ad43a 	srli	r21,r18,16
1000a82c:	a009883a 	mov	r4,r20
1000a830:	95bfffcc 	andi	r22,r18,65535
1000a834:	a80b883a 	mov	r5,r21
1000a838:	000b5100 	call	1000b510 <__umodsi3>
1000a83c:	a009883a 	mov	r4,r20
1000a840:	a80b883a 	mov	r5,r21
1000a844:	102f883a 	mov	r23,r2
1000a848:	000b5080 	call	1000b508 <__udivsi3>
1000a84c:	1009883a 	mov	r4,r2
1000a850:	b00b883a 	mov	r5,r22
1000a854:	1021883a 	mov	r16,r2
1000a858:	00013880 	call	10001388 <__mulsi3>
1000a85c:	b82e943a 	slli	r23,r23,16
1000a860:	8808d43a 	srli	r4,r17,16
1000a864:	b906b03a 	or	r3,r23,r4
1000a868:	1880052e 	bgeu	r3,r2,1000a880 <__udivdi3+0xf0>
1000a86c:	1c87883a 	add	r3,r3,r18
1000a870:	813fffc4 	addi	r4,r16,-1
1000a874:	1c800136 	bltu	r3,r18,1000a87c <__udivdi3+0xec>
1000a878:	18815236 	bltu	r3,r2,1000adc4 <__udivdi3+0x634>
1000a87c:	2021883a 	mov	r16,r4
1000a880:	18a7c83a 	sub	r19,r3,r2
1000a884:	9809883a 	mov	r4,r19
1000a888:	a80b883a 	mov	r5,r21
1000a88c:	000b5100 	call	1000b510 <__umodsi3>
1000a890:	1029883a 	mov	r20,r2
1000a894:	9809883a 	mov	r4,r19
1000a898:	a80b883a 	mov	r5,r21
1000a89c:	a028943a 	slli	r20,r20,16
1000a8a0:	000b5080 	call	1000b508 <__udivsi3>
1000a8a4:	1009883a 	mov	r4,r2
1000a8a8:	b00b883a 	mov	r5,r22
1000a8ac:	8c7fffcc 	andi	r17,r17,65535
1000a8b0:	1027883a 	mov	r19,r2
1000a8b4:	a462b03a 	or	r17,r20,r17
1000a8b8:	00013880 	call	10001388 <__mulsi3>
1000a8bc:	8880052e 	bgeu	r17,r2,1000a8d4 <__udivdi3+0x144>
1000a8c0:	8ca3883a 	add	r17,r17,r18
1000a8c4:	98ffffc4 	addi	r3,r19,-1
1000a8c8:	8c811036 	bltu	r17,r18,1000ad0c <__udivdi3+0x57c>
1000a8cc:	88810f2e 	bgeu	r17,r2,1000ad0c <__udivdi3+0x57c>
1000a8d0:	9cffff84 	addi	r19,r19,-2
1000a8d4:	8020943a 	slli	r16,r16,16
1000a8d8:	0007883a 	mov	r3,zero
1000a8dc:	9c04b03a 	or	r2,r19,r16
1000a8e0:	00006006 	br	1000aa64 <__udivdi3+0x2d4>
1000a8e4:	29c05d36 	bltu	r5,r7,1000aa5c <__udivdi3+0x2cc>
1000a8e8:	00bfffd4 	movui	r2,65535
1000a8ec:	11c0692e 	bgeu	r2,r7,1000aa94 <__udivdi3+0x304>
1000a8f0:	00804034 	movhi	r2,256
1000a8f4:	10bfffc4 	addi	r2,r2,-1
1000a8f8:	11c10e2e 	bgeu	r2,r7,1000ad34 <__udivdi3+0x5a4>
1000a8fc:	01400604 	movi	r5,24
1000a900:	2811883a 	mov	r8,r5
1000a904:	394ad83a 	srl	r5,r7,r5
1000a908:	00840074 	movhi	r2,4097
1000a90c:	1083ab04 	addi	r2,r2,3756
1000a910:	114b883a 	add	r5,r2,r5
1000a914:	29400003 	ldbu	r5,0(r5)
1000a918:	00c00804 	movi	r3,32
1000a91c:	2a0b883a 	add	r5,r5,r8
1000a920:	196fc83a 	sub	r23,r3,r5
1000a924:	b8006b1e 	bne	r23,zero,1000aad4 <__udivdi3+0x344>
1000a928:	3c011436 	bltu	r7,r16,1000ad7c <__udivdi3+0x5ec>
1000a92c:	9985403a 	cmpgeu	r2,r19,r6
1000a930:	0007883a 	mov	r3,zero
1000a934:	00004b06 	br	1000aa64 <__udivdi3+0x2d4>
1000a938:	3000041e 	bne	r6,zero,1000a94c <__udivdi3+0x1bc>
1000a93c:	01000044 	movi	r4,1
1000a940:	000b883a 	mov	r5,zero
1000a944:	000b5080 	call	1000b508 <__udivsi3>
1000a948:	1025883a 	mov	r18,r2
1000a94c:	00bfffd4 	movui	r2,65535
1000a950:	14805b2e 	bgeu	r2,r18,1000aac0 <__udivdi3+0x330>
1000a954:	00804034 	movhi	r2,256
1000a958:	10bfffc4 	addi	r2,r2,-1
1000a95c:	1480fe2e 	bgeu	r2,r18,1000ad58 <__udivdi3+0x5c8>
1000a960:	00800604 	movi	r2,24
1000a964:	1007883a 	mov	r3,r2
1000a968:	9084d83a 	srl	r2,r18,r2
1000a96c:	01040074 	movhi	r4,4097
1000a970:	2103ab04 	addi	r4,r4,3756
1000a974:	2085883a 	add	r2,r4,r2
1000a978:	11800003 	ldbu	r6,0(r2)
1000a97c:	01c00804 	movi	r7,32
1000a980:	30c7883a 	add	r3,r6,r3
1000a984:	38cfc83a 	sub	r7,r7,r3
1000a988:	3800a71e 	bne	r7,zero,1000ac28 <__udivdi3+0x498>
1000a98c:	9028d43a 	srli	r20,r18,16
1000a990:	84a1c83a 	sub	r16,r16,r18
1000a994:	957fffcc 	andi	r21,r18,65535
1000a998:	00c00044 	movi	r3,1
1000a99c:	8009883a 	mov	r4,r16
1000a9a0:	a00b883a 	mov	r5,r20
1000a9a4:	d8c00015 	stw	r3,0(sp)
1000a9a8:	000b5100 	call	1000b510 <__umodsi3>
1000a9ac:	8009883a 	mov	r4,r16
1000a9b0:	a00b883a 	mov	r5,r20
1000a9b4:	102d883a 	mov	r22,r2
1000a9b8:	000b5080 	call	1000b508 <__udivsi3>
1000a9bc:	1009883a 	mov	r4,r2
1000a9c0:	a80b883a 	mov	r5,r21
1000a9c4:	1021883a 	mov	r16,r2
1000a9c8:	00013880 	call	10001388 <__mulsi3>
1000a9cc:	b02c943a 	slli	r22,r22,16
1000a9d0:	880ed43a 	srli	r7,r17,16
1000a9d4:	d8c00017 	ldw	r3,0(sp)
1000a9d8:	b1ccb03a 	or	r6,r22,r7
1000a9dc:	3080052e 	bgeu	r6,r2,1000a9f4 <__udivdi3+0x264>
1000a9e0:	348d883a 	add	r6,r6,r18
1000a9e4:	813fffc4 	addi	r4,r16,-1
1000a9e8:	34800136 	bltu	r6,r18,1000a9f0 <__udivdi3+0x260>
1000a9ec:	3080f236 	bltu	r6,r2,1000adb8 <__udivdi3+0x628>
1000a9f0:	2021883a 	mov	r16,r4
1000a9f4:	30a7c83a 	sub	r19,r6,r2
1000a9f8:	9809883a 	mov	r4,r19
1000a9fc:	a00b883a 	mov	r5,r20
1000aa00:	d8c00015 	stw	r3,0(sp)
1000aa04:	000b5100 	call	1000b510 <__umodsi3>
1000aa08:	102d883a 	mov	r22,r2
1000aa0c:	9809883a 	mov	r4,r19
1000aa10:	a00b883a 	mov	r5,r20
1000aa14:	b02c943a 	slli	r22,r22,16
1000aa18:	000b5080 	call	1000b508 <__udivsi3>
1000aa1c:	1009883a 	mov	r4,r2
1000aa20:	a80b883a 	mov	r5,r21
1000aa24:	8c7fffcc 	andi	r17,r17,65535
1000aa28:	1027883a 	mov	r19,r2
1000aa2c:	b462b03a 	or	r17,r22,r17
1000aa30:	00013880 	call	10001388 <__mulsi3>
1000aa34:	d8c00017 	ldw	r3,0(sp)
1000aa38:	8880052e 	bgeu	r17,r2,1000aa50 <__udivdi3+0x2c0>
1000aa3c:	8ca3883a 	add	r17,r17,r18
1000aa40:	993fffc4 	addi	r4,r19,-1
1000aa44:	8c80af36 	bltu	r17,r18,1000ad04 <__udivdi3+0x574>
1000aa48:	8880ae2e 	bgeu	r17,r2,1000ad04 <__udivdi3+0x574>
1000aa4c:	9cffff84 	addi	r19,r19,-2
1000aa50:	8020943a 	slli	r16,r16,16
1000aa54:	9c04b03a 	or	r2,r19,r16
1000aa58:	00000206 	br	1000aa64 <__udivdi3+0x2d4>
1000aa5c:	0007883a 	mov	r3,zero
1000aa60:	0005883a 	mov	r2,zero
1000aa64:	dfc00a17 	ldw	ra,40(sp)
1000aa68:	df000917 	ldw	fp,36(sp)
1000aa6c:	ddc00817 	ldw	r23,32(sp)
1000aa70:	dd800717 	ldw	r22,28(sp)
1000aa74:	dd400617 	ldw	r21,24(sp)
1000aa78:	dd000517 	ldw	r20,20(sp)
1000aa7c:	dcc00417 	ldw	r19,16(sp)
1000aa80:	dc800317 	ldw	r18,12(sp)
1000aa84:	dc400217 	ldw	r17,8(sp)
1000aa88:	dc000117 	ldw	r16,4(sp)
1000aa8c:	dec00b04 	addi	sp,sp,44
1000aa90:	f800283a 	ret
1000aa94:	00803fc4 	movi	r2,255
1000aa98:	11c0a92e 	bgeu	r2,r7,1000ad40 <__udivdi3+0x5b0>
1000aa9c:	01400204 	movi	r5,8
1000aaa0:	2811883a 	mov	r8,r5
1000aaa4:	003f9706 	br	1000a904 <__alt_data_end+0xf800a904>
1000aaa8:	00804034 	movhi	r2,256
1000aaac:	10bfffc4 	addi	r2,r2,-1
1000aab0:	1180a62e 	bgeu	r2,r6,1000ad4c <__udivdi3+0x5bc>
1000aab4:	00800604 	movi	r2,24
1000aab8:	1007883a 	mov	r3,r2
1000aabc:	003f4c06 	br	1000a7f0 <__alt_data_end+0xf800a7f0>
1000aac0:	00803fc4 	movi	r2,255
1000aac4:	1480a72e 	bgeu	r2,r18,1000ad64 <__udivdi3+0x5d4>
1000aac8:	00800204 	movi	r2,8
1000aacc:	1007883a 	mov	r3,r2
1000aad0:	003fa506 	br	1000a968 <__alt_data_end+0xf800a968>
1000aad4:	3178d83a 	srl	fp,r6,r5
1000aad8:	3dce983a 	sll	r7,r7,r23
1000aadc:	8168d83a 	srl	r20,r16,r5
1000aae0:	9950d83a 	srl	r8,r19,r5
1000aae4:	3f38b03a 	or	fp,r7,fp
1000aae8:	e024d43a 	srli	r18,fp,16
1000aaec:	85e0983a 	sll	r16,r16,r23
1000aaf0:	a009883a 	mov	r4,r20
1000aaf4:	900b883a 	mov	r5,r18
1000aaf8:	8220b03a 	or	r16,r16,r8
1000aafc:	35ea983a 	sll	r21,r6,r23
1000ab00:	000b5100 	call	1000b510 <__umodsi3>
1000ab04:	a009883a 	mov	r4,r20
1000ab08:	900b883a 	mov	r5,r18
1000ab0c:	1023883a 	mov	r17,r2
1000ab10:	e5bfffcc 	andi	r22,fp,65535
1000ab14:	000b5080 	call	1000b508 <__udivsi3>
1000ab18:	1009883a 	mov	r4,r2
1000ab1c:	b00b883a 	mov	r5,r22
1000ab20:	1029883a 	mov	r20,r2
1000ab24:	00013880 	call	10001388 <__mulsi3>
1000ab28:	8806943a 	slli	r3,r17,16
1000ab2c:	8014d43a 	srli	r10,r16,16
1000ab30:	1a92b03a 	or	r9,r3,r10
1000ab34:	4880042e 	bgeu	r9,r2,1000ab48 <__udivdi3+0x3b8>
1000ab38:	4f13883a 	add	r9,r9,fp
1000ab3c:	a0ffffc4 	addi	r3,r20,-1
1000ab40:	4f00952e 	bgeu	r9,fp,1000ad98 <__udivdi3+0x608>
1000ab44:	1829883a 	mov	r20,r3
1000ab48:	48a3c83a 	sub	r17,r9,r2
1000ab4c:	8809883a 	mov	r4,r17
1000ab50:	900b883a 	mov	r5,r18
1000ab54:	000b5100 	call	1000b510 <__umodsi3>
1000ab58:	8809883a 	mov	r4,r17
1000ab5c:	900b883a 	mov	r5,r18
1000ab60:	d8800015 	stw	r2,0(sp)
1000ab64:	000b5080 	call	1000b508 <__udivsi3>
1000ab68:	1009883a 	mov	r4,r2
1000ab6c:	b00b883a 	mov	r5,r22
1000ab70:	1023883a 	mov	r17,r2
1000ab74:	00013880 	call	10001388 <__mulsi3>
1000ab78:	d8c00017 	ldw	r3,0(sp)
1000ab7c:	823fffcc 	andi	r8,r16,65535
1000ab80:	1806943a 	slli	r3,r3,16
1000ab84:	1a20b03a 	or	r16,r3,r8
1000ab88:	8080042e 	bgeu	r16,r2,1000ab9c <__udivdi3+0x40c>
1000ab8c:	8721883a 	add	r16,r16,fp
1000ab90:	88ffffc4 	addi	r3,r17,-1
1000ab94:	87007c2e 	bgeu	r16,fp,1000ad88 <__udivdi3+0x5f8>
1000ab98:	1823883a 	mov	r17,r3
1000ab9c:	a028943a 	slli	r20,r20,16
1000aba0:	acbfffcc 	andi	r18,r21,65535
1000aba4:	900b883a 	mov	r5,r18
1000aba8:	8d28b03a 	or	r20,r17,r20
1000abac:	a022d43a 	srli	r17,r20,16
1000abb0:	a5bfffcc 	andi	r22,r20,65535
1000abb4:	b009883a 	mov	r4,r22
1000abb8:	a82ad43a 	srli	r21,r21,16
1000abbc:	80a1c83a 	sub	r16,r16,r2
1000abc0:	00013880 	call	10001388 <__mulsi3>
1000abc4:	8809883a 	mov	r4,r17
1000abc8:	900b883a 	mov	r5,r18
1000abcc:	1039883a 	mov	fp,r2
1000abd0:	00013880 	call	10001388 <__mulsi3>
1000abd4:	8809883a 	mov	r4,r17
1000abd8:	a80b883a 	mov	r5,r21
1000abdc:	1025883a 	mov	r18,r2
1000abe0:	00013880 	call	10001388 <__mulsi3>
1000abe4:	b009883a 	mov	r4,r22
1000abe8:	a80b883a 	mov	r5,r21
1000abec:	1023883a 	mov	r17,r2
1000abf0:	00013880 	call	10001388 <__mulsi3>
1000abf4:	e006d43a 	srli	r3,fp,16
1000abf8:	9085883a 	add	r2,r18,r2
1000abfc:	10c7883a 	add	r3,r2,r3
1000ac00:	1c80022e 	bgeu	r3,r18,1000ac0c <__udivdi3+0x47c>
1000ac04:	00800074 	movhi	r2,1
1000ac08:	88a3883a 	add	r17,r17,r2
1000ac0c:	1808d43a 	srli	r4,r3,16
1000ac10:	8909883a 	add	r4,r17,r4
1000ac14:	81004436 	bltu	r16,r4,1000ad28 <__udivdi3+0x598>
1000ac18:	81003e26 	beq	r16,r4,1000ad14 <__udivdi3+0x584>
1000ac1c:	a005883a 	mov	r2,r20
1000ac20:	0007883a 	mov	r3,zero
1000ac24:	003f8f06 	br	1000aa64 <__alt_data_end+0xf800aa64>
1000ac28:	91e4983a 	sll	r18,r18,r7
1000ac2c:	80eed83a 	srl	r23,r16,r3
1000ac30:	81cc983a 	sll	r6,r16,r7
1000ac34:	9028d43a 	srli	r20,r18,16
1000ac38:	98c6d83a 	srl	r3,r19,r3
1000ac3c:	b809883a 	mov	r4,r23
1000ac40:	a00b883a 	mov	r5,r20
1000ac44:	30ecb03a 	or	r22,r6,r3
1000ac48:	99e2983a 	sll	r17,r19,r7
1000ac4c:	000b5100 	call	1000b510 <__umodsi3>
1000ac50:	b809883a 	mov	r4,r23
1000ac54:	a00b883a 	mov	r5,r20
1000ac58:	1021883a 	mov	r16,r2
1000ac5c:	957fffcc 	andi	r21,r18,65535
1000ac60:	000b5080 	call	1000b508 <__udivsi3>
1000ac64:	a80b883a 	mov	r5,r21
1000ac68:	1009883a 	mov	r4,r2
1000ac6c:	102f883a 	mov	r23,r2
1000ac70:	00013880 	call	10001388 <__mulsi3>
1000ac74:	8020943a 	slli	r16,r16,16
1000ac78:	b00ad43a 	srli	r5,r22,16
1000ac7c:	814cb03a 	or	r6,r16,r5
1000ac80:	3080062e 	bgeu	r6,r2,1000ac9c <__udivdi3+0x50c>
1000ac84:	348d883a 	add	r6,r6,r18
1000ac88:	b8ffffc4 	addi	r3,r23,-1
1000ac8c:	34804836 	bltu	r6,r18,1000adb0 <__udivdi3+0x620>
1000ac90:	3080472e 	bgeu	r6,r2,1000adb0 <__udivdi3+0x620>
1000ac94:	bdffff84 	addi	r23,r23,-2
1000ac98:	348d883a 	add	r6,r6,r18
1000ac9c:	30a7c83a 	sub	r19,r6,r2
1000aca0:	9809883a 	mov	r4,r19
1000aca4:	a00b883a 	mov	r5,r20
1000aca8:	000b5100 	call	1000b510 <__umodsi3>
1000acac:	9809883a 	mov	r4,r19
1000acb0:	a00b883a 	mov	r5,r20
1000acb4:	1039883a 	mov	fp,r2
1000acb8:	000b5080 	call	1000b508 <__udivsi3>
1000acbc:	1009883a 	mov	r4,r2
1000acc0:	a80b883a 	mov	r5,r21
1000acc4:	e038943a 	slli	fp,fp,16
1000acc8:	1027883a 	mov	r19,r2
1000accc:	00013880 	call	10001388 <__mulsi3>
1000acd0:	b1bfffcc 	andi	r6,r22,65535
1000acd4:	e18cb03a 	or	r6,fp,r6
1000acd8:	3080062e 	bgeu	r6,r2,1000acf4 <__udivdi3+0x564>
1000acdc:	348d883a 	add	r6,r6,r18
1000ace0:	98ffffc4 	addi	r3,r19,-1
1000ace4:	34803036 	bltu	r6,r18,1000ada8 <__udivdi3+0x618>
1000ace8:	30802f2e 	bgeu	r6,r2,1000ada8 <__udivdi3+0x618>
1000acec:	9cffff84 	addi	r19,r19,-2
1000acf0:	348d883a 	add	r6,r6,r18
1000acf4:	b82e943a 	slli	r23,r23,16
1000acf8:	30a1c83a 	sub	r16,r6,r2
1000acfc:	9dc6b03a 	or	r3,r19,r23
1000ad00:	003f2606 	br	1000a99c <__alt_data_end+0xf800a99c>
1000ad04:	2027883a 	mov	r19,r4
1000ad08:	003f5106 	br	1000aa50 <__alt_data_end+0xf800aa50>
1000ad0c:	1827883a 	mov	r19,r3
1000ad10:	003ef006 	br	1000a8d4 <__alt_data_end+0xf800a8d4>
1000ad14:	1808943a 	slli	r4,r3,16
1000ad18:	9dc6983a 	sll	r3,r19,r23
1000ad1c:	e73fffcc 	andi	fp,fp,65535
1000ad20:	2709883a 	add	r4,r4,fp
1000ad24:	193fbd2e 	bgeu	r3,r4,1000ac1c <__alt_data_end+0xf800ac1c>
1000ad28:	a0bfffc4 	addi	r2,r20,-1
1000ad2c:	0007883a 	mov	r3,zero
1000ad30:	003f4c06 	br	1000aa64 <__alt_data_end+0xf800aa64>
1000ad34:	01400404 	movi	r5,16
1000ad38:	2811883a 	mov	r8,r5
1000ad3c:	003ef106 	br	1000a904 <__alt_data_end+0xf800a904>
1000ad40:	000b883a 	mov	r5,zero
1000ad44:	0011883a 	mov	r8,zero
1000ad48:	003eee06 	br	1000a904 <__alt_data_end+0xf800a904>
1000ad4c:	00800404 	movi	r2,16
1000ad50:	1007883a 	mov	r3,r2
1000ad54:	003ea606 	br	1000a7f0 <__alt_data_end+0xf800a7f0>
1000ad58:	00800404 	movi	r2,16
1000ad5c:	1007883a 	mov	r3,r2
1000ad60:	003f0106 	br	1000a968 <__alt_data_end+0xf800a968>
1000ad64:	0005883a 	mov	r2,zero
1000ad68:	0007883a 	mov	r3,zero
1000ad6c:	003efe06 	br	1000a968 <__alt_data_end+0xf800a968>
1000ad70:	0005883a 	mov	r2,zero
1000ad74:	0007883a 	mov	r3,zero
1000ad78:	003e9d06 	br	1000a7f0 <__alt_data_end+0xf800a7f0>
1000ad7c:	0007883a 	mov	r3,zero
1000ad80:	00800044 	movi	r2,1
1000ad84:	003f3706 	br	1000aa64 <__alt_data_end+0xf800aa64>
1000ad88:	80bf832e 	bgeu	r16,r2,1000ab98 <__alt_data_end+0xf800ab98>
1000ad8c:	8c7fff84 	addi	r17,r17,-2
1000ad90:	8721883a 	add	r16,r16,fp
1000ad94:	003f8106 	br	1000ab9c <__alt_data_end+0xf800ab9c>
1000ad98:	48bf6a2e 	bgeu	r9,r2,1000ab44 <__alt_data_end+0xf800ab44>
1000ad9c:	a53fff84 	addi	r20,r20,-2
1000ada0:	4f13883a 	add	r9,r9,fp
1000ada4:	003f6806 	br	1000ab48 <__alt_data_end+0xf800ab48>
1000ada8:	1827883a 	mov	r19,r3
1000adac:	003fd106 	br	1000acf4 <__alt_data_end+0xf800acf4>
1000adb0:	182f883a 	mov	r23,r3
1000adb4:	003fb906 	br	1000ac9c <__alt_data_end+0xf800ac9c>
1000adb8:	843fff84 	addi	r16,r16,-2
1000adbc:	348d883a 	add	r6,r6,r18
1000adc0:	003f0c06 	br	1000a9f4 <__alt_data_end+0xf800a9f4>
1000adc4:	843fff84 	addi	r16,r16,-2
1000adc8:	1c87883a 	add	r3,r3,r18
1000adcc:	003eac06 	br	1000a880 <__alt_data_end+0xf800a880>

1000add0 <__umoddi3>:
1000add0:	defff404 	addi	sp,sp,-48
1000add4:	dd800815 	stw	r22,32(sp)
1000add8:	dc400315 	stw	r17,12(sp)
1000addc:	dc000215 	stw	r16,8(sp)
1000ade0:	dfc00b15 	stw	ra,44(sp)
1000ade4:	df000a15 	stw	fp,40(sp)
1000ade8:	ddc00915 	stw	r23,36(sp)
1000adec:	dd400715 	stw	r21,28(sp)
1000adf0:	dd000615 	stw	r20,24(sp)
1000adf4:	dcc00515 	stw	r19,20(sp)
1000adf8:	dc800415 	stw	r18,16(sp)
1000adfc:	2021883a 	mov	r16,r4
1000ae00:	2823883a 	mov	r17,r5
1000ae04:	282d883a 	mov	r22,r5
1000ae08:	38003c1e 	bne	r7,zero,1000aefc <__umoddi3+0x12c>
1000ae0c:	3027883a 	mov	r19,r6
1000ae10:	2029883a 	mov	r20,r4
1000ae14:	2980522e 	bgeu	r5,r6,1000af60 <__umoddi3+0x190>
1000ae18:	00bfffd4 	movui	r2,65535
1000ae1c:	1180a436 	bltu	r2,r6,1000b0b0 <__umoddi3+0x2e0>
1000ae20:	00803fc4 	movi	r2,255
1000ae24:	11815e2e 	bgeu	r2,r6,1000b3a0 <__umoddi3+0x5d0>
1000ae28:	01400204 	movi	r5,8
1000ae2c:	2805883a 	mov	r2,r5
1000ae30:	314ad83a 	srl	r5,r6,r5
1000ae34:	00c40074 	movhi	r3,4097
1000ae38:	18c3ab04 	addi	r3,r3,3756
1000ae3c:	194b883a 	add	r5,r3,r5
1000ae40:	29000003 	ldbu	r4,0(r5)
1000ae44:	2089883a 	add	r4,r4,r2
1000ae48:	00800804 	movi	r2,32
1000ae4c:	1105c83a 	sub	r2,r2,r4
1000ae50:	10010c26 	beq	r2,zero,1000b284 <__umoddi3+0x4b4>
1000ae54:	88a2983a 	sll	r17,r17,r2
1000ae58:	8108d83a 	srl	r4,r16,r4
1000ae5c:	30a6983a 	sll	r19,r6,r2
1000ae60:	80a8983a 	sll	r20,r16,r2
1000ae64:	1025883a 	mov	r18,r2
1000ae68:	892cb03a 	or	r22,r17,r4
1000ae6c:	9822d43a 	srli	r17,r19,16
1000ae70:	b009883a 	mov	r4,r22
1000ae74:	9d7fffcc 	andi	r21,r19,65535
1000ae78:	880b883a 	mov	r5,r17
1000ae7c:	000b5100 	call	1000b510 <__umodsi3>
1000ae80:	b009883a 	mov	r4,r22
1000ae84:	880b883a 	mov	r5,r17
1000ae88:	102f883a 	mov	r23,r2
1000ae8c:	000b5080 	call	1000b508 <__udivsi3>
1000ae90:	1009883a 	mov	r4,r2
1000ae94:	a80b883a 	mov	r5,r21
1000ae98:	00013880 	call	10001388 <__mulsi3>
1000ae9c:	b82e943a 	slli	r23,r23,16
1000aea0:	a008d43a 	srli	r4,r20,16
1000aea4:	b906b03a 	or	r3,r23,r4
1000aea8:	1880042e 	bgeu	r3,r2,1000aebc <__umoddi3+0xec>
1000aeac:	1cc7883a 	add	r3,r3,r19
1000aeb0:	1cc00236 	bltu	r3,r19,1000aebc <__umoddi3+0xec>
1000aeb4:	1880012e 	bgeu	r3,r2,1000aebc <__umoddi3+0xec>
1000aeb8:	1cc7883a 	add	r3,r3,r19
1000aebc:	18a1c83a 	sub	r16,r3,r2
1000aec0:	8009883a 	mov	r4,r16
1000aec4:	880b883a 	mov	r5,r17
1000aec8:	000b5100 	call	1000b510 <__umodsi3>
1000aecc:	8009883a 	mov	r4,r16
1000aed0:	880b883a 	mov	r5,r17
1000aed4:	102d883a 	mov	r22,r2
1000aed8:	000b5080 	call	1000b508 <__udivsi3>
1000aedc:	1009883a 	mov	r4,r2
1000aee0:	a80b883a 	mov	r5,r21
1000aee4:	b02c943a 	slli	r22,r22,16
1000aee8:	00013880 	call	10001388 <__mulsi3>
1000aeec:	a13fffcc 	andi	r4,r20,65535
1000aef0:	b106b03a 	or	r3,r22,r4
1000aef4:	1880572e 	bgeu	r3,r2,1000b054 <__umoddi3+0x284>
1000aef8:	00005206 	br	1000b044 <__umoddi3+0x274>
1000aefc:	29c05936 	bltu	r5,r7,1000b064 <__umoddi3+0x294>
1000af00:	00bfffd4 	movui	r2,65535
1000af04:	11c0652e 	bgeu	r2,r7,1000b09c <__umoddi3+0x2cc>
1000af08:	00804034 	movhi	r2,256
1000af0c:	10bfffc4 	addi	r2,r2,-1
1000af10:	11c1172e 	bgeu	r2,r7,1000b370 <__umoddi3+0x5a0>
1000af14:	01400604 	movi	r5,24
1000af18:	282b883a 	mov	r21,r5
1000af1c:	394ad83a 	srl	r5,r7,r5
1000af20:	00c40074 	movhi	r3,4097
1000af24:	18c3ab04 	addi	r3,r3,3756
1000af28:	194b883a 	add	r5,r3,r5
1000af2c:	28800003 	ldbu	r2,0(r5)
1000af30:	00c00804 	movi	r3,32
1000af34:	156b883a 	add	r21,r2,r21
1000af38:	1d69c83a 	sub	r20,r3,r21
1000af3c:	a000671e 	bne	r20,zero,1000b0dc <__umoddi3+0x30c>
1000af40:	3c400136 	bltu	r7,r17,1000af48 <__umoddi3+0x178>
1000af44:	81812336 	bltu	r16,r6,1000b3d4 <__umoddi3+0x604>
1000af48:	8185c83a 	sub	r2,r16,r6
1000af4c:	89e3c83a 	sub	r17,r17,r7
1000af50:	8087803a 	cmpltu	r3,r16,r2
1000af54:	88edc83a 	sub	r22,r17,r3
1000af58:	b007883a 	mov	r3,r22
1000af5c:	00004306 	br	1000b06c <__umoddi3+0x29c>
1000af60:	3000041e 	bne	r6,zero,1000af74 <__umoddi3+0x1a4>
1000af64:	01000044 	movi	r4,1
1000af68:	000b883a 	mov	r5,zero
1000af6c:	000b5080 	call	1000b508 <__udivsi3>
1000af70:	1027883a 	mov	r19,r2
1000af74:	00bfffd4 	movui	r2,65535
1000af78:	14c0532e 	bgeu	r2,r19,1000b0c8 <__umoddi3+0x2f8>
1000af7c:	00804034 	movhi	r2,256
1000af80:	10bfffc4 	addi	r2,r2,-1
1000af84:	14c1032e 	bgeu	r2,r19,1000b394 <__umoddi3+0x5c4>
1000af88:	00800604 	movi	r2,24
1000af8c:	1007883a 	mov	r3,r2
1000af90:	9884d83a 	srl	r2,r19,r2
1000af94:	01040074 	movhi	r4,4097
1000af98:	2103ab04 	addi	r4,r4,3756
1000af9c:	2085883a 	add	r2,r4,r2
1000afa0:	11000003 	ldbu	r4,0(r2)
1000afa4:	00800804 	movi	r2,32
1000afa8:	20c7883a 	add	r3,r4,r3
1000afac:	10c5c83a 	sub	r2,r2,r3
1000afb0:	1000b61e 	bne	r2,zero,1000b28c <__umoddi3+0x4bc>
1000afb4:	982ad43a 	srli	r21,r19,16
1000afb8:	8ce3c83a 	sub	r17,r17,r19
1000afbc:	9dbfffcc 	andi	r22,r19,65535
1000afc0:	0025883a 	mov	r18,zero
1000afc4:	8809883a 	mov	r4,r17
1000afc8:	a80b883a 	mov	r5,r21
1000afcc:	000b5100 	call	1000b510 <__umodsi3>
1000afd0:	8809883a 	mov	r4,r17
1000afd4:	a80b883a 	mov	r5,r21
1000afd8:	102f883a 	mov	r23,r2
1000afdc:	000b5080 	call	1000b508 <__udivsi3>
1000afe0:	1009883a 	mov	r4,r2
1000afe4:	b00b883a 	mov	r5,r22
1000afe8:	00013880 	call	10001388 <__mulsi3>
1000afec:	b82e943a 	slli	r23,r23,16
1000aff0:	a008d43a 	srli	r4,r20,16
1000aff4:	b906b03a 	or	r3,r23,r4
1000aff8:	1880032e 	bgeu	r3,r2,1000b008 <__umoddi3+0x238>
1000affc:	1cc7883a 	add	r3,r3,r19
1000b000:	1cc00136 	bltu	r3,r19,1000b008 <__umoddi3+0x238>
1000b004:	1880f136 	bltu	r3,r2,1000b3cc <__umoddi3+0x5fc>
1000b008:	18a1c83a 	sub	r16,r3,r2
1000b00c:	8009883a 	mov	r4,r16
1000b010:	a80b883a 	mov	r5,r21
1000b014:	000b5100 	call	1000b510 <__umodsi3>
1000b018:	8009883a 	mov	r4,r16
1000b01c:	a80b883a 	mov	r5,r21
1000b020:	1023883a 	mov	r17,r2
1000b024:	000b5080 	call	1000b508 <__udivsi3>
1000b028:	1009883a 	mov	r4,r2
1000b02c:	b00b883a 	mov	r5,r22
1000b030:	8822943a 	slli	r17,r17,16
1000b034:	00013880 	call	10001388 <__mulsi3>
1000b038:	a13fffcc 	andi	r4,r20,65535
1000b03c:	8906b03a 	or	r3,r17,r4
1000b040:	1880042e 	bgeu	r3,r2,1000b054 <__umoddi3+0x284>
1000b044:	1cc7883a 	add	r3,r3,r19
1000b048:	1cc00236 	bltu	r3,r19,1000b054 <__umoddi3+0x284>
1000b04c:	1880012e 	bgeu	r3,r2,1000b054 <__umoddi3+0x284>
1000b050:	1cc7883a 	add	r3,r3,r19
1000b054:	1887c83a 	sub	r3,r3,r2
1000b058:	1c84d83a 	srl	r2,r3,r18
1000b05c:	0007883a 	mov	r3,zero
1000b060:	00000206 	br	1000b06c <__umoddi3+0x29c>
1000b064:	2005883a 	mov	r2,r4
1000b068:	2807883a 	mov	r3,r5
1000b06c:	dfc00b17 	ldw	ra,44(sp)
1000b070:	df000a17 	ldw	fp,40(sp)
1000b074:	ddc00917 	ldw	r23,36(sp)
1000b078:	dd800817 	ldw	r22,32(sp)
1000b07c:	dd400717 	ldw	r21,28(sp)
1000b080:	dd000617 	ldw	r20,24(sp)
1000b084:	dcc00517 	ldw	r19,20(sp)
1000b088:	dc800417 	ldw	r18,16(sp)
1000b08c:	dc400317 	ldw	r17,12(sp)
1000b090:	dc000217 	ldw	r16,8(sp)
1000b094:	dec00c04 	addi	sp,sp,48
1000b098:	f800283a 	ret
1000b09c:	00803fc4 	movi	r2,255
1000b0a0:	11c0b02e 	bgeu	r2,r7,1000b364 <__umoddi3+0x594>
1000b0a4:	01400204 	movi	r5,8
1000b0a8:	282b883a 	mov	r21,r5
1000b0ac:	003f9b06 	br	1000af1c <__alt_data_end+0xf800af1c>
1000b0b0:	00804034 	movhi	r2,256
1000b0b4:	10bfffc4 	addi	r2,r2,-1
1000b0b8:	1180b02e 	bgeu	r2,r6,1000b37c <__umoddi3+0x5ac>
1000b0bc:	01400604 	movi	r5,24
1000b0c0:	2805883a 	mov	r2,r5
1000b0c4:	003f5a06 	br	1000ae30 <__alt_data_end+0xf800ae30>
1000b0c8:	00803fc4 	movi	r2,255
1000b0cc:	14c0ae2e 	bgeu	r2,r19,1000b388 <__umoddi3+0x5b8>
1000b0d0:	00800204 	movi	r2,8
1000b0d4:	1007883a 	mov	r3,r2
1000b0d8:	003fad06 	br	1000af90 <__alt_data_end+0xf800af90>
1000b0dc:	3d0a983a 	sll	r5,r7,r20
1000b0e0:	356cd83a 	srl	r22,r6,r21
1000b0e4:	8d78d83a 	srl	fp,r17,r21
1000b0e8:	8d10983a 	sll	r8,r17,r20
1000b0ec:	2dacb03a 	or	r22,r5,r22
1000b0f0:	b02ed43a 	srli	r23,r22,16
1000b0f4:	8564d83a 	srl	r18,r16,r21
1000b0f8:	e009883a 	mov	r4,fp
1000b0fc:	b80b883a 	mov	r5,r23
1000b100:	44a4b03a 	or	r18,r8,r18
1000b104:	3526983a 	sll	r19,r6,r20
1000b108:	000b5100 	call	1000b510 <__umodsi3>
1000b10c:	e009883a 	mov	r4,fp
1000b110:	b80b883a 	mov	r5,r23
1000b114:	b47fffcc 	andi	r17,r22,65535
1000b118:	d8800015 	stw	r2,0(sp)
1000b11c:	000b5080 	call	1000b508 <__udivsi3>
1000b120:	1009883a 	mov	r4,r2
1000b124:	880b883a 	mov	r5,r17
1000b128:	1039883a 	mov	fp,r2
1000b12c:	00013880 	call	10001388 <__mulsi3>
1000b130:	d9800017 	ldw	r6,0(sp)
1000b134:	9008d43a 	srli	r4,r18,16
1000b138:	8520983a 	sll	r16,r16,r20
1000b13c:	300c943a 	slli	r6,r6,16
1000b140:	3106b03a 	or	r3,r6,r4
1000b144:	1880042e 	bgeu	r3,r2,1000b158 <__umoddi3+0x388>
1000b148:	1d87883a 	add	r3,r3,r22
1000b14c:	e13fffc4 	addi	r4,fp,-1
1000b150:	1d809a2e 	bgeu	r3,r22,1000b3bc <__umoddi3+0x5ec>
1000b154:	2039883a 	mov	fp,r4
1000b158:	1887c83a 	sub	r3,r3,r2
1000b15c:	1809883a 	mov	r4,r3
1000b160:	b80b883a 	mov	r5,r23
1000b164:	d8c00115 	stw	r3,4(sp)
1000b168:	000b5100 	call	1000b510 <__umodsi3>
1000b16c:	d8c00117 	ldw	r3,4(sp)
1000b170:	b80b883a 	mov	r5,r23
1000b174:	d8800015 	stw	r2,0(sp)
1000b178:	1809883a 	mov	r4,r3
1000b17c:	000b5080 	call	1000b508 <__udivsi3>
1000b180:	880b883a 	mov	r5,r17
1000b184:	1009883a 	mov	r4,r2
1000b188:	102f883a 	mov	r23,r2
1000b18c:	00013880 	call	10001388 <__mulsi3>
1000b190:	d9800017 	ldw	r6,0(sp)
1000b194:	947fffcc 	andi	r17,r18,65535
1000b198:	300c943a 	slli	r6,r6,16
1000b19c:	3464b03a 	or	r18,r6,r17
1000b1a0:	9080042e 	bgeu	r18,r2,1000b1b4 <__umoddi3+0x3e4>
1000b1a4:	95a5883a 	add	r18,r18,r22
1000b1a8:	b8ffffc4 	addi	r3,r23,-1
1000b1ac:	95807f2e 	bgeu	r18,r22,1000b3ac <__umoddi3+0x5dc>
1000b1b0:	182f883a 	mov	r23,r3
1000b1b4:	e038943a 	slli	fp,fp,16
1000b1b8:	980cd43a 	srli	r6,r19,16
1000b1bc:	98ffffcc 	andi	r3,r19,65535
1000b1c0:	bf38b03a 	or	fp,r23,fp
1000b1c4:	e02ed43a 	srli	r23,fp,16
1000b1c8:	e73fffcc 	andi	fp,fp,65535
1000b1cc:	180b883a 	mov	r5,r3
1000b1d0:	e009883a 	mov	r4,fp
1000b1d4:	d9800015 	stw	r6,0(sp)
1000b1d8:	d8c00115 	stw	r3,4(sp)
1000b1dc:	90a5c83a 	sub	r18,r18,r2
1000b1e0:	00013880 	call	10001388 <__mulsi3>
1000b1e4:	d8c00117 	ldw	r3,4(sp)
1000b1e8:	b809883a 	mov	r4,r23
1000b1ec:	1023883a 	mov	r17,r2
1000b1f0:	180b883a 	mov	r5,r3
1000b1f4:	00013880 	call	10001388 <__mulsi3>
1000b1f8:	d9800017 	ldw	r6,0(sp)
1000b1fc:	b809883a 	mov	r4,r23
1000b200:	d8800115 	stw	r2,4(sp)
1000b204:	300b883a 	mov	r5,r6
1000b208:	302f883a 	mov	r23,r6
1000b20c:	00013880 	call	10001388 <__mulsi3>
1000b210:	e009883a 	mov	r4,fp
1000b214:	b80b883a 	mov	r5,r23
1000b218:	d8800015 	stw	r2,0(sp)
1000b21c:	00013880 	call	10001388 <__mulsi3>
1000b220:	d8c00117 	ldw	r3,4(sp)
1000b224:	880cd43a 	srli	r6,r17,16
1000b228:	d9c00017 	ldw	r7,0(sp)
1000b22c:	1885883a 	add	r2,r3,r2
1000b230:	118d883a 	add	r6,r2,r6
1000b234:	30c0022e 	bgeu	r6,r3,1000b240 <__umoddi3+0x470>
1000b238:	00800074 	movhi	r2,1
1000b23c:	388f883a 	add	r7,r7,r2
1000b240:	3006d43a 	srli	r3,r6,16
1000b244:	300c943a 	slli	r6,r6,16
1000b248:	8c7fffcc 	andi	r17,r17,65535
1000b24c:	38c7883a 	add	r3,r7,r3
1000b250:	3463883a 	add	r17,r6,r17
1000b254:	90c03d36 	bltu	r18,r3,1000b34c <__umoddi3+0x57c>
1000b258:	90c06026 	beq	r18,r3,1000b3dc <__umoddi3+0x60c>
1000b25c:	90c9c83a 	sub	r4,r18,r3
1000b260:	880f883a 	mov	r7,r17
1000b264:	81cfc83a 	sub	r7,r16,r7
1000b268:	81c7803a 	cmpltu	r3,r16,r7
1000b26c:	20c7c83a 	sub	r3,r4,r3
1000b270:	1d44983a 	sll	r2,r3,r21
1000b274:	3d0ed83a 	srl	r7,r7,r20
1000b278:	1d06d83a 	srl	r3,r3,r20
1000b27c:	11c4b03a 	or	r2,r2,r7
1000b280:	003f7a06 	br	1000b06c <__alt_data_end+0xf800b06c>
1000b284:	0025883a 	mov	r18,zero
1000b288:	003ef806 	br	1000ae6c <__alt_data_end+0xf800ae6c>
1000b28c:	98a6983a 	sll	r19,r19,r2
1000b290:	88e8d83a 	srl	r20,r17,r3
1000b294:	80c6d83a 	srl	r3,r16,r3
1000b298:	982ad43a 	srli	r21,r19,16
1000b29c:	88a2983a 	sll	r17,r17,r2
1000b2a0:	a009883a 	mov	r4,r20
1000b2a4:	a80b883a 	mov	r5,r21
1000b2a8:	88eeb03a 	or	r23,r17,r3
1000b2ac:	1025883a 	mov	r18,r2
1000b2b0:	000b5100 	call	1000b510 <__umodsi3>
1000b2b4:	a009883a 	mov	r4,r20
1000b2b8:	a80b883a 	mov	r5,r21
1000b2bc:	1023883a 	mov	r17,r2
1000b2c0:	9dbfffcc 	andi	r22,r19,65535
1000b2c4:	000b5080 	call	1000b508 <__udivsi3>
1000b2c8:	1009883a 	mov	r4,r2
1000b2cc:	b00b883a 	mov	r5,r22
1000b2d0:	00013880 	call	10001388 <__mulsi3>
1000b2d4:	8822943a 	slli	r17,r17,16
1000b2d8:	b808d43a 	srli	r4,r23,16
1000b2dc:	84a8983a 	sll	r20,r16,r18
1000b2e0:	8906b03a 	or	r3,r17,r4
1000b2e4:	1880042e 	bgeu	r3,r2,1000b2f8 <__umoddi3+0x528>
1000b2e8:	1cc7883a 	add	r3,r3,r19
1000b2ec:	1cc00236 	bltu	r3,r19,1000b2f8 <__umoddi3+0x528>
1000b2f0:	1880012e 	bgeu	r3,r2,1000b2f8 <__umoddi3+0x528>
1000b2f4:	1cc7883a 	add	r3,r3,r19
1000b2f8:	18a1c83a 	sub	r16,r3,r2
1000b2fc:	8009883a 	mov	r4,r16
1000b300:	a80b883a 	mov	r5,r21
1000b304:	000b5100 	call	1000b510 <__umodsi3>
1000b308:	8009883a 	mov	r4,r16
1000b30c:	a80b883a 	mov	r5,r21
1000b310:	1039883a 	mov	fp,r2
1000b314:	000b5080 	call	1000b508 <__udivsi3>
1000b318:	1009883a 	mov	r4,r2
1000b31c:	b00b883a 	mov	r5,r22
1000b320:	00013880 	call	10001388 <__mulsi3>
1000b324:	e006943a 	slli	r3,fp,16
1000b328:	b93fffcc 	andi	r4,r23,65535
1000b32c:	1906b03a 	or	r3,r3,r4
1000b330:	1880042e 	bgeu	r3,r2,1000b344 <__umoddi3+0x574>
1000b334:	1cc7883a 	add	r3,r3,r19
1000b338:	1cc00236 	bltu	r3,r19,1000b344 <__umoddi3+0x574>
1000b33c:	1880012e 	bgeu	r3,r2,1000b344 <__umoddi3+0x574>
1000b340:	1cc7883a 	add	r3,r3,r19
1000b344:	18a3c83a 	sub	r17,r3,r2
1000b348:	003f1e06 	br	1000afc4 <__alt_data_end+0xf800afc4>
1000b34c:	8ccfc83a 	sub	r7,r17,r19
1000b350:	1d89c83a 	sub	r4,r3,r22
1000b354:	89e3803a 	cmpltu	r17,r17,r7
1000b358:	2463c83a 	sub	r17,r4,r17
1000b35c:	9449c83a 	sub	r4,r18,r17
1000b360:	003fc006 	br	1000b264 <__alt_data_end+0xf800b264>
1000b364:	000b883a 	mov	r5,zero
1000b368:	002b883a 	mov	r21,zero
1000b36c:	003eeb06 	br	1000af1c <__alt_data_end+0xf800af1c>
1000b370:	01400404 	movi	r5,16
1000b374:	282b883a 	mov	r21,r5
1000b378:	003ee806 	br	1000af1c <__alt_data_end+0xf800af1c>
1000b37c:	01400404 	movi	r5,16
1000b380:	2805883a 	mov	r2,r5
1000b384:	003eaa06 	br	1000ae30 <__alt_data_end+0xf800ae30>
1000b388:	0005883a 	mov	r2,zero
1000b38c:	0007883a 	mov	r3,zero
1000b390:	003eff06 	br	1000af90 <__alt_data_end+0xf800af90>
1000b394:	00800404 	movi	r2,16
1000b398:	1007883a 	mov	r3,r2
1000b39c:	003efc06 	br	1000af90 <__alt_data_end+0xf800af90>
1000b3a0:	000b883a 	mov	r5,zero
1000b3a4:	0005883a 	mov	r2,zero
1000b3a8:	003ea106 	br	1000ae30 <__alt_data_end+0xf800ae30>
1000b3ac:	90bf802e 	bgeu	r18,r2,1000b1b0 <__alt_data_end+0xf800b1b0>
1000b3b0:	bdffff84 	addi	r23,r23,-2
1000b3b4:	95a5883a 	add	r18,r18,r22
1000b3b8:	003f7e06 	br	1000b1b4 <__alt_data_end+0xf800b1b4>
1000b3bc:	18bf652e 	bgeu	r3,r2,1000b154 <__alt_data_end+0xf800b154>
1000b3c0:	e73fff84 	addi	fp,fp,-2
1000b3c4:	1d87883a 	add	r3,r3,r22
1000b3c8:	003f6306 	br	1000b158 <__alt_data_end+0xf800b158>
1000b3cc:	1cc7883a 	add	r3,r3,r19
1000b3d0:	003f0d06 	br	1000b008 <__alt_data_end+0xf800b008>
1000b3d4:	8005883a 	mov	r2,r16
1000b3d8:	003edf06 	br	1000af58 <__alt_data_end+0xf800af58>
1000b3dc:	847fdb36 	bltu	r16,r17,1000b34c <__alt_data_end+0xf800b34c>
1000b3e0:	880f883a 	mov	r7,r17
1000b3e4:	0009883a 	mov	r4,zero
1000b3e8:	003f9e06 	br	1000b264 <__alt_data_end+0xf800b264>

1000b3ec <udivmodsi4>:
1000b3ec:	2900182e 	bgeu	r5,r4,1000b450 <udivmodsi4+0x64>
1000b3f0:	28001716 	blt	r5,zero,1000b450 <udivmodsi4+0x64>
1000b3f4:	00800804 	movi	r2,32
1000b3f8:	00c00044 	movi	r3,1
1000b3fc:	00000206 	br	1000b408 <udivmodsi4+0x1c>
1000b400:	10001126 	beq	r2,zero,1000b448 <udivmodsi4+0x5c>
1000b404:	28000516 	blt	r5,zero,1000b41c <udivmodsi4+0x30>
1000b408:	294b883a 	add	r5,r5,r5
1000b40c:	10bfffc4 	addi	r2,r2,-1
1000b410:	18c7883a 	add	r3,r3,r3
1000b414:	293ffa36 	bltu	r5,r4,1000b400 <__alt_data_end+0xf800b400>
1000b418:	18000b26 	beq	r3,zero,1000b448 <udivmodsi4+0x5c>
1000b41c:	0005883a 	mov	r2,zero
1000b420:	21400236 	bltu	r4,r5,1000b42c <udivmodsi4+0x40>
1000b424:	2149c83a 	sub	r4,r4,r5
1000b428:	10c4b03a 	or	r2,r2,r3
1000b42c:	1806d07a 	srli	r3,r3,1
1000b430:	280ad07a 	srli	r5,r5,1
1000b434:	183ffa1e 	bne	r3,zero,1000b420 <__alt_data_end+0xf800b420>
1000b438:	3000011e 	bne	r6,zero,1000b440 <udivmodsi4+0x54>
1000b43c:	f800283a 	ret
1000b440:	2005883a 	mov	r2,r4
1000b444:	f800283a 	ret
1000b448:	0005883a 	mov	r2,zero
1000b44c:	003ffa06 	br	1000b438 <__alt_data_end+0xf800b438>
1000b450:	00c00044 	movi	r3,1
1000b454:	003ff106 	br	1000b41c <__alt_data_end+0xf800b41c>

1000b458 <__divsi3>:
1000b458:	defffe04 	addi	sp,sp,-8
1000b45c:	dfc00115 	stw	ra,4(sp)
1000b460:	dc000015 	stw	r16,0(sp)
1000b464:	20000b16 	blt	r4,zero,1000b494 <__divsi3+0x3c>
1000b468:	0021883a 	mov	r16,zero
1000b46c:	28000c16 	blt	r5,zero,1000b4a0 <__divsi3+0x48>
1000b470:	000d883a 	mov	r6,zero
1000b474:	000b3ec0 	call	1000b3ec <udivmodsi4>
1000b478:	0407c83a 	sub	r3,zero,r16
1000b47c:	1884f03a 	xor	r2,r3,r2
1000b480:	1405883a 	add	r2,r2,r16
1000b484:	dfc00117 	ldw	ra,4(sp)
1000b488:	dc000017 	ldw	r16,0(sp)
1000b48c:	dec00204 	addi	sp,sp,8
1000b490:	f800283a 	ret
1000b494:	0109c83a 	sub	r4,zero,r4
1000b498:	04000044 	movi	r16,1
1000b49c:	283ff40e 	bge	r5,zero,1000b470 <__alt_data_end+0xf800b470>
1000b4a0:	014bc83a 	sub	r5,zero,r5
1000b4a4:	8400005c 	xori	r16,r16,1
1000b4a8:	003ff106 	br	1000b470 <__alt_data_end+0xf800b470>

1000b4ac <__modsi3>:
1000b4ac:	defffd04 	addi	sp,sp,-12
1000b4b0:	dfc00215 	stw	ra,8(sp)
1000b4b4:	dc400115 	stw	r17,4(sp)
1000b4b8:	dc000015 	stw	r16,0(sp)
1000b4bc:	20000c16 	blt	r4,zero,1000b4f0 <__modsi3+0x44>
1000b4c0:	0023883a 	mov	r17,zero
1000b4c4:	0021883a 	mov	r16,zero
1000b4c8:	28000d16 	blt	r5,zero,1000b500 <__modsi3+0x54>
1000b4cc:	01800044 	movi	r6,1
1000b4d0:	000b3ec0 	call	1000b3ec <udivmodsi4>
1000b4d4:	1404f03a 	xor	r2,r2,r16
1000b4d8:	8885883a 	add	r2,r17,r2
1000b4dc:	dfc00217 	ldw	ra,8(sp)
1000b4e0:	dc400117 	ldw	r17,4(sp)
1000b4e4:	dc000017 	ldw	r16,0(sp)
1000b4e8:	dec00304 	addi	sp,sp,12
1000b4ec:	f800283a 	ret
1000b4f0:	0109c83a 	sub	r4,zero,r4
1000b4f4:	04400044 	movi	r17,1
1000b4f8:	043fffc4 	movi	r16,-1
1000b4fc:	283ff30e 	bge	r5,zero,1000b4cc <__alt_data_end+0xf800b4cc>
1000b500:	014bc83a 	sub	r5,zero,r5
1000b504:	003ff106 	br	1000b4cc <__alt_data_end+0xf800b4cc>

1000b508 <__udivsi3>:
1000b508:	000d883a 	mov	r6,zero
1000b50c:	000b3ec1 	jmpi	1000b3ec <udivmodsi4>

1000b510 <__umodsi3>:
1000b510:	01800044 	movi	r6,1
1000b514:	000b3ec1 	jmpi	1000b3ec <udivmodsi4>

1000b518 <__adddf3>:
1000b518:	02000434 	movhi	r8,16
1000b51c:	423fffc4 	addi	r8,r8,-1
1000b520:	defffb04 	addi	sp,sp,-20
1000b524:	2a12703a 	and	r9,r5,r8
1000b528:	2806d7fa 	srli	r3,r5,31
1000b52c:	3a10703a 	and	r8,r7,r8
1000b530:	3804d53a 	srli	r2,r7,20
1000b534:	3014d77a 	srli	r10,r6,29
1000b538:	dc000015 	stw	r16,0(sp)
1000b53c:	481290fa 	slli	r9,r9,3
1000b540:	2820d53a 	srli	r16,r5,20
1000b544:	401090fa 	slli	r8,r8,3
1000b548:	200ad77a 	srli	r5,r4,29
1000b54c:	380ed7fa 	srli	r7,r7,31
1000b550:	dc800215 	stw	r18,8(sp)
1000b554:	dc400115 	stw	r17,4(sp)
1000b558:	dfc00415 	stw	ra,16(sp)
1000b55c:	dcc00315 	stw	r19,12(sp)
1000b560:	1c803fcc 	andi	r18,r3,255
1000b564:	8401ffcc 	andi	r16,r16,2047
1000b568:	494ab03a 	or	r5,r9,r5
1000b56c:	202290fa 	slli	r17,r4,3
1000b570:	1081ffcc 	andi	r2,r2,2047
1000b574:	4290b03a 	or	r8,r8,r10
1000b578:	300c90fa 	slli	r6,r6,3
1000b57c:	91c07026 	beq	r18,r7,1000b740 <__adddf3+0x228>
1000b580:	8087c83a 	sub	r3,r16,r2
1000b584:	00c0b30e 	bge	zero,r3,1000b854 <__adddf3+0x33c>
1000b588:	10002a1e 	bne	r2,zero,1000b634 <__adddf3+0x11c>
1000b58c:	4184b03a 	or	r2,r8,r6
1000b590:	1000991e 	bne	r2,zero,1000b7f8 <__adddf3+0x2e0>
1000b594:	888001cc 	andi	r2,r17,7
1000b598:	10005b26 	beq	r2,zero,1000b708 <__adddf3+0x1f0>
1000b59c:	88c003cc 	andi	r3,r17,15
1000b5a0:	00800104 	movi	r2,4
1000b5a4:	18805826 	beq	r3,r2,1000b708 <__adddf3+0x1f0>
1000b5a8:	89800104 	addi	r6,r17,4
1000b5ac:	3463803a 	cmpltu	r17,r6,r17
1000b5b0:	2c4b883a 	add	r5,r5,r17
1000b5b4:	2880202c 	andhi	r2,r5,128
1000b5b8:	9007883a 	mov	r3,r18
1000b5bc:	3023883a 	mov	r17,r6
1000b5c0:	10005426 	beq	r2,zero,1000b714 <__adddf3+0x1fc>
1000b5c4:	84000044 	addi	r16,r16,1
1000b5c8:	0081ffc4 	movi	r2,2047
1000b5cc:	8080c126 	beq	r16,r2,1000b8d4 <__adddf3+0x3bc>
1000b5d0:	013fe034 	movhi	r4,65408
1000b5d4:	213fffc4 	addi	r4,r4,-1
1000b5d8:	290a703a 	and	r5,r5,r4
1000b5dc:	2804977a 	slli	r2,r5,29
1000b5e0:	280a927a 	slli	r5,r5,9
1000b5e4:	8822d0fa 	srli	r17,r17,3
1000b5e8:	8401ffcc 	andi	r16,r16,2047
1000b5ec:	2808d33a 	srli	r4,r5,12
1000b5f0:	1444b03a 	or	r2,r2,r17
1000b5f4:	8401ffcc 	andi	r16,r16,2047
1000b5f8:	800a953a 	slli	r5,r16,20
1000b5fc:	18c03fcc 	andi	r3,r3,255
1000b600:	04000434 	movhi	r16,16
1000b604:	180697fa 	slli	r3,r3,31
1000b608:	843fffc4 	addi	r16,r16,-1
1000b60c:	2420703a 	and	r16,r4,r16
1000b610:	8160b03a 	or	r16,r16,r5
1000b614:	80c6b03a 	or	r3,r16,r3
1000b618:	dfc00417 	ldw	ra,16(sp)
1000b61c:	dcc00317 	ldw	r19,12(sp)
1000b620:	dc800217 	ldw	r18,8(sp)
1000b624:	dc400117 	ldw	r17,4(sp)
1000b628:	dc000017 	ldw	r16,0(sp)
1000b62c:	dec00504 	addi	sp,sp,20
1000b630:	f800283a 	ret
1000b634:	0081ffc4 	movi	r2,2047
1000b638:	80bfd626 	beq	r16,r2,1000b594 <__alt_data_end+0xf800b594>
1000b63c:	42002034 	orhi	r8,r8,128
1000b640:	00800e04 	movi	r2,56
1000b644:	10c0a616 	blt	r2,r3,1000b8e0 <__adddf3+0x3c8>
1000b648:	008007c4 	movi	r2,31
1000b64c:	10c0c916 	blt	r2,r3,1000b974 <__adddf3+0x45c>
1000b650:	00800804 	movi	r2,32
1000b654:	10c5c83a 	sub	r2,r2,r3
1000b658:	408e983a 	sll	r7,r8,r2
1000b65c:	30c8d83a 	srl	r4,r6,r3
1000b660:	3084983a 	sll	r2,r6,r2
1000b664:	40c6d83a 	srl	r3,r8,r3
1000b668:	390cb03a 	or	r6,r7,r4
1000b66c:	1004c03a 	cmpne	r2,r2,zero
1000b670:	308cb03a 	or	r6,r6,r2
1000b674:	898dc83a 	sub	r6,r17,r6
1000b678:	89a3803a 	cmpltu	r17,r17,r6
1000b67c:	28cbc83a 	sub	r5,r5,r3
1000b680:	2c4bc83a 	sub	r5,r5,r17
1000b684:	3023883a 	mov	r17,r6
1000b688:	2880202c 	andhi	r2,r5,128
1000b68c:	10006d26 	beq	r2,zero,1000b844 <__adddf3+0x32c>
1000b690:	04c02034 	movhi	r19,128
1000b694:	9cffffc4 	addi	r19,r19,-1
1000b698:	2ce6703a 	and	r19,r5,r19
1000b69c:	98007e26 	beq	r19,zero,1000b898 <__adddf3+0x380>
1000b6a0:	9809883a 	mov	r4,r19
1000b6a4:	000dcb00 	call	1000dcb0 <__clzsi2>
1000b6a8:	10fffe04 	addi	r3,r2,-8
1000b6ac:	010007c4 	movi	r4,31
1000b6b0:	20c07f16 	blt	r4,r3,1000b8b0 <__adddf3+0x398>
1000b6b4:	01400a04 	movi	r5,40
1000b6b8:	2885c83a 	sub	r2,r5,r2
1000b6bc:	888ad83a 	srl	r5,r17,r2
1000b6c0:	98e6983a 	sll	r19,r19,r3
1000b6c4:	88e2983a 	sll	r17,r17,r3
1000b6c8:	2ce6b03a 	or	r19,r5,r19
1000b6cc:	1c007c16 	blt	r3,r16,1000b8c0 <__adddf3+0x3a8>
1000b6d0:	1c21c83a 	sub	r16,r3,r16
1000b6d4:	81400044 	addi	r5,r16,1
1000b6d8:	00c007c4 	movi	r3,31
1000b6dc:	19409816 	blt	r3,r5,1000b940 <__adddf3+0x428>
1000b6e0:	1c21c83a 	sub	r16,r3,r16
1000b6e4:	8c08983a 	sll	r4,r17,r16
1000b6e8:	8946d83a 	srl	r3,r17,r5
1000b6ec:	9c20983a 	sll	r16,r19,r16
1000b6f0:	2008c03a 	cmpne	r4,r4,zero
1000b6f4:	994ad83a 	srl	r5,r19,r5
1000b6f8:	1c06b03a 	or	r3,r3,r16
1000b6fc:	1922b03a 	or	r17,r3,r4
1000b700:	0021883a 	mov	r16,zero
1000b704:	003fa306 	br	1000b594 <__alt_data_end+0xf800b594>
1000b708:	2880202c 	andhi	r2,r5,128
1000b70c:	9007883a 	mov	r3,r18
1000b710:	103fac1e 	bne	r2,zero,1000b5c4 <__alt_data_end+0xf800b5c4>
1000b714:	2804977a 	slli	r2,r5,29
1000b718:	8822d0fa 	srli	r17,r17,3
1000b71c:	0101ffc4 	movi	r4,2047
1000b720:	280ad0fa 	srli	r5,r5,3
1000b724:	1444b03a 	or	r2,r2,r17
1000b728:	81002c26 	beq	r16,r4,1000b7dc <__adddf3+0x2c4>
1000b72c:	8120703a 	and	r16,r16,r4
1000b730:	01000434 	movhi	r4,16
1000b734:	213fffc4 	addi	r4,r4,-1
1000b738:	2908703a 	and	r4,r5,r4
1000b73c:	003fad06 	br	1000b5f4 <__alt_data_end+0xf800b5f4>
1000b740:	8089c83a 	sub	r4,r16,r2
1000b744:	01006a0e 	bge	zero,r4,1000b8f0 <__adddf3+0x3d8>
1000b748:	10003326 	beq	r2,zero,1000b818 <__adddf3+0x300>
1000b74c:	0081ffc4 	movi	r2,2047
1000b750:	80bf9026 	beq	r16,r2,1000b594 <__alt_data_end+0xf800b594>
1000b754:	42002034 	orhi	r8,r8,128
1000b758:	00800e04 	movi	r2,56
1000b75c:	1100b116 	blt	r2,r4,1000ba24 <__adddf3+0x50c>
1000b760:	008007c4 	movi	r2,31
1000b764:	1100e216 	blt	r2,r4,1000baf0 <__adddf3+0x5d8>
1000b768:	00800804 	movi	r2,32
1000b76c:	1105c83a 	sub	r2,r2,r4
1000b770:	4092983a 	sll	r9,r8,r2
1000b774:	310ed83a 	srl	r7,r6,r4
1000b778:	3084983a 	sll	r2,r6,r2
1000b77c:	4110d83a 	srl	r8,r8,r4
1000b780:	49ccb03a 	or	r6,r9,r7
1000b784:	1004c03a 	cmpne	r2,r2,zero
1000b788:	308cb03a 	or	r6,r6,r2
1000b78c:	344d883a 	add	r6,r6,r17
1000b790:	3463803a 	cmpltu	r17,r6,r17
1000b794:	414b883a 	add	r5,r8,r5
1000b798:	2c4b883a 	add	r5,r5,r17
1000b79c:	3023883a 	mov	r17,r6
1000b7a0:	2880202c 	andhi	r2,r5,128
1000b7a4:	10002726 	beq	r2,zero,1000b844 <__adddf3+0x32c>
1000b7a8:	84000044 	addi	r16,r16,1
1000b7ac:	0081ffc4 	movi	r2,2047
1000b7b0:	8080ae26 	beq	r16,r2,1000ba6c <__adddf3+0x554>
1000b7b4:	00bfe034 	movhi	r2,65408
1000b7b8:	10bfffc4 	addi	r2,r2,-1
1000b7bc:	288a703a 	and	r5,r5,r2
1000b7c0:	880cd07a 	srli	r6,r17,1
1000b7c4:	280897fa 	slli	r4,r5,31
1000b7c8:	88c0004c 	andi	r3,r17,1
1000b7cc:	30e2b03a 	or	r17,r6,r3
1000b7d0:	280ad07a 	srli	r5,r5,1
1000b7d4:	8922b03a 	or	r17,r17,r4
1000b7d8:	003f6e06 	br	1000b594 <__alt_data_end+0xf800b594>
1000b7dc:	1148b03a 	or	r4,r2,r5
1000b7e0:	20003c26 	beq	r4,zero,1000b8d4 <__adddf3+0x3bc>
1000b7e4:	29000234 	orhi	r4,r5,8
1000b7e8:	01400434 	movhi	r5,16
1000b7ec:	297fffc4 	addi	r5,r5,-1
1000b7f0:	2148703a 	and	r4,r4,r5
1000b7f4:	003f7f06 	br	1000b5f4 <__alt_data_end+0xf800b5f4>
1000b7f8:	18ffffc4 	addi	r3,r3,-1
1000b7fc:	18004d1e 	bne	r3,zero,1000b934 <__adddf3+0x41c>
1000b800:	898dc83a 	sub	r6,r17,r6
1000b804:	89a3803a 	cmpltu	r17,r17,r6
1000b808:	2a0bc83a 	sub	r5,r5,r8
1000b80c:	2c4bc83a 	sub	r5,r5,r17
1000b810:	3023883a 	mov	r17,r6
1000b814:	003f9c06 	br	1000b688 <__alt_data_end+0xf800b688>
1000b818:	4184b03a 	or	r2,r8,r6
1000b81c:	103f5d26 	beq	r2,zero,1000b594 <__alt_data_end+0xf800b594>
1000b820:	213fffc4 	addi	r4,r4,-1
1000b824:	203fd926 	beq	r4,zero,1000b78c <__alt_data_end+0xf800b78c>
1000b828:	0081ffc4 	movi	r2,2047
1000b82c:	80bfca1e 	bne	r16,r2,1000b758 <__alt_data_end+0xf800b758>
1000b830:	003f5806 	br	1000b594 <__alt_data_end+0xf800b594>
1000b834:	10c8b03a 	or	r4,r2,r3
1000b838:	20008b26 	beq	r4,zero,1000ba68 <__adddf3+0x550>
1000b83c:	100b883a 	mov	r5,r2
1000b840:	1823883a 	mov	r17,r3
1000b844:	888001cc 	andi	r2,r17,7
1000b848:	103f541e 	bne	r2,zero,1000b59c <__alt_data_end+0xf800b59c>
1000b84c:	9007883a 	mov	r3,r18
1000b850:	003fb006 	br	1000b714 <__alt_data_end+0xf800b714>
1000b854:	1800531e 	bne	r3,zero,1000b9a4 <__adddf3+0x48c>
1000b858:	80800044 	addi	r2,r16,1
1000b85c:	1081ffcc 	andi	r2,r2,2047
1000b860:	00c00044 	movi	r3,1
1000b864:	1880990e 	bge	r3,r2,1000bacc <__adddf3+0x5b4>
1000b868:	8985c83a 	sub	r2,r17,r6
1000b86c:	8887803a 	cmpltu	r3,r17,r2
1000b870:	2a27c83a 	sub	r19,r5,r8
1000b874:	98e7c83a 	sub	r19,r19,r3
1000b878:	98c0202c 	andhi	r3,r19,128
1000b87c:	18006226 	beq	r3,zero,1000ba08 <__adddf3+0x4f0>
1000b880:	3463c83a 	sub	r17,r6,r17
1000b884:	4151c83a 	sub	r8,r8,r5
1000b888:	344d803a 	cmpltu	r6,r6,r17
1000b88c:	41a7c83a 	sub	r19,r8,r6
1000b890:	3825883a 	mov	r18,r7
1000b894:	983f821e 	bne	r19,zero,1000b6a0 <__alt_data_end+0xf800b6a0>
1000b898:	8809883a 	mov	r4,r17
1000b89c:	000dcb00 	call	1000dcb0 <__clzsi2>
1000b8a0:	10800804 	addi	r2,r2,32
1000b8a4:	10fffe04 	addi	r3,r2,-8
1000b8a8:	010007c4 	movi	r4,31
1000b8ac:	20ff810e 	bge	r4,r3,1000b6b4 <__alt_data_end+0xf800b6b4>
1000b8b0:	14fff604 	addi	r19,r2,-40
1000b8b4:	8ce6983a 	sll	r19,r17,r19
1000b8b8:	0023883a 	mov	r17,zero
1000b8bc:	1c3f840e 	bge	r3,r16,1000b6d0 <__alt_data_end+0xf800b6d0>
1000b8c0:	017fe034 	movhi	r5,65408
1000b8c4:	297fffc4 	addi	r5,r5,-1
1000b8c8:	80e1c83a 	sub	r16,r16,r3
1000b8cc:	994a703a 	and	r5,r19,r5
1000b8d0:	003f3006 	br	1000b594 <__alt_data_end+0xf800b594>
1000b8d4:	0009883a 	mov	r4,zero
1000b8d8:	0005883a 	mov	r2,zero
1000b8dc:	003f4506 	br	1000b5f4 <__alt_data_end+0xf800b5f4>
1000b8e0:	418cb03a 	or	r6,r8,r6
1000b8e4:	300cc03a 	cmpne	r6,r6,zero
1000b8e8:	0007883a 	mov	r3,zero
1000b8ec:	003f6106 	br	1000b674 <__alt_data_end+0xf800b674>
1000b8f0:	2000921e 	bne	r4,zero,1000bb3c <__adddf3+0x624>
1000b8f4:	80800044 	addi	r2,r16,1
1000b8f8:	11c1ffcc 	andi	r7,r2,2047
1000b8fc:	01000044 	movi	r4,1
1000b900:	21c0610e 	bge	r4,r7,1000ba88 <__adddf3+0x570>
1000b904:	0101ffc4 	movi	r4,2047
1000b908:	1100a326 	beq	r2,r4,1000bb98 <__adddf3+0x680>
1000b90c:	344d883a 	add	r6,r6,r17
1000b910:	3463803a 	cmpltu	r17,r6,r17
1000b914:	414b883a 	add	r5,r8,r5
1000b918:	2c4b883a 	add	r5,r5,r17
1000b91c:	282297fa 	slli	r17,r5,31
1000b920:	300cd07a 	srli	r6,r6,1
1000b924:	280ad07a 	srli	r5,r5,1
1000b928:	1021883a 	mov	r16,r2
1000b92c:	89a2b03a 	or	r17,r17,r6
1000b930:	003f1806 	br	1000b594 <__alt_data_end+0xf800b594>
1000b934:	0081ffc4 	movi	r2,2047
1000b938:	80bf411e 	bne	r16,r2,1000b640 <__alt_data_end+0xf800b640>
1000b93c:	003f1506 	br	1000b594 <__alt_data_end+0xf800b594>
1000b940:	80bff844 	addi	r2,r16,-31
1000b944:	00c00804 	movi	r3,32
1000b948:	9884d83a 	srl	r2,r19,r2
1000b94c:	28c04a26 	beq	r5,r3,1000ba78 <__adddf3+0x560>
1000b950:	00c00fc4 	movi	r3,63
1000b954:	1c21c83a 	sub	r16,r3,r16
1000b958:	9c26983a 	sll	r19,r19,r16
1000b95c:	9c62b03a 	or	r17,r19,r17
1000b960:	8822c03a 	cmpne	r17,r17,zero
1000b964:	88a2b03a 	or	r17,r17,r2
1000b968:	000b883a 	mov	r5,zero
1000b96c:	0021883a 	mov	r16,zero
1000b970:	003fb406 	br	1000b844 <__alt_data_end+0xf800b844>
1000b974:	18bff804 	addi	r2,r3,-32
1000b978:	01000804 	movi	r4,32
1000b97c:	4084d83a 	srl	r2,r8,r2
1000b980:	19003f26 	beq	r3,r4,1000ba80 <__adddf3+0x568>
1000b984:	01001004 	movi	r4,64
1000b988:	20c7c83a 	sub	r3,r4,r3
1000b98c:	40d0983a 	sll	r8,r8,r3
1000b990:	418cb03a 	or	r6,r8,r6
1000b994:	300cc03a 	cmpne	r6,r6,zero
1000b998:	308cb03a 	or	r6,r6,r2
1000b99c:	0007883a 	mov	r3,zero
1000b9a0:	003f3406 	br	1000b674 <__alt_data_end+0xf800b674>
1000b9a4:	80002326 	beq	r16,zero,1000ba34 <__adddf3+0x51c>
1000b9a8:	0101ffc4 	movi	r4,2047
1000b9ac:	11005e26 	beq	r2,r4,1000bb28 <__adddf3+0x610>
1000b9b0:	00c7c83a 	sub	r3,zero,r3
1000b9b4:	29402034 	orhi	r5,r5,128
1000b9b8:	01000e04 	movi	r4,56
1000b9bc:	20c07216 	blt	r4,r3,1000bb88 <__adddf3+0x670>
1000b9c0:	010007c4 	movi	r4,31
1000b9c4:	20c0ce16 	blt	r4,r3,1000bd00 <__adddf3+0x7e8>
1000b9c8:	01000804 	movi	r4,32
1000b9cc:	20c9c83a 	sub	r4,r4,r3
1000b9d0:	2914983a 	sll	r10,r5,r4
1000b9d4:	88d2d83a 	srl	r9,r17,r3
1000b9d8:	8908983a 	sll	r4,r17,r4
1000b9dc:	28c6d83a 	srl	r3,r5,r3
1000b9e0:	5262b03a 	or	r17,r10,r9
1000b9e4:	2008c03a 	cmpne	r4,r4,zero
1000b9e8:	8922b03a 	or	r17,r17,r4
1000b9ec:	3463c83a 	sub	r17,r6,r17
1000b9f0:	40c7c83a 	sub	r3,r8,r3
1000b9f4:	344d803a 	cmpltu	r6,r6,r17
1000b9f8:	198bc83a 	sub	r5,r3,r6
1000b9fc:	1021883a 	mov	r16,r2
1000ba00:	3825883a 	mov	r18,r7
1000ba04:	003f2006 	br	1000b688 <__alt_data_end+0xf800b688>
1000ba08:	9886b03a 	or	r3,r19,r2
1000ba0c:	1800141e 	bne	r3,zero,1000ba60 <__adddf3+0x548>
1000ba10:	0007883a 	mov	r3,zero
1000ba14:	000b883a 	mov	r5,zero
1000ba18:	0023883a 	mov	r17,zero
1000ba1c:	0021883a 	mov	r16,zero
1000ba20:	003f3c06 	br	1000b714 <__alt_data_end+0xf800b714>
1000ba24:	418cb03a 	or	r6,r8,r6
1000ba28:	300cc03a 	cmpne	r6,r6,zero
1000ba2c:	0011883a 	mov	r8,zero
1000ba30:	003f5606 	br	1000b78c <__alt_data_end+0xf800b78c>
1000ba34:	2c48b03a 	or	r4,r5,r17
1000ba38:	20003b26 	beq	r4,zero,1000bb28 <__adddf3+0x610>
1000ba3c:	00c6303a 	nor	r3,zero,r3
1000ba40:	1800371e 	bne	r3,zero,1000bb20 <__adddf3+0x608>
1000ba44:	3463c83a 	sub	r17,r6,r17
1000ba48:	414bc83a 	sub	r5,r8,r5
1000ba4c:	344d803a 	cmpltu	r6,r6,r17
1000ba50:	298bc83a 	sub	r5,r5,r6
1000ba54:	1021883a 	mov	r16,r2
1000ba58:	3825883a 	mov	r18,r7
1000ba5c:	003f0a06 	br	1000b688 <__alt_data_end+0xf800b688>
1000ba60:	1023883a 	mov	r17,r2
1000ba64:	003f0d06 	br	1000b69c <__alt_data_end+0xf800b69c>
1000ba68:	0007883a 	mov	r3,zero
1000ba6c:	000b883a 	mov	r5,zero
1000ba70:	0023883a 	mov	r17,zero
1000ba74:	003f2706 	br	1000b714 <__alt_data_end+0xf800b714>
1000ba78:	0027883a 	mov	r19,zero
1000ba7c:	003fb706 	br	1000b95c <__alt_data_end+0xf800b95c>
1000ba80:	0011883a 	mov	r8,zero
1000ba84:	003fc206 	br	1000b990 <__alt_data_end+0xf800b990>
1000ba88:	2c44b03a 	or	r2,r5,r17
1000ba8c:	8000871e 	bne	r16,zero,1000bcac <__adddf3+0x794>
1000ba90:	1000b126 	beq	r2,zero,1000bd58 <__adddf3+0x840>
1000ba94:	4184b03a 	or	r2,r8,r6
1000ba98:	103ebe26 	beq	r2,zero,1000b594 <__alt_data_end+0xf800b594>
1000ba9c:	3445883a 	add	r2,r6,r17
1000baa0:	1463803a 	cmpltu	r17,r2,r17
1000baa4:	414b883a 	add	r5,r8,r5
1000baa8:	2c4b883a 	add	r5,r5,r17
1000baac:	28c0202c 	andhi	r3,r5,128
1000bab0:	1023883a 	mov	r17,r2
1000bab4:	183f6326 	beq	r3,zero,1000b844 <__alt_data_end+0xf800b844>
1000bab8:	00bfe034 	movhi	r2,65408
1000babc:	10bfffc4 	addi	r2,r2,-1
1000bac0:	2021883a 	mov	r16,r4
1000bac4:	288a703a 	and	r5,r5,r2
1000bac8:	003eb206 	br	1000b594 <__alt_data_end+0xf800b594>
1000bacc:	2c44b03a 	or	r2,r5,r17
1000bad0:	8000251e 	bne	r16,zero,1000bb68 <__adddf3+0x650>
1000bad4:	10004b1e 	bne	r2,zero,1000bc04 <__adddf3+0x6ec>
1000bad8:	4184b03a 	or	r2,r8,r6
1000badc:	103fe226 	beq	r2,zero,1000ba68 <__alt_data_end+0xf800ba68>
1000bae0:	400b883a 	mov	r5,r8
1000bae4:	3023883a 	mov	r17,r6
1000bae8:	3825883a 	mov	r18,r7
1000baec:	003ea906 	br	1000b594 <__alt_data_end+0xf800b594>
1000baf0:	20bff804 	addi	r2,r4,-32
1000baf4:	01c00804 	movi	r7,32
1000baf8:	4084d83a 	srl	r2,r8,r2
1000bafc:	21c07e26 	beq	r4,r7,1000bcf8 <__adddf3+0x7e0>
1000bb00:	01c01004 	movi	r7,64
1000bb04:	3909c83a 	sub	r4,r7,r4
1000bb08:	4110983a 	sll	r8,r8,r4
1000bb0c:	418cb03a 	or	r6,r8,r6
1000bb10:	300cc03a 	cmpne	r6,r6,zero
1000bb14:	308cb03a 	or	r6,r6,r2
1000bb18:	0011883a 	mov	r8,zero
1000bb1c:	003f1b06 	br	1000b78c <__alt_data_end+0xf800b78c>
1000bb20:	0101ffc4 	movi	r4,2047
1000bb24:	113fa41e 	bne	r2,r4,1000b9b8 <__alt_data_end+0xf800b9b8>
1000bb28:	400b883a 	mov	r5,r8
1000bb2c:	3023883a 	mov	r17,r6
1000bb30:	1021883a 	mov	r16,r2
1000bb34:	3825883a 	mov	r18,r7
1000bb38:	003e9606 	br	1000b594 <__alt_data_end+0xf800b594>
1000bb3c:	80001a1e 	bne	r16,zero,1000bba8 <__adddf3+0x690>
1000bb40:	2c4eb03a 	or	r7,r5,r17
1000bb44:	38005526 	beq	r7,zero,1000bc9c <__adddf3+0x784>
1000bb48:	0108303a 	nor	r4,zero,r4
1000bb4c:	2000511e 	bne	r4,zero,1000bc94 <__adddf3+0x77c>
1000bb50:	89a3883a 	add	r17,r17,r6
1000bb54:	414b883a 	add	r5,r8,r5
1000bb58:	898d803a 	cmpltu	r6,r17,r6
1000bb5c:	298b883a 	add	r5,r5,r6
1000bb60:	1021883a 	mov	r16,r2
1000bb64:	003f0e06 	br	1000b7a0 <__alt_data_end+0xf800b7a0>
1000bb68:	1000341e 	bne	r2,zero,1000bc3c <__adddf3+0x724>
1000bb6c:	4184b03a 	or	r2,r8,r6
1000bb70:	10006f26 	beq	r2,zero,1000bd30 <__adddf3+0x818>
1000bb74:	400b883a 	mov	r5,r8
1000bb78:	3023883a 	mov	r17,r6
1000bb7c:	3825883a 	mov	r18,r7
1000bb80:	0401ffc4 	movi	r16,2047
1000bb84:	003e8306 	br	1000b594 <__alt_data_end+0xf800b594>
1000bb88:	2c62b03a 	or	r17,r5,r17
1000bb8c:	8822c03a 	cmpne	r17,r17,zero
1000bb90:	0007883a 	mov	r3,zero
1000bb94:	003f9506 	br	1000b9ec <__alt_data_end+0xf800b9ec>
1000bb98:	1021883a 	mov	r16,r2
1000bb9c:	000b883a 	mov	r5,zero
1000bba0:	0023883a 	mov	r17,zero
1000bba4:	003edb06 	br	1000b714 <__alt_data_end+0xf800b714>
1000bba8:	01c1ffc4 	movi	r7,2047
1000bbac:	11c03b26 	beq	r2,r7,1000bc9c <__adddf3+0x784>
1000bbb0:	0109c83a 	sub	r4,zero,r4
1000bbb4:	29402034 	orhi	r5,r5,128
1000bbb8:	01c00e04 	movi	r7,56
1000bbbc:	39006216 	blt	r7,r4,1000bd48 <__adddf3+0x830>
1000bbc0:	01c007c4 	movi	r7,31
1000bbc4:	39006b16 	blt	r7,r4,1000bd74 <__adddf3+0x85c>
1000bbc8:	01c00804 	movi	r7,32
1000bbcc:	390fc83a 	sub	r7,r7,r4
1000bbd0:	29d4983a 	sll	r10,r5,r7
1000bbd4:	8912d83a 	srl	r9,r17,r4
1000bbd8:	89ce983a 	sll	r7,r17,r7
1000bbdc:	2908d83a 	srl	r4,r5,r4
1000bbe0:	5262b03a 	or	r17,r10,r9
1000bbe4:	380ac03a 	cmpne	r5,r7,zero
1000bbe8:	8962b03a 	or	r17,r17,r5
1000bbec:	89a3883a 	add	r17,r17,r6
1000bbf0:	2211883a 	add	r8,r4,r8
1000bbf4:	898d803a 	cmpltu	r6,r17,r6
1000bbf8:	418b883a 	add	r5,r8,r6
1000bbfc:	1021883a 	mov	r16,r2
1000bc00:	003ee706 	br	1000b7a0 <__alt_data_end+0xf800b7a0>
1000bc04:	4184b03a 	or	r2,r8,r6
1000bc08:	103e6226 	beq	r2,zero,1000b594 <__alt_data_end+0xf800b594>
1000bc0c:	8987c83a 	sub	r3,r17,r6
1000bc10:	88c9803a 	cmpltu	r4,r17,r3
1000bc14:	2a05c83a 	sub	r2,r5,r8
1000bc18:	1105c83a 	sub	r2,r2,r4
1000bc1c:	1100202c 	andhi	r4,r2,128
1000bc20:	203f0426 	beq	r4,zero,1000b834 <__alt_data_end+0xf800b834>
1000bc24:	3463c83a 	sub	r17,r6,r17
1000bc28:	414bc83a 	sub	r5,r8,r5
1000bc2c:	344d803a 	cmpltu	r6,r6,r17
1000bc30:	298bc83a 	sub	r5,r5,r6
1000bc34:	3825883a 	mov	r18,r7
1000bc38:	003e5606 	br	1000b594 <__alt_data_end+0xf800b594>
1000bc3c:	4184b03a 	or	r2,r8,r6
1000bc40:	10002b26 	beq	r2,zero,1000bcf0 <__adddf3+0x7d8>
1000bc44:	2804d0fa 	srli	r2,r5,3
1000bc48:	8822d0fa 	srli	r17,r17,3
1000bc4c:	280a977a 	slli	r5,r5,29
1000bc50:	10c0022c 	andhi	r3,r2,8
1000bc54:	2c62b03a 	or	r17,r5,r17
1000bc58:	18000826 	beq	r3,zero,1000bc7c <__adddf3+0x764>
1000bc5c:	4008d0fa 	srli	r4,r8,3
1000bc60:	20c0022c 	andhi	r3,r4,8
1000bc64:	1800051e 	bne	r3,zero,1000bc7c <__adddf3+0x764>
1000bc68:	300cd0fa 	srli	r6,r6,3
1000bc6c:	4010977a 	slli	r8,r8,29
1000bc70:	2005883a 	mov	r2,r4
1000bc74:	3825883a 	mov	r18,r7
1000bc78:	41a2b03a 	or	r17,r8,r6
1000bc7c:	880ad77a 	srli	r5,r17,29
1000bc80:	100490fa 	slli	r2,r2,3
1000bc84:	882290fa 	slli	r17,r17,3
1000bc88:	0401ffc4 	movi	r16,2047
1000bc8c:	288ab03a 	or	r5,r5,r2
1000bc90:	003e4006 	br	1000b594 <__alt_data_end+0xf800b594>
1000bc94:	01c1ffc4 	movi	r7,2047
1000bc98:	11ffc71e 	bne	r2,r7,1000bbb8 <__alt_data_end+0xf800bbb8>
1000bc9c:	400b883a 	mov	r5,r8
1000bca0:	3023883a 	mov	r17,r6
1000bca4:	1021883a 	mov	r16,r2
1000bca8:	003e3a06 	br	1000b594 <__alt_data_end+0xf800b594>
1000bcac:	10002d26 	beq	r2,zero,1000bd64 <__adddf3+0x84c>
1000bcb0:	4184b03a 	or	r2,r8,r6
1000bcb4:	10000e26 	beq	r2,zero,1000bcf0 <__adddf3+0x7d8>
1000bcb8:	2804d0fa 	srli	r2,r5,3
1000bcbc:	8822d0fa 	srli	r17,r17,3
1000bcc0:	280a977a 	slli	r5,r5,29
1000bcc4:	10c0022c 	andhi	r3,r2,8
1000bcc8:	2c62b03a 	or	r17,r5,r17
1000bccc:	183feb26 	beq	r3,zero,1000bc7c <__alt_data_end+0xf800bc7c>
1000bcd0:	4008d0fa 	srli	r4,r8,3
1000bcd4:	20c0022c 	andhi	r3,r4,8
1000bcd8:	183fe81e 	bne	r3,zero,1000bc7c <__alt_data_end+0xf800bc7c>
1000bcdc:	300cd0fa 	srli	r6,r6,3
1000bce0:	4010977a 	slli	r8,r8,29
1000bce4:	2005883a 	mov	r2,r4
1000bce8:	41a2b03a 	or	r17,r8,r6
1000bcec:	003fe306 	br	1000bc7c <__alt_data_end+0xf800bc7c>
1000bcf0:	0401ffc4 	movi	r16,2047
1000bcf4:	003e2706 	br	1000b594 <__alt_data_end+0xf800b594>
1000bcf8:	0011883a 	mov	r8,zero
1000bcfc:	003f8306 	br	1000bb0c <__alt_data_end+0xf800bb0c>
1000bd00:	193ff804 	addi	r4,r3,-32
1000bd04:	02400804 	movi	r9,32
1000bd08:	2908d83a 	srl	r4,r5,r4
1000bd0c:	1a402526 	beq	r3,r9,1000bda4 <__adddf3+0x88c>
1000bd10:	02401004 	movi	r9,64
1000bd14:	48c7c83a 	sub	r3,r9,r3
1000bd18:	28ca983a 	sll	r5,r5,r3
1000bd1c:	2c62b03a 	or	r17,r5,r17
1000bd20:	8822c03a 	cmpne	r17,r17,zero
1000bd24:	8922b03a 	or	r17,r17,r4
1000bd28:	0007883a 	mov	r3,zero
1000bd2c:	003f2f06 	br	1000b9ec <__alt_data_end+0xf800b9ec>
1000bd30:	01402034 	movhi	r5,128
1000bd34:	0007883a 	mov	r3,zero
1000bd38:	297fffc4 	addi	r5,r5,-1
1000bd3c:	047ffe04 	movi	r17,-8
1000bd40:	0401ffc4 	movi	r16,2047
1000bd44:	003e7306 	br	1000b714 <__alt_data_end+0xf800b714>
1000bd48:	2c62b03a 	or	r17,r5,r17
1000bd4c:	8822c03a 	cmpne	r17,r17,zero
1000bd50:	0009883a 	mov	r4,zero
1000bd54:	003fa506 	br	1000bbec <__alt_data_end+0xf800bbec>
1000bd58:	400b883a 	mov	r5,r8
1000bd5c:	3023883a 	mov	r17,r6
1000bd60:	003e0c06 	br	1000b594 <__alt_data_end+0xf800b594>
1000bd64:	400b883a 	mov	r5,r8
1000bd68:	3023883a 	mov	r17,r6
1000bd6c:	0401ffc4 	movi	r16,2047
1000bd70:	003e0806 	br	1000b594 <__alt_data_end+0xf800b594>
1000bd74:	21fff804 	addi	r7,r4,-32
1000bd78:	02400804 	movi	r9,32
1000bd7c:	29ced83a 	srl	r7,r5,r7
1000bd80:	22400a26 	beq	r4,r9,1000bdac <__adddf3+0x894>
1000bd84:	02401004 	movi	r9,64
1000bd88:	4909c83a 	sub	r4,r9,r4
1000bd8c:	290a983a 	sll	r5,r5,r4
1000bd90:	2c62b03a 	or	r17,r5,r17
1000bd94:	8822c03a 	cmpne	r17,r17,zero
1000bd98:	89e2b03a 	or	r17,r17,r7
1000bd9c:	0009883a 	mov	r4,zero
1000bda0:	003f9206 	br	1000bbec <__alt_data_end+0xf800bbec>
1000bda4:	000b883a 	mov	r5,zero
1000bda8:	003fdc06 	br	1000bd1c <__alt_data_end+0xf800bd1c>
1000bdac:	000b883a 	mov	r5,zero
1000bdb0:	003ff706 	br	1000bd90 <__alt_data_end+0xf800bd90>

1000bdb4 <__divdf3>:
1000bdb4:	defff004 	addi	sp,sp,-64
1000bdb8:	dc800815 	stw	r18,32(sp)
1000bdbc:	2824d53a 	srli	r18,r5,20
1000bdc0:	dd800c15 	stw	r22,48(sp)
1000bdc4:	282cd7fa 	srli	r22,r5,31
1000bdc8:	dc000615 	stw	r16,24(sp)
1000bdcc:	04000434 	movhi	r16,16
1000bdd0:	df000e15 	stw	fp,56(sp)
1000bdd4:	dd000a15 	stw	r20,40(sp)
1000bdd8:	dcc00915 	stw	r19,36(sp)
1000bddc:	dc400715 	stw	r17,28(sp)
1000bde0:	843fffc4 	addi	r16,r16,-1
1000bde4:	dfc00f15 	stw	ra,60(sp)
1000bde8:	ddc00d15 	stw	r23,52(sp)
1000bdec:	dd400b15 	stw	r21,44(sp)
1000bdf0:	9481ffcc 	andi	r18,r18,2047
1000bdf4:	2029883a 	mov	r20,r4
1000bdf8:	2027883a 	mov	r19,r4
1000bdfc:	2c22703a 	and	r17,r5,r16
1000be00:	b7003fcc 	andi	fp,r22,255
1000be04:	90005e26 	beq	r18,zero,1000bf80 <__divdf3+0x1cc>
1000be08:	0081ffc4 	movi	r2,2047
1000be0c:	90803526 	beq	r18,r2,1000bee4 <__divdf3+0x130>
1000be10:	8c000434 	orhi	r16,r17,16
1000be14:	2004d77a 	srli	r2,r4,29
1000be18:	802090fa 	slli	r16,r16,3
1000be1c:	202690fa 	slli	r19,r4,3
1000be20:	94bf0044 	addi	r18,r18,-1023
1000be24:	80a2b03a 	or	r17,r16,r2
1000be28:	0029883a 	mov	r20,zero
1000be2c:	0011883a 	mov	r8,zero
1000be30:	380ad53a 	srli	r5,r7,20
1000be34:	382ed7fa 	srli	r23,r7,31
1000be38:	04000434 	movhi	r16,16
1000be3c:	843fffc4 	addi	r16,r16,-1
1000be40:	2941ffcc 	andi	r5,r5,2047
1000be44:	302b883a 	mov	r21,r6
1000be48:	3c20703a 	and	r16,r7,r16
1000be4c:	ba403fcc 	andi	r9,r23,255
1000be50:	28006726 	beq	r5,zero,1000bff0 <__divdf3+0x23c>
1000be54:	0081ffc4 	movi	r2,2047
1000be58:	28805f26 	beq	r5,r2,1000bfd8 <__divdf3+0x224>
1000be5c:	84000434 	orhi	r16,r16,16
1000be60:	3004d77a 	srli	r2,r6,29
1000be64:	802090fa 	slli	r16,r16,3
1000be68:	302a90fa 	slli	r21,r6,3
1000be6c:	297f0044 	addi	r5,r5,-1023
1000be70:	80a0b03a 	or	r16,r16,r2
1000be74:	000f883a 	mov	r7,zero
1000be78:	3d06b03a 	or	r3,r7,r20
1000be7c:	180690ba 	slli	r3,r3,2
1000be80:	00840074 	movhi	r2,4097
1000be84:	10afa904 	addi	r2,r2,-16732
1000be88:	1885883a 	add	r2,r3,r2
1000be8c:	10800017 	ldw	r2,0(r2)
1000be90:	b5c8f03a 	xor	r4,r22,r23
1000be94:	200d883a 	mov	r6,r4
1000be98:	25003fcc 	andi	r20,r4,255
1000be9c:	9165c83a 	sub	r18,r18,r5
1000bea0:	1000683a 	jmp	r2
1000bea4:	1000c0ec 	andhi	zero,r2,771
1000bea8:	1000bf1c 	xori	zero,r2,764
1000beac:	1000c0b0 	cmpltui	zero,r2,770
1000beb0:	1000bf00 	call	11000bf0 <_gp+0xfe6128>
1000beb4:	1000c0b0 	cmpltui	zero,r2,770
1000beb8:	1000c084 	addi	zero,r2,770
1000bebc:	1000c0b0 	cmpltui	zero,r2,770
1000bec0:	1000bf00 	call	11000bf0 <_gp+0xfe6128>
1000bec4:	1000bf1c 	xori	zero,r2,764
1000bec8:	1000bf1c 	xori	zero,r2,764
1000becc:	1000c084 	addi	zero,r2,770
1000bed0:	1000bf00 	call	11000bf0 <_gp+0xfe6128>
1000bed4:	1000bf10 	cmplti	zero,r2,764
1000bed8:	1000bf10 	cmplti	zero,r2,764
1000bedc:	1000bf10 	cmplti	zero,r2,764
1000bee0:	1000c0c0 	call	11000c0c <_gp+0xfe6144>
1000bee4:	8904b03a 	or	r2,r17,r4
1000bee8:	1000631e 	bne	r2,zero,1000c078 <__divdf3+0x2c4>
1000beec:	05000204 	movi	r20,8
1000bef0:	0023883a 	mov	r17,zero
1000bef4:	0027883a 	mov	r19,zero
1000bef8:	02000084 	movi	r8,2
1000befc:	003fcc06 	br	1000be30 <__alt_data_end+0xf800be30>
1000bf00:	8023883a 	mov	r17,r16
1000bf04:	a827883a 	mov	r19,r21
1000bf08:	4839883a 	mov	fp,r9
1000bf0c:	3811883a 	mov	r8,r7
1000bf10:	00800084 	movi	r2,2
1000bf14:	4081531e 	bne	r8,r2,1000c464 <__divdf3+0x6b0>
1000bf18:	e029883a 	mov	r20,fp
1000bf1c:	a180004c 	andi	r6,r20,1
1000bf20:	0201ffc4 	movi	r8,2047
1000bf24:	000b883a 	mov	r5,zero
1000bf28:	0027883a 	mov	r19,zero
1000bf2c:	4010953a 	slli	r8,r8,20
1000bf30:	30c03fcc 	andi	r3,r6,255
1000bf34:	04000434 	movhi	r16,16
1000bf38:	180697fa 	slli	r3,r3,31
1000bf3c:	843fffc4 	addi	r16,r16,-1
1000bf40:	2c20703a 	and	r16,r5,r16
1000bf44:	8220b03a 	or	r16,r16,r8
1000bf48:	80c6b03a 	or	r3,r16,r3
1000bf4c:	9805883a 	mov	r2,r19
1000bf50:	dfc00f17 	ldw	ra,60(sp)
1000bf54:	df000e17 	ldw	fp,56(sp)
1000bf58:	ddc00d17 	ldw	r23,52(sp)
1000bf5c:	dd800c17 	ldw	r22,48(sp)
1000bf60:	dd400b17 	ldw	r21,44(sp)
1000bf64:	dd000a17 	ldw	r20,40(sp)
1000bf68:	dcc00917 	ldw	r19,36(sp)
1000bf6c:	dc800817 	ldw	r18,32(sp)
1000bf70:	dc400717 	ldw	r17,28(sp)
1000bf74:	dc000617 	ldw	r16,24(sp)
1000bf78:	dec01004 	addi	sp,sp,64
1000bf7c:	f800283a 	ret
1000bf80:	8904b03a 	or	r2,r17,r4
1000bf84:	10003726 	beq	r2,zero,1000c064 <__divdf3+0x2b0>
1000bf88:	88014d26 	beq	r17,zero,1000c4c0 <__divdf3+0x70c>
1000bf8c:	8809883a 	mov	r4,r17
1000bf90:	d9800215 	stw	r6,8(sp)
1000bf94:	d9c00515 	stw	r7,20(sp)
1000bf98:	000dcb00 	call	1000dcb0 <__clzsi2>
1000bf9c:	d9800217 	ldw	r6,8(sp)
1000bfa0:	d9c00517 	ldw	r7,20(sp)
1000bfa4:	1007883a 	mov	r3,r2
1000bfa8:	01000a04 	movi	r4,40
1000bfac:	1cfffe04 	addi	r19,r3,-8
1000bfb0:	20c9c83a 	sub	r4,r4,r3
1000bfb4:	8cca983a 	sll	r5,r17,r19
1000bfb8:	a108d83a 	srl	r4,r20,r4
1000bfbc:	a4e6983a 	sll	r19,r20,r19
1000bfc0:	2162b03a 	or	r17,r4,r5
1000bfc4:	04bf0344 	movi	r18,-1011
1000bfc8:	90e5c83a 	sub	r18,r18,r3
1000bfcc:	0029883a 	mov	r20,zero
1000bfd0:	0011883a 	mov	r8,zero
1000bfd4:	003f9606 	br	1000be30 <__alt_data_end+0xf800be30>
1000bfd8:	8184b03a 	or	r2,r16,r6
1000bfdc:	10001f1e 	bne	r2,zero,1000c05c <__divdf3+0x2a8>
1000bfe0:	0021883a 	mov	r16,zero
1000bfe4:	002b883a 	mov	r21,zero
1000bfe8:	01c00084 	movi	r7,2
1000bfec:	003fa206 	br	1000be78 <__alt_data_end+0xf800be78>
1000bff0:	8184b03a 	or	r2,r16,r6
1000bff4:	10001526 	beq	r2,zero,1000c04c <__divdf3+0x298>
1000bff8:	80013d26 	beq	r16,zero,1000c4f0 <__divdf3+0x73c>
1000bffc:	8009883a 	mov	r4,r16
1000c000:	d9800215 	stw	r6,8(sp)
1000c004:	da000315 	stw	r8,12(sp)
1000c008:	da400415 	stw	r9,16(sp)
1000c00c:	000dcb00 	call	1000dcb0 <__clzsi2>
1000c010:	d9800217 	ldw	r6,8(sp)
1000c014:	da000317 	ldw	r8,12(sp)
1000c018:	da400417 	ldw	r9,16(sp)
1000c01c:	1007883a 	mov	r3,r2
1000c020:	01000a04 	movi	r4,40
1000c024:	1d7ffe04 	addi	r21,r3,-8
1000c028:	20c9c83a 	sub	r4,r4,r3
1000c02c:	8560983a 	sll	r16,r16,r21
1000c030:	3108d83a 	srl	r4,r6,r4
1000c034:	356a983a 	sll	r21,r6,r21
1000c038:	2420b03a 	or	r16,r4,r16
1000c03c:	017f0344 	movi	r5,-1011
1000c040:	28cbc83a 	sub	r5,r5,r3
1000c044:	000f883a 	mov	r7,zero
1000c048:	003f8b06 	br	1000be78 <__alt_data_end+0xf800be78>
1000c04c:	0021883a 	mov	r16,zero
1000c050:	002b883a 	mov	r21,zero
1000c054:	01c00044 	movi	r7,1
1000c058:	003f8706 	br	1000be78 <__alt_data_end+0xf800be78>
1000c05c:	01c000c4 	movi	r7,3
1000c060:	003f8506 	br	1000be78 <__alt_data_end+0xf800be78>
1000c064:	05000104 	movi	r20,4
1000c068:	0023883a 	mov	r17,zero
1000c06c:	0027883a 	mov	r19,zero
1000c070:	02000044 	movi	r8,1
1000c074:	003f6e06 	br	1000be30 <__alt_data_end+0xf800be30>
1000c078:	05000304 	movi	r20,12
1000c07c:	020000c4 	movi	r8,3
1000c080:	003f6b06 	br	1000be30 <__alt_data_end+0xf800be30>
1000c084:	01400434 	movhi	r5,16
1000c088:	000d883a 	mov	r6,zero
1000c08c:	297fffc4 	addi	r5,r5,-1
1000c090:	04ffffc4 	movi	r19,-1
1000c094:	0201ffc4 	movi	r8,2047
1000c098:	003fa406 	br	1000bf2c <__alt_data_end+0xf800bf2c>
1000c09c:	043f0084 	movi	r16,-1022
1000c0a0:	84a1c83a 	sub	r16,r16,r18
1000c0a4:	00800e04 	movi	r2,56
1000c0a8:	14014d0e 	bge	r2,r16,1000c5e0 <__divdf3+0x82c>
1000c0ac:	a180004c 	andi	r6,r20,1
1000c0b0:	0011883a 	mov	r8,zero
1000c0b4:	000b883a 	mov	r5,zero
1000c0b8:	0027883a 	mov	r19,zero
1000c0bc:	003f9b06 	br	1000bf2c <__alt_data_end+0xf800bf2c>
1000c0c0:	8880022c 	andhi	r2,r17,8
1000c0c4:	1000f026 	beq	r2,zero,1000c488 <__divdf3+0x6d4>
1000c0c8:	8080022c 	andhi	r2,r16,8
1000c0cc:	1000ee1e 	bne	r2,zero,1000c488 <__divdf3+0x6d4>
1000c0d0:	00800434 	movhi	r2,16
1000c0d4:	81400234 	orhi	r5,r16,8
1000c0d8:	10bfffc4 	addi	r2,r2,-1
1000c0dc:	b80d883a 	mov	r6,r23
1000c0e0:	288a703a 	and	r5,r5,r2
1000c0e4:	a827883a 	mov	r19,r21
1000c0e8:	003fea06 	br	1000c094 <__alt_data_end+0xf800c094>
1000c0ec:	84411c36 	bltu	r16,r17,1000c560 <__divdf3+0x7ac>
1000c0f0:	8c011a26 	beq	r17,r16,1000c55c <__divdf3+0x7a8>
1000c0f4:	94bfffc4 	addi	r18,r18,-1
1000c0f8:	dcc00015 	stw	r19,0(sp)
1000c0fc:	8811883a 	mov	r8,r17
1000c100:	002d883a 	mov	r22,zero
1000c104:	a80cd63a 	srli	r6,r21,24
1000c108:	8020923a 	slli	r16,r16,8
1000c10c:	a82a923a 	slli	r21,r21,8
1000c110:	4009883a 	mov	r4,r8
1000c114:	342eb03a 	or	r23,r6,r16
1000c118:	dd400115 	stw	r21,4(sp)
1000c11c:	b82ad43a 	srli	r21,r23,16
1000c120:	da000315 	stw	r8,12(sp)
1000c124:	bcffffcc 	andi	r19,r23,65535
1000c128:	a80b883a 	mov	r5,r21
1000c12c:	000b5080 	call	1000b508 <__udivsi3>
1000c130:	1009883a 	mov	r4,r2
1000c134:	980b883a 	mov	r5,r19
1000c138:	1023883a 	mov	r17,r2
1000c13c:	00013880 	call	10001388 <__mulsi3>
1000c140:	da000317 	ldw	r8,12(sp)
1000c144:	a80b883a 	mov	r5,r21
1000c148:	1039883a 	mov	fp,r2
1000c14c:	4009883a 	mov	r4,r8
1000c150:	000b5100 	call	1000b510 <__umodsi3>
1000c154:	d8c00017 	ldw	r3,0(sp)
1000c158:	1004943a 	slli	r2,r2,16
1000c15c:	1810d43a 	srli	r8,r3,16
1000c160:	120eb03a 	or	r7,r2,r8
1000c164:	3f00062e 	bgeu	r7,fp,1000c180 <__divdf3+0x3cc>
1000c168:	3dcf883a 	add	r7,r7,r23
1000c16c:	88bfffc4 	addi	r2,r17,-1
1000c170:	3dc10a36 	bltu	r7,r23,1000c59c <__divdf3+0x7e8>
1000c174:	3f01092e 	bgeu	r7,fp,1000c59c <__divdf3+0x7e8>
1000c178:	8c7fff84 	addi	r17,r17,-2
1000c17c:	3dcf883a 	add	r7,r7,r23
1000c180:	3f39c83a 	sub	fp,r7,fp
1000c184:	e009883a 	mov	r4,fp
1000c188:	a80b883a 	mov	r5,r21
1000c18c:	000b5080 	call	1000b508 <__udivsi3>
1000c190:	1009883a 	mov	r4,r2
1000c194:	980b883a 	mov	r5,r19
1000c198:	1021883a 	mov	r16,r2
1000c19c:	00013880 	call	10001388 <__mulsi3>
1000c1a0:	e009883a 	mov	r4,fp
1000c1a4:	a80b883a 	mov	r5,r21
1000c1a8:	d8800315 	stw	r2,12(sp)
1000c1ac:	000b5100 	call	1000b510 <__umodsi3>
1000c1b0:	d9000017 	ldw	r4,0(sp)
1000c1b4:	1004943a 	slli	r2,r2,16
1000c1b8:	da000317 	ldw	r8,12(sp)
1000c1bc:	20ffffcc 	andi	r3,r4,65535
1000c1c0:	10ceb03a 	or	r7,r2,r3
1000c1c4:	3a00062e 	bgeu	r7,r8,1000c1e0 <__divdf3+0x42c>
1000c1c8:	3dcf883a 	add	r7,r7,r23
1000c1cc:	80bfffc4 	addi	r2,r16,-1
1000c1d0:	3dc0f036 	bltu	r7,r23,1000c594 <__divdf3+0x7e0>
1000c1d4:	3a00ef2e 	bgeu	r7,r8,1000c594 <__divdf3+0x7e0>
1000c1d8:	843fff84 	addi	r16,r16,-2
1000c1dc:	3dcf883a 	add	r7,r7,r23
1000c1e0:	d8c00117 	ldw	r3,4(sp)
1000c1e4:	8822943a 	slli	r17,r17,16
1000c1e8:	3a0fc83a 	sub	r7,r7,r8
1000c1ec:	1806d43a 	srli	r3,r3,16
1000c1f0:	8462b03a 	or	r17,r16,r17
1000c1f4:	8affffcc 	andi	r11,r17,65535
1000c1f8:	d8c00015 	stw	r3,0(sp)
1000c1fc:	d8c00117 	ldw	r3,4(sp)
1000c200:	8820d43a 	srli	r16,r17,16
1000c204:	5809883a 	mov	r4,r11
1000c208:	1f3fffcc 	andi	fp,r3,65535
1000c20c:	e00b883a 	mov	r5,fp
1000c210:	d9c00515 	stw	r7,20(sp)
1000c214:	dac00215 	stw	r11,8(sp)
1000c218:	00013880 	call	10001388 <__mulsi3>
1000c21c:	8009883a 	mov	r4,r16
1000c220:	e00b883a 	mov	r5,fp
1000c224:	d8800415 	stw	r2,16(sp)
1000c228:	00013880 	call	10001388 <__mulsi3>
1000c22c:	d9400017 	ldw	r5,0(sp)
1000c230:	8009883a 	mov	r4,r16
1000c234:	d8800315 	stw	r2,12(sp)
1000c238:	00013880 	call	10001388 <__mulsi3>
1000c23c:	dac00217 	ldw	r11,8(sp)
1000c240:	d9400017 	ldw	r5,0(sp)
1000c244:	d8800215 	stw	r2,8(sp)
1000c248:	5809883a 	mov	r4,r11
1000c24c:	00013880 	call	10001388 <__mulsi3>
1000c250:	da400417 	ldw	r9,16(sp)
1000c254:	da800317 	ldw	r10,12(sp)
1000c258:	d9c00517 	ldw	r7,20(sp)
1000c25c:	480ad43a 	srli	r5,r9,16
1000c260:	5085883a 	add	r2,r10,r2
1000c264:	db000217 	ldw	r12,8(sp)
1000c268:	1151883a 	add	r8,r2,r5
1000c26c:	4280022e 	bgeu	r8,r10,1000c278 <__divdf3+0x4c4>
1000c270:	00800074 	movhi	r2,1
1000c274:	6099883a 	add	r12,r12,r2
1000c278:	400ad43a 	srli	r5,r8,16
1000c27c:	4010943a 	slli	r8,r8,16
1000c280:	4c3fffcc 	andi	r16,r9,65535
1000c284:	6149883a 	add	r4,r12,r5
1000c288:	4411883a 	add	r8,r8,r16
1000c28c:	3900a736 	bltu	r7,r4,1000c52c <__divdf3+0x778>
1000c290:	3900c426 	beq	r7,r4,1000c5a4 <__divdf3+0x7f0>
1000c294:	3909c83a 	sub	r4,r7,r4
1000c298:	b221c83a 	sub	r16,r22,r8
1000c29c:	b42d803a 	cmpltu	r22,r22,r16
1000c2a0:	25adc83a 	sub	r22,r4,r22
1000c2a4:	b5c0c626 	beq	r22,r23,1000c5c0 <__divdf3+0x80c>
1000c2a8:	b009883a 	mov	r4,r22
1000c2ac:	a80b883a 	mov	r5,r21
1000c2b0:	000b5080 	call	1000b508 <__udivsi3>
1000c2b4:	1009883a 	mov	r4,r2
1000c2b8:	980b883a 	mov	r5,r19
1000c2bc:	d8800315 	stw	r2,12(sp)
1000c2c0:	00013880 	call	10001388 <__mulsi3>
1000c2c4:	a80b883a 	mov	r5,r21
1000c2c8:	b009883a 	mov	r4,r22
1000c2cc:	d8800415 	stw	r2,16(sp)
1000c2d0:	000b5100 	call	1000b510 <__umodsi3>
1000c2d4:	1004943a 	slli	r2,r2,16
1000c2d8:	800ed43a 	srli	r7,r16,16
1000c2dc:	da400417 	ldw	r9,16(sp)
1000c2e0:	da000317 	ldw	r8,12(sp)
1000c2e4:	11cab03a 	or	r5,r2,r7
1000c2e8:	2a40062e 	bgeu	r5,r9,1000c304 <__divdf3+0x550>
1000c2ec:	2dcb883a 	add	r5,r5,r23
1000c2f0:	40bfffc4 	addi	r2,r8,-1
1000c2f4:	2dc0b436 	bltu	r5,r23,1000c5c8 <__divdf3+0x814>
1000c2f8:	2a40b32e 	bgeu	r5,r9,1000c5c8 <__divdf3+0x814>
1000c2fc:	423fff84 	addi	r8,r8,-2
1000c300:	2dcb883a 	add	r5,r5,r23
1000c304:	2a6dc83a 	sub	r22,r5,r9
1000c308:	b009883a 	mov	r4,r22
1000c30c:	a80b883a 	mov	r5,r21
1000c310:	da000315 	stw	r8,12(sp)
1000c314:	000b5080 	call	1000b508 <__udivsi3>
1000c318:	980b883a 	mov	r5,r19
1000c31c:	1009883a 	mov	r4,r2
1000c320:	d8800415 	stw	r2,16(sp)
1000c324:	00013880 	call	10001388 <__mulsi3>
1000c328:	b009883a 	mov	r4,r22
1000c32c:	a80b883a 	mov	r5,r21
1000c330:	1027883a 	mov	r19,r2
1000c334:	000b5100 	call	1000b510 <__umodsi3>
1000c338:	1004943a 	slli	r2,r2,16
1000c33c:	843fffcc 	andi	r16,r16,65535
1000c340:	da000317 	ldw	r8,12(sp)
1000c344:	140eb03a 	or	r7,r2,r16
1000c348:	da400417 	ldw	r9,16(sp)
1000c34c:	3cc0062e 	bgeu	r7,r19,1000c368 <__divdf3+0x5b4>
1000c350:	3dcf883a 	add	r7,r7,r23
1000c354:	48bfffc4 	addi	r2,r9,-1
1000c358:	3dc09d36 	bltu	r7,r23,1000c5d0 <__divdf3+0x81c>
1000c35c:	3cc09c2e 	bgeu	r7,r19,1000c5d0 <__divdf3+0x81c>
1000c360:	4a7fff84 	addi	r9,r9,-2
1000c364:	3dcf883a 	add	r7,r7,r23
1000c368:	4010943a 	slli	r8,r8,16
1000c36c:	3cebc83a 	sub	r21,r7,r19
1000c370:	e00b883a 	mov	r5,fp
1000c374:	4a26b03a 	or	r19,r9,r8
1000c378:	99ffffcc 	andi	r7,r19,65535
1000c37c:	9820d43a 	srli	r16,r19,16
1000c380:	3809883a 	mov	r4,r7
1000c384:	d9c00515 	stw	r7,20(sp)
1000c388:	00013880 	call	10001388 <__mulsi3>
1000c38c:	8009883a 	mov	r4,r16
1000c390:	e00b883a 	mov	r5,fp
1000c394:	102d883a 	mov	r22,r2
1000c398:	00013880 	call	10001388 <__mulsi3>
1000c39c:	d9400017 	ldw	r5,0(sp)
1000c3a0:	8009883a 	mov	r4,r16
1000c3a4:	1039883a 	mov	fp,r2
1000c3a8:	00013880 	call	10001388 <__mulsi3>
1000c3ac:	d9c00517 	ldw	r7,20(sp)
1000c3b0:	d9400017 	ldw	r5,0(sp)
1000c3b4:	1021883a 	mov	r16,r2
1000c3b8:	3809883a 	mov	r4,r7
1000c3bc:	00013880 	call	10001388 <__mulsi3>
1000c3c0:	b008d43a 	srli	r4,r22,16
1000c3c4:	e085883a 	add	r2,fp,r2
1000c3c8:	1109883a 	add	r4,r2,r4
1000c3cc:	2700022e 	bgeu	r4,fp,1000c3d8 <__divdf3+0x624>
1000c3d0:	00800074 	movhi	r2,1
1000c3d4:	80a1883a 	add	r16,r16,r2
1000c3d8:	200ad43a 	srli	r5,r4,16
1000c3dc:	2008943a 	slli	r4,r4,16
1000c3e0:	b5bfffcc 	andi	r22,r22,65535
1000c3e4:	8145883a 	add	r2,r16,r5
1000c3e8:	2589883a 	add	r4,r4,r22
1000c3ec:	a8802c36 	bltu	r21,r2,1000c4a0 <__divdf3+0x6ec>
1000c3f0:	a880a426 	beq	r21,r2,1000c684 <__divdf3+0x8d0>
1000c3f4:	9cc00054 	ori	r19,r19,1
1000c3f8:	9200ffc4 	addi	r8,r18,1023
1000c3fc:	023f270e 	bge	zero,r8,1000c09c <__alt_data_end+0xf800c09c>
1000c400:	988001cc 	andi	r2,r19,7
1000c404:	10000726 	beq	r2,zero,1000c424 <__divdf3+0x670>
1000c408:	990003cc 	andi	r4,r19,15
1000c40c:	00800104 	movi	r2,4
1000c410:	20800426 	beq	r4,r2,1000c424 <__divdf3+0x670>
1000c414:	9885883a 	add	r2,r19,r2
1000c418:	14e7803a 	cmpltu	r19,r2,r19
1000c41c:	8ce3883a 	add	r17,r17,r19
1000c420:	1027883a 	mov	r19,r2
1000c424:	8880402c 	andhi	r2,r17,256
1000c428:	10000426 	beq	r2,zero,1000c43c <__divdf3+0x688>
1000c42c:	00bfc034 	movhi	r2,65280
1000c430:	10bfffc4 	addi	r2,r2,-1
1000c434:	92010004 	addi	r8,r18,1024
1000c438:	88a2703a 	and	r17,r17,r2
1000c43c:	0081ff84 	movi	r2,2046
1000c440:	123eb616 	blt	r2,r8,1000bf1c <__alt_data_end+0xf800bf1c>
1000c444:	9826d0fa 	srli	r19,r19,3
1000c448:	8804977a 	slli	r2,r17,29
1000c44c:	8820927a 	slli	r16,r17,9
1000c450:	4201ffcc 	andi	r8,r8,2047
1000c454:	14e6b03a 	or	r19,r2,r19
1000c458:	800ad33a 	srli	r5,r16,12
1000c45c:	a180004c 	andi	r6,r20,1
1000c460:	003eb206 	br	1000bf2c <__alt_data_end+0xf800bf2c>
1000c464:	008000c4 	movi	r2,3
1000c468:	4080ac26 	beq	r8,r2,1000c71c <__divdf3+0x968>
1000c46c:	00800044 	movi	r2,1
1000c470:	4080591e 	bne	r8,r2,1000c5d8 <__divdf3+0x824>
1000c474:	e00d883a 	mov	r6,fp
1000c478:	0011883a 	mov	r8,zero
1000c47c:	000b883a 	mov	r5,zero
1000c480:	0027883a 	mov	r19,zero
1000c484:	003ea906 	br	1000bf2c <__alt_data_end+0xf800bf2c>
1000c488:	00800434 	movhi	r2,16
1000c48c:	89400234 	orhi	r5,r17,8
1000c490:	10bfffc4 	addi	r2,r2,-1
1000c494:	b00d883a 	mov	r6,r22
1000c498:	288a703a 	and	r5,r5,r2
1000c49c:	003efd06 	br	1000c094 <__alt_data_end+0xf800c094>
1000c4a0:	adcf883a 	add	r7,r21,r23
1000c4a4:	997fffc4 	addi	r5,r19,-1
1000c4a8:	3dc0412e 	bgeu	r7,r23,1000c5b0 <__divdf3+0x7fc>
1000c4ac:	2827883a 	mov	r19,r5
1000c4b0:	38bfd01e 	bne	r7,r2,1000c3f4 <__alt_data_end+0xf800c3f4>
1000c4b4:	d8c00117 	ldw	r3,4(sp)
1000c4b8:	193fce1e 	bne	r3,r4,1000c3f4 <__alt_data_end+0xf800c3f4>
1000c4bc:	003fce06 	br	1000c3f8 <__alt_data_end+0xf800c3f8>
1000c4c0:	d9800215 	stw	r6,8(sp)
1000c4c4:	d9c00515 	stw	r7,20(sp)
1000c4c8:	000dcb00 	call	1000dcb0 <__clzsi2>
1000c4cc:	10c00804 	addi	r3,r2,32
1000c4d0:	010009c4 	movi	r4,39
1000c4d4:	d9800217 	ldw	r6,8(sp)
1000c4d8:	d9c00517 	ldw	r7,20(sp)
1000c4dc:	20feb20e 	bge	r4,r3,1000bfa8 <__alt_data_end+0xf800bfa8>
1000c4e0:	117ffe04 	addi	r5,r2,-8
1000c4e4:	a162983a 	sll	r17,r20,r5
1000c4e8:	0027883a 	mov	r19,zero
1000c4ec:	003eb506 	br	1000bfc4 <__alt_data_end+0xf800bfc4>
1000c4f0:	3009883a 	mov	r4,r6
1000c4f4:	d9800215 	stw	r6,8(sp)
1000c4f8:	da000315 	stw	r8,12(sp)
1000c4fc:	da400415 	stw	r9,16(sp)
1000c500:	000dcb00 	call	1000dcb0 <__clzsi2>
1000c504:	10c00804 	addi	r3,r2,32
1000c508:	010009c4 	movi	r4,39
1000c50c:	d9800217 	ldw	r6,8(sp)
1000c510:	da000317 	ldw	r8,12(sp)
1000c514:	da400417 	ldw	r9,16(sp)
1000c518:	20fec10e 	bge	r4,r3,1000c020 <__alt_data_end+0xf800c020>
1000c51c:	10bffe04 	addi	r2,r2,-8
1000c520:	a8a0983a 	sll	r16,r21,r2
1000c524:	002b883a 	mov	r21,zero
1000c528:	003ec406 	br	1000c03c <__alt_data_end+0xf800c03c>
1000c52c:	d8c00117 	ldw	r3,4(sp)
1000c530:	b0ed883a 	add	r22,r22,r3
1000c534:	b0c5803a 	cmpltu	r2,r22,r3
1000c538:	15c5883a 	add	r2,r2,r23
1000c53c:	11cf883a 	add	r7,r2,r7
1000c540:	88bfffc4 	addi	r2,r17,-1
1000c544:	b9c00d2e 	bgeu	r23,r7,1000c57c <__divdf3+0x7c8>
1000c548:	39003f36 	bltu	r7,r4,1000c648 <__divdf3+0x894>
1000c54c:	21c06a26 	beq	r4,r7,1000c6f8 <__divdf3+0x944>
1000c550:	3909c83a 	sub	r4,r7,r4
1000c554:	1023883a 	mov	r17,r2
1000c558:	003f4f06 	br	1000c298 <__alt_data_end+0xf800c298>
1000c55c:	9d7ee536 	bltu	r19,r21,1000c0f4 <__alt_data_end+0xf800c0f4>
1000c560:	982ed07a 	srli	r23,r19,1
1000c564:	880497fa 	slli	r2,r17,31
1000c568:	8810d07a 	srli	r8,r17,1
1000c56c:	982c97fa 	slli	r22,r19,31
1000c570:	b884b03a 	or	r2,r23,r2
1000c574:	d8800015 	stw	r2,0(sp)
1000c578:	003ee206 	br	1000c104 <__alt_data_end+0xf800c104>
1000c57c:	3dfff41e 	bne	r7,r23,1000c550 <__alt_data_end+0xf800c550>
1000c580:	d8c00117 	ldw	r3,4(sp)
1000c584:	b0fff02e 	bgeu	r22,r3,1000c548 <__alt_data_end+0xf800c548>
1000c588:	b909c83a 	sub	r4,r23,r4
1000c58c:	1023883a 	mov	r17,r2
1000c590:	003f4106 	br	1000c298 <__alt_data_end+0xf800c298>
1000c594:	1021883a 	mov	r16,r2
1000c598:	003f1106 	br	1000c1e0 <__alt_data_end+0xf800c1e0>
1000c59c:	1023883a 	mov	r17,r2
1000c5a0:	003ef706 	br	1000c180 <__alt_data_end+0xf800c180>
1000c5a4:	b23fe136 	bltu	r22,r8,1000c52c <__alt_data_end+0xf800c52c>
1000c5a8:	0009883a 	mov	r4,zero
1000c5ac:	003f3a06 	br	1000c298 <__alt_data_end+0xf800c298>
1000c5b0:	38802c36 	bltu	r7,r2,1000c664 <__divdf3+0x8b0>
1000c5b4:	11c05326 	beq	r2,r7,1000c704 <__divdf3+0x950>
1000c5b8:	2827883a 	mov	r19,r5
1000c5bc:	003f8d06 	br	1000c3f4 <__alt_data_end+0xf800c3f4>
1000c5c0:	04ffffc4 	movi	r19,-1
1000c5c4:	003f8c06 	br	1000c3f8 <__alt_data_end+0xf800c3f8>
1000c5c8:	1011883a 	mov	r8,r2
1000c5cc:	003f4d06 	br	1000c304 <__alt_data_end+0xf800c304>
1000c5d0:	1013883a 	mov	r9,r2
1000c5d4:	003f6406 	br	1000c368 <__alt_data_end+0xf800c368>
1000c5d8:	e029883a 	mov	r20,fp
1000c5dc:	003f8606 	br	1000c3f8 <__alt_data_end+0xf800c3f8>
1000c5e0:	008007c4 	movi	r2,31
1000c5e4:	14002a16 	blt	r2,r16,1000c690 <__divdf3+0x8dc>
1000c5e8:	91410784 	addi	r5,r18,1054
1000c5ec:	9c0cd83a 	srl	r6,r19,r16
1000c5f0:	8948983a 	sll	r4,r17,r5
1000c5f4:	9944983a 	sll	r2,r19,r5
1000c5f8:	8c20d83a 	srl	r16,r17,r16
1000c5fc:	3108b03a 	or	r4,r6,r4
1000c600:	1004c03a 	cmpne	r2,r2,zero
1000c604:	2084b03a 	or	r2,r4,r2
1000c608:	110001cc 	andi	r4,r2,7
1000c60c:	20000726 	beq	r4,zero,1000c62c <__divdf3+0x878>
1000c610:	114003cc 	andi	r5,r2,15
1000c614:	01000104 	movi	r4,4
1000c618:	29000426 	beq	r5,r4,1000c62c <__divdf3+0x878>
1000c61c:	11000104 	addi	r4,r2,4
1000c620:	2085803a 	cmpltu	r2,r4,r2
1000c624:	80a1883a 	add	r16,r16,r2
1000c628:	2005883a 	mov	r2,r4
1000c62c:	8100202c 	andhi	r4,r16,128
1000c630:	20002d26 	beq	r4,zero,1000c6e8 <__divdf3+0x934>
1000c634:	a180004c 	andi	r6,r20,1
1000c638:	02000044 	movi	r8,1
1000c63c:	000b883a 	mov	r5,zero
1000c640:	0027883a 	mov	r19,zero
1000c644:	003e3906 	br	1000bf2c <__alt_data_end+0xf800bf2c>
1000c648:	d8c00117 	ldw	r3,4(sp)
1000c64c:	8c7fff84 	addi	r17,r17,-2
1000c650:	b0ed883a 	add	r22,r22,r3
1000c654:	b0c5803a 	cmpltu	r2,r22,r3
1000c658:	15c5883a 	add	r2,r2,r23
1000c65c:	11cf883a 	add	r7,r2,r7
1000c660:	003f0c06 	br	1000c294 <__alt_data_end+0xf800c294>
1000c664:	d8c00117 	ldw	r3,4(sp)
1000c668:	997fff84 	addi	r5,r19,-2
1000c66c:	18d1883a 	add	r8,r3,r3
1000c670:	40c7803a 	cmpltu	r3,r8,r3
1000c674:	1dcd883a 	add	r6,r3,r23
1000c678:	398f883a 	add	r7,r7,r6
1000c67c:	da000115 	stw	r8,4(sp)
1000c680:	003f8a06 	br	1000c4ac <__alt_data_end+0xf800c4ac>
1000c684:	203f861e 	bne	r4,zero,1000c4a0 <__alt_data_end+0xf800c4a0>
1000c688:	d8000115 	stw	zero,4(sp)
1000c68c:	003f8906 	br	1000c4b4 <__alt_data_end+0xf800c4b4>
1000c690:	00bef884 	movi	r2,-1054
1000c694:	1485c83a 	sub	r2,r2,r18
1000c698:	01000804 	movi	r4,32
1000c69c:	8884d83a 	srl	r2,r17,r2
1000c6a0:	81001c26 	beq	r16,r4,1000c714 <__divdf3+0x960>
1000c6a4:	91010f84 	addi	r4,r18,1086
1000c6a8:	8908983a 	sll	r4,r17,r4
1000c6ac:	24c8b03a 	or	r4,r4,r19
1000c6b0:	2008c03a 	cmpne	r4,r4,zero
1000c6b4:	2084b03a 	or	r2,r4,r2
1000c6b8:	140001cc 	andi	r16,r2,7
1000c6bc:	8000061e 	bne	r16,zero,1000c6d8 <__divdf3+0x924>
1000c6c0:	000b883a 	mov	r5,zero
1000c6c4:	1004d0fa 	srli	r2,r2,3
1000c6c8:	a180004c 	andi	r6,r20,1
1000c6cc:	0011883a 	mov	r8,zero
1000c6d0:	1426b03a 	or	r19,r2,r16
1000c6d4:	003e1506 	br	1000bf2c <__alt_data_end+0xf800bf2c>
1000c6d8:	114003cc 	andi	r5,r2,15
1000c6dc:	01000104 	movi	r4,4
1000c6e0:	0021883a 	mov	r16,zero
1000c6e4:	293fcd1e 	bne	r5,r4,1000c61c <__alt_data_end+0xf800c61c>
1000c6e8:	800a927a 	slli	r5,r16,9
1000c6ec:	8020977a 	slli	r16,r16,29
1000c6f0:	280ad33a 	srli	r5,r5,12
1000c6f4:	003ff306 	br	1000c6c4 <__alt_data_end+0xf800c6c4>
1000c6f8:	b23fd336 	bltu	r22,r8,1000c648 <__alt_data_end+0xf800c648>
1000c6fc:	1023883a 	mov	r17,r2
1000c700:	003fa906 	br	1000c5a8 <__alt_data_end+0xf800c5a8>
1000c704:	d8c00117 	ldw	r3,4(sp)
1000c708:	193fd636 	bltu	r3,r4,1000c664 <__alt_data_end+0xf800c664>
1000c70c:	2827883a 	mov	r19,r5
1000c710:	003f6806 	br	1000c4b4 <__alt_data_end+0xf800c4b4>
1000c714:	0009883a 	mov	r4,zero
1000c718:	003fe406 	br	1000c6ac <__alt_data_end+0xf800c6ac>
1000c71c:	00800434 	movhi	r2,16
1000c720:	89400234 	orhi	r5,r17,8
1000c724:	10bfffc4 	addi	r2,r2,-1
1000c728:	e00d883a 	mov	r6,fp
1000c72c:	288a703a 	and	r5,r5,r2
1000c730:	003e5806 	br	1000c094 <__alt_data_end+0xf800c094>

1000c734 <__eqdf2>:
1000c734:	2804d53a 	srli	r2,r5,20
1000c738:	3806d53a 	srli	r3,r7,20
1000c73c:	02000434 	movhi	r8,16
1000c740:	423fffc4 	addi	r8,r8,-1
1000c744:	1081ffcc 	andi	r2,r2,2047
1000c748:	0241ffc4 	movi	r9,2047
1000c74c:	2a14703a 	and	r10,r5,r8
1000c750:	18c1ffcc 	andi	r3,r3,2047
1000c754:	3a10703a 	and	r8,r7,r8
1000c758:	280ad7fa 	srli	r5,r5,31
1000c75c:	380ed7fa 	srli	r7,r7,31
1000c760:	12400f26 	beq	r2,r9,1000c7a0 <__eqdf2+0x6c>
1000c764:	0241ffc4 	movi	r9,2047
1000c768:	1a400326 	beq	r3,r9,1000c778 <__eqdf2+0x44>
1000c76c:	10c00526 	beq	r2,r3,1000c784 <__eqdf2+0x50>
1000c770:	00800044 	movi	r2,1
1000c774:	f800283a 	ret
1000c778:	4192b03a 	or	r9,r8,r6
1000c77c:	483ffc1e 	bne	r9,zero,1000c770 <__alt_data_end+0xf800c770>
1000c780:	10fffb1e 	bne	r2,r3,1000c770 <__alt_data_end+0xf800c770>
1000c784:	523ffa1e 	bne	r10,r8,1000c770 <__alt_data_end+0xf800c770>
1000c788:	21bff91e 	bne	r4,r6,1000c770 <__alt_data_end+0xf800c770>
1000c78c:	29c00826 	beq	r5,r7,1000c7b0 <__eqdf2+0x7c>
1000c790:	103ff71e 	bne	r2,zero,1000c770 <__alt_data_end+0xf800c770>
1000c794:	5104b03a 	or	r2,r10,r4
1000c798:	1004c03a 	cmpne	r2,r2,zero
1000c79c:	f800283a 	ret
1000c7a0:	5112b03a 	or	r9,r10,r4
1000c7a4:	483fef26 	beq	r9,zero,1000c764 <__alt_data_end+0xf800c764>
1000c7a8:	00800044 	movi	r2,1
1000c7ac:	f800283a 	ret
1000c7b0:	0005883a 	mov	r2,zero
1000c7b4:	f800283a 	ret

1000c7b8 <__gedf2>:
1000c7b8:	2804d53a 	srli	r2,r5,20
1000c7bc:	3806d53a 	srli	r3,r7,20
1000c7c0:	02000434 	movhi	r8,16
1000c7c4:	423fffc4 	addi	r8,r8,-1
1000c7c8:	0241ffc4 	movi	r9,2047
1000c7cc:	1081ffcc 	andi	r2,r2,2047
1000c7d0:	2a14703a 	and	r10,r5,r8
1000c7d4:	1a46703a 	and	r3,r3,r9
1000c7d8:	3a10703a 	and	r8,r7,r8
1000c7dc:	280ad7fa 	srli	r5,r5,31
1000c7e0:	380ed7fa 	srli	r7,r7,31
1000c7e4:	12400b26 	beq	r2,r9,1000c814 <__gedf2+0x5c>
1000c7e8:	1a401626 	beq	r3,r9,1000c844 <__gedf2+0x8c>
1000c7ec:	10000c1e 	bne	r2,zero,1000c820 <__gedf2+0x68>
1000c7f0:	5112b03a 	or	r9,r10,r4
1000c7f4:	4813003a 	cmpeq	r9,r9,zero
1000c7f8:	4817883a 	mov	r11,r9
1000c7fc:	18000c1e 	bne	r3,zero,1000c830 <__gedf2+0x78>
1000c800:	4198b03a 	or	r12,r8,r6
1000c804:	60000a1e 	bne	r12,zero,1000c830 <__gedf2+0x78>
1000c808:	48001326 	beq	r9,zero,1000c858 <__gedf2+0xa0>
1000c80c:	0005883a 	mov	r2,zero
1000c810:	f800283a 	ret
1000c814:	5112b03a 	or	r9,r10,r4
1000c818:	4800191e 	bne	r9,zero,1000c880 <__gedf2+0xc8>
1000c81c:	18800926 	beq	r3,r2,1000c844 <__gedf2+0x8c>
1000c820:	18000b1e 	bne	r3,zero,1000c850 <__gedf2+0x98>
1000c824:	4192b03a 	or	r9,r8,r6
1000c828:	0017883a 	mov	r11,zero
1000c82c:	48000a26 	beq	r9,zero,1000c858 <__gedf2+0xa0>
1000c830:	39c03fcc 	andi	r7,r7,255
1000c834:	58000726 	beq	r11,zero,1000c854 <__gedf2+0x9c>
1000c838:	3800081e 	bne	r7,zero,1000c85c <__gedf2+0xa4>
1000c83c:	00bfffc4 	movi	r2,-1
1000c840:	f800283a 	ret
1000c844:	4192b03a 	or	r9,r8,r6
1000c848:	48000d1e 	bne	r9,zero,1000c880 <__gedf2+0xc8>
1000c84c:	103fe826 	beq	r2,zero,1000c7f0 <__alt_data_end+0xf800c7f0>
1000c850:	39c03fcc 	andi	r7,r7,255
1000c854:	29c00326 	beq	r5,r7,1000c864 <__gedf2+0xac>
1000c858:	283ff81e 	bne	r5,zero,1000c83c <__alt_data_end+0xf800c83c>
1000c85c:	00800044 	movi	r2,1
1000c860:	f800283a 	ret
1000c864:	18bffc16 	blt	r3,r2,1000c858 <__alt_data_end+0xf800c858>
1000c868:	10c00316 	blt	r2,r3,1000c878 <__gedf2+0xc0>
1000c86c:	42bffa36 	bltu	r8,r10,1000c858 <__alt_data_end+0xf800c858>
1000c870:	52000526 	beq	r10,r8,1000c888 <__gedf2+0xd0>
1000c874:	523fe52e 	bgeu	r10,r8,1000c80c <__alt_data_end+0xf800c80c>
1000c878:	283ff026 	beq	r5,zero,1000c83c <__alt_data_end+0xf800c83c>
1000c87c:	003ff706 	br	1000c85c <__alt_data_end+0xf800c85c>
1000c880:	00bfff84 	movi	r2,-2
1000c884:	f800283a 	ret
1000c888:	313ff336 	bltu	r6,r4,1000c858 <__alt_data_end+0xf800c858>
1000c88c:	21bfdf2e 	bgeu	r4,r6,1000c80c <__alt_data_end+0xf800c80c>
1000c890:	283fea26 	beq	r5,zero,1000c83c <__alt_data_end+0xf800c83c>
1000c894:	003ff106 	br	1000c85c <__alt_data_end+0xf800c85c>

1000c898 <__ledf2>:
1000c898:	2804d53a 	srli	r2,r5,20
1000c89c:	3810d53a 	srli	r8,r7,20
1000c8a0:	00c00434 	movhi	r3,16
1000c8a4:	18ffffc4 	addi	r3,r3,-1
1000c8a8:	0241ffc4 	movi	r9,2047
1000c8ac:	1081ffcc 	andi	r2,r2,2047
1000c8b0:	28d4703a 	and	r10,r5,r3
1000c8b4:	4250703a 	and	r8,r8,r9
1000c8b8:	38c6703a 	and	r3,r7,r3
1000c8bc:	280ad7fa 	srli	r5,r5,31
1000c8c0:	380ed7fa 	srli	r7,r7,31
1000c8c4:	12400b26 	beq	r2,r9,1000c8f4 <__ledf2+0x5c>
1000c8c8:	42401926 	beq	r8,r9,1000c930 <__ledf2+0x98>
1000c8cc:	10000c1e 	bne	r2,zero,1000c900 <__ledf2+0x68>
1000c8d0:	5112b03a 	or	r9,r10,r4
1000c8d4:	4813003a 	cmpeq	r9,r9,zero
1000c8d8:	4817883a 	mov	r11,r9
1000c8dc:	40000f26 	beq	r8,zero,1000c91c <__ledf2+0x84>
1000c8e0:	39c03fcc 	andi	r7,r7,255
1000c8e4:	58001826 	beq	r11,zero,1000c948 <__ledf2+0xb0>
1000c8e8:	38000a1e 	bne	r7,zero,1000c914 <__ledf2+0x7c>
1000c8ec:	00bfffc4 	movi	r2,-1
1000c8f0:	f800283a 	ret
1000c8f4:	5112b03a 	or	r9,r10,r4
1000c8f8:	48000f1e 	bne	r9,zero,1000c938 <__ledf2+0xa0>
1000c8fc:	40800c26 	beq	r8,r2,1000c930 <__ledf2+0x98>
1000c900:	4000101e 	bne	r8,zero,1000c944 <__ledf2+0xac>
1000c904:	1992b03a 	or	r9,r3,r6
1000c908:	0017883a 	mov	r11,zero
1000c90c:	483ff41e 	bne	r9,zero,1000c8e0 <__alt_data_end+0xf800c8e0>
1000c910:	283ff61e 	bne	r5,zero,1000c8ec <__alt_data_end+0xf800c8ec>
1000c914:	00800044 	movi	r2,1
1000c918:	f800283a 	ret
1000c91c:	1998b03a 	or	r12,r3,r6
1000c920:	603fef1e 	bne	r12,zero,1000c8e0 <__alt_data_end+0xf800c8e0>
1000c924:	483ffa26 	beq	r9,zero,1000c910 <__alt_data_end+0xf800c910>
1000c928:	0005883a 	mov	r2,zero
1000c92c:	f800283a 	ret
1000c930:	1992b03a 	or	r9,r3,r6
1000c934:	48000226 	beq	r9,zero,1000c940 <__ledf2+0xa8>
1000c938:	00800084 	movi	r2,2
1000c93c:	f800283a 	ret
1000c940:	103fe326 	beq	r2,zero,1000c8d0 <__alt_data_end+0xf800c8d0>
1000c944:	39c03fcc 	andi	r7,r7,255
1000c948:	29fff11e 	bne	r5,r7,1000c910 <__alt_data_end+0xf800c910>
1000c94c:	40bff016 	blt	r8,r2,1000c910 <__alt_data_end+0xf800c910>
1000c950:	12000316 	blt	r2,r8,1000c960 <__ledf2+0xc8>
1000c954:	1abfee36 	bltu	r3,r10,1000c910 <__alt_data_end+0xf800c910>
1000c958:	50c00326 	beq	r10,r3,1000c968 <__ledf2+0xd0>
1000c95c:	50fff22e 	bgeu	r10,r3,1000c928 <__alt_data_end+0xf800c928>
1000c960:	283fe226 	beq	r5,zero,1000c8ec <__alt_data_end+0xf800c8ec>
1000c964:	003feb06 	br	1000c914 <__alt_data_end+0xf800c914>
1000c968:	313fe936 	bltu	r6,r4,1000c910 <__alt_data_end+0xf800c910>
1000c96c:	21bfee2e 	bgeu	r4,r6,1000c928 <__alt_data_end+0xf800c928>
1000c970:	283fde26 	beq	r5,zero,1000c8ec <__alt_data_end+0xf800c8ec>
1000c974:	003fe706 	br	1000c914 <__alt_data_end+0xf800c914>

1000c978 <__muldf3>:
1000c978:	deffee04 	addi	sp,sp,-72
1000c97c:	dd000c15 	stw	r20,48(sp)
1000c980:	2828d53a 	srli	r20,r5,20
1000c984:	dd400d15 	stw	r21,52(sp)
1000c988:	282ad7fa 	srli	r21,r5,31
1000c98c:	dc000815 	stw	r16,32(sp)
1000c990:	04000434 	movhi	r16,16
1000c994:	ddc00f15 	stw	r23,60(sp)
1000c998:	dcc00b15 	stw	r19,44(sp)
1000c99c:	dc800a15 	stw	r18,40(sp)
1000c9a0:	843fffc4 	addi	r16,r16,-1
1000c9a4:	dfc01115 	stw	ra,68(sp)
1000c9a8:	df001015 	stw	fp,64(sp)
1000c9ac:	dd800e15 	stw	r22,56(sp)
1000c9b0:	dc400915 	stw	r17,36(sp)
1000c9b4:	a501ffcc 	andi	r20,r20,2047
1000c9b8:	2025883a 	mov	r18,r4
1000c9bc:	202f883a 	mov	r23,r4
1000c9c0:	2c20703a 	and	r16,r5,r16
1000c9c4:	a827883a 	mov	r19,r21
1000c9c8:	aa403fcc 	andi	r9,r21,255
1000c9cc:	a0005926 	beq	r20,zero,1000cb34 <__muldf3+0x1bc>
1000c9d0:	0081ffc4 	movi	r2,2047
1000c9d4:	a0803426 	beq	r20,r2,1000caa8 <__muldf3+0x130>
1000c9d8:	84000434 	orhi	r16,r16,16
1000c9dc:	2004d77a 	srli	r2,r4,29
1000c9e0:	802090fa 	slli	r16,r16,3
1000c9e4:	202e90fa 	slli	r23,r4,3
1000c9e8:	a53f0044 	addi	r20,r20,-1023
1000c9ec:	80a0b03a 	or	r16,r16,r2
1000c9f0:	000b883a 	mov	r5,zero
1000c9f4:	0039883a 	mov	fp,zero
1000c9f8:	3806d53a 	srli	r3,r7,20
1000c9fc:	382cd7fa 	srli	r22,r7,31
1000ca00:	00800434 	movhi	r2,16
1000ca04:	10bfffc4 	addi	r2,r2,-1
1000ca08:	18c1ffcc 	andi	r3,r3,2047
1000ca0c:	3025883a 	mov	r18,r6
1000ca10:	38a2703a 	and	r17,r7,r2
1000ca14:	b2803fcc 	andi	r10,r22,255
1000ca18:	18006426 	beq	r3,zero,1000cbac <__muldf3+0x234>
1000ca1c:	0081ffc4 	movi	r2,2047
1000ca20:	18805c26 	beq	r3,r2,1000cb94 <__muldf3+0x21c>
1000ca24:	8c400434 	orhi	r17,r17,16
1000ca28:	3004d77a 	srli	r2,r6,29
1000ca2c:	882290fa 	slli	r17,r17,3
1000ca30:	302490fa 	slli	r18,r6,3
1000ca34:	18ff0044 	addi	r3,r3,-1023
1000ca38:	88a2b03a 	or	r17,r17,r2
1000ca3c:	000f883a 	mov	r7,zero
1000ca40:	394ab03a 	or	r5,r7,r5
1000ca44:	280a90ba 	slli	r5,r5,2
1000ca48:	00840074 	movhi	r2,4097
1000ca4c:	10b29a04 	addi	r2,r2,-13720
1000ca50:	288b883a 	add	r5,r5,r2
1000ca54:	28800017 	ldw	r2,0(r5)
1000ca58:	a0c7883a 	add	r3,r20,r3
1000ca5c:	b54cf03a 	xor	r6,r22,r21
1000ca60:	1a000044 	addi	r8,r3,1
1000ca64:	1000683a 	jmp	r2
1000ca68:	1000ccac 	andhi	zero,r2,818
1000ca6c:	1000cc98 	cmpnei	zero,r2,818
1000ca70:	1000cc98 	cmpnei	zero,r2,818
1000ca74:	1000cc84 	addi	zero,r2,818
1000ca78:	1000cac4 	addi	zero,r2,811
1000ca7c:	1000cac4 	addi	zero,r2,811
1000ca80:	1000cc6c 	andhi	zero,r2,817
1000ca84:	1000cc84 	addi	zero,r2,818
1000ca88:	1000cac4 	addi	zero,r2,811
1000ca8c:	1000cc6c 	andhi	zero,r2,817
1000ca90:	1000cac4 	addi	zero,r2,811
1000ca94:	1000cc84 	addi	zero,r2,818
1000ca98:	1000cac8 	cmpgei	zero,r2,811
1000ca9c:	1000cac8 	cmpgei	zero,r2,811
1000caa0:	1000cac8 	cmpgei	zero,r2,811
1000caa4:	1000cfe8 	cmpgeui	zero,r2,831
1000caa8:	8104b03a 	or	r2,r16,r4
1000caac:	10006c1e 	bne	r2,zero,1000cc60 <__muldf3+0x2e8>
1000cab0:	01400204 	movi	r5,8
1000cab4:	0021883a 	mov	r16,zero
1000cab8:	002f883a 	mov	r23,zero
1000cabc:	07000084 	movi	fp,2
1000cac0:	003fcd06 	br	1000c9f8 <__alt_data_end+0xf800c9f8>
1000cac4:	3013883a 	mov	r9,r6
1000cac8:	00800084 	movi	r2,2
1000cacc:	e080501e 	bne	fp,r2,1000cc10 <__muldf3+0x298>
1000cad0:	4cc0004c 	andi	r19,r9,1
1000cad4:	0101ffc4 	movi	r4,2047
1000cad8:	0021883a 	mov	r16,zero
1000cadc:	002f883a 	mov	r23,zero
1000cae0:	2008953a 	slli	r4,r4,20
1000cae4:	98c03fcc 	andi	r3,r19,255
1000cae8:	04400434 	movhi	r17,16
1000caec:	8c7fffc4 	addi	r17,r17,-1
1000caf0:	180697fa 	slli	r3,r3,31
1000caf4:	8460703a 	and	r16,r16,r17
1000caf8:	8120b03a 	or	r16,r16,r4
1000cafc:	80c6b03a 	or	r3,r16,r3
1000cb00:	b805883a 	mov	r2,r23
1000cb04:	dfc01117 	ldw	ra,68(sp)
1000cb08:	df001017 	ldw	fp,64(sp)
1000cb0c:	ddc00f17 	ldw	r23,60(sp)
1000cb10:	dd800e17 	ldw	r22,56(sp)
1000cb14:	dd400d17 	ldw	r21,52(sp)
1000cb18:	dd000c17 	ldw	r20,48(sp)
1000cb1c:	dcc00b17 	ldw	r19,44(sp)
1000cb20:	dc800a17 	ldw	r18,40(sp)
1000cb24:	dc400917 	ldw	r17,36(sp)
1000cb28:	dc000817 	ldw	r16,32(sp)
1000cb2c:	dec01204 	addi	sp,sp,72
1000cb30:	f800283a 	ret
1000cb34:	8104b03a 	or	r2,r16,r4
1000cb38:	10004426 	beq	r2,zero,1000cc4c <__muldf3+0x2d4>
1000cb3c:	80014b26 	beq	r16,zero,1000d06c <__muldf3+0x6f4>
1000cb40:	8009883a 	mov	r4,r16
1000cb44:	d9800715 	stw	r6,28(sp)
1000cb48:	d9c00215 	stw	r7,8(sp)
1000cb4c:	da400415 	stw	r9,16(sp)
1000cb50:	000dcb00 	call	1000dcb0 <__clzsi2>
1000cb54:	d9800717 	ldw	r6,28(sp)
1000cb58:	d9c00217 	ldw	r7,8(sp)
1000cb5c:	da400417 	ldw	r9,16(sp)
1000cb60:	1007883a 	mov	r3,r2
1000cb64:	01000a04 	movi	r4,40
1000cb68:	1dfffe04 	addi	r23,r3,-8
1000cb6c:	20c9c83a 	sub	r4,r4,r3
1000cb70:	85e0983a 	sll	r16,r16,r23
1000cb74:	9108d83a 	srl	r4,r18,r4
1000cb78:	95ee983a 	sll	r23,r18,r23
1000cb7c:	2420b03a 	or	r16,r4,r16
1000cb80:	053f0344 	movi	r20,-1011
1000cb84:	a0e9c83a 	sub	r20,r20,r3
1000cb88:	000b883a 	mov	r5,zero
1000cb8c:	0039883a 	mov	fp,zero
1000cb90:	003f9906 	br	1000c9f8 <__alt_data_end+0xf800c9f8>
1000cb94:	8984b03a 	or	r2,r17,r6
1000cb98:	10002a1e 	bne	r2,zero,1000cc44 <__muldf3+0x2cc>
1000cb9c:	0023883a 	mov	r17,zero
1000cba0:	0025883a 	mov	r18,zero
1000cba4:	01c00084 	movi	r7,2
1000cba8:	003fa506 	br	1000ca40 <__alt_data_end+0xf800ca40>
1000cbac:	8984b03a 	or	r2,r17,r6
1000cbb0:	10002026 	beq	r2,zero,1000cc34 <__muldf3+0x2bc>
1000cbb4:	88011c26 	beq	r17,zero,1000d028 <__muldf3+0x6b0>
1000cbb8:	8809883a 	mov	r4,r17
1000cbbc:	d9400215 	stw	r5,8(sp)
1000cbc0:	d9800715 	stw	r6,28(sp)
1000cbc4:	da400415 	stw	r9,16(sp)
1000cbc8:	da800315 	stw	r10,12(sp)
1000cbcc:	000dcb00 	call	1000dcb0 <__clzsi2>
1000cbd0:	d9400217 	ldw	r5,8(sp)
1000cbd4:	d9800717 	ldw	r6,28(sp)
1000cbd8:	da400417 	ldw	r9,16(sp)
1000cbdc:	da800317 	ldw	r10,12(sp)
1000cbe0:	1007883a 	mov	r3,r2
1000cbe4:	01000a04 	movi	r4,40
1000cbe8:	1cbffe04 	addi	r18,r3,-8
1000cbec:	20c9c83a 	sub	r4,r4,r3
1000cbf0:	8ca2983a 	sll	r17,r17,r18
1000cbf4:	3108d83a 	srl	r4,r6,r4
1000cbf8:	34a4983a 	sll	r18,r6,r18
1000cbfc:	2462b03a 	or	r17,r4,r17
1000cc00:	00bf0344 	movi	r2,-1011
1000cc04:	10c7c83a 	sub	r3,r2,r3
1000cc08:	000f883a 	mov	r7,zero
1000cc0c:	003f8c06 	br	1000ca40 <__alt_data_end+0xf800ca40>
1000cc10:	008000c4 	movi	r2,3
1000cc14:	e0816d26 	beq	fp,r2,1000d1cc <__muldf3+0x854>
1000cc18:	00800044 	movi	r2,1
1000cc1c:	e081321e 	bne	fp,r2,1000d0e8 <__muldf3+0x770>
1000cc20:	48a6703a 	and	r19,r9,r2
1000cc24:	0009883a 	mov	r4,zero
1000cc28:	0021883a 	mov	r16,zero
1000cc2c:	002f883a 	mov	r23,zero
1000cc30:	003fab06 	br	1000cae0 <__alt_data_end+0xf800cae0>
1000cc34:	0023883a 	mov	r17,zero
1000cc38:	0025883a 	mov	r18,zero
1000cc3c:	01c00044 	movi	r7,1
1000cc40:	003f7f06 	br	1000ca40 <__alt_data_end+0xf800ca40>
1000cc44:	01c000c4 	movi	r7,3
1000cc48:	003f7d06 	br	1000ca40 <__alt_data_end+0xf800ca40>
1000cc4c:	01400104 	movi	r5,4
1000cc50:	0021883a 	mov	r16,zero
1000cc54:	002f883a 	mov	r23,zero
1000cc58:	07000044 	movi	fp,1
1000cc5c:	003f6606 	br	1000c9f8 <__alt_data_end+0xf800c9f8>
1000cc60:	01400304 	movi	r5,12
1000cc64:	070000c4 	movi	fp,3
1000cc68:	003f6306 	br	1000c9f8 <__alt_data_end+0xf800c9f8>
1000cc6c:	04000434 	movhi	r16,16
1000cc70:	0027883a 	mov	r19,zero
1000cc74:	843fffc4 	addi	r16,r16,-1
1000cc78:	05ffffc4 	movi	r23,-1
1000cc7c:	0101ffc4 	movi	r4,2047
1000cc80:	003f9706 	br	1000cae0 <__alt_data_end+0xf800cae0>
1000cc84:	8821883a 	mov	r16,r17
1000cc88:	902f883a 	mov	r23,r18
1000cc8c:	5013883a 	mov	r9,r10
1000cc90:	3839883a 	mov	fp,r7
1000cc94:	003f8c06 	br	1000cac8 <__alt_data_end+0xf800cac8>
1000cc98:	8821883a 	mov	r16,r17
1000cc9c:	902f883a 	mov	r23,r18
1000cca0:	3013883a 	mov	r9,r6
1000cca4:	3839883a 	mov	fp,r7
1000cca8:	003f8706 	br	1000cac8 <__alt_data_end+0xf800cac8>
1000ccac:	b82ad43a 	srli	r21,r23,16
1000ccb0:	9038d43a 	srli	fp,r18,16
1000ccb4:	bdffffcc 	andi	r23,r23,65535
1000ccb8:	94bfffcc 	andi	r18,r18,65535
1000ccbc:	9009883a 	mov	r4,r18
1000ccc0:	b80b883a 	mov	r5,r23
1000ccc4:	d8c00515 	stw	r3,20(sp)
1000ccc8:	d9800715 	stw	r6,28(sp)
1000cccc:	da000615 	stw	r8,24(sp)
1000ccd0:	00013880 	call	10001388 <__mulsi3>
1000ccd4:	9009883a 	mov	r4,r18
1000ccd8:	a80b883a 	mov	r5,r21
1000ccdc:	1029883a 	mov	r20,r2
1000cce0:	00013880 	call	10001388 <__mulsi3>
1000cce4:	e009883a 	mov	r4,fp
1000cce8:	a80b883a 	mov	r5,r21
1000ccec:	102d883a 	mov	r22,r2
1000ccf0:	00013880 	call	10001388 <__mulsi3>
1000ccf4:	e009883a 	mov	r4,fp
1000ccf8:	b80b883a 	mov	r5,r23
1000ccfc:	1027883a 	mov	r19,r2
1000cd00:	00013880 	call	10001388 <__mulsi3>
1000cd04:	a008d43a 	srli	r4,r20,16
1000cd08:	b085883a 	add	r2,r22,r2
1000cd0c:	d8c00517 	ldw	r3,20(sp)
1000cd10:	110f883a 	add	r7,r2,r4
1000cd14:	d9800717 	ldw	r6,28(sp)
1000cd18:	da000617 	ldw	r8,24(sp)
1000cd1c:	3d80022e 	bgeu	r7,r22,1000cd28 <__muldf3+0x3b0>
1000cd20:	00800074 	movhi	r2,1
1000cd24:	98a7883a 	add	r19,r19,r2
1000cd28:	3804943a 	slli	r2,r7,16
1000cd2c:	380ed43a 	srli	r7,r7,16
1000cd30:	882cd43a 	srli	r22,r17,16
1000cd34:	a53fffcc 	andi	r20,r20,65535
1000cd38:	8c7fffcc 	andi	r17,r17,65535
1000cd3c:	1529883a 	add	r20,r2,r20
1000cd40:	8809883a 	mov	r4,r17
1000cd44:	b80b883a 	mov	r5,r23
1000cd48:	d8c00515 	stw	r3,20(sp)
1000cd4c:	d9800715 	stw	r6,28(sp)
1000cd50:	da000615 	stw	r8,24(sp)
1000cd54:	d9c00015 	stw	r7,0(sp)
1000cd58:	dd000115 	stw	r20,4(sp)
1000cd5c:	00013880 	call	10001388 <__mulsi3>
1000cd60:	a80b883a 	mov	r5,r21
1000cd64:	8809883a 	mov	r4,r17
1000cd68:	d8800415 	stw	r2,16(sp)
1000cd6c:	00013880 	call	10001388 <__mulsi3>
1000cd70:	a80b883a 	mov	r5,r21
1000cd74:	b009883a 	mov	r4,r22
1000cd78:	1029883a 	mov	r20,r2
1000cd7c:	00013880 	call	10001388 <__mulsi3>
1000cd80:	b009883a 	mov	r4,r22
1000cd84:	b80b883a 	mov	r5,r23
1000cd88:	102b883a 	mov	r21,r2
1000cd8c:	00013880 	call	10001388 <__mulsi3>
1000cd90:	da400417 	ldw	r9,16(sp)
1000cd94:	a085883a 	add	r2,r20,r2
1000cd98:	d8c00517 	ldw	r3,20(sp)
1000cd9c:	4808d43a 	srli	r4,r9,16
1000cda0:	d9800717 	ldw	r6,28(sp)
1000cda4:	da000617 	ldw	r8,24(sp)
1000cda8:	1109883a 	add	r4,r2,r4
1000cdac:	2500022e 	bgeu	r4,r20,1000cdb8 <__muldf3+0x440>
1000cdb0:	00800074 	movhi	r2,1
1000cdb4:	a8ab883a 	add	r21,r21,r2
1000cdb8:	200e943a 	slli	r7,r4,16
1000cdbc:	2004d43a 	srli	r2,r4,16
1000cdc0:	802ed43a 	srli	r23,r16,16
1000cdc4:	843fffcc 	andi	r16,r16,65535
1000cdc8:	4d3fffcc 	andi	r20,r9,65535
1000cdcc:	9009883a 	mov	r4,r18
1000cdd0:	800b883a 	mov	r5,r16
1000cdd4:	3d29883a 	add	r20,r7,r20
1000cdd8:	d8c00515 	stw	r3,20(sp)
1000cddc:	d9800715 	stw	r6,28(sp)
1000cde0:	da000615 	stw	r8,24(sp)
1000cde4:	a8ab883a 	add	r21,r21,r2
1000cde8:	00013880 	call	10001388 <__mulsi3>
1000cdec:	9009883a 	mov	r4,r18
1000cdf0:	b80b883a 	mov	r5,r23
1000cdf4:	d8800315 	stw	r2,12(sp)
1000cdf8:	00013880 	call	10001388 <__mulsi3>
1000cdfc:	e009883a 	mov	r4,fp
1000ce00:	b80b883a 	mov	r5,r23
1000ce04:	1025883a 	mov	r18,r2
1000ce08:	00013880 	call	10001388 <__mulsi3>
1000ce0c:	e009883a 	mov	r4,fp
1000ce10:	800b883a 	mov	r5,r16
1000ce14:	d8800215 	stw	r2,8(sp)
1000ce18:	00013880 	call	10001388 <__mulsi3>
1000ce1c:	da800317 	ldw	r10,12(sp)
1000ce20:	d9400017 	ldw	r5,0(sp)
1000ce24:	9085883a 	add	r2,r18,r2
1000ce28:	5008d43a 	srli	r4,r10,16
1000ce2c:	a153883a 	add	r9,r20,r5
1000ce30:	d8c00517 	ldw	r3,20(sp)
1000ce34:	1109883a 	add	r4,r2,r4
1000ce38:	d9800717 	ldw	r6,28(sp)
1000ce3c:	da000617 	ldw	r8,24(sp)
1000ce40:	dac00217 	ldw	r11,8(sp)
1000ce44:	2480022e 	bgeu	r4,r18,1000ce50 <__muldf3+0x4d8>
1000ce48:	00800074 	movhi	r2,1
1000ce4c:	5897883a 	add	r11,r11,r2
1000ce50:	200e943a 	slli	r7,r4,16
1000ce54:	2038d43a 	srli	fp,r4,16
1000ce58:	52bfffcc 	andi	r10,r10,65535
1000ce5c:	3a8f883a 	add	r7,r7,r10
1000ce60:	8809883a 	mov	r4,r17
1000ce64:	800b883a 	mov	r5,r16
1000ce68:	d8c00515 	stw	r3,20(sp)
1000ce6c:	d9800715 	stw	r6,28(sp)
1000ce70:	d9c00215 	stw	r7,8(sp)
1000ce74:	da000615 	stw	r8,24(sp)
1000ce78:	da400415 	stw	r9,16(sp)
1000ce7c:	5f39883a 	add	fp,r11,fp
1000ce80:	00013880 	call	10001388 <__mulsi3>
1000ce84:	8809883a 	mov	r4,r17
1000ce88:	b80b883a 	mov	r5,r23
1000ce8c:	1025883a 	mov	r18,r2
1000ce90:	00013880 	call	10001388 <__mulsi3>
1000ce94:	b009883a 	mov	r4,r22
1000ce98:	b80b883a 	mov	r5,r23
1000ce9c:	d8800315 	stw	r2,12(sp)
1000cea0:	00013880 	call	10001388 <__mulsi3>
1000cea4:	b009883a 	mov	r4,r22
1000cea8:	800b883a 	mov	r5,r16
1000ceac:	1023883a 	mov	r17,r2
1000ceb0:	00013880 	call	10001388 <__mulsi3>
1000ceb4:	da800317 	ldw	r10,12(sp)
1000ceb8:	9008d43a 	srli	r4,r18,16
1000cebc:	d8c00517 	ldw	r3,20(sp)
1000cec0:	5085883a 	add	r2,r10,r2
1000cec4:	1109883a 	add	r4,r2,r4
1000cec8:	d9800717 	ldw	r6,28(sp)
1000cecc:	d9c00217 	ldw	r7,8(sp)
1000ced0:	da000617 	ldw	r8,24(sp)
1000ced4:	da400417 	ldw	r9,16(sp)
1000ced8:	2280022e 	bgeu	r4,r10,1000cee4 <__muldf3+0x56c>
1000cedc:	00800074 	movhi	r2,1
1000cee0:	88a3883a 	add	r17,r17,r2
1000cee4:	2004943a 	slli	r2,r4,16
1000cee8:	94bfffcc 	andi	r18,r18,65535
1000ceec:	4ce7883a 	add	r19,r9,r19
1000cef0:	14a5883a 	add	r18,r2,r18
1000cef4:	9d29803a 	cmpltu	r20,r19,r20
1000cef8:	9565883a 	add	r18,r18,r21
1000cefc:	9505883a 	add	r2,r18,r20
1000cf00:	99e7883a 	add	r19,r19,r7
1000cf04:	99cf803a 	cmpltu	r7,r19,r7
1000cf08:	e08b883a 	add	r5,fp,r2
1000cf0c:	2008d43a 	srli	r4,r4,16
1000cf10:	29ef883a 	add	r23,r5,r7
1000cf14:	1529803a 	cmpltu	r20,r2,r20
1000cf18:	956b803a 	cmpltu	r21,r18,r21
1000cf1c:	b9cf803a 	cmpltu	r7,r23,r7
1000cf20:	a564b03a 	or	r18,r20,r21
1000cf24:	2f39803a 	cmpltu	fp,r5,fp
1000cf28:	9125883a 	add	r18,r18,r4
1000cf2c:	3f38b03a 	or	fp,r7,fp
1000cf30:	9725883a 	add	r18,r18,fp
1000cf34:	9804927a 	slli	r2,r19,9
1000cf38:	9463883a 	add	r17,r18,r17
1000cf3c:	d9000117 	ldw	r4,4(sp)
1000cf40:	b820d5fa 	srli	r16,r23,23
1000cf44:	8822927a 	slli	r17,r17,9
1000cf48:	9826d5fa 	srli	r19,r19,23
1000cf4c:	1104b03a 	or	r2,r2,r4
1000cf50:	b82e927a 	slli	r23,r23,9
1000cf54:	1004c03a 	cmpne	r2,r2,zero
1000cf58:	8c20b03a 	or	r16,r17,r16
1000cf5c:	14e6b03a 	or	r19,r2,r19
1000cf60:	8080402c 	andhi	r2,r16,256
1000cf64:	9deeb03a 	or	r23,r19,r23
1000cf68:	10000726 	beq	r2,zero,1000cf88 <__muldf3+0x610>
1000cf6c:	b804d07a 	srli	r2,r23,1
1000cf70:	800697fa 	slli	r3,r16,31
1000cf74:	bdc0004c 	andi	r23,r23,1
1000cf78:	8020d07a 	srli	r16,r16,1
1000cf7c:	b8aeb03a 	or	r23,r23,r2
1000cf80:	b8eeb03a 	or	r23,r23,r3
1000cf84:	4007883a 	mov	r3,r8
1000cf88:	1900ffc4 	addi	r4,r3,1023
1000cf8c:	01004d0e 	bge	zero,r4,1000d0c4 <__muldf3+0x74c>
1000cf90:	b88001cc 	andi	r2,r23,7
1000cf94:	10000726 	beq	r2,zero,1000cfb4 <__muldf3+0x63c>
1000cf98:	b94003cc 	andi	r5,r23,15
1000cf9c:	00800104 	movi	r2,4
1000cfa0:	28800426 	beq	r5,r2,1000cfb4 <__muldf3+0x63c>
1000cfa4:	b885883a 	add	r2,r23,r2
1000cfa8:	15ef803a 	cmpltu	r23,r2,r23
1000cfac:	85e1883a 	add	r16,r16,r23
1000cfb0:	102f883a 	mov	r23,r2
1000cfb4:	8080402c 	andhi	r2,r16,256
1000cfb8:	10000426 	beq	r2,zero,1000cfcc <__muldf3+0x654>
1000cfbc:	00bfc034 	movhi	r2,65280
1000cfc0:	10bfffc4 	addi	r2,r2,-1
1000cfc4:	19010004 	addi	r4,r3,1024
1000cfc8:	80a0703a 	and	r16,r16,r2
1000cfcc:	0081ff84 	movi	r2,2046
1000cfd0:	1100340e 	bge	r2,r4,1000d0a4 <__muldf3+0x72c>
1000cfd4:	34c0004c 	andi	r19,r6,1
1000cfd8:	0101ffc4 	movi	r4,2047
1000cfdc:	0021883a 	mov	r16,zero
1000cfe0:	002f883a 	mov	r23,zero
1000cfe4:	003ebe06 	br	1000cae0 <__alt_data_end+0xf800cae0>
1000cfe8:	8080022c 	andhi	r2,r16,8
1000cfec:	10000926 	beq	r2,zero,1000d014 <__muldf3+0x69c>
1000cff0:	8880022c 	andhi	r2,r17,8
1000cff4:	1000071e 	bne	r2,zero,1000d014 <__muldf3+0x69c>
1000cff8:	00800434 	movhi	r2,16
1000cffc:	8c000234 	orhi	r16,r17,8
1000d000:	10bfffc4 	addi	r2,r2,-1
1000d004:	b027883a 	mov	r19,r22
1000d008:	80a0703a 	and	r16,r16,r2
1000d00c:	902f883a 	mov	r23,r18
1000d010:	003f1a06 	br	1000cc7c <__alt_data_end+0xf800cc7c>
1000d014:	00800434 	movhi	r2,16
1000d018:	84000234 	orhi	r16,r16,8
1000d01c:	10bfffc4 	addi	r2,r2,-1
1000d020:	80a0703a 	and	r16,r16,r2
1000d024:	003f1506 	br	1000cc7c <__alt_data_end+0xf800cc7c>
1000d028:	3009883a 	mov	r4,r6
1000d02c:	d9400215 	stw	r5,8(sp)
1000d030:	d9800715 	stw	r6,28(sp)
1000d034:	da400415 	stw	r9,16(sp)
1000d038:	da800315 	stw	r10,12(sp)
1000d03c:	000dcb00 	call	1000dcb0 <__clzsi2>
1000d040:	10c00804 	addi	r3,r2,32
1000d044:	010009c4 	movi	r4,39
1000d048:	d9400217 	ldw	r5,8(sp)
1000d04c:	d9800717 	ldw	r6,28(sp)
1000d050:	da400417 	ldw	r9,16(sp)
1000d054:	da800317 	ldw	r10,12(sp)
1000d058:	20fee20e 	bge	r4,r3,1000cbe4 <__alt_data_end+0xf800cbe4>
1000d05c:	147ffe04 	addi	r17,r2,-8
1000d060:	9462983a 	sll	r17,r18,r17
1000d064:	0025883a 	mov	r18,zero
1000d068:	003ee506 	br	1000cc00 <__alt_data_end+0xf800cc00>
1000d06c:	d9800715 	stw	r6,28(sp)
1000d070:	d9c00215 	stw	r7,8(sp)
1000d074:	da400415 	stw	r9,16(sp)
1000d078:	000dcb00 	call	1000dcb0 <__clzsi2>
1000d07c:	10c00804 	addi	r3,r2,32
1000d080:	010009c4 	movi	r4,39
1000d084:	d9800717 	ldw	r6,28(sp)
1000d088:	d9c00217 	ldw	r7,8(sp)
1000d08c:	da400417 	ldw	r9,16(sp)
1000d090:	20feb40e 	bge	r4,r3,1000cb64 <__alt_data_end+0xf800cb64>
1000d094:	143ffe04 	addi	r16,r2,-8
1000d098:	9420983a 	sll	r16,r18,r16
1000d09c:	002f883a 	mov	r23,zero
1000d0a0:	003eb706 	br	1000cb80 <__alt_data_end+0xf800cb80>
1000d0a4:	8004977a 	slli	r2,r16,29
1000d0a8:	b82ed0fa 	srli	r23,r23,3
1000d0ac:	8020927a 	slli	r16,r16,9
1000d0b0:	2101ffcc 	andi	r4,r4,2047
1000d0b4:	15eeb03a 	or	r23,r2,r23
1000d0b8:	8020d33a 	srli	r16,r16,12
1000d0bc:	34c0004c 	andi	r19,r6,1
1000d0c0:	003e8706 	br	1000cae0 <__alt_data_end+0xf800cae0>
1000d0c4:	00bf0084 	movi	r2,-1022
1000d0c8:	10c5c83a 	sub	r2,r2,r3
1000d0cc:	01000e04 	movi	r4,56
1000d0d0:	2080080e 	bge	r4,r2,1000d0f4 <__muldf3+0x77c>
1000d0d4:	34c0004c 	andi	r19,r6,1
1000d0d8:	0009883a 	mov	r4,zero
1000d0dc:	0021883a 	mov	r16,zero
1000d0e0:	002f883a 	mov	r23,zero
1000d0e4:	003e7e06 	br	1000cae0 <__alt_data_end+0xf800cae0>
1000d0e8:	4007883a 	mov	r3,r8
1000d0ec:	480d883a 	mov	r6,r9
1000d0f0:	003fa506 	br	1000cf88 <__alt_data_end+0xf800cf88>
1000d0f4:	010007c4 	movi	r4,31
1000d0f8:	20801816 	blt	r4,r2,1000d15c <__muldf3+0x7e4>
1000d0fc:	18c10784 	addi	r3,r3,1054
1000d100:	80c8983a 	sll	r4,r16,r3
1000d104:	b88ad83a 	srl	r5,r23,r2
1000d108:	b8c6983a 	sll	r3,r23,r3
1000d10c:	80a0d83a 	srl	r16,r16,r2
1000d110:	2908b03a 	or	r4,r5,r4
1000d114:	1804c03a 	cmpne	r2,r3,zero
1000d118:	2088b03a 	or	r4,r4,r2
1000d11c:	208001cc 	andi	r2,r4,7
1000d120:	10000726 	beq	r2,zero,1000d140 <__muldf3+0x7c8>
1000d124:	20c003cc 	andi	r3,r4,15
1000d128:	00800104 	movi	r2,4
1000d12c:	18800426 	beq	r3,r2,1000d140 <__muldf3+0x7c8>
1000d130:	20c00104 	addi	r3,r4,4
1000d134:	1905803a 	cmpltu	r2,r3,r4
1000d138:	80a1883a 	add	r16,r16,r2
1000d13c:	1809883a 	mov	r4,r3
1000d140:	8080202c 	andhi	r2,r16,128
1000d144:	10001b26 	beq	r2,zero,1000d1b4 <__muldf3+0x83c>
1000d148:	34c0004c 	andi	r19,r6,1
1000d14c:	01000044 	movi	r4,1
1000d150:	0021883a 	mov	r16,zero
1000d154:	002f883a 	mov	r23,zero
1000d158:	003e6106 	br	1000cae0 <__alt_data_end+0xf800cae0>
1000d15c:	013ef884 	movi	r4,-1054
1000d160:	20c9c83a 	sub	r4,r4,r3
1000d164:	01400804 	movi	r5,32
1000d168:	8108d83a 	srl	r4,r16,r4
1000d16c:	11401526 	beq	r2,r5,1000d1c4 <__muldf3+0x84c>
1000d170:	18c10f84 	addi	r3,r3,1086
1000d174:	80e0983a 	sll	r16,r16,r3
1000d178:	85eeb03a 	or	r23,r16,r23
1000d17c:	b804c03a 	cmpne	r2,r23,zero
1000d180:	1108b03a 	or	r4,r2,r4
1000d184:	20c001cc 	andi	r3,r4,7
1000d188:	1800061e 	bne	r3,zero,1000d1a4 <__muldf3+0x82c>
1000d18c:	0021883a 	mov	r16,zero
1000d190:	202ed0fa 	srli	r23,r4,3
1000d194:	34c0004c 	andi	r19,r6,1
1000d198:	0009883a 	mov	r4,zero
1000d19c:	b8eeb03a 	or	r23,r23,r3
1000d1a0:	003e4f06 	br	1000cae0 <__alt_data_end+0xf800cae0>
1000d1a4:	20c003cc 	andi	r3,r4,15
1000d1a8:	00800104 	movi	r2,4
1000d1ac:	0021883a 	mov	r16,zero
1000d1b0:	18bfdf1e 	bne	r3,r2,1000d130 <__alt_data_end+0xf800d130>
1000d1b4:	8004927a 	slli	r2,r16,9
1000d1b8:	8006977a 	slli	r3,r16,29
1000d1bc:	1020d33a 	srli	r16,r2,12
1000d1c0:	003ff306 	br	1000d190 <__alt_data_end+0xf800d190>
1000d1c4:	0021883a 	mov	r16,zero
1000d1c8:	003feb06 	br	1000d178 <__alt_data_end+0xf800d178>
1000d1cc:	00800434 	movhi	r2,16
1000d1d0:	84000234 	orhi	r16,r16,8
1000d1d4:	10bfffc4 	addi	r2,r2,-1
1000d1d8:	4cc0004c 	andi	r19,r9,1
1000d1dc:	80a0703a 	and	r16,r16,r2
1000d1e0:	003ea606 	br	1000cc7c <__alt_data_end+0xf800cc7c>

1000d1e4 <__subdf3>:
1000d1e4:	00c00434 	movhi	r3,16
1000d1e8:	18ffffc4 	addi	r3,r3,-1
1000d1ec:	defffb04 	addi	sp,sp,-20
1000d1f0:	28d2703a 	and	r9,r5,r3
1000d1f4:	3814d53a 	srli	r10,r7,20
1000d1f8:	38c6703a 	and	r3,r7,r3
1000d1fc:	3004d77a 	srli	r2,r6,29
1000d200:	dc800215 	stw	r18,8(sp)
1000d204:	dc000015 	stw	r16,0(sp)
1000d208:	2824d7fa 	srli	r18,r5,31
1000d20c:	2820d53a 	srli	r16,r5,20
1000d210:	481290fa 	slli	r9,r9,3
1000d214:	200ad77a 	srli	r5,r4,29
1000d218:	180690fa 	slli	r3,r3,3
1000d21c:	dc400115 	stw	r17,4(sp)
1000d220:	dfc00415 	stw	ra,16(sp)
1000d224:	202290fa 	slli	r17,r4,3
1000d228:	dcc00315 	stw	r19,12(sp)
1000d22c:	5281ffcc 	andi	r10,r10,2047
1000d230:	0101ffc4 	movi	r4,2047
1000d234:	9011883a 	mov	r8,r18
1000d238:	8401ffcc 	andi	r16,r16,2047
1000d23c:	94803fcc 	andi	r18,r18,255
1000d240:	494ab03a 	or	r5,r9,r5
1000d244:	380ed7fa 	srli	r7,r7,31
1000d248:	1886b03a 	or	r3,r3,r2
1000d24c:	300c90fa 	slli	r6,r6,3
1000d250:	51009026 	beq	r10,r4,1000d494 <__subdf3+0x2b0>
1000d254:	39c0005c 	xori	r7,r7,1
1000d258:	8285c83a 	sub	r2,r16,r10
1000d25c:	91c06f26 	beq	r18,r7,1000d41c <__subdf3+0x238>
1000d260:	0080b10e 	bge	zero,r2,1000d528 <__subdf3+0x344>
1000d264:	50002a1e 	bne	r10,zero,1000d310 <__subdf3+0x12c>
1000d268:	1988b03a 	or	r4,r3,r6
1000d26c:	2000941e 	bne	r4,zero,1000d4c0 <__subdf3+0x2dc>
1000d270:	888001cc 	andi	r2,r17,7
1000d274:	10005b26 	beq	r2,zero,1000d3e4 <__subdf3+0x200>
1000d278:	88c003cc 	andi	r3,r17,15
1000d27c:	00800104 	movi	r2,4
1000d280:	18805826 	beq	r3,r2,1000d3e4 <__subdf3+0x200>
1000d284:	88c00104 	addi	r3,r17,4
1000d288:	1c63803a 	cmpltu	r17,r3,r17
1000d28c:	2c4b883a 	add	r5,r5,r17
1000d290:	2880202c 	andhi	r2,r5,128
1000d294:	9200004c 	andi	r8,r18,1
1000d298:	1823883a 	mov	r17,r3
1000d29c:	10005426 	beq	r2,zero,1000d3f0 <__subdf3+0x20c>
1000d2a0:	84000044 	addi	r16,r16,1
1000d2a4:	0081ffc4 	movi	r2,2047
1000d2a8:	8080bf26 	beq	r16,r2,1000d5a8 <__subdf3+0x3c4>
1000d2ac:	013fe034 	movhi	r4,65408
1000d2b0:	213fffc4 	addi	r4,r4,-1
1000d2b4:	290a703a 	and	r5,r5,r4
1000d2b8:	2804977a 	slli	r2,r5,29
1000d2bc:	280a927a 	slli	r5,r5,9
1000d2c0:	8822d0fa 	srli	r17,r17,3
1000d2c4:	8401ffcc 	andi	r16,r16,2047
1000d2c8:	2808d33a 	srli	r4,r5,12
1000d2cc:	1444b03a 	or	r2,r2,r17
1000d2d0:	8401ffcc 	andi	r16,r16,2047
1000d2d4:	800a953a 	slli	r5,r16,20
1000d2d8:	40c03fcc 	andi	r3,r8,255
1000d2dc:	04000434 	movhi	r16,16
1000d2e0:	180697fa 	slli	r3,r3,31
1000d2e4:	843fffc4 	addi	r16,r16,-1
1000d2e8:	2420703a 	and	r16,r4,r16
1000d2ec:	8160b03a 	or	r16,r16,r5
1000d2f0:	80c6b03a 	or	r3,r16,r3
1000d2f4:	dfc00417 	ldw	ra,16(sp)
1000d2f8:	dcc00317 	ldw	r19,12(sp)
1000d2fc:	dc800217 	ldw	r18,8(sp)
1000d300:	dc400117 	ldw	r17,4(sp)
1000d304:	dc000017 	ldw	r16,0(sp)
1000d308:	dec00504 	addi	sp,sp,20
1000d30c:	f800283a 	ret
1000d310:	0101ffc4 	movi	r4,2047
1000d314:	813fd626 	beq	r16,r4,1000d270 <__alt_data_end+0xf800d270>
1000d318:	18c02034 	orhi	r3,r3,128
1000d31c:	01000e04 	movi	r4,56
1000d320:	2080a416 	blt	r4,r2,1000d5b4 <__subdf3+0x3d0>
1000d324:	010007c4 	movi	r4,31
1000d328:	2080c716 	blt	r4,r2,1000d648 <__subdf3+0x464>
1000d32c:	01000804 	movi	r4,32
1000d330:	2089c83a 	sub	r4,r4,r2
1000d334:	1910983a 	sll	r8,r3,r4
1000d338:	308ed83a 	srl	r7,r6,r2
1000d33c:	3108983a 	sll	r4,r6,r4
1000d340:	1884d83a 	srl	r2,r3,r2
1000d344:	41ccb03a 	or	r6,r8,r7
1000d348:	2008c03a 	cmpne	r4,r4,zero
1000d34c:	310cb03a 	or	r6,r6,r4
1000d350:	898dc83a 	sub	r6,r17,r6
1000d354:	89a3803a 	cmpltu	r17,r17,r6
1000d358:	288bc83a 	sub	r5,r5,r2
1000d35c:	2c4bc83a 	sub	r5,r5,r17
1000d360:	3023883a 	mov	r17,r6
1000d364:	2880202c 	andhi	r2,r5,128
1000d368:	10006b26 	beq	r2,zero,1000d518 <__subdf3+0x334>
1000d36c:	04c02034 	movhi	r19,128
1000d370:	9cffffc4 	addi	r19,r19,-1
1000d374:	2ce6703a 	and	r19,r5,r19
1000d378:	98007c26 	beq	r19,zero,1000d56c <__subdf3+0x388>
1000d37c:	9809883a 	mov	r4,r19
1000d380:	000dcb00 	call	1000dcb0 <__clzsi2>
1000d384:	10fffe04 	addi	r3,r2,-8
1000d388:	010007c4 	movi	r4,31
1000d38c:	20c07d16 	blt	r4,r3,1000d584 <__subdf3+0x3a0>
1000d390:	01400a04 	movi	r5,40
1000d394:	2885c83a 	sub	r2,r5,r2
1000d398:	888ad83a 	srl	r5,r17,r2
1000d39c:	98e6983a 	sll	r19,r19,r3
1000d3a0:	88e2983a 	sll	r17,r17,r3
1000d3a4:	2ce6b03a 	or	r19,r5,r19
1000d3a8:	1c007a16 	blt	r3,r16,1000d594 <__subdf3+0x3b0>
1000d3ac:	1c21c83a 	sub	r16,r3,r16
1000d3b0:	81400044 	addi	r5,r16,1
1000d3b4:	00c007c4 	movi	r3,31
1000d3b8:	19409616 	blt	r3,r5,1000d614 <__subdf3+0x430>
1000d3bc:	1c21c83a 	sub	r16,r3,r16
1000d3c0:	8c08983a 	sll	r4,r17,r16
1000d3c4:	8946d83a 	srl	r3,r17,r5
1000d3c8:	9c20983a 	sll	r16,r19,r16
1000d3cc:	2008c03a 	cmpne	r4,r4,zero
1000d3d0:	994ad83a 	srl	r5,r19,r5
1000d3d4:	1c06b03a 	or	r3,r3,r16
1000d3d8:	1922b03a 	or	r17,r3,r4
1000d3dc:	0021883a 	mov	r16,zero
1000d3e0:	003fa306 	br	1000d270 <__alt_data_end+0xf800d270>
1000d3e4:	2880202c 	andhi	r2,r5,128
1000d3e8:	9200004c 	andi	r8,r18,1
1000d3ec:	103fac1e 	bne	r2,zero,1000d2a0 <__alt_data_end+0xf800d2a0>
1000d3f0:	2804977a 	slli	r2,r5,29
1000d3f4:	8822d0fa 	srli	r17,r17,3
1000d3f8:	00c1ffc4 	movi	r3,2047
1000d3fc:	280ad0fa 	srli	r5,r5,3
1000d400:	1444b03a 	or	r2,r2,r17
1000d404:	80c02726 	beq	r16,r3,1000d4a4 <__subdf3+0x2c0>
1000d408:	01000434 	movhi	r4,16
1000d40c:	213fffc4 	addi	r4,r4,-1
1000d410:	80e0703a 	and	r16,r16,r3
1000d414:	2908703a 	and	r4,r5,r4
1000d418:	003fad06 	br	1000d2d0 <__alt_data_end+0xf800d2d0>
1000d41c:	0080690e 	bge	zero,r2,1000d5c4 <__subdf3+0x3e0>
1000d420:	50002f26 	beq	r10,zero,1000d4e0 <__subdf3+0x2fc>
1000d424:	0101ffc4 	movi	r4,2047
1000d428:	813f9126 	beq	r16,r4,1000d270 <__alt_data_end+0xf800d270>
1000d42c:	18c02034 	orhi	r3,r3,128
1000d430:	01000e04 	movi	r4,56
1000d434:	2080b00e 	bge	r4,r2,1000d6f8 <__subdf3+0x514>
1000d438:	198cb03a 	or	r6,r3,r6
1000d43c:	300ec03a 	cmpne	r7,r6,zero
1000d440:	0005883a 	mov	r2,zero
1000d444:	3c4f883a 	add	r7,r7,r17
1000d448:	3c63803a 	cmpltu	r17,r7,r17
1000d44c:	114b883a 	add	r5,r2,r5
1000d450:	2c4b883a 	add	r5,r5,r17
1000d454:	3823883a 	mov	r17,r7
1000d458:	2880202c 	andhi	r2,r5,128
1000d45c:	10002e26 	beq	r2,zero,1000d518 <__subdf3+0x334>
1000d460:	84000044 	addi	r16,r16,1
1000d464:	0081ffc4 	movi	r2,2047
1000d468:	8080de26 	beq	r16,r2,1000d7e4 <__subdf3+0x600>
1000d46c:	00bfe034 	movhi	r2,65408
1000d470:	10bfffc4 	addi	r2,r2,-1
1000d474:	288a703a 	and	r5,r5,r2
1000d478:	880cd07a 	srli	r6,r17,1
1000d47c:	280897fa 	slli	r4,r5,31
1000d480:	88c0004c 	andi	r3,r17,1
1000d484:	30e2b03a 	or	r17,r6,r3
1000d488:	280ad07a 	srli	r5,r5,1
1000d48c:	8922b03a 	or	r17,r17,r4
1000d490:	003f7706 	br	1000d270 <__alt_data_end+0xf800d270>
1000d494:	1984b03a 	or	r2,r3,r6
1000d498:	103f6e26 	beq	r2,zero,1000d254 <__alt_data_end+0xf800d254>
1000d49c:	39c03fcc 	andi	r7,r7,255
1000d4a0:	003f6d06 	br	1000d258 <__alt_data_end+0xf800d258>
1000d4a4:	1146b03a 	or	r3,r2,r5
1000d4a8:	18003f26 	beq	r3,zero,1000d5a8 <__subdf3+0x3c4>
1000d4ac:	00c00434 	movhi	r3,16
1000d4b0:	29000234 	orhi	r4,r5,8
1000d4b4:	18ffffc4 	addi	r3,r3,-1
1000d4b8:	20c8703a 	and	r4,r4,r3
1000d4bc:	003f8406 	br	1000d2d0 <__alt_data_end+0xf800d2d0>
1000d4c0:	10bfffc4 	addi	r2,r2,-1
1000d4c4:	1000501e 	bne	r2,zero,1000d608 <__subdf3+0x424>
1000d4c8:	898fc83a 	sub	r7,r17,r6
1000d4cc:	89e3803a 	cmpltu	r17,r17,r7
1000d4d0:	28cbc83a 	sub	r5,r5,r3
1000d4d4:	2c4bc83a 	sub	r5,r5,r17
1000d4d8:	3823883a 	mov	r17,r7
1000d4dc:	003fa106 	br	1000d364 <__alt_data_end+0xf800d364>
1000d4e0:	1988b03a 	or	r4,r3,r6
1000d4e4:	203f6226 	beq	r4,zero,1000d270 <__alt_data_end+0xf800d270>
1000d4e8:	10bfffc4 	addi	r2,r2,-1
1000d4ec:	10009b1e 	bne	r2,zero,1000d75c <__subdf3+0x578>
1000d4f0:	344d883a 	add	r6,r6,r17
1000d4f4:	3463803a 	cmpltu	r17,r6,r17
1000d4f8:	194b883a 	add	r5,r3,r5
1000d4fc:	2c4b883a 	add	r5,r5,r17
1000d500:	3023883a 	mov	r17,r6
1000d504:	003fd406 	br	1000d458 <__alt_data_end+0xf800d458>
1000d508:	1106b03a 	or	r3,r2,r4
1000d50c:	1800b426 	beq	r3,zero,1000d7e0 <__subdf3+0x5fc>
1000d510:	100b883a 	mov	r5,r2
1000d514:	2023883a 	mov	r17,r4
1000d518:	888001cc 	andi	r2,r17,7
1000d51c:	103f561e 	bne	r2,zero,1000d278 <__alt_data_end+0xf800d278>
1000d520:	9200004c 	andi	r8,r18,1
1000d524:	003fb206 	br	1000d3f0 <__alt_data_end+0xf800d3f0>
1000d528:	1000531e 	bne	r2,zero,1000d678 <__subdf3+0x494>
1000d52c:	80800044 	addi	r2,r16,1
1000d530:	1081ffcc 	andi	r2,r2,2047
1000d534:	01000044 	movi	r4,1
1000d538:	2080a00e 	bge	r4,r2,1000d7bc <__subdf3+0x5d8>
1000d53c:	8985c83a 	sub	r2,r17,r6
1000d540:	8889803a 	cmpltu	r4,r17,r2
1000d544:	28e7c83a 	sub	r19,r5,r3
1000d548:	9927c83a 	sub	r19,r19,r4
1000d54c:	9900202c 	andhi	r4,r19,128
1000d550:	20006226 	beq	r4,zero,1000d6dc <__subdf3+0x4f8>
1000d554:	3463c83a 	sub	r17,r6,r17
1000d558:	194bc83a 	sub	r5,r3,r5
1000d55c:	344d803a 	cmpltu	r6,r6,r17
1000d560:	29a7c83a 	sub	r19,r5,r6
1000d564:	3825883a 	mov	r18,r7
1000d568:	983f841e 	bne	r19,zero,1000d37c <__alt_data_end+0xf800d37c>
1000d56c:	8809883a 	mov	r4,r17
1000d570:	000dcb00 	call	1000dcb0 <__clzsi2>
1000d574:	10800804 	addi	r2,r2,32
1000d578:	10fffe04 	addi	r3,r2,-8
1000d57c:	010007c4 	movi	r4,31
1000d580:	20ff830e 	bge	r4,r3,1000d390 <__alt_data_end+0xf800d390>
1000d584:	14fff604 	addi	r19,r2,-40
1000d588:	8ce6983a 	sll	r19,r17,r19
1000d58c:	0023883a 	mov	r17,zero
1000d590:	1c3f860e 	bge	r3,r16,1000d3ac <__alt_data_end+0xf800d3ac>
1000d594:	017fe034 	movhi	r5,65408
1000d598:	297fffc4 	addi	r5,r5,-1
1000d59c:	80e1c83a 	sub	r16,r16,r3
1000d5a0:	994a703a 	and	r5,r19,r5
1000d5a4:	003f3206 	br	1000d270 <__alt_data_end+0xf800d270>
1000d5a8:	0009883a 	mov	r4,zero
1000d5ac:	0005883a 	mov	r2,zero
1000d5b0:	003f4706 	br	1000d2d0 <__alt_data_end+0xf800d2d0>
1000d5b4:	198cb03a 	or	r6,r3,r6
1000d5b8:	300cc03a 	cmpne	r6,r6,zero
1000d5bc:	0005883a 	mov	r2,zero
1000d5c0:	003f6306 	br	1000d350 <__alt_data_end+0xf800d350>
1000d5c4:	10009d1e 	bne	r2,zero,1000d83c <__subdf3+0x658>
1000d5c8:	81c00044 	addi	r7,r16,1
1000d5cc:	3881ffcc 	andi	r2,r7,2047
1000d5d0:	02400044 	movi	r9,1
1000d5d4:	4880680e 	bge	r9,r2,1000d778 <__subdf3+0x594>
1000d5d8:	0081ffc4 	movi	r2,2047
1000d5dc:	3880ae26 	beq	r7,r2,1000d898 <__subdf3+0x6b4>
1000d5e0:	344d883a 	add	r6,r6,r17
1000d5e4:	3463803a 	cmpltu	r17,r6,r17
1000d5e8:	194b883a 	add	r5,r3,r5
1000d5ec:	2c4b883a 	add	r5,r5,r17
1000d5f0:	282297fa 	slli	r17,r5,31
1000d5f4:	300cd07a 	srli	r6,r6,1
1000d5f8:	280ad07a 	srli	r5,r5,1
1000d5fc:	3821883a 	mov	r16,r7
1000d600:	89a2b03a 	or	r17,r17,r6
1000d604:	003f1a06 	br	1000d270 <__alt_data_end+0xf800d270>
1000d608:	0101ffc4 	movi	r4,2047
1000d60c:	813f431e 	bne	r16,r4,1000d31c <__alt_data_end+0xf800d31c>
1000d610:	003f1706 	br	1000d270 <__alt_data_end+0xf800d270>
1000d614:	80bff844 	addi	r2,r16,-31
1000d618:	00c00804 	movi	r3,32
1000d61c:	9884d83a 	srl	r2,r19,r2
1000d620:	28c05126 	beq	r5,r3,1000d768 <__subdf3+0x584>
1000d624:	00c00fc4 	movi	r3,63
1000d628:	1c21c83a 	sub	r16,r3,r16
1000d62c:	9c26983a 	sll	r19,r19,r16
1000d630:	9c62b03a 	or	r17,r19,r17
1000d634:	8822c03a 	cmpne	r17,r17,zero
1000d638:	88a2b03a 	or	r17,r17,r2
1000d63c:	000b883a 	mov	r5,zero
1000d640:	0021883a 	mov	r16,zero
1000d644:	003fb406 	br	1000d518 <__alt_data_end+0xf800d518>
1000d648:	113ff804 	addi	r4,r2,-32
1000d64c:	01c00804 	movi	r7,32
1000d650:	1908d83a 	srl	r4,r3,r4
1000d654:	11c04626 	beq	r2,r7,1000d770 <__subdf3+0x58c>
1000d658:	01c01004 	movi	r7,64
1000d65c:	3885c83a 	sub	r2,r7,r2
1000d660:	1884983a 	sll	r2,r3,r2
1000d664:	118cb03a 	or	r6,r2,r6
1000d668:	300cc03a 	cmpne	r6,r6,zero
1000d66c:	310cb03a 	or	r6,r6,r4
1000d670:	0005883a 	mov	r2,zero
1000d674:	003f3606 	br	1000d350 <__alt_data_end+0xf800d350>
1000d678:	80002b26 	beq	r16,zero,1000d728 <__subdf3+0x544>
1000d67c:	0101ffc4 	movi	r4,2047
1000d680:	51006926 	beq	r10,r4,1000d828 <__subdf3+0x644>
1000d684:	0085c83a 	sub	r2,zero,r2
1000d688:	29402034 	orhi	r5,r5,128
1000d68c:	01000e04 	movi	r4,56
1000d690:	20807d16 	blt	r4,r2,1000d888 <__subdf3+0x6a4>
1000d694:	010007c4 	movi	r4,31
1000d698:	2080d916 	blt	r4,r2,1000da00 <__subdf3+0x81c>
1000d69c:	01000804 	movi	r4,32
1000d6a0:	2089c83a 	sub	r4,r4,r2
1000d6a4:	2912983a 	sll	r9,r5,r4
1000d6a8:	8890d83a 	srl	r8,r17,r2
1000d6ac:	8908983a 	sll	r4,r17,r4
1000d6b0:	2884d83a 	srl	r2,r5,r2
1000d6b4:	4a22b03a 	or	r17,r9,r8
1000d6b8:	2008c03a 	cmpne	r4,r4,zero
1000d6bc:	8922b03a 	or	r17,r17,r4
1000d6c0:	3463c83a 	sub	r17,r6,r17
1000d6c4:	1885c83a 	sub	r2,r3,r2
1000d6c8:	344d803a 	cmpltu	r6,r6,r17
1000d6cc:	118bc83a 	sub	r5,r2,r6
1000d6d0:	5021883a 	mov	r16,r10
1000d6d4:	3825883a 	mov	r18,r7
1000d6d8:	003f2206 	br	1000d364 <__alt_data_end+0xf800d364>
1000d6dc:	9886b03a 	or	r3,r19,r2
1000d6e0:	18001c1e 	bne	r3,zero,1000d754 <__subdf3+0x570>
1000d6e4:	0011883a 	mov	r8,zero
1000d6e8:	000b883a 	mov	r5,zero
1000d6ec:	0023883a 	mov	r17,zero
1000d6f0:	0021883a 	mov	r16,zero
1000d6f4:	003f3e06 	br	1000d3f0 <__alt_data_end+0xf800d3f0>
1000d6f8:	010007c4 	movi	r4,31
1000d6fc:	20803c16 	blt	r4,r2,1000d7f0 <__subdf3+0x60c>
1000d700:	01000804 	movi	r4,32
1000d704:	2089c83a 	sub	r4,r4,r2
1000d708:	1912983a 	sll	r9,r3,r4
1000d70c:	308ed83a 	srl	r7,r6,r2
1000d710:	3108983a 	sll	r4,r6,r4
1000d714:	1884d83a 	srl	r2,r3,r2
1000d718:	49ceb03a 	or	r7,r9,r7
1000d71c:	2008c03a 	cmpne	r4,r4,zero
1000d720:	390eb03a 	or	r7,r7,r4
1000d724:	003f4706 	br	1000d444 <__alt_data_end+0xf800d444>
1000d728:	2c48b03a 	or	r4,r5,r17
1000d72c:	20003e26 	beq	r4,zero,1000d828 <__subdf3+0x644>
1000d730:	0084303a 	nor	r2,zero,r2
1000d734:	10003a1e 	bne	r2,zero,1000d820 <__subdf3+0x63c>
1000d738:	3463c83a 	sub	r17,r6,r17
1000d73c:	194bc83a 	sub	r5,r3,r5
1000d740:	344d803a 	cmpltu	r6,r6,r17
1000d744:	298bc83a 	sub	r5,r5,r6
1000d748:	5021883a 	mov	r16,r10
1000d74c:	3825883a 	mov	r18,r7
1000d750:	003f0406 	br	1000d364 <__alt_data_end+0xf800d364>
1000d754:	1023883a 	mov	r17,r2
1000d758:	003f0706 	br	1000d378 <__alt_data_end+0xf800d378>
1000d75c:	0101ffc4 	movi	r4,2047
1000d760:	813f331e 	bne	r16,r4,1000d430 <__alt_data_end+0xf800d430>
1000d764:	003ec206 	br	1000d270 <__alt_data_end+0xf800d270>
1000d768:	0027883a 	mov	r19,zero
1000d76c:	003fb006 	br	1000d630 <__alt_data_end+0xf800d630>
1000d770:	0005883a 	mov	r2,zero
1000d774:	003fbb06 	br	1000d664 <__alt_data_end+0xf800d664>
1000d778:	2c44b03a 	or	r2,r5,r17
1000d77c:	80008b1e 	bne	r16,zero,1000d9ac <__subdf3+0x7c8>
1000d780:	1000b526 	beq	r2,zero,1000da58 <__subdf3+0x874>
1000d784:	1984b03a 	or	r2,r3,r6
1000d788:	103eb926 	beq	r2,zero,1000d270 <__alt_data_end+0xf800d270>
1000d78c:	3449883a 	add	r4,r6,r17
1000d790:	2463803a 	cmpltu	r17,r4,r17
1000d794:	194b883a 	add	r5,r3,r5
1000d798:	2c4b883a 	add	r5,r5,r17
1000d79c:	2880202c 	andhi	r2,r5,128
1000d7a0:	2023883a 	mov	r17,r4
1000d7a4:	103f5c26 	beq	r2,zero,1000d518 <__alt_data_end+0xf800d518>
1000d7a8:	00bfe034 	movhi	r2,65408
1000d7ac:	10bfffc4 	addi	r2,r2,-1
1000d7b0:	4821883a 	mov	r16,r9
1000d7b4:	288a703a 	and	r5,r5,r2
1000d7b8:	003ead06 	br	1000d270 <__alt_data_end+0xf800d270>
1000d7bc:	2c44b03a 	or	r2,r5,r17
1000d7c0:	8000291e 	bne	r16,zero,1000d868 <__subdf3+0x684>
1000d7c4:	10004f1e 	bne	r2,zero,1000d904 <__subdf3+0x720>
1000d7c8:	1984b03a 	or	r2,r3,r6
1000d7cc:	10000426 	beq	r2,zero,1000d7e0 <__subdf3+0x5fc>
1000d7d0:	180b883a 	mov	r5,r3
1000d7d4:	3023883a 	mov	r17,r6
1000d7d8:	3825883a 	mov	r18,r7
1000d7dc:	003ea406 	br	1000d270 <__alt_data_end+0xf800d270>
1000d7e0:	0011883a 	mov	r8,zero
1000d7e4:	000b883a 	mov	r5,zero
1000d7e8:	0023883a 	mov	r17,zero
1000d7ec:	003f0006 	br	1000d3f0 <__alt_data_end+0xf800d3f0>
1000d7f0:	11fff804 	addi	r7,r2,-32
1000d7f4:	19c8d83a 	srl	r4,r3,r7
1000d7f8:	01c00804 	movi	r7,32
1000d7fc:	11c07e26 	beq	r2,r7,1000d9f8 <__subdf3+0x814>
1000d800:	01c01004 	movi	r7,64
1000d804:	3885c83a 	sub	r2,r7,r2
1000d808:	1884983a 	sll	r2,r3,r2
1000d80c:	118cb03a 	or	r6,r2,r6
1000d810:	300ec03a 	cmpne	r7,r6,zero
1000d814:	390eb03a 	or	r7,r7,r4
1000d818:	0005883a 	mov	r2,zero
1000d81c:	003f0906 	br	1000d444 <__alt_data_end+0xf800d444>
1000d820:	0101ffc4 	movi	r4,2047
1000d824:	513f991e 	bne	r10,r4,1000d68c <__alt_data_end+0xf800d68c>
1000d828:	180b883a 	mov	r5,r3
1000d82c:	3023883a 	mov	r17,r6
1000d830:	5021883a 	mov	r16,r10
1000d834:	3825883a 	mov	r18,r7
1000d838:	003e8d06 	br	1000d270 <__alt_data_end+0xf800d270>
1000d83c:	80001a1e 	bne	r16,zero,1000d8a8 <__subdf3+0x6c4>
1000d840:	2c48b03a 	or	r4,r5,r17
1000d844:	20005526 	beq	r4,zero,1000d99c <__subdf3+0x7b8>
1000d848:	0084303a 	nor	r2,zero,r2
1000d84c:	1000511e 	bne	r2,zero,1000d994 <__subdf3+0x7b0>
1000d850:	89a3883a 	add	r17,r17,r6
1000d854:	194b883a 	add	r5,r3,r5
1000d858:	898d803a 	cmpltu	r6,r17,r6
1000d85c:	298b883a 	add	r5,r5,r6
1000d860:	5021883a 	mov	r16,r10
1000d864:	003efc06 	br	1000d458 <__alt_data_end+0xf800d458>
1000d868:	1000341e 	bne	r2,zero,1000d93c <__subdf3+0x758>
1000d86c:	1984b03a 	or	r2,r3,r6
1000d870:	10006f26 	beq	r2,zero,1000da30 <__subdf3+0x84c>
1000d874:	180b883a 	mov	r5,r3
1000d878:	3023883a 	mov	r17,r6
1000d87c:	3825883a 	mov	r18,r7
1000d880:	0401ffc4 	movi	r16,2047
1000d884:	003e7a06 	br	1000d270 <__alt_data_end+0xf800d270>
1000d888:	2c62b03a 	or	r17,r5,r17
1000d88c:	8822c03a 	cmpne	r17,r17,zero
1000d890:	0005883a 	mov	r2,zero
1000d894:	003f8a06 	br	1000d6c0 <__alt_data_end+0xf800d6c0>
1000d898:	3821883a 	mov	r16,r7
1000d89c:	000b883a 	mov	r5,zero
1000d8a0:	0023883a 	mov	r17,zero
1000d8a4:	003ed206 	br	1000d3f0 <__alt_data_end+0xf800d3f0>
1000d8a8:	0101ffc4 	movi	r4,2047
1000d8ac:	51003b26 	beq	r10,r4,1000d99c <__subdf3+0x7b8>
1000d8b0:	0085c83a 	sub	r2,zero,r2
1000d8b4:	29402034 	orhi	r5,r5,128
1000d8b8:	01000e04 	movi	r4,56
1000d8bc:	20806216 	blt	r4,r2,1000da48 <__subdf3+0x864>
1000d8c0:	010007c4 	movi	r4,31
1000d8c4:	20806b16 	blt	r4,r2,1000da74 <__subdf3+0x890>
1000d8c8:	01000804 	movi	r4,32
1000d8cc:	2089c83a 	sub	r4,r4,r2
1000d8d0:	2912983a 	sll	r9,r5,r4
1000d8d4:	888ed83a 	srl	r7,r17,r2
1000d8d8:	8908983a 	sll	r4,r17,r4
1000d8dc:	2884d83a 	srl	r2,r5,r2
1000d8e0:	49e2b03a 	or	r17,r9,r7
1000d8e4:	2008c03a 	cmpne	r4,r4,zero
1000d8e8:	8922b03a 	or	r17,r17,r4
1000d8ec:	89a3883a 	add	r17,r17,r6
1000d8f0:	10c5883a 	add	r2,r2,r3
1000d8f4:	898d803a 	cmpltu	r6,r17,r6
1000d8f8:	118b883a 	add	r5,r2,r6
1000d8fc:	5021883a 	mov	r16,r10
1000d900:	003ed506 	br	1000d458 <__alt_data_end+0xf800d458>
1000d904:	1984b03a 	or	r2,r3,r6
1000d908:	103e5926 	beq	r2,zero,1000d270 <__alt_data_end+0xf800d270>
1000d90c:	8989c83a 	sub	r4,r17,r6
1000d910:	8911803a 	cmpltu	r8,r17,r4
1000d914:	28c5c83a 	sub	r2,r5,r3
1000d918:	1205c83a 	sub	r2,r2,r8
1000d91c:	1200202c 	andhi	r8,r2,128
1000d920:	403ef926 	beq	r8,zero,1000d508 <__alt_data_end+0xf800d508>
1000d924:	3463c83a 	sub	r17,r6,r17
1000d928:	194bc83a 	sub	r5,r3,r5
1000d92c:	344d803a 	cmpltu	r6,r6,r17
1000d930:	298bc83a 	sub	r5,r5,r6
1000d934:	3825883a 	mov	r18,r7
1000d938:	003e4d06 	br	1000d270 <__alt_data_end+0xf800d270>
1000d93c:	1984b03a 	or	r2,r3,r6
1000d940:	10002b26 	beq	r2,zero,1000d9f0 <__subdf3+0x80c>
1000d944:	2808d0fa 	srli	r4,r5,3
1000d948:	8822d0fa 	srli	r17,r17,3
1000d94c:	280a977a 	slli	r5,r5,29
1000d950:	2080022c 	andhi	r2,r4,8
1000d954:	2c62b03a 	or	r17,r5,r17
1000d958:	10000826 	beq	r2,zero,1000d97c <__subdf3+0x798>
1000d95c:	1810d0fa 	srli	r8,r3,3
1000d960:	4080022c 	andhi	r2,r8,8
1000d964:	1000051e 	bne	r2,zero,1000d97c <__subdf3+0x798>
1000d968:	300cd0fa 	srli	r6,r6,3
1000d96c:	1804977a 	slli	r2,r3,29
1000d970:	4009883a 	mov	r4,r8
1000d974:	3825883a 	mov	r18,r7
1000d978:	11a2b03a 	or	r17,r2,r6
1000d97c:	880ad77a 	srli	r5,r17,29
1000d980:	200890fa 	slli	r4,r4,3
1000d984:	882290fa 	slli	r17,r17,3
1000d988:	0401ffc4 	movi	r16,2047
1000d98c:	290ab03a 	or	r5,r5,r4
1000d990:	003e3706 	br	1000d270 <__alt_data_end+0xf800d270>
1000d994:	0101ffc4 	movi	r4,2047
1000d998:	513fc71e 	bne	r10,r4,1000d8b8 <__alt_data_end+0xf800d8b8>
1000d99c:	180b883a 	mov	r5,r3
1000d9a0:	3023883a 	mov	r17,r6
1000d9a4:	5021883a 	mov	r16,r10
1000d9a8:	003e3106 	br	1000d270 <__alt_data_end+0xf800d270>
1000d9ac:	10002d26 	beq	r2,zero,1000da64 <__subdf3+0x880>
1000d9b0:	1984b03a 	or	r2,r3,r6
1000d9b4:	10000e26 	beq	r2,zero,1000d9f0 <__subdf3+0x80c>
1000d9b8:	2808d0fa 	srli	r4,r5,3
1000d9bc:	8822d0fa 	srli	r17,r17,3
1000d9c0:	280a977a 	slli	r5,r5,29
1000d9c4:	2080022c 	andhi	r2,r4,8
1000d9c8:	2c62b03a 	or	r17,r5,r17
1000d9cc:	103feb26 	beq	r2,zero,1000d97c <__alt_data_end+0xf800d97c>
1000d9d0:	180ed0fa 	srli	r7,r3,3
1000d9d4:	3880022c 	andhi	r2,r7,8
1000d9d8:	103fe81e 	bne	r2,zero,1000d97c <__alt_data_end+0xf800d97c>
1000d9dc:	300cd0fa 	srli	r6,r6,3
1000d9e0:	1804977a 	slli	r2,r3,29
1000d9e4:	3809883a 	mov	r4,r7
1000d9e8:	11a2b03a 	or	r17,r2,r6
1000d9ec:	003fe306 	br	1000d97c <__alt_data_end+0xf800d97c>
1000d9f0:	0401ffc4 	movi	r16,2047
1000d9f4:	003e1e06 	br	1000d270 <__alt_data_end+0xf800d270>
1000d9f8:	0005883a 	mov	r2,zero
1000d9fc:	003f8306 	br	1000d80c <__alt_data_end+0xf800d80c>
1000da00:	113ff804 	addi	r4,r2,-32
1000da04:	02000804 	movi	r8,32
1000da08:	2908d83a 	srl	r4,r5,r4
1000da0c:	12002526 	beq	r2,r8,1000daa4 <__subdf3+0x8c0>
1000da10:	02001004 	movi	r8,64
1000da14:	4085c83a 	sub	r2,r8,r2
1000da18:	288a983a 	sll	r5,r5,r2
1000da1c:	2c62b03a 	or	r17,r5,r17
1000da20:	8822c03a 	cmpne	r17,r17,zero
1000da24:	8922b03a 	or	r17,r17,r4
1000da28:	0005883a 	mov	r2,zero
1000da2c:	003f2406 	br	1000d6c0 <__alt_data_end+0xf800d6c0>
1000da30:	01402034 	movhi	r5,128
1000da34:	0011883a 	mov	r8,zero
1000da38:	297fffc4 	addi	r5,r5,-1
1000da3c:	047ffe04 	movi	r17,-8
1000da40:	0401ffc4 	movi	r16,2047
1000da44:	003e6a06 	br	1000d3f0 <__alt_data_end+0xf800d3f0>
1000da48:	2c62b03a 	or	r17,r5,r17
1000da4c:	8822c03a 	cmpne	r17,r17,zero
1000da50:	0005883a 	mov	r2,zero
1000da54:	003fa506 	br	1000d8ec <__alt_data_end+0xf800d8ec>
1000da58:	180b883a 	mov	r5,r3
1000da5c:	3023883a 	mov	r17,r6
1000da60:	003e0306 	br	1000d270 <__alt_data_end+0xf800d270>
1000da64:	180b883a 	mov	r5,r3
1000da68:	3023883a 	mov	r17,r6
1000da6c:	0401ffc4 	movi	r16,2047
1000da70:	003dff06 	br	1000d270 <__alt_data_end+0xf800d270>
1000da74:	113ff804 	addi	r4,r2,-32
1000da78:	01c00804 	movi	r7,32
1000da7c:	2908d83a 	srl	r4,r5,r4
1000da80:	11c00a26 	beq	r2,r7,1000daac <__subdf3+0x8c8>
1000da84:	01c01004 	movi	r7,64
1000da88:	3885c83a 	sub	r2,r7,r2
1000da8c:	288a983a 	sll	r5,r5,r2
1000da90:	2c62b03a 	or	r17,r5,r17
1000da94:	8822c03a 	cmpne	r17,r17,zero
1000da98:	8922b03a 	or	r17,r17,r4
1000da9c:	0005883a 	mov	r2,zero
1000daa0:	003f9206 	br	1000d8ec <__alt_data_end+0xf800d8ec>
1000daa4:	000b883a 	mov	r5,zero
1000daa8:	003fdc06 	br	1000da1c <__alt_data_end+0xf800da1c>
1000daac:	000b883a 	mov	r5,zero
1000dab0:	003ff706 	br	1000da90 <__alt_data_end+0xf800da90>

1000dab4 <__fixdfsi>:
1000dab4:	2806d53a 	srli	r3,r5,20
1000dab8:	00800434 	movhi	r2,16
1000dabc:	10bfffc4 	addi	r2,r2,-1
1000dac0:	18c1ffcc 	andi	r3,r3,2047
1000dac4:	0180ff84 	movi	r6,1022
1000dac8:	2884703a 	and	r2,r5,r2
1000dacc:	280ad7fa 	srli	r5,r5,31
1000dad0:	30c0130e 	bge	r6,r3,1000db20 <__fixdfsi+0x6c>
1000dad4:	01810744 	movi	r6,1053
1000dad8:	30c00d16 	blt	r6,r3,1000db10 <__fixdfsi+0x5c>
1000dadc:	01810cc4 	movi	r6,1075
1000dae0:	30cdc83a 	sub	r6,r6,r3
1000dae4:	01c007c4 	movi	r7,31
1000dae8:	10800434 	orhi	r2,r2,16
1000daec:	39800e0e 	bge	r7,r6,1000db28 <__fixdfsi+0x74>
1000daf0:	010104c4 	movi	r4,1043
1000daf4:	20c7c83a 	sub	r3,r4,r3
1000daf8:	10c6d83a 	srl	r3,r2,r3
1000dafc:	29403fcc 	andi	r5,r5,255
1000db00:	0145c83a 	sub	r2,zero,r5
1000db04:	1884f03a 	xor	r2,r3,r2
1000db08:	1145883a 	add	r2,r2,r5
1000db0c:	f800283a 	ret
1000db10:	00a00034 	movhi	r2,32768
1000db14:	10bfffc4 	addi	r2,r2,-1
1000db18:	2885883a 	add	r2,r5,r2
1000db1c:	f800283a 	ret
1000db20:	0005883a 	mov	r2,zero
1000db24:	f800283a 	ret
1000db28:	18fefb44 	addi	r3,r3,-1043
1000db2c:	2188d83a 	srl	r4,r4,r6
1000db30:	10c6983a 	sll	r3,r2,r3
1000db34:	20c6b03a 	or	r3,r4,r3
1000db38:	003ff006 	br	1000dafc <__alt_data_end+0xf800dafc>

1000db3c <__floatsidf>:
1000db3c:	defffd04 	addi	sp,sp,-12
1000db40:	dc400115 	stw	r17,4(sp)
1000db44:	dfc00215 	stw	ra,8(sp)
1000db48:	dc000015 	stw	r16,0(sp)
1000db4c:	2023883a 	mov	r17,r4
1000db50:	20001426 	beq	r4,zero,1000dba4 <__floatsidf+0x68>
1000db54:	2020d7fa 	srli	r16,r4,31
1000db58:	80000126 	beq	r16,zero,1000db60 <__floatsidf+0x24>
1000db5c:	0123c83a 	sub	r17,zero,r4
1000db60:	8809883a 	mov	r4,r17
1000db64:	000dcb00 	call	1000dcb0 <__clzsi2>
1000db68:	01410784 	movi	r5,1054
1000db6c:	00c00284 	movi	r3,10
1000db70:	288bc83a 	sub	r5,r5,r2
1000db74:	18801c16 	blt	r3,r2,1000dbe8 <__floatsidf+0xac>
1000db78:	00c002c4 	movi	r3,11
1000db7c:	1887c83a 	sub	r3,r3,r2
1000db80:	88c8d83a 	srl	r4,r17,r3
1000db84:	00c00434 	movhi	r3,16
1000db88:	18ffffc4 	addi	r3,r3,-1
1000db8c:	10800544 	addi	r2,r2,21
1000db90:	20c8703a 	and	r4,r4,r3
1000db94:	8884983a 	sll	r2,r17,r2
1000db98:	28c1ffcc 	andi	r3,r5,2047
1000db9c:	800d883a 	mov	r6,r16
1000dba0:	00000406 	br	1000dbb4 <__floatsidf+0x78>
1000dba4:	000d883a 	mov	r6,zero
1000dba8:	0007883a 	mov	r3,zero
1000dbac:	0009883a 	mov	r4,zero
1000dbb0:	0005883a 	mov	r2,zero
1000dbb4:	180a953a 	slli	r5,r3,20
1000dbb8:	31803fcc 	andi	r6,r6,255
1000dbbc:	00c00434 	movhi	r3,16
1000dbc0:	300c97fa 	slli	r6,r6,31
1000dbc4:	18ffffc4 	addi	r3,r3,-1
1000dbc8:	20c6703a 	and	r3,r4,r3
1000dbcc:	1946b03a 	or	r3,r3,r5
1000dbd0:	1986b03a 	or	r3,r3,r6
1000dbd4:	dfc00217 	ldw	ra,8(sp)
1000dbd8:	dc400117 	ldw	r17,4(sp)
1000dbdc:	dc000017 	ldw	r16,0(sp)
1000dbe0:	dec00304 	addi	sp,sp,12
1000dbe4:	f800283a 	ret
1000dbe8:	10fffd44 	addi	r3,r2,-11
1000dbec:	88c8983a 	sll	r4,r17,r3
1000dbf0:	00800434 	movhi	r2,16
1000dbf4:	10bfffc4 	addi	r2,r2,-1
1000dbf8:	2088703a 	and	r4,r4,r2
1000dbfc:	28c1ffcc 	andi	r3,r5,2047
1000dc00:	800d883a 	mov	r6,r16
1000dc04:	0005883a 	mov	r2,zero
1000dc08:	003fea06 	br	1000dbb4 <__alt_data_end+0xf800dbb4>

1000dc0c <__floatunsidf>:
1000dc0c:	defffe04 	addi	sp,sp,-8
1000dc10:	dc000015 	stw	r16,0(sp)
1000dc14:	dfc00115 	stw	ra,4(sp)
1000dc18:	2021883a 	mov	r16,r4
1000dc1c:	20001026 	beq	r4,zero,1000dc60 <__floatunsidf+0x54>
1000dc20:	000dcb00 	call	1000dcb0 <__clzsi2>
1000dc24:	01410784 	movi	r5,1054
1000dc28:	100d883a 	mov	r6,r2
1000dc2c:	288bc83a 	sub	r5,r5,r2
1000dc30:	00800284 	movi	r2,10
1000dc34:	11801616 	blt	r2,r6,1000dc90 <__floatunsidf+0x84>
1000dc38:	008002c4 	movi	r2,11
1000dc3c:	1185c83a 	sub	r2,r2,r6
1000dc40:	8084d83a 	srl	r2,r16,r2
1000dc44:	00c00434 	movhi	r3,16
1000dc48:	31c00544 	addi	r7,r6,21
1000dc4c:	18ffffc4 	addi	r3,r3,-1
1000dc50:	81e0983a 	sll	r16,r16,r7
1000dc54:	10cc703a 	and	r6,r2,r3
1000dc58:	2941ffcc 	andi	r5,r5,2047
1000dc5c:	00000206 	br	1000dc68 <__floatunsidf+0x5c>
1000dc60:	000b883a 	mov	r5,zero
1000dc64:	000d883a 	mov	r6,zero
1000dc68:	280a953a 	slli	r5,r5,20
1000dc6c:	00c00434 	movhi	r3,16
1000dc70:	18ffffc4 	addi	r3,r3,-1
1000dc74:	30c6703a 	and	r3,r6,r3
1000dc78:	8005883a 	mov	r2,r16
1000dc7c:	1946b03a 	or	r3,r3,r5
1000dc80:	dfc00117 	ldw	ra,4(sp)
1000dc84:	dc000017 	ldw	r16,0(sp)
1000dc88:	dec00204 	addi	sp,sp,8
1000dc8c:	f800283a 	ret
1000dc90:	31bffd44 	addi	r6,r6,-11
1000dc94:	818c983a 	sll	r6,r16,r6
1000dc98:	00800434 	movhi	r2,16
1000dc9c:	10bfffc4 	addi	r2,r2,-1
1000dca0:	2941ffcc 	andi	r5,r5,2047
1000dca4:	0021883a 	mov	r16,zero
1000dca8:	308c703a 	and	r6,r6,r2
1000dcac:	003fee06 	br	1000dc68 <__alt_data_end+0xf800dc68>

1000dcb0 <__clzsi2>:
1000dcb0:	00bfffd4 	movui	r2,65535
1000dcb4:	11000b36 	bltu	r2,r4,1000dce4 <__clzsi2+0x34>
1000dcb8:	00803fc4 	movi	r2,255
1000dcbc:	1100122e 	bgeu	r2,r4,1000dd08 <__clzsi2+0x58>
1000dcc0:	00c00204 	movi	r3,8
1000dcc4:	01400604 	movi	r5,24
1000dcc8:	20c8d83a 	srl	r4,r4,r3
1000dccc:	00840074 	movhi	r2,4097
1000dcd0:	1083ab04 	addi	r2,r2,3756
1000dcd4:	1109883a 	add	r4,r2,r4
1000dcd8:	20800003 	ldbu	r2,0(r4)
1000dcdc:	2885c83a 	sub	r2,r5,r2
1000dce0:	f800283a 	ret
1000dce4:	00804034 	movhi	r2,256
1000dce8:	10bfffc4 	addi	r2,r2,-1
1000dcec:	11000336 	bltu	r2,r4,1000dcfc <__clzsi2+0x4c>
1000dcf0:	00c00404 	movi	r3,16
1000dcf4:	180b883a 	mov	r5,r3
1000dcf8:	003ff306 	br	1000dcc8 <__alt_data_end+0xf800dcc8>
1000dcfc:	00c00604 	movi	r3,24
1000dd00:	01400204 	movi	r5,8
1000dd04:	003ff006 	br	1000dcc8 <__alt_data_end+0xf800dcc8>
1000dd08:	0007883a 	mov	r3,zero
1000dd0c:	01400804 	movi	r5,32
1000dd10:	003fed06 	br	1000dcc8 <__alt_data_end+0xf800dcc8>

1000dd14 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000dd14:	defffe04 	addi	sp,sp,-8
1000dd18:	dfc00115 	stw	ra,4(sp)
1000dd1c:	df000015 	stw	fp,0(sp)
1000dd20:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000dd24:	00840074 	movhi	r2,4097
1000dd28:	108abd04 	addi	r2,r2,10996
1000dd2c:	10800017 	ldw	r2,0(r2)
1000dd30:	10000526 	beq	r2,zero,1000dd48 <alt_get_errno+0x34>
1000dd34:	00840074 	movhi	r2,4097
1000dd38:	108abd04 	addi	r2,r2,10996
1000dd3c:	10800017 	ldw	r2,0(r2)
1000dd40:	103ee83a 	callr	r2
1000dd44:	00000206 	br	1000dd50 <alt_get_errno+0x3c>
1000dd48:	00840074 	movhi	r2,4097
1000dd4c:	10918f04 	addi	r2,r2,17980
}
1000dd50:	e037883a 	mov	sp,fp
1000dd54:	dfc00117 	ldw	ra,4(sp)
1000dd58:	df000017 	ldw	fp,0(sp)
1000dd5c:	dec00204 	addi	sp,sp,8
1000dd60:	f800283a 	ret

1000dd64 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1000dd64:	defffb04 	addi	sp,sp,-20
1000dd68:	dfc00415 	stw	ra,16(sp)
1000dd6c:	df000315 	stw	fp,12(sp)
1000dd70:	df000304 	addi	fp,sp,12
1000dd74:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1000dd78:	e0bfff17 	ldw	r2,-4(fp)
1000dd7c:	10000816 	blt	r2,zero,1000dda0 <close+0x3c>
1000dd80:	e13fff17 	ldw	r4,-4(fp)
1000dd84:	01400304 	movi	r5,12
1000dd88:	00013880 	call	10001388 <__mulsi3>
1000dd8c:	1007883a 	mov	r3,r2
1000dd90:	00840074 	movhi	r2,4097
1000dd94:	10863a04 	addi	r2,r2,6376
1000dd98:	1885883a 	add	r2,r3,r2
1000dd9c:	00000106 	br	1000dda4 <close+0x40>
1000dda0:	0005883a 	mov	r2,zero
1000dda4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
1000dda8:	e0bffd17 	ldw	r2,-12(fp)
1000ddac:	10001926 	beq	r2,zero,1000de14 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1000ddb0:	e0bffd17 	ldw	r2,-12(fp)
1000ddb4:	10800017 	ldw	r2,0(r2)
1000ddb8:	10800417 	ldw	r2,16(r2)
1000ddbc:	10000626 	beq	r2,zero,1000ddd8 <close+0x74>
1000ddc0:	e0bffd17 	ldw	r2,-12(fp)
1000ddc4:	10800017 	ldw	r2,0(r2)
1000ddc8:	10800417 	ldw	r2,16(r2)
1000ddcc:	e13ffd17 	ldw	r4,-12(fp)
1000ddd0:	103ee83a 	callr	r2
1000ddd4:	00000106 	br	1000dddc <close+0x78>
1000ddd8:	0005883a 	mov	r2,zero
1000dddc:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1000dde0:	e13fff17 	ldw	r4,-4(fp)
1000dde4:	000e4880 	call	1000e488 <alt_release_fd>
    if (rval < 0)
1000dde8:	e0bffe17 	ldw	r2,-8(fp)
1000ddec:	1000070e 	bge	r2,zero,1000de0c <close+0xa8>
    {
      ALT_ERRNO = -rval;
1000ddf0:	000dd140 	call	1000dd14 <alt_get_errno>
1000ddf4:	1007883a 	mov	r3,r2
1000ddf8:	e0bffe17 	ldw	r2,-8(fp)
1000ddfc:	0085c83a 	sub	r2,zero,r2
1000de00:	18800015 	stw	r2,0(r3)
      return -1;
1000de04:	00bfffc4 	movi	r2,-1
1000de08:	00000706 	br	1000de28 <close+0xc4>
    }
    return 0;
1000de0c:	0005883a 	mov	r2,zero
1000de10:	00000506 	br	1000de28 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000de14:	000dd140 	call	1000dd14 <alt_get_errno>
1000de18:	1007883a 	mov	r3,r2
1000de1c:	00801444 	movi	r2,81
1000de20:	18800015 	stw	r2,0(r3)
    return -1;
1000de24:	00bfffc4 	movi	r2,-1
  }
}
1000de28:	e037883a 	mov	sp,fp
1000de2c:	dfc00117 	ldw	ra,4(sp)
1000de30:	df000017 	ldw	fp,0(sp)
1000de34:	dec00204 	addi	sp,sp,8
1000de38:	f800283a 	ret

1000de3c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1000de3c:	defffc04 	addi	sp,sp,-16
1000de40:	df000315 	stw	fp,12(sp)
1000de44:	df000304 	addi	fp,sp,12
1000de48:	e13ffd15 	stw	r4,-12(fp)
1000de4c:	e17ffe15 	stw	r5,-8(fp)
1000de50:	e1bfff15 	stw	r6,-4(fp)
  return len;
1000de54:	e0bfff17 	ldw	r2,-4(fp)
}
1000de58:	e037883a 	mov	sp,fp
1000de5c:	df000017 	ldw	fp,0(sp)
1000de60:	dec00104 	addi	sp,sp,4
1000de64:	f800283a 	ret

1000de68 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000de68:	defffe04 	addi	sp,sp,-8
1000de6c:	dfc00115 	stw	ra,4(sp)
1000de70:	df000015 	stw	fp,0(sp)
1000de74:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000de78:	00840074 	movhi	r2,4097
1000de7c:	108abd04 	addi	r2,r2,10996
1000de80:	10800017 	ldw	r2,0(r2)
1000de84:	10000526 	beq	r2,zero,1000de9c <alt_get_errno+0x34>
1000de88:	00840074 	movhi	r2,4097
1000de8c:	108abd04 	addi	r2,r2,10996
1000de90:	10800017 	ldw	r2,0(r2)
1000de94:	103ee83a 	callr	r2
1000de98:	00000206 	br	1000dea4 <alt_get_errno+0x3c>
1000de9c:	00840074 	movhi	r2,4097
1000dea0:	10918f04 	addi	r2,r2,17980
}
1000dea4:	e037883a 	mov	sp,fp
1000dea8:	dfc00117 	ldw	ra,4(sp)
1000deac:	df000017 	ldw	fp,0(sp)
1000deb0:	dec00204 	addi	sp,sp,8
1000deb4:	f800283a 	ret

1000deb8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
1000deb8:	defffb04 	addi	sp,sp,-20
1000debc:	dfc00415 	stw	ra,16(sp)
1000dec0:	df000315 	stw	fp,12(sp)
1000dec4:	df000304 	addi	fp,sp,12
1000dec8:	e13ffe15 	stw	r4,-8(fp)
1000decc:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000ded0:	e0bffe17 	ldw	r2,-8(fp)
1000ded4:	10000816 	blt	r2,zero,1000def8 <fstat+0x40>
1000ded8:	e13ffe17 	ldw	r4,-8(fp)
1000dedc:	01400304 	movi	r5,12
1000dee0:	00013880 	call	10001388 <__mulsi3>
1000dee4:	1007883a 	mov	r3,r2
1000dee8:	00840074 	movhi	r2,4097
1000deec:	10863a04 	addi	r2,r2,6376
1000def0:	1885883a 	add	r2,r3,r2
1000def4:	00000106 	br	1000defc <fstat+0x44>
1000def8:	0005883a 	mov	r2,zero
1000defc:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
1000df00:	e0bffd17 	ldw	r2,-12(fp)
1000df04:	10001026 	beq	r2,zero,1000df48 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
1000df08:	e0bffd17 	ldw	r2,-12(fp)
1000df0c:	10800017 	ldw	r2,0(r2)
1000df10:	10800817 	ldw	r2,32(r2)
1000df14:	10000726 	beq	r2,zero,1000df34 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
1000df18:	e0bffd17 	ldw	r2,-12(fp)
1000df1c:	10800017 	ldw	r2,0(r2)
1000df20:	10800817 	ldw	r2,32(r2)
1000df24:	e13ffd17 	ldw	r4,-12(fp)
1000df28:	e17fff17 	ldw	r5,-4(fp)
1000df2c:	103ee83a 	callr	r2
1000df30:	00000a06 	br	1000df5c <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
1000df34:	e0bfff17 	ldw	r2,-4(fp)
1000df38:	00c80004 	movi	r3,8192
1000df3c:	10c00115 	stw	r3,4(r2)
      return 0;
1000df40:	0005883a 	mov	r2,zero
1000df44:	00000506 	br	1000df5c <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000df48:	000de680 	call	1000de68 <alt_get_errno>
1000df4c:	1007883a 	mov	r3,r2
1000df50:	00801444 	movi	r2,81
1000df54:	18800015 	stw	r2,0(r3)
    return -1;
1000df58:	00bfffc4 	movi	r2,-1
  }
}
1000df5c:	e037883a 	mov	sp,fp
1000df60:	dfc00117 	ldw	ra,4(sp)
1000df64:	df000017 	ldw	fp,0(sp)
1000df68:	dec00204 	addi	sp,sp,8
1000df6c:	f800283a 	ret

1000df70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000df70:	defffe04 	addi	sp,sp,-8
1000df74:	dfc00115 	stw	ra,4(sp)
1000df78:	df000015 	stw	fp,0(sp)
1000df7c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000df80:	00840074 	movhi	r2,4097
1000df84:	108abd04 	addi	r2,r2,10996
1000df88:	10800017 	ldw	r2,0(r2)
1000df8c:	10000526 	beq	r2,zero,1000dfa4 <alt_get_errno+0x34>
1000df90:	00840074 	movhi	r2,4097
1000df94:	108abd04 	addi	r2,r2,10996
1000df98:	10800017 	ldw	r2,0(r2)
1000df9c:	103ee83a 	callr	r2
1000dfa0:	00000206 	br	1000dfac <alt_get_errno+0x3c>
1000dfa4:	00840074 	movhi	r2,4097
1000dfa8:	10918f04 	addi	r2,r2,17980
}
1000dfac:	e037883a 	mov	sp,fp
1000dfb0:	dfc00117 	ldw	ra,4(sp)
1000dfb4:	df000017 	ldw	fp,0(sp)
1000dfb8:	dec00204 	addi	sp,sp,8
1000dfbc:	f800283a 	ret

1000dfc0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
1000dfc0:	deffed04 	addi	sp,sp,-76
1000dfc4:	dfc01215 	stw	ra,72(sp)
1000dfc8:	df001115 	stw	fp,68(sp)
1000dfcc:	df001104 	addi	fp,sp,68
1000dfd0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000dfd4:	e0bfff17 	ldw	r2,-4(fp)
1000dfd8:	10000816 	blt	r2,zero,1000dffc <isatty+0x3c>
1000dfdc:	e13fff17 	ldw	r4,-4(fp)
1000dfe0:	01400304 	movi	r5,12
1000dfe4:	00013880 	call	10001388 <__mulsi3>
1000dfe8:	1007883a 	mov	r3,r2
1000dfec:	00840074 	movhi	r2,4097
1000dff0:	10863a04 	addi	r2,r2,6376
1000dff4:	1885883a 	add	r2,r3,r2
1000dff8:	00000106 	br	1000e000 <isatty+0x40>
1000dffc:	0005883a 	mov	r2,zero
1000e000:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
1000e004:	e0bfef17 	ldw	r2,-68(fp)
1000e008:	10000e26 	beq	r2,zero,1000e044 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1000e00c:	e0bfef17 	ldw	r2,-68(fp)
1000e010:	10800017 	ldw	r2,0(r2)
1000e014:	10800817 	ldw	r2,32(r2)
1000e018:	1000021e 	bne	r2,zero,1000e024 <isatty+0x64>
    {
      return 1;
1000e01c:	00800044 	movi	r2,1
1000e020:	00000d06 	br	1000e058 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
1000e024:	e0bff004 	addi	r2,fp,-64
1000e028:	e13fff17 	ldw	r4,-4(fp)
1000e02c:	100b883a 	mov	r5,r2
1000e030:	000deb80 	call	1000deb8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
1000e034:	e0bff117 	ldw	r2,-60(fp)
1000e038:	10880020 	cmpeqi	r2,r2,8192
1000e03c:	10803fcc 	andi	r2,r2,255
1000e040:	00000506 	br	1000e058 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000e044:	000df700 	call	1000df70 <alt_get_errno>
1000e048:	1007883a 	mov	r3,r2
1000e04c:	00801444 	movi	r2,81
1000e050:	18800015 	stw	r2,0(r3)
    return 0;
1000e054:	0005883a 	mov	r2,zero
  }
}
1000e058:	e037883a 	mov	sp,fp
1000e05c:	dfc00117 	ldw	ra,4(sp)
1000e060:	df000017 	ldw	fp,0(sp)
1000e064:	dec00204 	addi	sp,sp,8
1000e068:	f800283a 	ret

1000e06c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
1000e06c:	defffc04 	addi	sp,sp,-16
1000e070:	df000315 	stw	fp,12(sp)
1000e074:	df000304 	addi	fp,sp,12
1000e078:	e13ffd15 	stw	r4,-12(fp)
1000e07c:	e17ffe15 	stw	r5,-8(fp)
1000e080:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
1000e084:	e0fffe17 	ldw	r3,-8(fp)
1000e088:	e0bffd17 	ldw	r2,-12(fp)
1000e08c:	18800c26 	beq	r3,r2,1000e0c0 <alt_load_section+0x54>
  {
    while( to != end )
1000e090:	00000806 	br	1000e0b4 <alt_load_section+0x48>
    {
      *to++ = *from++;
1000e094:	e0bffe17 	ldw	r2,-8(fp)
1000e098:	10c00104 	addi	r3,r2,4
1000e09c:	e0fffe15 	stw	r3,-8(fp)
1000e0a0:	e0fffd17 	ldw	r3,-12(fp)
1000e0a4:	19000104 	addi	r4,r3,4
1000e0a8:	e13ffd15 	stw	r4,-12(fp)
1000e0ac:	18c00017 	ldw	r3,0(r3)
1000e0b0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
1000e0b4:	e0fffe17 	ldw	r3,-8(fp)
1000e0b8:	e0bfff17 	ldw	r2,-4(fp)
1000e0bc:	18bff51e 	bne	r3,r2,1000e094 <__alt_data_end+0xf800e094>
    {
      *to++ = *from++;
    }
  }
}
1000e0c0:	e037883a 	mov	sp,fp
1000e0c4:	df000017 	ldw	fp,0(sp)
1000e0c8:	dec00104 	addi	sp,sp,4
1000e0cc:	f800283a 	ret

1000e0d0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
1000e0d0:	defffe04 	addi	sp,sp,-8
1000e0d4:	dfc00115 	stw	ra,4(sp)
1000e0d8:	df000015 	stw	fp,0(sp)
1000e0dc:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
1000e0e0:	01040074 	movhi	r4,4097
1000e0e4:	210ac204 	addi	r4,r4,11016
1000e0e8:	01440074 	movhi	r5,4097
1000e0ec:	2943f804 	addi	r5,r5,4064
1000e0f0:	01840074 	movhi	r6,4097
1000e0f4:	318ac204 	addi	r6,r6,11016
1000e0f8:	000e06c0 	call	1000e06c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1000e0fc:	01040034 	movhi	r4,4096
1000e100:	21000804 	addi	r4,r4,32
1000e104:	01440034 	movhi	r5,4096
1000e108:	29400804 	addi	r5,r5,32
1000e10c:	01840034 	movhi	r6,4096
1000e110:	31808b04 	addi	r6,r6,556
1000e114:	000e06c0 	call	1000e06c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
1000e118:	01040074 	movhi	r4,4097
1000e11c:	21011b04 	addi	r4,r4,1132
1000e120:	01440074 	movhi	r5,4097
1000e124:	29411b04 	addi	r5,r5,1132
1000e128:	01840074 	movhi	r6,4097
1000e12c:	3183f804 	addi	r6,r6,4064
1000e130:	000e06c0 	call	1000e06c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
1000e134:	000f3480 	call	1000f348 <alt_dcache_flush_all>
  alt_icache_flush_all();
1000e138:	000f5100 	call	1000f510 <alt_icache_flush_all>
}
1000e13c:	e037883a 	mov	sp,fp
1000e140:	dfc00117 	ldw	ra,4(sp)
1000e144:	df000017 	ldw	fp,0(sp)
1000e148:	dec00204 	addi	sp,sp,8
1000e14c:	f800283a 	ret

1000e150 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000e150:	defffe04 	addi	sp,sp,-8
1000e154:	dfc00115 	stw	ra,4(sp)
1000e158:	df000015 	stw	fp,0(sp)
1000e15c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000e160:	00840074 	movhi	r2,4097
1000e164:	108abd04 	addi	r2,r2,10996
1000e168:	10800017 	ldw	r2,0(r2)
1000e16c:	10000526 	beq	r2,zero,1000e184 <alt_get_errno+0x34>
1000e170:	00840074 	movhi	r2,4097
1000e174:	108abd04 	addi	r2,r2,10996
1000e178:	10800017 	ldw	r2,0(r2)
1000e17c:	103ee83a 	callr	r2
1000e180:	00000206 	br	1000e18c <alt_get_errno+0x3c>
1000e184:	00840074 	movhi	r2,4097
1000e188:	10918f04 	addi	r2,r2,17980
}
1000e18c:	e037883a 	mov	sp,fp
1000e190:	dfc00117 	ldw	ra,4(sp)
1000e194:	df000017 	ldw	fp,0(sp)
1000e198:	dec00204 	addi	sp,sp,8
1000e19c:	f800283a 	ret

1000e1a0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
1000e1a0:	defff904 	addi	sp,sp,-28
1000e1a4:	dfc00615 	stw	ra,24(sp)
1000e1a8:	df000515 	stw	fp,20(sp)
1000e1ac:	df000504 	addi	fp,sp,20
1000e1b0:	e13ffd15 	stw	r4,-12(fp)
1000e1b4:	e17ffe15 	stw	r5,-8(fp)
1000e1b8:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
1000e1bc:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000e1c0:	e0bffd17 	ldw	r2,-12(fp)
1000e1c4:	10000816 	blt	r2,zero,1000e1e8 <lseek+0x48>
1000e1c8:	e13ffd17 	ldw	r4,-12(fp)
1000e1cc:	01400304 	movi	r5,12
1000e1d0:	00013880 	call	10001388 <__mulsi3>
1000e1d4:	1007883a 	mov	r3,r2
1000e1d8:	00840074 	movhi	r2,4097
1000e1dc:	10863a04 	addi	r2,r2,6376
1000e1e0:	1885883a 	add	r2,r3,r2
1000e1e4:	00000106 	br	1000e1ec <lseek+0x4c>
1000e1e8:	0005883a 	mov	r2,zero
1000e1ec:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
1000e1f0:	e0bffc17 	ldw	r2,-16(fp)
1000e1f4:	10001026 	beq	r2,zero,1000e238 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
1000e1f8:	e0bffc17 	ldw	r2,-16(fp)
1000e1fc:	10800017 	ldw	r2,0(r2)
1000e200:	10800717 	ldw	r2,28(r2)
1000e204:	10000926 	beq	r2,zero,1000e22c <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
1000e208:	e0bffc17 	ldw	r2,-16(fp)
1000e20c:	10800017 	ldw	r2,0(r2)
1000e210:	10800717 	ldw	r2,28(r2)
1000e214:	e13ffc17 	ldw	r4,-16(fp)
1000e218:	e17ffe17 	ldw	r5,-8(fp)
1000e21c:	e1bfff17 	ldw	r6,-4(fp)
1000e220:	103ee83a 	callr	r2
1000e224:	e0bffb15 	stw	r2,-20(fp)
1000e228:	00000506 	br	1000e240 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
1000e22c:	00bfde84 	movi	r2,-134
1000e230:	e0bffb15 	stw	r2,-20(fp)
1000e234:	00000206 	br	1000e240 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
1000e238:	00bfebc4 	movi	r2,-81
1000e23c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
1000e240:	e0bffb17 	ldw	r2,-20(fp)
1000e244:	1000070e 	bge	r2,zero,1000e264 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
1000e248:	000e1500 	call	1000e150 <alt_get_errno>
1000e24c:	1007883a 	mov	r3,r2
1000e250:	e0bffb17 	ldw	r2,-20(fp)
1000e254:	0085c83a 	sub	r2,zero,r2
1000e258:	18800015 	stw	r2,0(r3)
    rc = -1;
1000e25c:	00bfffc4 	movi	r2,-1
1000e260:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
1000e264:	e0bffb17 	ldw	r2,-20(fp)
}
1000e268:	e037883a 	mov	sp,fp
1000e26c:	dfc00117 	ldw	ra,4(sp)
1000e270:	df000017 	ldw	fp,0(sp)
1000e274:	dec00204 	addi	sp,sp,8
1000e278:	f800283a 	ret

1000e27c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
1000e27c:	defffd04 	addi	sp,sp,-12
1000e280:	dfc00215 	stw	ra,8(sp)
1000e284:	df000115 	stw	fp,4(sp)
1000e288:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1000e28c:	0009883a 	mov	r4,zero
1000e290:	000e7400 	call	1000e740 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
1000e294:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
1000e298:	000e7740 	call	1000e774 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
1000e29c:	01040074 	movhi	r4,4097
1000e2a0:	2103ee04 	addi	r4,r4,4024
1000e2a4:	01440074 	movhi	r5,4097
1000e2a8:	2943ee04 	addi	r5,r5,4024
1000e2ac:	01840074 	movhi	r6,4097
1000e2b0:	3183ee04 	addi	r6,r6,4024
1000e2b4:	000f8dc0 	call	1000f8dc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
1000e2b8:	000f4580 	call	1000f458 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
1000e2bc:	01040074 	movhi	r4,4097
1000e2c0:	213d2d04 	addi	r4,r4,-2892
1000e2c4:	00100c80 	call	100100c8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
1000e2c8:	d126e117 	ldw	r4,-25724(gp)
1000e2cc:	d0e6e217 	ldw	r3,-25720(gp)
1000e2d0:	d0a6e317 	ldw	r2,-25716(gp)
1000e2d4:	180b883a 	mov	r5,r3
1000e2d8:	100d883a 	mov	r6,r2
1000e2dc:	00011480 	call	10001148 <main>
1000e2e0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1000e2e4:	01000044 	movi	r4,1
1000e2e8:	000dd640 	call	1000dd64 <close>
  exit (result);
1000e2ec:	e13fff17 	ldw	r4,-4(fp)
1000e2f0:	00100dc0 	call	100100dc <exit>

1000e2f4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
1000e2f4:	defffe04 	addi	sp,sp,-8
1000e2f8:	df000115 	stw	fp,4(sp)
1000e2fc:	df000104 	addi	fp,sp,4
1000e300:	e13fff15 	stw	r4,-4(fp)
}
1000e304:	e037883a 	mov	sp,fp
1000e308:	df000017 	ldw	fp,0(sp)
1000e30c:	dec00104 	addi	sp,sp,4
1000e310:	f800283a 	ret

1000e314 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
1000e314:	defffe04 	addi	sp,sp,-8
1000e318:	df000115 	stw	fp,4(sp)
1000e31c:	df000104 	addi	fp,sp,4
1000e320:	e13fff15 	stw	r4,-4(fp)
}
1000e324:	e037883a 	mov	sp,fp
1000e328:	df000017 	ldw	fp,0(sp)
1000e32c:	dec00104 	addi	sp,sp,4
1000e330:	f800283a 	ret

1000e334 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000e334:	defffe04 	addi	sp,sp,-8
1000e338:	dfc00115 	stw	ra,4(sp)
1000e33c:	df000015 	stw	fp,0(sp)
1000e340:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000e344:	00840074 	movhi	r2,4097
1000e348:	108abd04 	addi	r2,r2,10996
1000e34c:	10800017 	ldw	r2,0(r2)
1000e350:	10000526 	beq	r2,zero,1000e368 <alt_get_errno+0x34>
1000e354:	00840074 	movhi	r2,4097
1000e358:	108abd04 	addi	r2,r2,10996
1000e35c:	10800017 	ldw	r2,0(r2)
1000e360:	103ee83a 	callr	r2
1000e364:	00000206 	br	1000e370 <alt_get_errno+0x3c>
1000e368:	00840074 	movhi	r2,4097
1000e36c:	10918f04 	addi	r2,r2,17980
}
1000e370:	e037883a 	mov	sp,fp
1000e374:	dfc00117 	ldw	ra,4(sp)
1000e378:	df000017 	ldw	fp,0(sp)
1000e37c:	dec00204 	addi	sp,sp,8
1000e380:	f800283a 	ret

1000e384 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
1000e384:	defff904 	addi	sp,sp,-28
1000e388:	dfc00615 	stw	ra,24(sp)
1000e38c:	df000515 	stw	fp,20(sp)
1000e390:	df000504 	addi	fp,sp,20
1000e394:	e13ffd15 	stw	r4,-12(fp)
1000e398:	e17ffe15 	stw	r5,-8(fp)
1000e39c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000e3a0:	e0bffd17 	ldw	r2,-12(fp)
1000e3a4:	10000816 	blt	r2,zero,1000e3c8 <read+0x44>
1000e3a8:	e13ffd17 	ldw	r4,-12(fp)
1000e3ac:	01400304 	movi	r5,12
1000e3b0:	00013880 	call	10001388 <__mulsi3>
1000e3b4:	1007883a 	mov	r3,r2
1000e3b8:	00840074 	movhi	r2,4097
1000e3bc:	10863a04 	addi	r2,r2,6376
1000e3c0:	1885883a 	add	r2,r3,r2
1000e3c4:	00000106 	br	1000e3cc <read+0x48>
1000e3c8:	0005883a 	mov	r2,zero
1000e3cc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000e3d0:	e0bffb17 	ldw	r2,-20(fp)
1000e3d4:	10002226 	beq	r2,zero,1000e460 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000e3d8:	e0bffb17 	ldw	r2,-20(fp)
1000e3dc:	10800217 	ldw	r2,8(r2)
1000e3e0:	108000cc 	andi	r2,r2,3
1000e3e4:	10800060 	cmpeqi	r2,r2,1
1000e3e8:	1000181e 	bne	r2,zero,1000e44c <read+0xc8>
        (fd->dev->read))
1000e3ec:	e0bffb17 	ldw	r2,-20(fp)
1000e3f0:	10800017 	ldw	r2,0(r2)
1000e3f4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000e3f8:	10001426 	beq	r2,zero,1000e44c <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
1000e3fc:	e0bffb17 	ldw	r2,-20(fp)
1000e400:	10800017 	ldw	r2,0(r2)
1000e404:	10800517 	ldw	r2,20(r2)
1000e408:	e0ffff17 	ldw	r3,-4(fp)
1000e40c:	e13ffb17 	ldw	r4,-20(fp)
1000e410:	e17ffe17 	ldw	r5,-8(fp)
1000e414:	180d883a 	mov	r6,r3
1000e418:	103ee83a 	callr	r2
1000e41c:	e0bffc15 	stw	r2,-16(fp)
1000e420:	e0bffc17 	ldw	r2,-16(fp)
1000e424:	1000070e 	bge	r2,zero,1000e444 <read+0xc0>
        {
          ALT_ERRNO = -rval;
1000e428:	000e3340 	call	1000e334 <alt_get_errno>
1000e42c:	1007883a 	mov	r3,r2
1000e430:	e0bffc17 	ldw	r2,-16(fp)
1000e434:	0085c83a 	sub	r2,zero,r2
1000e438:	18800015 	stw	r2,0(r3)
          return -1;
1000e43c:	00bfffc4 	movi	r2,-1
1000e440:	00000c06 	br	1000e474 <read+0xf0>
        }
        return rval;
1000e444:	e0bffc17 	ldw	r2,-16(fp)
1000e448:	00000a06 	br	1000e474 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
1000e44c:	000e3340 	call	1000e334 <alt_get_errno>
1000e450:	1007883a 	mov	r3,r2
1000e454:	00800344 	movi	r2,13
1000e458:	18800015 	stw	r2,0(r3)
1000e45c:	00000406 	br	1000e470 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
1000e460:	000e3340 	call	1000e334 <alt_get_errno>
1000e464:	1007883a 	mov	r3,r2
1000e468:	00801444 	movi	r2,81
1000e46c:	18800015 	stw	r2,0(r3)
  }
  return -1;
1000e470:	00bfffc4 	movi	r2,-1
}
1000e474:	e037883a 	mov	sp,fp
1000e478:	dfc00117 	ldw	ra,4(sp)
1000e47c:	df000017 	ldw	fp,0(sp)
1000e480:	dec00204 	addi	sp,sp,8
1000e484:	f800283a 	ret

1000e488 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
1000e488:	defffc04 	addi	sp,sp,-16
1000e48c:	dfc00315 	stw	ra,12(sp)
1000e490:	df000215 	stw	fp,8(sp)
1000e494:	dc000115 	stw	r16,4(sp)
1000e498:	df000204 	addi	fp,sp,8
1000e49c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
1000e4a0:	e0bffe17 	ldw	r2,-8(fp)
1000e4a4:	108000d0 	cmplti	r2,r2,3
1000e4a8:	1000111e 	bne	r2,zero,1000e4f0 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
1000e4ac:	04040074 	movhi	r16,4097
1000e4b0:	84063a04 	addi	r16,r16,6376
1000e4b4:	e0bffe17 	ldw	r2,-8(fp)
1000e4b8:	1009883a 	mov	r4,r2
1000e4bc:	01400304 	movi	r5,12
1000e4c0:	00013880 	call	10001388 <__mulsi3>
1000e4c4:	8085883a 	add	r2,r16,r2
1000e4c8:	10800204 	addi	r2,r2,8
1000e4cc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
1000e4d0:	04040074 	movhi	r16,4097
1000e4d4:	84063a04 	addi	r16,r16,6376
1000e4d8:	e0bffe17 	ldw	r2,-8(fp)
1000e4dc:	1009883a 	mov	r4,r2
1000e4e0:	01400304 	movi	r5,12
1000e4e4:	00013880 	call	10001388 <__mulsi3>
1000e4e8:	8085883a 	add	r2,r16,r2
1000e4ec:	10000015 	stw	zero,0(r2)
  }
}
1000e4f0:	e6ffff04 	addi	sp,fp,-4
1000e4f4:	dfc00217 	ldw	ra,8(sp)
1000e4f8:	df000117 	ldw	fp,4(sp)
1000e4fc:	dc000017 	ldw	r16,0(sp)
1000e500:	dec00304 	addi	sp,sp,12
1000e504:	f800283a 	ret

1000e508 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
1000e508:	defff904 	addi	sp,sp,-28
1000e50c:	df000615 	stw	fp,24(sp)
1000e510:	df000604 	addi	fp,sp,24
1000e514:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000e518:	0005303a 	rdctl	r2,status
1000e51c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000e520:	e0fffc17 	ldw	r3,-16(fp)
1000e524:	00bfff84 	movi	r2,-2
1000e528:	1884703a 	and	r2,r3,r2
1000e52c:	1001703a 	wrctl	status,r2
  
  return context;
1000e530:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
1000e534:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
1000e538:	d0a00c17 	ldw	r2,-32720(gp)
1000e53c:	10c000c4 	addi	r3,r2,3
1000e540:	00bfff04 	movi	r2,-4
1000e544:	1884703a 	and	r2,r3,r2
1000e548:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
1000e54c:	d0e00c17 	ldw	r3,-32720(gp)
1000e550:	e0bfff17 	ldw	r2,-4(fp)
1000e554:	1887883a 	add	r3,r3,r2
1000e558:	00860034 	movhi	r2,6144
1000e55c:	10800004 	addi	r2,r2,0
1000e560:	10c0062e 	bgeu	r2,r3,1000e57c <sbrk+0x74>
1000e564:	e0bffa17 	ldw	r2,-24(fp)
1000e568:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000e56c:	e0bffd17 	ldw	r2,-12(fp)
1000e570:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
1000e574:	00bfffc4 	movi	r2,-1
1000e578:	00000b06 	br	1000e5a8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
1000e57c:	d0a00c17 	ldw	r2,-32720(gp)
1000e580:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
1000e584:	d0e00c17 	ldw	r3,-32720(gp)
1000e588:	e0bfff17 	ldw	r2,-4(fp)
1000e58c:	1885883a 	add	r2,r3,r2
1000e590:	d0a00c15 	stw	r2,-32720(gp)
1000e594:	e0bffa17 	ldw	r2,-24(fp)
1000e598:	e0bffe15 	stw	r2,-8(fp)
1000e59c:	e0bffe17 	ldw	r2,-8(fp)
1000e5a0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
1000e5a4:	e0bffb17 	ldw	r2,-20(fp)
} 
1000e5a8:	e037883a 	mov	sp,fp
1000e5ac:	df000017 	ldw	fp,0(sp)
1000e5b0:	dec00104 	addi	sp,sp,4
1000e5b4:	f800283a 	ret

1000e5b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000e5b8:	defffe04 	addi	sp,sp,-8
1000e5bc:	dfc00115 	stw	ra,4(sp)
1000e5c0:	df000015 	stw	fp,0(sp)
1000e5c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000e5c8:	00840074 	movhi	r2,4097
1000e5cc:	108abd04 	addi	r2,r2,10996
1000e5d0:	10800017 	ldw	r2,0(r2)
1000e5d4:	10000526 	beq	r2,zero,1000e5ec <alt_get_errno+0x34>
1000e5d8:	00840074 	movhi	r2,4097
1000e5dc:	108abd04 	addi	r2,r2,10996
1000e5e0:	10800017 	ldw	r2,0(r2)
1000e5e4:	103ee83a 	callr	r2
1000e5e8:	00000206 	br	1000e5f4 <alt_get_errno+0x3c>
1000e5ec:	00840074 	movhi	r2,4097
1000e5f0:	10918f04 	addi	r2,r2,17980
}
1000e5f4:	e037883a 	mov	sp,fp
1000e5f8:	dfc00117 	ldw	ra,4(sp)
1000e5fc:	df000017 	ldw	fp,0(sp)
1000e600:	dec00204 	addi	sp,sp,8
1000e604:	f800283a 	ret

1000e608 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
1000e608:	defff904 	addi	sp,sp,-28
1000e60c:	dfc00615 	stw	ra,24(sp)
1000e610:	df000515 	stw	fp,20(sp)
1000e614:	df000504 	addi	fp,sp,20
1000e618:	e13ffd15 	stw	r4,-12(fp)
1000e61c:	e17ffe15 	stw	r5,-8(fp)
1000e620:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000e624:	e0bffd17 	ldw	r2,-12(fp)
1000e628:	10000816 	blt	r2,zero,1000e64c <write+0x44>
1000e62c:	e13ffd17 	ldw	r4,-12(fp)
1000e630:	01400304 	movi	r5,12
1000e634:	00013880 	call	10001388 <__mulsi3>
1000e638:	1007883a 	mov	r3,r2
1000e63c:	00840074 	movhi	r2,4097
1000e640:	10863a04 	addi	r2,r2,6376
1000e644:	1885883a 	add	r2,r3,r2
1000e648:	00000106 	br	1000e650 <write+0x48>
1000e64c:	0005883a 	mov	r2,zero
1000e650:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000e654:	e0bffb17 	ldw	r2,-20(fp)
1000e658:	10002126 	beq	r2,zero,1000e6e0 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
1000e65c:	e0bffb17 	ldw	r2,-20(fp)
1000e660:	10800217 	ldw	r2,8(r2)
1000e664:	108000cc 	andi	r2,r2,3
1000e668:	10001826 	beq	r2,zero,1000e6cc <write+0xc4>
1000e66c:	e0bffb17 	ldw	r2,-20(fp)
1000e670:	10800017 	ldw	r2,0(r2)
1000e674:	10800617 	ldw	r2,24(r2)
1000e678:	10001426 	beq	r2,zero,1000e6cc <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
1000e67c:	e0bffb17 	ldw	r2,-20(fp)
1000e680:	10800017 	ldw	r2,0(r2)
1000e684:	10800617 	ldw	r2,24(r2)
1000e688:	e0ffff17 	ldw	r3,-4(fp)
1000e68c:	e13ffb17 	ldw	r4,-20(fp)
1000e690:	e17ffe17 	ldw	r5,-8(fp)
1000e694:	180d883a 	mov	r6,r3
1000e698:	103ee83a 	callr	r2
1000e69c:	e0bffc15 	stw	r2,-16(fp)
1000e6a0:	e0bffc17 	ldw	r2,-16(fp)
1000e6a4:	1000070e 	bge	r2,zero,1000e6c4 <write+0xbc>
      {
        ALT_ERRNO = -rval;
1000e6a8:	000e5b80 	call	1000e5b8 <alt_get_errno>
1000e6ac:	1007883a 	mov	r3,r2
1000e6b0:	e0bffc17 	ldw	r2,-16(fp)
1000e6b4:	0085c83a 	sub	r2,zero,r2
1000e6b8:	18800015 	stw	r2,0(r3)
        return -1;
1000e6bc:	00bfffc4 	movi	r2,-1
1000e6c0:	00000c06 	br	1000e6f4 <write+0xec>
      }
      return rval;
1000e6c4:	e0bffc17 	ldw	r2,-16(fp)
1000e6c8:	00000a06 	br	1000e6f4 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
1000e6cc:	000e5b80 	call	1000e5b8 <alt_get_errno>
1000e6d0:	1007883a 	mov	r3,r2
1000e6d4:	00800344 	movi	r2,13
1000e6d8:	18800015 	stw	r2,0(r3)
1000e6dc:	00000406 	br	1000e6f0 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
1000e6e0:	000e5b80 	call	1000e5b8 <alt_get_errno>
1000e6e4:	1007883a 	mov	r3,r2
1000e6e8:	00801444 	movi	r2,81
1000e6ec:	18800015 	stw	r2,0(r3)
  }
  return -1;
1000e6f0:	00bfffc4 	movi	r2,-1
}
1000e6f4:	e037883a 	mov	sp,fp
1000e6f8:	dfc00117 	ldw	ra,4(sp)
1000e6fc:	df000017 	ldw	fp,0(sp)
1000e700:	dec00204 	addi	sp,sp,8
1000e704:	f800283a 	ret

1000e708 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
1000e708:	defffd04 	addi	sp,sp,-12
1000e70c:	dfc00215 	stw	ra,8(sp)
1000e710:	df000115 	stw	fp,4(sp)
1000e714:	df000104 	addi	fp,sp,4
1000e718:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
1000e71c:	e13fff17 	ldw	r4,-4(fp)
1000e720:	01440074 	movhi	r5,4097
1000e724:	294aba04 	addi	r5,r5,10984
1000e728:	000f3b40 	call	1000f3b4 <alt_dev_llist_insert>
}
1000e72c:	e037883a 	mov	sp,fp
1000e730:	dfc00117 	ldw	ra,4(sp)
1000e734:	df000017 	ldw	fp,0(sp)
1000e738:	dec00204 	addi	sp,sp,8
1000e73c:	f800283a 	ret

1000e740 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
1000e740:	defffd04 	addi	sp,sp,-12
1000e744:	dfc00215 	stw	ra,8(sp)
1000e748:	df000115 	stw	fp,4(sp)
1000e74c:	df000104 	addi	fp,sp,4
1000e750:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS_SYSTEM, nios_system);
1000e754:	000fd940 	call	1000fd94 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
1000e758:	00800044 	movi	r2,1
1000e75c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
1000e760:	e037883a 	mov	sp,fp
1000e764:	dfc00117 	ldw	ra,4(sp)
1000e768:	df000017 	ldw	fp,0(sp)
1000e76c:	dec00204 	addi	sp,sp,8
1000e770:	f800283a 	ret

1000e774 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
1000e774:	defffe04 	addi	sp,sp,-8
1000e778:	dfc00115 	stw	ra,4(sp)
1000e77c:	df000015 	stw	fp,0(sp)
1000e780:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
1000e784:	01040074 	movhi	r4,4097
1000e788:	2106a404 	addi	r4,r4,6800
1000e78c:	000b883a 	mov	r5,zero
1000e790:	01800144 	movi	r6,5
1000e794:	000e9200 	call	1000e920 <altera_avalon_jtag_uart_init>
1000e798:	01040074 	movhi	r4,4097
1000e79c:	21069a04 	addi	r4,r4,6760
1000e7a0:	000e7080 	call	1000e708 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
1000e7a4:	0001883a 	nop
}
1000e7a8:	e037883a 	mov	sp,fp
1000e7ac:	dfc00117 	ldw	ra,4(sp)
1000e7b0:	df000017 	ldw	fp,0(sp)
1000e7b4:	dec00204 	addi	sp,sp,8
1000e7b8:	f800283a 	ret

1000e7bc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
1000e7bc:	defffa04 	addi	sp,sp,-24
1000e7c0:	dfc00515 	stw	ra,20(sp)
1000e7c4:	df000415 	stw	fp,16(sp)
1000e7c8:	df000404 	addi	fp,sp,16
1000e7cc:	e13ffd15 	stw	r4,-12(fp)
1000e7d0:	e17ffe15 	stw	r5,-8(fp)
1000e7d4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000e7d8:	e0bffd17 	ldw	r2,-12(fp)
1000e7dc:	10800017 	ldw	r2,0(r2)
1000e7e0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
1000e7e4:	e0bffc17 	ldw	r2,-16(fp)
1000e7e8:	10c00a04 	addi	r3,r2,40
1000e7ec:	e0bffd17 	ldw	r2,-12(fp)
1000e7f0:	10800217 	ldw	r2,8(r2)
1000e7f4:	1809883a 	mov	r4,r3
1000e7f8:	e17ffe17 	ldw	r5,-8(fp)
1000e7fc:	e1bfff17 	ldw	r6,-4(fp)
1000e800:	100f883a 	mov	r7,r2
1000e804:	000ede40 	call	1000ede4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
1000e808:	e037883a 	mov	sp,fp
1000e80c:	dfc00117 	ldw	ra,4(sp)
1000e810:	df000017 	ldw	fp,0(sp)
1000e814:	dec00204 	addi	sp,sp,8
1000e818:	f800283a 	ret

1000e81c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
1000e81c:	defffa04 	addi	sp,sp,-24
1000e820:	dfc00515 	stw	ra,20(sp)
1000e824:	df000415 	stw	fp,16(sp)
1000e828:	df000404 	addi	fp,sp,16
1000e82c:	e13ffd15 	stw	r4,-12(fp)
1000e830:	e17ffe15 	stw	r5,-8(fp)
1000e834:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000e838:	e0bffd17 	ldw	r2,-12(fp)
1000e83c:	10800017 	ldw	r2,0(r2)
1000e840:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
1000e844:	e0bffc17 	ldw	r2,-16(fp)
1000e848:	10c00a04 	addi	r3,r2,40
1000e84c:	e0bffd17 	ldw	r2,-12(fp)
1000e850:	10800217 	ldw	r2,8(r2)
1000e854:	1809883a 	mov	r4,r3
1000e858:	e17ffe17 	ldw	r5,-8(fp)
1000e85c:	e1bfff17 	ldw	r6,-4(fp)
1000e860:	100f883a 	mov	r7,r2
1000e864:	000eff00 	call	1000eff0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
1000e868:	e037883a 	mov	sp,fp
1000e86c:	dfc00117 	ldw	ra,4(sp)
1000e870:	df000017 	ldw	fp,0(sp)
1000e874:	dec00204 	addi	sp,sp,8
1000e878:	f800283a 	ret

1000e87c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
1000e87c:	defffc04 	addi	sp,sp,-16
1000e880:	dfc00315 	stw	ra,12(sp)
1000e884:	df000215 	stw	fp,8(sp)
1000e888:	df000204 	addi	fp,sp,8
1000e88c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000e890:	e0bfff17 	ldw	r2,-4(fp)
1000e894:	10800017 	ldw	r2,0(r2)
1000e898:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
1000e89c:	e0bffe17 	ldw	r2,-8(fp)
1000e8a0:	10c00a04 	addi	r3,r2,40
1000e8a4:	e0bfff17 	ldw	r2,-4(fp)
1000e8a8:	10800217 	ldw	r2,8(r2)
1000e8ac:	1809883a 	mov	r4,r3
1000e8b0:	100b883a 	mov	r5,r2
1000e8b4:	000ec900 	call	1000ec90 <altera_avalon_jtag_uart_close>
}
1000e8b8:	e037883a 	mov	sp,fp
1000e8bc:	dfc00117 	ldw	ra,4(sp)
1000e8c0:	df000017 	ldw	fp,0(sp)
1000e8c4:	dec00204 	addi	sp,sp,8
1000e8c8:	f800283a 	ret

1000e8cc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
1000e8cc:	defffa04 	addi	sp,sp,-24
1000e8d0:	dfc00515 	stw	ra,20(sp)
1000e8d4:	df000415 	stw	fp,16(sp)
1000e8d8:	df000404 	addi	fp,sp,16
1000e8dc:	e13ffd15 	stw	r4,-12(fp)
1000e8e0:	e17ffe15 	stw	r5,-8(fp)
1000e8e4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
1000e8e8:	e0bffd17 	ldw	r2,-12(fp)
1000e8ec:	10800017 	ldw	r2,0(r2)
1000e8f0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
1000e8f4:	e0bffc17 	ldw	r2,-16(fp)
1000e8f8:	10800a04 	addi	r2,r2,40
1000e8fc:	1009883a 	mov	r4,r2
1000e900:	e17ffe17 	ldw	r5,-8(fp)
1000e904:	e1bfff17 	ldw	r6,-4(fp)
1000e908:	000ecf80 	call	1000ecf8 <altera_avalon_jtag_uart_ioctl>
}
1000e90c:	e037883a 	mov	sp,fp
1000e910:	dfc00117 	ldw	ra,4(sp)
1000e914:	df000017 	ldw	fp,0(sp)
1000e918:	dec00204 	addi	sp,sp,8
1000e91c:	f800283a 	ret

1000e920 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
1000e920:	defffa04 	addi	sp,sp,-24
1000e924:	dfc00515 	stw	ra,20(sp)
1000e928:	df000415 	stw	fp,16(sp)
1000e92c:	df000404 	addi	fp,sp,16
1000e930:	e13ffd15 	stw	r4,-12(fp)
1000e934:	e17ffe15 	stw	r5,-8(fp)
1000e938:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000e93c:	e0bffd17 	ldw	r2,-12(fp)
1000e940:	00c00044 	movi	r3,1
1000e944:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
1000e948:	e0bffd17 	ldw	r2,-12(fp)
1000e94c:	10800017 	ldw	r2,0(r2)
1000e950:	10800104 	addi	r2,r2,4
1000e954:	1007883a 	mov	r3,r2
1000e958:	e0bffd17 	ldw	r2,-12(fp)
1000e95c:	10800817 	ldw	r2,32(r2)
1000e960:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
1000e964:	e0fffe17 	ldw	r3,-8(fp)
1000e968:	e0bfff17 	ldw	r2,-4(fp)
1000e96c:	d8000015 	stw	zero,0(sp)
1000e970:	1809883a 	mov	r4,r3
1000e974:	100b883a 	mov	r5,r2
1000e978:	01840074 	movhi	r6,4097
1000e97c:	31ba7904 	addi	r6,r6,-5660
1000e980:	e1fffd17 	ldw	r7,-12(fp)
1000e984:	000f52c0 	call	1000f52c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
1000e988:	e0bffd17 	ldw	r2,-12(fp)
1000e98c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
1000e990:	e0bffd17 	ldw	r2,-12(fp)
1000e994:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
1000e998:	00840074 	movhi	r2,4097
1000e99c:	10919704 	addi	r2,r2,18012
1000e9a0:	10800017 	ldw	r2,0(r2)
1000e9a4:	1809883a 	mov	r4,r3
1000e9a8:	100b883a 	mov	r5,r2
1000e9ac:	01840074 	movhi	r6,4097
1000e9b0:	31bafa04 	addi	r6,r6,-5144
1000e9b4:	e1fffd17 	ldw	r7,-12(fp)
1000e9b8:	000f2080 	call	1000f208 <alt_alarm_start>
1000e9bc:	1000040e 	bge	r2,zero,1000e9d0 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
1000e9c0:	e0fffd17 	ldw	r3,-12(fp)
1000e9c4:	00a00034 	movhi	r2,32768
1000e9c8:	10bfffc4 	addi	r2,r2,-1
1000e9cc:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
1000e9d0:	e037883a 	mov	sp,fp
1000e9d4:	dfc00117 	ldw	ra,4(sp)
1000e9d8:	df000017 	ldw	fp,0(sp)
1000e9dc:	dec00204 	addi	sp,sp,8
1000e9e0:	f800283a 	ret

1000e9e4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
1000e9e4:	defff804 	addi	sp,sp,-32
1000e9e8:	df000715 	stw	fp,28(sp)
1000e9ec:	df000704 	addi	fp,sp,28
1000e9f0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
1000e9f4:	e0bfff17 	ldw	r2,-4(fp)
1000e9f8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
1000e9fc:	e0bffb17 	ldw	r2,-20(fp)
1000ea00:	10800017 	ldw	r2,0(r2)
1000ea04:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000ea08:	e0bffc17 	ldw	r2,-16(fp)
1000ea0c:	10800104 	addi	r2,r2,4
1000ea10:	10800037 	ldwio	r2,0(r2)
1000ea14:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
1000ea18:	e0bffd17 	ldw	r2,-12(fp)
1000ea1c:	1080c00c 	andi	r2,r2,768
1000ea20:	1000011e 	bne	r2,zero,1000ea28 <altera_avalon_jtag_uart_irq+0x44>
      break;
1000ea24:	00006c06 	br	1000ebd8 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
1000ea28:	e0bffd17 	ldw	r2,-12(fp)
1000ea2c:	1080400c 	andi	r2,r2,256
1000ea30:	10003426 	beq	r2,zero,1000eb04 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
1000ea34:	00800074 	movhi	r2,1
1000ea38:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000ea3c:	e0bffb17 	ldw	r2,-20(fp)
1000ea40:	10800a17 	ldw	r2,40(r2)
1000ea44:	10800044 	addi	r2,r2,1
1000ea48:	1081ffcc 	andi	r2,r2,2047
1000ea4c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
1000ea50:	e0bffb17 	ldw	r2,-20(fp)
1000ea54:	10c00b17 	ldw	r3,44(r2)
1000ea58:	e0bffe17 	ldw	r2,-8(fp)
1000ea5c:	1880011e 	bne	r3,r2,1000ea64 <altera_avalon_jtag_uart_irq+0x80>
          break;
1000ea60:	00001606 	br	1000eabc <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
1000ea64:	e0bffc17 	ldw	r2,-16(fp)
1000ea68:	10800037 	ldwio	r2,0(r2)
1000ea6c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
1000ea70:	e0bff917 	ldw	r2,-28(fp)
1000ea74:	10a0000c 	andi	r2,r2,32768
1000ea78:	1000011e 	bne	r2,zero,1000ea80 <altera_avalon_jtag_uart_irq+0x9c>
          break;
1000ea7c:	00000f06 	br	1000eabc <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
1000ea80:	e0bffb17 	ldw	r2,-20(fp)
1000ea84:	10800a17 	ldw	r2,40(r2)
1000ea88:	e0fff917 	ldw	r3,-28(fp)
1000ea8c:	1809883a 	mov	r4,r3
1000ea90:	e0fffb17 	ldw	r3,-20(fp)
1000ea94:	1885883a 	add	r2,r3,r2
1000ea98:	10800e04 	addi	r2,r2,56
1000ea9c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000eaa0:	e0bffb17 	ldw	r2,-20(fp)
1000eaa4:	10800a17 	ldw	r2,40(r2)
1000eaa8:	10800044 	addi	r2,r2,1
1000eaac:	10c1ffcc 	andi	r3,r2,2047
1000eab0:	e0bffb17 	ldw	r2,-20(fp)
1000eab4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
1000eab8:	003fe006 	br	1000ea3c <__alt_data_end+0xf800ea3c>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
1000eabc:	e0bff917 	ldw	r2,-28(fp)
1000eac0:	10bfffec 	andhi	r2,r2,65535
1000eac4:	10000f26 	beq	r2,zero,1000eb04 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000eac8:	e0bffb17 	ldw	r2,-20(fp)
1000eacc:	10c00817 	ldw	r3,32(r2)
1000ead0:	00bfff84 	movi	r2,-2
1000ead4:	1886703a 	and	r3,r3,r2
1000ead8:	e0bffb17 	ldw	r2,-20(fp)
1000eadc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
1000eae0:	e0bffc17 	ldw	r2,-16(fp)
1000eae4:	10800104 	addi	r2,r2,4
1000eae8:	1007883a 	mov	r3,r2
1000eaec:	e0bffb17 	ldw	r2,-20(fp)
1000eaf0:	10800817 	ldw	r2,32(r2)
1000eaf4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000eaf8:	e0bffc17 	ldw	r2,-16(fp)
1000eafc:	10800104 	addi	r2,r2,4
1000eb00:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
1000eb04:	e0bffd17 	ldw	r2,-12(fp)
1000eb08:	1080800c 	andi	r2,r2,512
1000eb0c:	10003126 	beq	r2,zero,1000ebd4 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
1000eb10:	e0bffd17 	ldw	r2,-12(fp)
1000eb14:	1004d43a 	srli	r2,r2,16
1000eb18:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
1000eb1c:	00001406 	br	1000eb70 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
1000eb20:	e0bffc17 	ldw	r2,-16(fp)
1000eb24:	e0fffb17 	ldw	r3,-20(fp)
1000eb28:	18c00d17 	ldw	r3,52(r3)
1000eb2c:	e13ffb17 	ldw	r4,-20(fp)
1000eb30:	20c7883a 	add	r3,r4,r3
1000eb34:	18c20e04 	addi	r3,r3,2104
1000eb38:	18c00003 	ldbu	r3,0(r3)
1000eb3c:	18c03fcc 	andi	r3,r3,255
1000eb40:	18c0201c 	xori	r3,r3,128
1000eb44:	18ffe004 	addi	r3,r3,-128
1000eb48:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000eb4c:	e0bffb17 	ldw	r2,-20(fp)
1000eb50:	10800d17 	ldw	r2,52(r2)
1000eb54:	10800044 	addi	r2,r2,1
1000eb58:	10c1ffcc 	andi	r3,r2,2047
1000eb5c:	e0bffb17 	ldw	r2,-20(fp)
1000eb60:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
1000eb64:	e0bffa17 	ldw	r2,-24(fp)
1000eb68:	10bfffc4 	addi	r2,r2,-1
1000eb6c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
1000eb70:	e0bffa17 	ldw	r2,-24(fp)
1000eb74:	10000526 	beq	r2,zero,1000eb8c <altera_avalon_jtag_uart_irq+0x1a8>
1000eb78:	e0bffb17 	ldw	r2,-20(fp)
1000eb7c:	10c00d17 	ldw	r3,52(r2)
1000eb80:	e0bffb17 	ldw	r2,-20(fp)
1000eb84:	10800c17 	ldw	r2,48(r2)
1000eb88:	18bfe51e 	bne	r3,r2,1000eb20 <__alt_data_end+0xf800eb20>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
1000eb8c:	e0bffa17 	ldw	r2,-24(fp)
1000eb90:	10001026 	beq	r2,zero,1000ebd4 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1000eb94:	e0bffb17 	ldw	r2,-20(fp)
1000eb98:	10c00817 	ldw	r3,32(r2)
1000eb9c:	00bfff44 	movi	r2,-3
1000eba0:	1886703a 	and	r3,r3,r2
1000eba4:	e0bffb17 	ldw	r2,-20(fp)
1000eba8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000ebac:	e0bffb17 	ldw	r2,-20(fp)
1000ebb0:	10800017 	ldw	r2,0(r2)
1000ebb4:	10800104 	addi	r2,r2,4
1000ebb8:	1007883a 	mov	r3,r2
1000ebbc:	e0bffb17 	ldw	r2,-20(fp)
1000ebc0:	10800817 	ldw	r2,32(r2)
1000ebc4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000ebc8:	e0bffc17 	ldw	r2,-16(fp)
1000ebcc:	10800104 	addi	r2,r2,4
1000ebd0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
1000ebd4:	003f8c06 	br	1000ea08 <__alt_data_end+0xf800ea08>
}
1000ebd8:	e037883a 	mov	sp,fp
1000ebdc:	df000017 	ldw	fp,0(sp)
1000ebe0:	dec00104 	addi	sp,sp,4
1000ebe4:	f800283a 	ret

1000ebe8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
1000ebe8:	defff804 	addi	sp,sp,-32
1000ebec:	df000715 	stw	fp,28(sp)
1000ebf0:	df000704 	addi	fp,sp,28
1000ebf4:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
1000ebf8:	e0bffb17 	ldw	r2,-20(fp)
1000ebfc:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
1000ec00:	e0bff917 	ldw	r2,-28(fp)
1000ec04:	10800017 	ldw	r2,0(r2)
1000ec08:	10800104 	addi	r2,r2,4
1000ec0c:	10800037 	ldwio	r2,0(r2)
1000ec10:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
1000ec14:	e0bffa17 	ldw	r2,-24(fp)
1000ec18:	1081000c 	andi	r2,r2,1024
1000ec1c:	10000b26 	beq	r2,zero,1000ec4c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
1000ec20:	e0bff917 	ldw	r2,-28(fp)
1000ec24:	10800017 	ldw	r2,0(r2)
1000ec28:	10800104 	addi	r2,r2,4
1000ec2c:	1007883a 	mov	r3,r2
1000ec30:	e0bff917 	ldw	r2,-28(fp)
1000ec34:	10800817 	ldw	r2,32(r2)
1000ec38:	10810014 	ori	r2,r2,1024
1000ec3c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
1000ec40:	e0bff917 	ldw	r2,-28(fp)
1000ec44:	10000915 	stw	zero,36(r2)
1000ec48:	00000a06 	br	1000ec74 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
1000ec4c:	e0bff917 	ldw	r2,-28(fp)
1000ec50:	10c00917 	ldw	r3,36(r2)
1000ec54:	00a00034 	movhi	r2,32768
1000ec58:	10bfff04 	addi	r2,r2,-4
1000ec5c:	10c00536 	bltu	r2,r3,1000ec74 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
1000ec60:	e0bff917 	ldw	r2,-28(fp)
1000ec64:	10800917 	ldw	r2,36(r2)
1000ec68:	10c00044 	addi	r3,r2,1
1000ec6c:	e0bff917 	ldw	r2,-28(fp)
1000ec70:	10c00915 	stw	r3,36(r2)
1000ec74:	00840074 	movhi	r2,4097
1000ec78:	10919704 	addi	r2,r2,18012
1000ec7c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
1000ec80:	e037883a 	mov	sp,fp
1000ec84:	df000017 	ldw	fp,0(sp)
1000ec88:	dec00104 	addi	sp,sp,4
1000ec8c:	f800283a 	ret

1000ec90 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
1000ec90:	defffd04 	addi	sp,sp,-12
1000ec94:	df000215 	stw	fp,8(sp)
1000ec98:	df000204 	addi	fp,sp,8
1000ec9c:	e13ffe15 	stw	r4,-8(fp)
1000eca0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1000eca4:	00000506 	br	1000ecbc <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
1000eca8:	e0bfff17 	ldw	r2,-4(fp)
1000ecac:	1090000c 	andi	r2,r2,16384
1000ecb0:	10000226 	beq	r2,zero,1000ecbc <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
1000ecb4:	00bffd44 	movi	r2,-11
1000ecb8:	00000b06 	br	1000ece8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1000ecbc:	e0bffe17 	ldw	r2,-8(fp)
1000ecc0:	10c00d17 	ldw	r3,52(r2)
1000ecc4:	e0bffe17 	ldw	r2,-8(fp)
1000ecc8:	10800c17 	ldw	r2,48(r2)
1000eccc:	18800526 	beq	r3,r2,1000ece4 <altera_avalon_jtag_uart_close+0x54>
1000ecd0:	e0bffe17 	ldw	r2,-8(fp)
1000ecd4:	10c00917 	ldw	r3,36(r2)
1000ecd8:	e0bffe17 	ldw	r2,-8(fp)
1000ecdc:	10800117 	ldw	r2,4(r2)
1000ece0:	18bff136 	bltu	r3,r2,1000eca8 <__alt_data_end+0xf800eca8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
1000ece4:	0005883a 	mov	r2,zero
}
1000ece8:	e037883a 	mov	sp,fp
1000ecec:	df000017 	ldw	fp,0(sp)
1000ecf0:	dec00104 	addi	sp,sp,4
1000ecf4:	f800283a 	ret

1000ecf8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
1000ecf8:	defffa04 	addi	sp,sp,-24
1000ecfc:	df000515 	stw	fp,20(sp)
1000ed00:	df000504 	addi	fp,sp,20
1000ed04:	e13ffd15 	stw	r4,-12(fp)
1000ed08:	e17ffe15 	stw	r5,-8(fp)
1000ed0c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
1000ed10:	00bff9c4 	movi	r2,-25
1000ed14:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
1000ed18:	e0bffe17 	ldw	r2,-8(fp)
1000ed1c:	10da8060 	cmpeqi	r3,r2,27137
1000ed20:	1800031e 	bne	r3,zero,1000ed30 <altera_avalon_jtag_uart_ioctl+0x38>
1000ed24:	109a80a0 	cmpeqi	r2,r2,27138
1000ed28:	1000191e 	bne	r2,zero,1000ed90 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
1000ed2c:	00002806 	br	1000edd0 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
1000ed30:	e0bffd17 	ldw	r2,-12(fp)
1000ed34:	10c00117 	ldw	r3,4(r2)
1000ed38:	00a00034 	movhi	r2,32768
1000ed3c:	10bfffc4 	addi	r2,r2,-1
1000ed40:	18801226 	beq	r3,r2,1000ed8c <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
1000ed44:	e0bfff17 	ldw	r2,-4(fp)
1000ed48:	10800017 	ldw	r2,0(r2)
1000ed4c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
1000ed50:	e0bffc17 	ldw	r2,-16(fp)
1000ed54:	10800090 	cmplti	r2,r2,2
1000ed58:	1000061e 	bne	r2,zero,1000ed74 <altera_avalon_jtag_uart_ioctl+0x7c>
1000ed5c:	e0fffc17 	ldw	r3,-16(fp)
1000ed60:	00a00034 	movhi	r2,32768
1000ed64:	10bfffc4 	addi	r2,r2,-1
1000ed68:	18800226 	beq	r3,r2,1000ed74 <altera_avalon_jtag_uart_ioctl+0x7c>
1000ed6c:	e0bffc17 	ldw	r2,-16(fp)
1000ed70:	00000206 	br	1000ed7c <altera_avalon_jtag_uart_ioctl+0x84>
1000ed74:	00a00034 	movhi	r2,32768
1000ed78:	10bfff84 	addi	r2,r2,-2
1000ed7c:	e0fffd17 	ldw	r3,-12(fp)
1000ed80:	18800115 	stw	r2,4(r3)
      rc = 0;
1000ed84:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1000ed88:	00001106 	br	1000edd0 <altera_avalon_jtag_uart_ioctl+0xd8>
1000ed8c:	00001006 	br	1000edd0 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
1000ed90:	e0bffd17 	ldw	r2,-12(fp)
1000ed94:	10c00117 	ldw	r3,4(r2)
1000ed98:	00a00034 	movhi	r2,32768
1000ed9c:	10bfffc4 	addi	r2,r2,-1
1000eda0:	18800a26 	beq	r3,r2,1000edcc <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
1000eda4:	e0bffd17 	ldw	r2,-12(fp)
1000eda8:	10c00917 	ldw	r3,36(r2)
1000edac:	e0bffd17 	ldw	r2,-12(fp)
1000edb0:	10800117 	ldw	r2,4(r2)
1000edb4:	1885803a 	cmpltu	r2,r3,r2
1000edb8:	10c03fcc 	andi	r3,r2,255
1000edbc:	e0bfff17 	ldw	r2,-4(fp)
1000edc0:	10c00015 	stw	r3,0(r2)
      rc = 0;
1000edc4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1000edc8:	00000006 	br	1000edcc <altera_avalon_jtag_uart_ioctl+0xd4>
1000edcc:	0001883a 	nop

  default:
    break;
  }

  return rc;
1000edd0:	e0bffb17 	ldw	r2,-20(fp)
}
1000edd4:	e037883a 	mov	sp,fp
1000edd8:	df000017 	ldw	fp,0(sp)
1000eddc:	dec00104 	addi	sp,sp,4
1000ede0:	f800283a 	ret

1000ede4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
1000ede4:	defff304 	addi	sp,sp,-52
1000ede8:	dfc00c15 	stw	ra,48(sp)
1000edec:	df000b15 	stw	fp,44(sp)
1000edf0:	df000b04 	addi	fp,sp,44
1000edf4:	e13ffc15 	stw	r4,-16(fp)
1000edf8:	e17ffd15 	stw	r5,-12(fp)
1000edfc:	e1bffe15 	stw	r6,-8(fp)
1000ee00:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
1000ee04:	e0bffd17 	ldw	r2,-12(fp)
1000ee08:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1000ee0c:	00004906 	br	1000ef34 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
1000ee10:	e0bffc17 	ldw	r2,-16(fp)
1000ee14:	10800a17 	ldw	r2,40(r2)
1000ee18:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
1000ee1c:	e0bffc17 	ldw	r2,-16(fp)
1000ee20:	10800b17 	ldw	r2,44(r2)
1000ee24:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
1000ee28:	e0fff717 	ldw	r3,-36(fp)
1000ee2c:	e0bff817 	ldw	r2,-32(fp)
1000ee30:	18800536 	bltu	r3,r2,1000ee48 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
1000ee34:	e0fff717 	ldw	r3,-36(fp)
1000ee38:	e0bff817 	ldw	r2,-32(fp)
1000ee3c:	1885c83a 	sub	r2,r3,r2
1000ee40:	e0bff615 	stw	r2,-40(fp)
1000ee44:	00000406 	br	1000ee58 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
1000ee48:	00c20004 	movi	r3,2048
1000ee4c:	e0bff817 	ldw	r2,-32(fp)
1000ee50:	1885c83a 	sub	r2,r3,r2
1000ee54:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1000ee58:	e0bff617 	ldw	r2,-40(fp)
1000ee5c:	1000011e 	bne	r2,zero,1000ee64 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
1000ee60:	00001d06 	br	1000eed8 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
1000ee64:	e0fffe17 	ldw	r3,-8(fp)
1000ee68:	e0bff617 	ldw	r2,-40(fp)
1000ee6c:	1880022e 	bgeu	r3,r2,1000ee78 <altera_avalon_jtag_uart_read+0x94>
        n = space;
1000ee70:	e0bffe17 	ldw	r2,-8(fp)
1000ee74:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
1000ee78:	e0bff817 	ldw	r2,-32(fp)
1000ee7c:	10800e04 	addi	r2,r2,56
1000ee80:	e0fffc17 	ldw	r3,-16(fp)
1000ee84:	1885883a 	add	r2,r3,r2
1000ee88:	e13ff517 	ldw	r4,-44(fp)
1000ee8c:	100b883a 	mov	r5,r2
1000ee90:	e1bff617 	ldw	r6,-40(fp)
1000ee94:	0001b800 	call	10001b80 <memcpy>
      ptr   += n;
1000ee98:	e0fff517 	ldw	r3,-44(fp)
1000ee9c:	e0bff617 	ldw	r2,-40(fp)
1000eea0:	1885883a 	add	r2,r3,r2
1000eea4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
1000eea8:	e0fffe17 	ldw	r3,-8(fp)
1000eeac:	e0bff617 	ldw	r2,-40(fp)
1000eeb0:	1885c83a 	sub	r2,r3,r2
1000eeb4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000eeb8:	e0fff817 	ldw	r3,-32(fp)
1000eebc:	e0bff617 	ldw	r2,-40(fp)
1000eec0:	1885883a 	add	r2,r3,r2
1000eec4:	10c1ffcc 	andi	r3,r2,2047
1000eec8:	e0bffc17 	ldw	r2,-16(fp)
1000eecc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
1000eed0:	e0bffe17 	ldw	r2,-8(fp)
1000eed4:	00bfce16 	blt	zero,r2,1000ee10 <__alt_data_end+0xf800ee10>

    /* If we read any data then return it */
    if (ptr != buffer)
1000eed8:	e0fff517 	ldw	r3,-44(fp)
1000eedc:	e0bffd17 	ldw	r2,-12(fp)
1000eee0:	18800126 	beq	r3,r2,1000eee8 <altera_avalon_jtag_uart_read+0x104>
      break;
1000eee4:	00001506 	br	1000ef3c <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
1000eee8:	e0bfff17 	ldw	r2,-4(fp)
1000eeec:	1090000c 	andi	r2,r2,16384
1000eef0:	10000126 	beq	r2,zero,1000eef8 <altera_avalon_jtag_uart_read+0x114>
      break;
1000eef4:	00001106 	br	1000ef3c <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
1000eef8:	0001883a 	nop
1000eefc:	e0bffc17 	ldw	r2,-16(fp)
1000ef00:	10c00a17 	ldw	r3,40(r2)
1000ef04:	e0bff717 	ldw	r2,-36(fp)
1000ef08:	1880051e 	bne	r3,r2,1000ef20 <altera_avalon_jtag_uart_read+0x13c>
1000ef0c:	e0bffc17 	ldw	r2,-16(fp)
1000ef10:	10c00917 	ldw	r3,36(r2)
1000ef14:	e0bffc17 	ldw	r2,-16(fp)
1000ef18:	10800117 	ldw	r2,4(r2)
1000ef1c:	18bff736 	bltu	r3,r2,1000eefc <__alt_data_end+0xf800eefc>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
1000ef20:	e0bffc17 	ldw	r2,-16(fp)
1000ef24:	10c00a17 	ldw	r3,40(r2)
1000ef28:	e0bff717 	ldw	r2,-36(fp)
1000ef2c:	1880011e 	bne	r3,r2,1000ef34 <altera_avalon_jtag_uart_read+0x150>
      break;
1000ef30:	00000206 	br	1000ef3c <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1000ef34:	e0bffe17 	ldw	r2,-8(fp)
1000ef38:	00bfb516 	blt	zero,r2,1000ee10 <__alt_data_end+0xf800ee10>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
1000ef3c:	e0fff517 	ldw	r3,-44(fp)
1000ef40:	e0bffd17 	ldw	r2,-12(fp)
1000ef44:	18801826 	beq	r3,r2,1000efa8 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000ef48:	0005303a 	rdctl	r2,status
1000ef4c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000ef50:	e0fffa17 	ldw	r3,-24(fp)
1000ef54:	00bfff84 	movi	r2,-2
1000ef58:	1884703a 	and	r2,r3,r2
1000ef5c:	1001703a 	wrctl	status,r2
  
  return context;
1000ef60:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
1000ef64:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000ef68:	e0bffc17 	ldw	r2,-16(fp)
1000ef6c:	10800817 	ldw	r2,32(r2)
1000ef70:	10c00054 	ori	r3,r2,1
1000ef74:	e0bffc17 	ldw	r2,-16(fp)
1000ef78:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000ef7c:	e0bffc17 	ldw	r2,-16(fp)
1000ef80:	10800017 	ldw	r2,0(r2)
1000ef84:	10800104 	addi	r2,r2,4
1000ef88:	1007883a 	mov	r3,r2
1000ef8c:	e0bffc17 	ldw	r2,-16(fp)
1000ef90:	10800817 	ldw	r2,32(r2)
1000ef94:	18800035 	stwio	r2,0(r3)
1000ef98:	e0bff917 	ldw	r2,-28(fp)
1000ef9c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000efa0:	e0bffb17 	ldw	r2,-20(fp)
1000efa4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
1000efa8:	e0fff517 	ldw	r3,-44(fp)
1000efac:	e0bffd17 	ldw	r2,-12(fp)
1000efb0:	18800426 	beq	r3,r2,1000efc4 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
1000efb4:	e0fff517 	ldw	r3,-44(fp)
1000efb8:	e0bffd17 	ldw	r2,-12(fp)
1000efbc:	1885c83a 	sub	r2,r3,r2
1000efc0:	00000606 	br	1000efdc <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
1000efc4:	e0bfff17 	ldw	r2,-4(fp)
1000efc8:	1090000c 	andi	r2,r2,16384
1000efcc:	10000226 	beq	r2,zero,1000efd8 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
1000efd0:	00bffd44 	movi	r2,-11
1000efd4:	00000106 	br	1000efdc <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
1000efd8:	00bffec4 	movi	r2,-5
}
1000efdc:	e037883a 	mov	sp,fp
1000efe0:	dfc00117 	ldw	ra,4(sp)
1000efe4:	df000017 	ldw	fp,0(sp)
1000efe8:	dec00204 	addi	sp,sp,8
1000efec:	f800283a 	ret

1000eff0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
1000eff0:	defff304 	addi	sp,sp,-52
1000eff4:	dfc00c15 	stw	ra,48(sp)
1000eff8:	df000b15 	stw	fp,44(sp)
1000effc:	df000b04 	addi	fp,sp,44
1000f000:	e13ffc15 	stw	r4,-16(fp)
1000f004:	e17ffd15 	stw	r5,-12(fp)
1000f008:	e1bffe15 	stw	r6,-8(fp)
1000f00c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
1000f010:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
1000f014:	e0bffd17 	ldw	r2,-12(fp)
1000f018:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1000f01c:	00003806 	br	1000f100 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
1000f020:	e0bffc17 	ldw	r2,-16(fp)
1000f024:	10800c17 	ldw	r2,48(r2)
1000f028:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
1000f02c:	e0bffc17 	ldw	r2,-16(fp)
1000f030:	10800d17 	ldw	r2,52(r2)
1000f034:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
1000f038:	e0fff817 	ldw	r3,-32(fp)
1000f03c:	e0bff517 	ldw	r2,-44(fp)
1000f040:	1880062e 	bgeu	r3,r2,1000f05c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
1000f044:	e0fff517 	ldw	r3,-44(fp)
1000f048:	e0bff817 	ldw	r2,-32(fp)
1000f04c:	1885c83a 	sub	r2,r3,r2
1000f050:	10bfffc4 	addi	r2,r2,-1
1000f054:	e0bff615 	stw	r2,-40(fp)
1000f058:	00000b06 	br	1000f088 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
1000f05c:	e0bff517 	ldw	r2,-44(fp)
1000f060:	10000526 	beq	r2,zero,1000f078 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
1000f064:	00c20004 	movi	r3,2048
1000f068:	e0bff817 	ldw	r2,-32(fp)
1000f06c:	1885c83a 	sub	r2,r3,r2
1000f070:	e0bff615 	stw	r2,-40(fp)
1000f074:	00000406 	br	1000f088 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
1000f078:	00c1ffc4 	movi	r3,2047
1000f07c:	e0bff817 	ldw	r2,-32(fp)
1000f080:	1885c83a 	sub	r2,r3,r2
1000f084:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1000f088:	e0bff617 	ldw	r2,-40(fp)
1000f08c:	1000011e 	bne	r2,zero,1000f094 <altera_avalon_jtag_uart_write+0xa4>
        break;
1000f090:	00001d06 	br	1000f108 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
1000f094:	e0fffe17 	ldw	r3,-8(fp)
1000f098:	e0bff617 	ldw	r2,-40(fp)
1000f09c:	1880022e 	bgeu	r3,r2,1000f0a8 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
1000f0a0:	e0bffe17 	ldw	r2,-8(fp)
1000f0a4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
1000f0a8:	e0bff817 	ldw	r2,-32(fp)
1000f0ac:	10820e04 	addi	r2,r2,2104
1000f0b0:	e0fffc17 	ldw	r3,-16(fp)
1000f0b4:	1885883a 	add	r2,r3,r2
1000f0b8:	1009883a 	mov	r4,r2
1000f0bc:	e17ffd17 	ldw	r5,-12(fp)
1000f0c0:	e1bff617 	ldw	r6,-40(fp)
1000f0c4:	0001b800 	call	10001b80 <memcpy>
      ptr   += n;
1000f0c8:	e0fffd17 	ldw	r3,-12(fp)
1000f0cc:	e0bff617 	ldw	r2,-40(fp)
1000f0d0:	1885883a 	add	r2,r3,r2
1000f0d4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
1000f0d8:	e0fffe17 	ldw	r3,-8(fp)
1000f0dc:	e0bff617 	ldw	r2,-40(fp)
1000f0e0:	1885c83a 	sub	r2,r3,r2
1000f0e4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000f0e8:	e0fff817 	ldw	r3,-32(fp)
1000f0ec:	e0bff617 	ldw	r2,-40(fp)
1000f0f0:	1885883a 	add	r2,r3,r2
1000f0f4:	10c1ffcc 	andi	r3,r2,2047
1000f0f8:	e0bffc17 	ldw	r2,-16(fp)
1000f0fc:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1000f100:	e0bffe17 	ldw	r2,-8(fp)
1000f104:	00bfc616 	blt	zero,r2,1000f020 <__alt_data_end+0xf800f020>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000f108:	0005303a 	rdctl	r2,status
1000f10c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000f110:	e0fffa17 	ldw	r3,-24(fp)
1000f114:	00bfff84 	movi	r2,-2
1000f118:	1884703a 	and	r2,r3,r2
1000f11c:	1001703a 	wrctl	status,r2
  
  return context;
1000f120:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
1000f124:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1000f128:	e0bffc17 	ldw	r2,-16(fp)
1000f12c:	10800817 	ldw	r2,32(r2)
1000f130:	10c00094 	ori	r3,r2,2
1000f134:	e0bffc17 	ldw	r2,-16(fp)
1000f138:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000f13c:	e0bffc17 	ldw	r2,-16(fp)
1000f140:	10800017 	ldw	r2,0(r2)
1000f144:	10800104 	addi	r2,r2,4
1000f148:	1007883a 	mov	r3,r2
1000f14c:	e0bffc17 	ldw	r2,-16(fp)
1000f150:	10800817 	ldw	r2,32(r2)
1000f154:	18800035 	stwio	r2,0(r3)
1000f158:	e0bff917 	ldw	r2,-28(fp)
1000f15c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000f160:	e0bffb17 	ldw	r2,-20(fp)
1000f164:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
1000f168:	e0bffe17 	ldw	r2,-8(fp)
1000f16c:	0080120e 	bge	zero,r2,1000f1b8 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
1000f170:	e0bfff17 	ldw	r2,-4(fp)
1000f174:	1090000c 	andi	r2,r2,16384
1000f178:	10000126 	beq	r2,zero,1000f180 <altera_avalon_jtag_uart_write+0x190>
        break;
1000f17c:	00001006 	br	1000f1c0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
1000f180:	0001883a 	nop
1000f184:	e0bffc17 	ldw	r2,-16(fp)
1000f188:	10c00d17 	ldw	r3,52(r2)
1000f18c:	e0bff517 	ldw	r2,-44(fp)
1000f190:	1880051e 	bne	r3,r2,1000f1a8 <altera_avalon_jtag_uart_write+0x1b8>
1000f194:	e0bffc17 	ldw	r2,-16(fp)
1000f198:	10c00917 	ldw	r3,36(r2)
1000f19c:	e0bffc17 	ldw	r2,-16(fp)
1000f1a0:	10800117 	ldw	r2,4(r2)
1000f1a4:	18bff736 	bltu	r3,r2,1000f184 <__alt_data_end+0xf800f184>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
1000f1a8:	e0bffc17 	ldw	r2,-16(fp)
1000f1ac:	10800917 	ldw	r2,36(r2)
1000f1b0:	10000126 	beq	r2,zero,1000f1b8 <altera_avalon_jtag_uart_write+0x1c8>
         break;
1000f1b4:	00000206 	br	1000f1c0 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
1000f1b8:	e0bffe17 	ldw	r2,-8(fp)
1000f1bc:	00bf9716 	blt	zero,r2,1000f01c <__alt_data_end+0xf800f01c>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
1000f1c0:	e0fffd17 	ldw	r3,-12(fp)
1000f1c4:	e0bff717 	ldw	r2,-36(fp)
1000f1c8:	18800426 	beq	r3,r2,1000f1dc <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
1000f1cc:	e0fffd17 	ldw	r3,-12(fp)
1000f1d0:	e0bff717 	ldw	r2,-36(fp)
1000f1d4:	1885c83a 	sub	r2,r3,r2
1000f1d8:	00000606 	br	1000f1f4 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
1000f1dc:	e0bfff17 	ldw	r2,-4(fp)
1000f1e0:	1090000c 	andi	r2,r2,16384
1000f1e4:	10000226 	beq	r2,zero,1000f1f0 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
1000f1e8:	00bffd44 	movi	r2,-11
1000f1ec:	00000106 	br	1000f1f4 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
1000f1f0:	00bffec4 	movi	r2,-5
}
1000f1f4:	e037883a 	mov	sp,fp
1000f1f8:	dfc00117 	ldw	ra,4(sp)
1000f1fc:	df000017 	ldw	fp,0(sp)
1000f200:	dec00204 	addi	sp,sp,8
1000f204:	f800283a 	ret

1000f208 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
1000f208:	defff504 	addi	sp,sp,-44
1000f20c:	df000a15 	stw	fp,40(sp)
1000f210:	df000a04 	addi	fp,sp,40
1000f214:	e13ffc15 	stw	r4,-16(fp)
1000f218:	e17ffd15 	stw	r5,-12(fp)
1000f21c:	e1bffe15 	stw	r6,-8(fp)
1000f220:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
1000f224:	e03ff615 	stw	zero,-40(fp)
1000f228:	00840074 	movhi	r2,4097
1000f22c:	10919704 	addi	r2,r2,18012
1000f230:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
1000f234:	10003f26 	beq	r2,zero,1000f334 <alt_alarm_start+0x12c>
  {
    if (alarm)
1000f238:	e0bffc17 	ldw	r2,-16(fp)
1000f23c:	10003b26 	beq	r2,zero,1000f32c <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
1000f240:	e0bffc17 	ldw	r2,-16(fp)
1000f244:	e0fffe17 	ldw	r3,-8(fp)
1000f248:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
1000f24c:	e0bffc17 	ldw	r2,-16(fp)
1000f250:	e0ffff17 	ldw	r3,-4(fp)
1000f254:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000f258:	0005303a 	rdctl	r2,status
1000f25c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000f260:	e0fff817 	ldw	r3,-32(fp)
1000f264:	00bfff84 	movi	r2,-2
1000f268:	1884703a 	and	r2,r3,r2
1000f26c:	1001703a 	wrctl	status,r2
  
  return context;
1000f270:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
1000f274:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
1000f278:	00840074 	movhi	r2,4097
1000f27c:	10919804 	addi	r2,r2,18016
1000f280:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
1000f284:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
1000f288:	e0fffd17 	ldw	r3,-12(fp)
1000f28c:	e0bff617 	ldw	r2,-40(fp)
1000f290:	1885883a 	add	r2,r3,r2
1000f294:	10c00044 	addi	r3,r2,1
1000f298:	e0bffc17 	ldw	r2,-16(fp)
1000f29c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
1000f2a0:	e0bffc17 	ldw	r2,-16(fp)
1000f2a4:	10c00217 	ldw	r3,8(r2)
1000f2a8:	e0bff617 	ldw	r2,-40(fp)
1000f2ac:	1880042e 	bgeu	r3,r2,1000f2c0 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
1000f2b0:	e0bffc17 	ldw	r2,-16(fp)
1000f2b4:	00c00044 	movi	r3,1
1000f2b8:	10c00405 	stb	r3,16(r2)
1000f2bc:	00000206 	br	1000f2c8 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
1000f2c0:	e0bffc17 	ldw	r2,-16(fp)
1000f2c4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
1000f2c8:	e0fffc17 	ldw	r3,-16(fp)
1000f2cc:	00840074 	movhi	r2,4097
1000f2d0:	108ac004 	addi	r2,r2,11008
1000f2d4:	e0bff915 	stw	r2,-28(fp)
1000f2d8:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1000f2dc:	e0bffa17 	ldw	r2,-24(fp)
1000f2e0:	e0fff917 	ldw	r3,-28(fp)
1000f2e4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1000f2e8:	e0bff917 	ldw	r2,-28(fp)
1000f2ec:	10c00017 	ldw	r3,0(r2)
1000f2f0:	e0bffa17 	ldw	r2,-24(fp)
1000f2f4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1000f2f8:	e0bff917 	ldw	r2,-28(fp)
1000f2fc:	10800017 	ldw	r2,0(r2)
1000f300:	e0fffa17 	ldw	r3,-24(fp)
1000f304:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1000f308:	e0bff917 	ldw	r2,-28(fp)
1000f30c:	e0fffa17 	ldw	r3,-24(fp)
1000f310:	10c00015 	stw	r3,0(r2)
1000f314:	e0bff717 	ldw	r2,-36(fp)
1000f318:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000f31c:	e0bffb17 	ldw	r2,-20(fp)
1000f320:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
1000f324:	0005883a 	mov	r2,zero
1000f328:	00000306 	br	1000f338 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
1000f32c:	00bffa84 	movi	r2,-22
1000f330:	00000106 	br	1000f338 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
1000f334:	00bfde84 	movi	r2,-134
  }
}
1000f338:	e037883a 	mov	sp,fp
1000f33c:	df000017 	ldw	fp,0(sp)
1000f340:	dec00104 	addi	sp,sp,4
1000f344:	f800283a 	ret

1000f348 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
1000f348:	deffff04 	addi	sp,sp,-4
1000f34c:	df000015 	stw	fp,0(sp)
1000f350:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
1000f354:	e037883a 	mov	sp,fp
1000f358:	df000017 	ldw	fp,0(sp)
1000f35c:	dec00104 	addi	sp,sp,4
1000f360:	f800283a 	ret

1000f364 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f364:	defffe04 	addi	sp,sp,-8
1000f368:	dfc00115 	stw	ra,4(sp)
1000f36c:	df000015 	stw	fp,0(sp)
1000f370:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f374:	00840074 	movhi	r2,4097
1000f378:	108abd04 	addi	r2,r2,10996
1000f37c:	10800017 	ldw	r2,0(r2)
1000f380:	10000526 	beq	r2,zero,1000f398 <alt_get_errno+0x34>
1000f384:	00840074 	movhi	r2,4097
1000f388:	108abd04 	addi	r2,r2,10996
1000f38c:	10800017 	ldw	r2,0(r2)
1000f390:	103ee83a 	callr	r2
1000f394:	00000206 	br	1000f3a0 <alt_get_errno+0x3c>
1000f398:	00840074 	movhi	r2,4097
1000f39c:	10918f04 	addi	r2,r2,17980
}
1000f3a0:	e037883a 	mov	sp,fp
1000f3a4:	dfc00117 	ldw	ra,4(sp)
1000f3a8:	df000017 	ldw	fp,0(sp)
1000f3ac:	dec00204 	addi	sp,sp,8
1000f3b0:	f800283a 	ret

1000f3b4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
1000f3b4:	defffa04 	addi	sp,sp,-24
1000f3b8:	dfc00515 	stw	ra,20(sp)
1000f3bc:	df000415 	stw	fp,16(sp)
1000f3c0:	df000404 	addi	fp,sp,16
1000f3c4:	e13ffe15 	stw	r4,-8(fp)
1000f3c8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
1000f3cc:	e0bffe17 	ldw	r2,-8(fp)
1000f3d0:	10000326 	beq	r2,zero,1000f3e0 <alt_dev_llist_insert+0x2c>
1000f3d4:	e0bffe17 	ldw	r2,-8(fp)
1000f3d8:	10800217 	ldw	r2,8(r2)
1000f3dc:	1000061e 	bne	r2,zero,1000f3f8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
1000f3e0:	000f3640 	call	1000f364 <alt_get_errno>
1000f3e4:	1007883a 	mov	r3,r2
1000f3e8:	00800584 	movi	r2,22
1000f3ec:	18800015 	stw	r2,0(r3)
    return -EINVAL;
1000f3f0:	00bffa84 	movi	r2,-22
1000f3f4:	00001306 	br	1000f444 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
1000f3f8:	e0bffe17 	ldw	r2,-8(fp)
1000f3fc:	e0ffff17 	ldw	r3,-4(fp)
1000f400:	e0fffc15 	stw	r3,-16(fp)
1000f404:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1000f408:	e0bffd17 	ldw	r2,-12(fp)
1000f40c:	e0fffc17 	ldw	r3,-16(fp)
1000f410:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1000f414:	e0bffc17 	ldw	r2,-16(fp)
1000f418:	10c00017 	ldw	r3,0(r2)
1000f41c:	e0bffd17 	ldw	r2,-12(fp)
1000f420:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1000f424:	e0bffc17 	ldw	r2,-16(fp)
1000f428:	10800017 	ldw	r2,0(r2)
1000f42c:	e0fffd17 	ldw	r3,-12(fp)
1000f430:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1000f434:	e0bffc17 	ldw	r2,-16(fp)
1000f438:	e0fffd17 	ldw	r3,-12(fp)
1000f43c:	10c00015 	stw	r3,0(r2)

  return 0;  
1000f440:	0005883a 	mov	r2,zero
}
1000f444:	e037883a 	mov	sp,fp
1000f448:	dfc00117 	ldw	ra,4(sp)
1000f44c:	df000017 	ldw	fp,0(sp)
1000f450:	dec00204 	addi	sp,sp,8
1000f454:	f800283a 	ret

1000f458 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
1000f458:	defffd04 	addi	sp,sp,-12
1000f45c:	dfc00215 	stw	ra,8(sp)
1000f460:	df000115 	stw	fp,4(sp)
1000f464:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1000f468:	00840074 	movhi	r2,4097
1000f46c:	10811a04 	addi	r2,r2,1128
1000f470:	e0bfff15 	stw	r2,-4(fp)
1000f474:	00000606 	br	1000f490 <_do_ctors+0x38>
        (*ctor) (); 
1000f478:	e0bfff17 	ldw	r2,-4(fp)
1000f47c:	10800017 	ldw	r2,0(r2)
1000f480:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1000f484:	e0bfff17 	ldw	r2,-4(fp)
1000f488:	10bfff04 	addi	r2,r2,-4
1000f48c:	e0bfff15 	stw	r2,-4(fp)
1000f490:	e0ffff17 	ldw	r3,-4(fp)
1000f494:	00840074 	movhi	r2,4097
1000f498:	10811b04 	addi	r2,r2,1132
1000f49c:	18bff62e 	bgeu	r3,r2,1000f478 <__alt_data_end+0xf800f478>
        (*ctor) (); 
}
1000f4a0:	e037883a 	mov	sp,fp
1000f4a4:	dfc00117 	ldw	ra,4(sp)
1000f4a8:	df000017 	ldw	fp,0(sp)
1000f4ac:	dec00204 	addi	sp,sp,8
1000f4b0:	f800283a 	ret

1000f4b4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
1000f4b4:	defffd04 	addi	sp,sp,-12
1000f4b8:	dfc00215 	stw	ra,8(sp)
1000f4bc:	df000115 	stw	fp,4(sp)
1000f4c0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1000f4c4:	00840074 	movhi	r2,4097
1000f4c8:	10811a04 	addi	r2,r2,1128
1000f4cc:	e0bfff15 	stw	r2,-4(fp)
1000f4d0:	00000606 	br	1000f4ec <_do_dtors+0x38>
        (*dtor) (); 
1000f4d4:	e0bfff17 	ldw	r2,-4(fp)
1000f4d8:	10800017 	ldw	r2,0(r2)
1000f4dc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1000f4e0:	e0bfff17 	ldw	r2,-4(fp)
1000f4e4:	10bfff04 	addi	r2,r2,-4
1000f4e8:	e0bfff15 	stw	r2,-4(fp)
1000f4ec:	e0ffff17 	ldw	r3,-4(fp)
1000f4f0:	00840074 	movhi	r2,4097
1000f4f4:	10811b04 	addi	r2,r2,1132
1000f4f8:	18bff62e 	bgeu	r3,r2,1000f4d4 <__alt_data_end+0xf800f4d4>
        (*dtor) (); 
}
1000f4fc:	e037883a 	mov	sp,fp
1000f500:	dfc00117 	ldw	ra,4(sp)
1000f504:	df000017 	ldw	fp,0(sp)
1000f508:	dec00204 	addi	sp,sp,8
1000f50c:	f800283a 	ret

1000f510 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
1000f510:	deffff04 	addi	sp,sp,-4
1000f514:	df000015 	stw	fp,0(sp)
1000f518:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
1000f51c:	e037883a 	mov	sp,fp
1000f520:	df000017 	ldw	fp,0(sp)
1000f524:	dec00104 	addi	sp,sp,4
1000f528:	f800283a 	ret

1000f52c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1000f52c:	defff904 	addi	sp,sp,-28
1000f530:	dfc00615 	stw	ra,24(sp)
1000f534:	df000515 	stw	fp,20(sp)
1000f538:	df000504 	addi	fp,sp,20
1000f53c:	e13ffc15 	stw	r4,-16(fp)
1000f540:	e17ffd15 	stw	r5,-12(fp)
1000f544:	e1bffe15 	stw	r6,-8(fp)
1000f548:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
1000f54c:	e0800217 	ldw	r2,8(fp)
1000f550:	d8800015 	stw	r2,0(sp)
1000f554:	e13ffc17 	ldw	r4,-16(fp)
1000f558:	e17ffd17 	ldw	r5,-12(fp)
1000f55c:	e1bffe17 	ldw	r6,-8(fp)
1000f560:	e1ffff17 	ldw	r7,-4(fp)
1000f564:	000f70c0 	call	1000f70c <alt_iic_isr_register>
}  
1000f568:	e037883a 	mov	sp,fp
1000f56c:	dfc00117 	ldw	ra,4(sp)
1000f570:	df000017 	ldw	fp,0(sp)
1000f574:	dec00204 	addi	sp,sp,8
1000f578:	f800283a 	ret

1000f57c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
1000f57c:	defff904 	addi	sp,sp,-28
1000f580:	df000615 	stw	fp,24(sp)
1000f584:	df000604 	addi	fp,sp,24
1000f588:	e13ffe15 	stw	r4,-8(fp)
1000f58c:	e17fff15 	stw	r5,-4(fp)
1000f590:	e0bfff17 	ldw	r2,-4(fp)
1000f594:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000f598:	0005303a 	rdctl	r2,status
1000f59c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000f5a0:	e0fffb17 	ldw	r3,-20(fp)
1000f5a4:	00bfff84 	movi	r2,-2
1000f5a8:	1884703a 	and	r2,r3,r2
1000f5ac:	1001703a 	wrctl	status,r2
  
  return context;
1000f5b0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1000f5b4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
1000f5b8:	e0bffa17 	ldw	r2,-24(fp)
1000f5bc:	00c00044 	movi	r3,1
1000f5c0:	1884983a 	sll	r2,r3,r2
1000f5c4:	1007883a 	mov	r3,r2
1000f5c8:	00840074 	movhi	r2,4097
1000f5cc:	10919604 	addi	r2,r2,18008
1000f5d0:	10800017 	ldw	r2,0(r2)
1000f5d4:	1886b03a 	or	r3,r3,r2
1000f5d8:	00840074 	movhi	r2,4097
1000f5dc:	10919604 	addi	r2,r2,18008
1000f5e0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1000f5e4:	00840074 	movhi	r2,4097
1000f5e8:	10919604 	addi	r2,r2,18008
1000f5ec:	10800017 	ldw	r2,0(r2)
1000f5f0:	100170fa 	wrctl	ienable,r2
1000f5f4:	e0bffc17 	ldw	r2,-16(fp)
1000f5f8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000f5fc:	e0bffd17 	ldw	r2,-12(fp)
1000f600:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1000f604:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
1000f608:	0001883a 	nop
}
1000f60c:	e037883a 	mov	sp,fp
1000f610:	df000017 	ldw	fp,0(sp)
1000f614:	dec00104 	addi	sp,sp,4
1000f618:	f800283a 	ret

1000f61c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
1000f61c:	defff904 	addi	sp,sp,-28
1000f620:	df000615 	stw	fp,24(sp)
1000f624:	df000604 	addi	fp,sp,24
1000f628:	e13ffe15 	stw	r4,-8(fp)
1000f62c:	e17fff15 	stw	r5,-4(fp)
1000f630:	e0bfff17 	ldw	r2,-4(fp)
1000f634:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000f638:	0005303a 	rdctl	r2,status
1000f63c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000f640:	e0fffb17 	ldw	r3,-20(fp)
1000f644:	00bfff84 	movi	r2,-2
1000f648:	1884703a 	and	r2,r3,r2
1000f64c:	1001703a 	wrctl	status,r2
  
  return context;
1000f650:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1000f654:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
1000f658:	e0bffa17 	ldw	r2,-24(fp)
1000f65c:	00c00044 	movi	r3,1
1000f660:	1884983a 	sll	r2,r3,r2
1000f664:	0084303a 	nor	r2,zero,r2
1000f668:	1007883a 	mov	r3,r2
1000f66c:	00840074 	movhi	r2,4097
1000f670:	10919604 	addi	r2,r2,18008
1000f674:	10800017 	ldw	r2,0(r2)
1000f678:	1886703a 	and	r3,r3,r2
1000f67c:	00840074 	movhi	r2,4097
1000f680:	10919604 	addi	r2,r2,18008
1000f684:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1000f688:	00840074 	movhi	r2,4097
1000f68c:	10919604 	addi	r2,r2,18008
1000f690:	10800017 	ldw	r2,0(r2)
1000f694:	100170fa 	wrctl	ienable,r2
1000f698:	e0bffc17 	ldw	r2,-16(fp)
1000f69c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000f6a0:	e0bffd17 	ldw	r2,-12(fp)
1000f6a4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1000f6a8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
1000f6ac:	0001883a 	nop
}
1000f6b0:	e037883a 	mov	sp,fp
1000f6b4:	df000017 	ldw	fp,0(sp)
1000f6b8:	dec00104 	addi	sp,sp,4
1000f6bc:	f800283a 	ret

1000f6c0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
1000f6c0:	defffc04 	addi	sp,sp,-16
1000f6c4:	df000315 	stw	fp,12(sp)
1000f6c8:	df000304 	addi	fp,sp,12
1000f6cc:	e13ffe15 	stw	r4,-8(fp)
1000f6d0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
1000f6d4:	000530fa 	rdctl	r2,ienable
1000f6d8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
1000f6dc:	e0bfff17 	ldw	r2,-4(fp)
1000f6e0:	00c00044 	movi	r3,1
1000f6e4:	1884983a 	sll	r2,r3,r2
1000f6e8:	1007883a 	mov	r3,r2
1000f6ec:	e0bffd17 	ldw	r2,-12(fp)
1000f6f0:	1884703a 	and	r2,r3,r2
1000f6f4:	1004c03a 	cmpne	r2,r2,zero
1000f6f8:	10803fcc 	andi	r2,r2,255
}
1000f6fc:	e037883a 	mov	sp,fp
1000f700:	df000017 	ldw	fp,0(sp)
1000f704:	dec00104 	addi	sp,sp,4
1000f708:	f800283a 	ret

1000f70c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1000f70c:	defff504 	addi	sp,sp,-44
1000f710:	dfc00a15 	stw	ra,40(sp)
1000f714:	df000915 	stw	fp,36(sp)
1000f718:	df000904 	addi	fp,sp,36
1000f71c:	e13ffc15 	stw	r4,-16(fp)
1000f720:	e17ffd15 	stw	r5,-12(fp)
1000f724:	e1bffe15 	stw	r6,-8(fp)
1000f728:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
1000f72c:	00bffa84 	movi	r2,-22
1000f730:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
1000f734:	e0bffd17 	ldw	r2,-12(fp)
1000f738:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
1000f73c:	e0bff817 	ldw	r2,-32(fp)
1000f740:	10800808 	cmpgei	r2,r2,32
1000f744:	1000271e 	bne	r2,zero,1000f7e4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000f748:	0005303a 	rdctl	r2,status
1000f74c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000f750:	e0fffa17 	ldw	r3,-24(fp)
1000f754:	00bfff84 	movi	r2,-2
1000f758:	1884703a 	and	r2,r3,r2
1000f75c:	1001703a 	wrctl	status,r2
  
  return context;
1000f760:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
1000f764:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
1000f768:	00840074 	movhi	r2,4097
1000f76c:	1091a404 	addi	r2,r2,18064
1000f770:	e0fff817 	ldw	r3,-32(fp)
1000f774:	180690fa 	slli	r3,r3,3
1000f778:	10c5883a 	add	r2,r2,r3
1000f77c:	e0fffe17 	ldw	r3,-8(fp)
1000f780:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
1000f784:	00840074 	movhi	r2,4097
1000f788:	1091a404 	addi	r2,r2,18064
1000f78c:	e0fff817 	ldw	r3,-32(fp)
1000f790:	180690fa 	slli	r3,r3,3
1000f794:	10c5883a 	add	r2,r2,r3
1000f798:	10800104 	addi	r2,r2,4
1000f79c:	e0ffff17 	ldw	r3,-4(fp)
1000f7a0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
1000f7a4:	e0bffe17 	ldw	r2,-8(fp)
1000f7a8:	10000526 	beq	r2,zero,1000f7c0 <alt_iic_isr_register+0xb4>
1000f7ac:	e0bff817 	ldw	r2,-32(fp)
1000f7b0:	e13ffc17 	ldw	r4,-16(fp)
1000f7b4:	100b883a 	mov	r5,r2
1000f7b8:	000f57c0 	call	1000f57c <alt_ic_irq_enable>
1000f7bc:	00000406 	br	1000f7d0 <alt_iic_isr_register+0xc4>
1000f7c0:	e0bff817 	ldw	r2,-32(fp)
1000f7c4:	e13ffc17 	ldw	r4,-16(fp)
1000f7c8:	100b883a 	mov	r5,r2
1000f7cc:	000f61c0 	call	1000f61c <alt_ic_irq_disable>
1000f7d0:	e0bff715 	stw	r2,-36(fp)
1000f7d4:	e0bff917 	ldw	r2,-28(fp)
1000f7d8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000f7dc:	e0bffb17 	ldw	r2,-20(fp)
1000f7e0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
1000f7e4:	e0bff717 	ldw	r2,-36(fp)
}
1000f7e8:	e037883a 	mov	sp,fp
1000f7ec:	dfc00117 	ldw	ra,4(sp)
1000f7f0:	df000017 	ldw	fp,0(sp)
1000f7f4:	dec00204 	addi	sp,sp,8
1000f7f8:	f800283a 	ret

1000f7fc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
1000f7fc:	defff804 	addi	sp,sp,-32
1000f800:	dfc00715 	stw	ra,28(sp)
1000f804:	df000615 	stw	fp,24(sp)
1000f808:	dc000515 	stw	r16,20(sp)
1000f80c:	df000604 	addi	fp,sp,24
1000f810:	e13ffb15 	stw	r4,-20(fp)
1000f814:	e17ffc15 	stw	r5,-16(fp)
1000f818:	e1bffd15 	stw	r6,-12(fp)
1000f81c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
1000f820:	e13ffc17 	ldw	r4,-16(fp)
1000f824:	e17ffd17 	ldw	r5,-12(fp)
1000f828:	e1bffe17 	ldw	r6,-8(fp)
1000f82c:	000fa980 	call	1000fa98 <open>
1000f830:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
1000f834:	e0bffa17 	ldw	r2,-24(fp)
1000f838:	10002216 	blt	r2,zero,1000f8c4 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
1000f83c:	04040074 	movhi	r16,4097
1000f840:	84063a04 	addi	r16,r16,6376
1000f844:	e0bffa17 	ldw	r2,-24(fp)
1000f848:	1009883a 	mov	r4,r2
1000f84c:	01400304 	movi	r5,12
1000f850:	00013880 	call	10001388 <__mulsi3>
1000f854:	8085883a 	add	r2,r16,r2
1000f858:	10c00017 	ldw	r3,0(r2)
1000f85c:	e0bffb17 	ldw	r2,-20(fp)
1000f860:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
1000f864:	04040074 	movhi	r16,4097
1000f868:	84063a04 	addi	r16,r16,6376
1000f86c:	e0bffa17 	ldw	r2,-24(fp)
1000f870:	1009883a 	mov	r4,r2
1000f874:	01400304 	movi	r5,12
1000f878:	00013880 	call	10001388 <__mulsi3>
1000f87c:	8085883a 	add	r2,r16,r2
1000f880:	10800104 	addi	r2,r2,4
1000f884:	10c00017 	ldw	r3,0(r2)
1000f888:	e0bffb17 	ldw	r2,-20(fp)
1000f88c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
1000f890:	04040074 	movhi	r16,4097
1000f894:	84063a04 	addi	r16,r16,6376
1000f898:	e0bffa17 	ldw	r2,-24(fp)
1000f89c:	1009883a 	mov	r4,r2
1000f8a0:	01400304 	movi	r5,12
1000f8a4:	00013880 	call	10001388 <__mulsi3>
1000f8a8:	8085883a 	add	r2,r16,r2
1000f8ac:	10800204 	addi	r2,r2,8
1000f8b0:	10c00017 	ldw	r3,0(r2)
1000f8b4:	e0bffb17 	ldw	r2,-20(fp)
1000f8b8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
1000f8bc:	e13ffa17 	ldw	r4,-24(fp)
1000f8c0:	000e4880 	call	1000e488 <alt_release_fd>
  }
} 
1000f8c4:	e6ffff04 	addi	sp,fp,-4
1000f8c8:	dfc00217 	ldw	ra,8(sp)
1000f8cc:	df000117 	ldw	fp,4(sp)
1000f8d0:	dc000017 	ldw	r16,0(sp)
1000f8d4:	dec00304 	addi	sp,sp,12
1000f8d8:	f800283a 	ret

1000f8dc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
1000f8dc:	defffb04 	addi	sp,sp,-20
1000f8e0:	dfc00415 	stw	ra,16(sp)
1000f8e4:	df000315 	stw	fp,12(sp)
1000f8e8:	df000304 	addi	fp,sp,12
1000f8ec:	e13ffd15 	stw	r4,-12(fp)
1000f8f0:	e17ffe15 	stw	r5,-8(fp)
1000f8f4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
1000f8f8:	01040074 	movhi	r4,4097
1000f8fc:	21063d04 	addi	r4,r4,6388
1000f900:	e17ffd17 	ldw	r5,-12(fp)
1000f904:	01800044 	movi	r6,1
1000f908:	01c07fc4 	movi	r7,511
1000f90c:	000f7fc0 	call	1000f7fc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
1000f910:	01040074 	movhi	r4,4097
1000f914:	21063a04 	addi	r4,r4,6376
1000f918:	e17ffe17 	ldw	r5,-8(fp)
1000f91c:	000d883a 	mov	r6,zero
1000f920:	01c07fc4 	movi	r7,511
1000f924:	000f7fc0 	call	1000f7fc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
1000f928:	01040074 	movhi	r4,4097
1000f92c:	21064004 	addi	r4,r4,6400
1000f930:	e17fff17 	ldw	r5,-4(fp)
1000f934:	01800044 	movi	r6,1
1000f938:	01c07fc4 	movi	r7,511
1000f93c:	000f7fc0 	call	1000f7fc <alt_open_fd>
}  
1000f940:	e037883a 	mov	sp,fp
1000f944:	dfc00117 	ldw	ra,4(sp)
1000f948:	df000017 	ldw	fp,0(sp)
1000f94c:	dec00204 	addi	sp,sp,8
1000f950:	f800283a 	ret

1000f954 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f954:	defffe04 	addi	sp,sp,-8
1000f958:	dfc00115 	stw	ra,4(sp)
1000f95c:	df000015 	stw	fp,0(sp)
1000f960:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f964:	00840074 	movhi	r2,4097
1000f968:	108abd04 	addi	r2,r2,10996
1000f96c:	10800017 	ldw	r2,0(r2)
1000f970:	10000526 	beq	r2,zero,1000f988 <alt_get_errno+0x34>
1000f974:	00840074 	movhi	r2,4097
1000f978:	108abd04 	addi	r2,r2,10996
1000f97c:	10800017 	ldw	r2,0(r2)
1000f980:	103ee83a 	callr	r2
1000f984:	00000206 	br	1000f990 <alt_get_errno+0x3c>
1000f988:	00840074 	movhi	r2,4097
1000f98c:	10918f04 	addi	r2,r2,17980
}
1000f990:	e037883a 	mov	sp,fp
1000f994:	dfc00117 	ldw	ra,4(sp)
1000f998:	df000017 	ldw	fp,0(sp)
1000f99c:	dec00204 	addi	sp,sp,8
1000f9a0:	f800283a 	ret

1000f9a4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
1000f9a4:	defffb04 	addi	sp,sp,-20
1000f9a8:	dfc00415 	stw	ra,16(sp)
1000f9ac:	df000315 	stw	fp,12(sp)
1000f9b0:	dc000215 	stw	r16,8(sp)
1000f9b4:	df000304 	addi	fp,sp,12
1000f9b8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
1000f9bc:	e0bffe17 	ldw	r2,-8(fp)
1000f9c0:	10800217 	ldw	r2,8(r2)
1000f9c4:	10d00034 	orhi	r3,r2,16384
1000f9c8:	e0bffe17 	ldw	r2,-8(fp)
1000f9cc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
1000f9d0:	e03ffd15 	stw	zero,-12(fp)
1000f9d4:	00002306 	br	1000fa64 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1000f9d8:	04040074 	movhi	r16,4097
1000f9dc:	84063a04 	addi	r16,r16,6376
1000f9e0:	e0bffd17 	ldw	r2,-12(fp)
1000f9e4:	1009883a 	mov	r4,r2
1000f9e8:	01400304 	movi	r5,12
1000f9ec:	00013880 	call	10001388 <__mulsi3>
1000f9f0:	8085883a 	add	r2,r16,r2
1000f9f4:	10c00017 	ldw	r3,0(r2)
1000f9f8:	e0bffe17 	ldw	r2,-8(fp)
1000f9fc:	10800017 	ldw	r2,0(r2)
1000fa00:	1880151e 	bne	r3,r2,1000fa58 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1000fa04:	04040074 	movhi	r16,4097
1000fa08:	84063a04 	addi	r16,r16,6376
1000fa0c:	e0bffd17 	ldw	r2,-12(fp)
1000fa10:	1009883a 	mov	r4,r2
1000fa14:	01400304 	movi	r5,12
1000fa18:	00013880 	call	10001388 <__mulsi3>
1000fa1c:	8085883a 	add	r2,r16,r2
1000fa20:	10800204 	addi	r2,r2,8
1000fa24:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1000fa28:	10000b0e 	bge	r2,zero,1000fa58 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
1000fa2c:	e13ffd17 	ldw	r4,-12(fp)
1000fa30:	01400304 	movi	r5,12
1000fa34:	00013880 	call	10001388 <__mulsi3>
1000fa38:	1007883a 	mov	r3,r2
1000fa3c:	00840074 	movhi	r2,4097
1000fa40:	10863a04 	addi	r2,r2,6376
1000fa44:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1000fa48:	e0bffe17 	ldw	r2,-8(fp)
1000fa4c:	18800226 	beq	r3,r2,1000fa58 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
1000fa50:	00bffcc4 	movi	r2,-13
1000fa54:	00000a06 	br	1000fa80 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
1000fa58:	e0bffd17 	ldw	r2,-12(fp)
1000fa5c:	10800044 	addi	r2,r2,1
1000fa60:	e0bffd15 	stw	r2,-12(fp)
1000fa64:	00840074 	movhi	r2,4097
1000fa68:	108abc04 	addi	r2,r2,10992
1000fa6c:	10800017 	ldw	r2,0(r2)
1000fa70:	1007883a 	mov	r3,r2
1000fa74:	e0bffd17 	ldw	r2,-12(fp)
1000fa78:	18bfd72e 	bgeu	r3,r2,1000f9d8 <__alt_data_end+0xf800f9d8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
1000fa7c:	0005883a 	mov	r2,zero
}
1000fa80:	e6ffff04 	addi	sp,fp,-4
1000fa84:	dfc00217 	ldw	ra,8(sp)
1000fa88:	df000117 	ldw	fp,4(sp)
1000fa8c:	dc000017 	ldw	r16,0(sp)
1000fa90:	dec00304 	addi	sp,sp,12
1000fa94:	f800283a 	ret

1000fa98 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
1000fa98:	defff604 	addi	sp,sp,-40
1000fa9c:	dfc00915 	stw	ra,36(sp)
1000faa0:	df000815 	stw	fp,32(sp)
1000faa4:	df000804 	addi	fp,sp,32
1000faa8:	e13ffd15 	stw	r4,-12(fp)
1000faac:	e17ffe15 	stw	r5,-8(fp)
1000fab0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
1000fab4:	00bfffc4 	movi	r2,-1
1000fab8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
1000fabc:	00bffb44 	movi	r2,-19
1000fac0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
1000fac4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
1000fac8:	e13ffd17 	ldw	r4,-12(fp)
1000facc:	01440074 	movhi	r5,4097
1000fad0:	294aba04 	addi	r5,r5,10984
1000fad4:	000fdb40 	call	1000fdb4 <alt_find_dev>
1000fad8:	e0bff815 	stw	r2,-32(fp)
1000fadc:	e0bff817 	ldw	r2,-32(fp)
1000fae0:	1000051e 	bne	r2,zero,1000faf8 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
1000fae4:	e13ffd17 	ldw	r4,-12(fp)
1000fae8:	000fe440 	call	1000fe44 <alt_find_file>
1000faec:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
1000faf0:	00800044 	movi	r2,1
1000faf4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
1000faf8:	e0bff817 	ldw	r2,-32(fp)
1000fafc:	10002b26 	beq	r2,zero,1000fbac <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
1000fb00:	e13ff817 	ldw	r4,-32(fp)
1000fb04:	000ff580 	call	1000ff58 <alt_get_fd>
1000fb08:	e0bff915 	stw	r2,-28(fp)
1000fb0c:	e0bff917 	ldw	r2,-28(fp)
1000fb10:	1000030e 	bge	r2,zero,1000fb20 <open+0x88>
    {
      status = index;
1000fb14:	e0bff917 	ldw	r2,-28(fp)
1000fb18:	e0bffa15 	stw	r2,-24(fp)
1000fb1c:	00002506 	br	1000fbb4 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
1000fb20:	e13ff917 	ldw	r4,-28(fp)
1000fb24:	01400304 	movi	r5,12
1000fb28:	00013880 	call	10001388 <__mulsi3>
1000fb2c:	1007883a 	mov	r3,r2
1000fb30:	00840074 	movhi	r2,4097
1000fb34:	10863a04 	addi	r2,r2,6376
1000fb38:	1885883a 	add	r2,r3,r2
1000fb3c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
1000fb40:	e0fffe17 	ldw	r3,-8(fp)
1000fb44:	00900034 	movhi	r2,16384
1000fb48:	10bfffc4 	addi	r2,r2,-1
1000fb4c:	1886703a 	and	r3,r3,r2
1000fb50:	e0bffc17 	ldw	r2,-16(fp)
1000fb54:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
1000fb58:	e0bffb17 	ldw	r2,-20(fp)
1000fb5c:	1000051e 	bne	r2,zero,1000fb74 <open+0xdc>
1000fb60:	e13ffc17 	ldw	r4,-16(fp)
1000fb64:	000f9a40 	call	1000f9a4 <alt_file_locked>
1000fb68:	e0bffa15 	stw	r2,-24(fp)
1000fb6c:	e0bffa17 	ldw	r2,-24(fp)
1000fb70:	10001016 	blt	r2,zero,1000fbb4 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
1000fb74:	e0bff817 	ldw	r2,-32(fp)
1000fb78:	10800317 	ldw	r2,12(r2)
1000fb7c:	10000826 	beq	r2,zero,1000fba0 <open+0x108>
1000fb80:	e0bff817 	ldw	r2,-32(fp)
1000fb84:	10800317 	ldw	r2,12(r2)
1000fb88:	e13ffc17 	ldw	r4,-16(fp)
1000fb8c:	e17ffd17 	ldw	r5,-12(fp)
1000fb90:	e1bffe17 	ldw	r6,-8(fp)
1000fb94:	e1ffff17 	ldw	r7,-4(fp)
1000fb98:	103ee83a 	callr	r2
1000fb9c:	00000106 	br	1000fba4 <open+0x10c>
1000fba0:	0005883a 	mov	r2,zero
1000fba4:	e0bffa15 	stw	r2,-24(fp)
1000fba8:	00000206 	br	1000fbb4 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
1000fbac:	00bffb44 	movi	r2,-19
1000fbb0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
1000fbb4:	e0bffa17 	ldw	r2,-24(fp)
1000fbb8:	1000090e 	bge	r2,zero,1000fbe0 <open+0x148>
  {
    alt_release_fd (index);  
1000fbbc:	e13ff917 	ldw	r4,-28(fp)
1000fbc0:	000e4880 	call	1000e488 <alt_release_fd>
    ALT_ERRNO = -status;
1000fbc4:	000f9540 	call	1000f954 <alt_get_errno>
1000fbc8:	1007883a 	mov	r3,r2
1000fbcc:	e0bffa17 	ldw	r2,-24(fp)
1000fbd0:	0085c83a 	sub	r2,zero,r2
1000fbd4:	18800015 	stw	r2,0(r3)
    return -1;
1000fbd8:	00bfffc4 	movi	r2,-1
1000fbdc:	00000106 	br	1000fbe4 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
1000fbe0:	e0bff917 	ldw	r2,-28(fp)
}
1000fbe4:	e037883a 	mov	sp,fp
1000fbe8:	dfc00117 	ldw	ra,4(sp)
1000fbec:	df000017 	ldw	fp,0(sp)
1000fbf0:	dec00204 	addi	sp,sp,8
1000fbf4:	f800283a 	ret

1000fbf8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
1000fbf8:	defffa04 	addi	sp,sp,-24
1000fbfc:	df000515 	stw	fp,20(sp)
1000fc00:	df000504 	addi	fp,sp,20
1000fc04:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000fc08:	0005303a 	rdctl	r2,status
1000fc0c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000fc10:	e0fffc17 	ldw	r3,-16(fp)
1000fc14:	00bfff84 	movi	r2,-2
1000fc18:	1884703a 	and	r2,r3,r2
1000fc1c:	1001703a 	wrctl	status,r2
  
  return context;
1000fc20:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
1000fc24:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
1000fc28:	e0bfff17 	ldw	r2,-4(fp)
1000fc2c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
1000fc30:	e0bffd17 	ldw	r2,-12(fp)
1000fc34:	10800017 	ldw	r2,0(r2)
1000fc38:	e0fffd17 	ldw	r3,-12(fp)
1000fc3c:	18c00117 	ldw	r3,4(r3)
1000fc40:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
1000fc44:	e0bffd17 	ldw	r2,-12(fp)
1000fc48:	10800117 	ldw	r2,4(r2)
1000fc4c:	e0fffd17 	ldw	r3,-12(fp)
1000fc50:	18c00017 	ldw	r3,0(r3)
1000fc54:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
1000fc58:	e0bffd17 	ldw	r2,-12(fp)
1000fc5c:	e0fffd17 	ldw	r3,-12(fp)
1000fc60:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
1000fc64:	e0bffd17 	ldw	r2,-12(fp)
1000fc68:	e0fffd17 	ldw	r3,-12(fp)
1000fc6c:	10c00015 	stw	r3,0(r2)
1000fc70:	e0bffb17 	ldw	r2,-20(fp)
1000fc74:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000fc78:	e0bffe17 	ldw	r2,-8(fp)
1000fc7c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
1000fc80:	e037883a 	mov	sp,fp
1000fc84:	df000017 	ldw	fp,0(sp)
1000fc88:	dec00104 	addi	sp,sp,4
1000fc8c:	f800283a 	ret

1000fc90 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
1000fc90:	defffb04 	addi	sp,sp,-20
1000fc94:	dfc00415 	stw	ra,16(sp)
1000fc98:	df000315 	stw	fp,12(sp)
1000fc9c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
1000fca0:	d0a00e17 	ldw	r2,-32712(gp)
1000fca4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
1000fca8:	d0a6e617 	ldw	r2,-25704(gp)
1000fcac:	10800044 	addi	r2,r2,1
1000fcb0:	d0a6e615 	stw	r2,-25704(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
1000fcb4:	00002e06 	br	1000fd70 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
1000fcb8:	e0bffd17 	ldw	r2,-12(fp)
1000fcbc:	10800017 	ldw	r2,0(r2)
1000fcc0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
1000fcc4:	e0bffd17 	ldw	r2,-12(fp)
1000fcc8:	10800403 	ldbu	r2,16(r2)
1000fccc:	10803fcc 	andi	r2,r2,255
1000fcd0:	10000426 	beq	r2,zero,1000fce4 <alt_tick+0x54>
1000fcd4:	d0a6e617 	ldw	r2,-25704(gp)
1000fcd8:	1000021e 	bne	r2,zero,1000fce4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
1000fcdc:	e0bffd17 	ldw	r2,-12(fp)
1000fce0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
1000fce4:	e0bffd17 	ldw	r2,-12(fp)
1000fce8:	10800217 	ldw	r2,8(r2)
1000fcec:	d0e6e617 	ldw	r3,-25704(gp)
1000fcf0:	18801d36 	bltu	r3,r2,1000fd68 <alt_tick+0xd8>
1000fcf4:	e0bffd17 	ldw	r2,-12(fp)
1000fcf8:	10800403 	ldbu	r2,16(r2)
1000fcfc:	10803fcc 	andi	r2,r2,255
1000fd00:	1000191e 	bne	r2,zero,1000fd68 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
1000fd04:	e0bffd17 	ldw	r2,-12(fp)
1000fd08:	10800317 	ldw	r2,12(r2)
1000fd0c:	e0fffd17 	ldw	r3,-12(fp)
1000fd10:	18c00517 	ldw	r3,20(r3)
1000fd14:	1809883a 	mov	r4,r3
1000fd18:	103ee83a 	callr	r2
1000fd1c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
1000fd20:	e0bfff17 	ldw	r2,-4(fp)
1000fd24:	1000031e 	bne	r2,zero,1000fd34 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
1000fd28:	e13ffd17 	ldw	r4,-12(fp)
1000fd2c:	000fbf80 	call	1000fbf8 <alt_alarm_stop>
1000fd30:	00000d06 	br	1000fd68 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
1000fd34:	e0bffd17 	ldw	r2,-12(fp)
1000fd38:	10c00217 	ldw	r3,8(r2)
1000fd3c:	e0bfff17 	ldw	r2,-4(fp)
1000fd40:	1887883a 	add	r3,r3,r2
1000fd44:	e0bffd17 	ldw	r2,-12(fp)
1000fd48:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
1000fd4c:	e0bffd17 	ldw	r2,-12(fp)
1000fd50:	10c00217 	ldw	r3,8(r2)
1000fd54:	d0a6e617 	ldw	r2,-25704(gp)
1000fd58:	1880032e 	bgeu	r3,r2,1000fd68 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
1000fd5c:	e0bffd17 	ldw	r2,-12(fp)
1000fd60:	00c00044 	movi	r3,1
1000fd64:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
1000fd68:	e0bffe17 	ldw	r2,-8(fp)
1000fd6c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
1000fd70:	e0fffd17 	ldw	r3,-12(fp)
1000fd74:	d0a00e04 	addi	r2,gp,-32712
1000fd78:	18bfcf1e 	bne	r3,r2,1000fcb8 <__alt_data_end+0xf800fcb8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
1000fd7c:	0001883a 	nop
}
1000fd80:	e037883a 	mov	sp,fp
1000fd84:	dfc00117 	ldw	ra,4(sp)
1000fd88:	df000017 	ldw	fp,0(sp)
1000fd8c:	dec00204 	addi	sp,sp,8
1000fd90:	f800283a 	ret

1000fd94 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
1000fd94:	deffff04 	addi	sp,sp,-4
1000fd98:	df000015 	stw	fp,0(sp)
1000fd9c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
1000fda0:	000170fa 	wrctl	ienable,zero
}
1000fda4:	e037883a 	mov	sp,fp
1000fda8:	df000017 	ldw	fp,0(sp)
1000fdac:	dec00104 	addi	sp,sp,4
1000fdb0:	f800283a 	ret

1000fdb4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
1000fdb4:	defffa04 	addi	sp,sp,-24
1000fdb8:	dfc00515 	stw	ra,20(sp)
1000fdbc:	df000415 	stw	fp,16(sp)
1000fdc0:	df000404 	addi	fp,sp,16
1000fdc4:	e13ffe15 	stw	r4,-8(fp)
1000fdc8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
1000fdcc:	e0bfff17 	ldw	r2,-4(fp)
1000fdd0:	10800017 	ldw	r2,0(r2)
1000fdd4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
1000fdd8:	e13ffe17 	ldw	r4,-8(fp)
1000fddc:	0001e400 	call	10001e40 <strlen>
1000fde0:	10800044 	addi	r2,r2,1
1000fde4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
1000fde8:	00000d06 	br	1000fe20 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
1000fdec:	e0bffc17 	ldw	r2,-16(fp)
1000fdf0:	10c00217 	ldw	r3,8(r2)
1000fdf4:	e0bffd17 	ldw	r2,-12(fp)
1000fdf8:	1809883a 	mov	r4,r3
1000fdfc:	e17ffe17 	ldw	r5,-8(fp)
1000fe00:	100d883a 	mov	r6,r2
1000fe04:	00101140 	call	10010114 <memcmp>
1000fe08:	1000021e 	bne	r2,zero,1000fe14 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
1000fe0c:	e0bffc17 	ldw	r2,-16(fp)
1000fe10:	00000706 	br	1000fe30 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
1000fe14:	e0bffc17 	ldw	r2,-16(fp)
1000fe18:	10800017 	ldw	r2,0(r2)
1000fe1c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
1000fe20:	e0fffc17 	ldw	r3,-16(fp)
1000fe24:	e0bfff17 	ldw	r2,-4(fp)
1000fe28:	18bff01e 	bne	r3,r2,1000fdec <__alt_data_end+0xf800fdec>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
1000fe2c:	0005883a 	mov	r2,zero
}
1000fe30:	e037883a 	mov	sp,fp
1000fe34:	dfc00117 	ldw	ra,4(sp)
1000fe38:	df000017 	ldw	fp,0(sp)
1000fe3c:	dec00204 	addi	sp,sp,8
1000fe40:	f800283a 	ret

1000fe44 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
1000fe44:	defffb04 	addi	sp,sp,-20
1000fe48:	dfc00415 	stw	ra,16(sp)
1000fe4c:	df000315 	stw	fp,12(sp)
1000fe50:	df000304 	addi	fp,sp,12
1000fe54:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
1000fe58:	00840074 	movhi	r2,4097
1000fe5c:	108ab804 	addi	r2,r2,10976
1000fe60:	10800017 	ldw	r2,0(r2)
1000fe64:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
1000fe68:	00003106 	br	1000ff30 <alt_find_file+0xec>
  {
    len = strlen(next->name);
1000fe6c:	e0bffd17 	ldw	r2,-12(fp)
1000fe70:	10800217 	ldw	r2,8(r2)
1000fe74:	1009883a 	mov	r4,r2
1000fe78:	0001e400 	call	10001e40 <strlen>
1000fe7c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
1000fe80:	e0bffd17 	ldw	r2,-12(fp)
1000fe84:	10c00217 	ldw	r3,8(r2)
1000fe88:	e0bffe17 	ldw	r2,-8(fp)
1000fe8c:	10bfffc4 	addi	r2,r2,-1
1000fe90:	1885883a 	add	r2,r3,r2
1000fe94:	10800003 	ldbu	r2,0(r2)
1000fe98:	10803fcc 	andi	r2,r2,255
1000fe9c:	1080201c 	xori	r2,r2,128
1000fea0:	10bfe004 	addi	r2,r2,-128
1000fea4:	10800bd8 	cmpnei	r2,r2,47
1000fea8:	1000031e 	bne	r2,zero,1000feb8 <alt_find_file+0x74>
    {
      len -= 1;
1000feac:	e0bffe17 	ldw	r2,-8(fp)
1000feb0:	10bfffc4 	addi	r2,r2,-1
1000feb4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
1000feb8:	e0bffe17 	ldw	r2,-8(fp)
1000febc:	e0ffff17 	ldw	r3,-4(fp)
1000fec0:	1885883a 	add	r2,r3,r2
1000fec4:	10800003 	ldbu	r2,0(r2)
1000fec8:	10803fcc 	andi	r2,r2,255
1000fecc:	1080201c 	xori	r2,r2,128
1000fed0:	10bfe004 	addi	r2,r2,-128
1000fed4:	10800be0 	cmpeqi	r2,r2,47
1000fed8:	1000081e 	bne	r2,zero,1000fefc <alt_find_file+0xb8>
1000fedc:	e0bffe17 	ldw	r2,-8(fp)
1000fee0:	e0ffff17 	ldw	r3,-4(fp)
1000fee4:	1885883a 	add	r2,r3,r2
1000fee8:	10800003 	ldbu	r2,0(r2)
1000feec:	10803fcc 	andi	r2,r2,255
1000fef0:	1080201c 	xori	r2,r2,128
1000fef4:	10bfe004 	addi	r2,r2,-128
1000fef8:	10000a1e 	bne	r2,zero,1000ff24 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
1000fefc:	e0bffd17 	ldw	r2,-12(fp)
1000ff00:	10c00217 	ldw	r3,8(r2)
1000ff04:	e0bffe17 	ldw	r2,-8(fp)
1000ff08:	1809883a 	mov	r4,r3
1000ff0c:	e17fff17 	ldw	r5,-4(fp)
1000ff10:	100d883a 	mov	r6,r2
1000ff14:	00101140 	call	10010114 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
1000ff18:	1000021e 	bne	r2,zero,1000ff24 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
1000ff1c:	e0bffd17 	ldw	r2,-12(fp)
1000ff20:	00000806 	br	1000ff44 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
1000ff24:	e0bffd17 	ldw	r2,-12(fp)
1000ff28:	10800017 	ldw	r2,0(r2)
1000ff2c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
1000ff30:	e0fffd17 	ldw	r3,-12(fp)
1000ff34:	00840074 	movhi	r2,4097
1000ff38:	108ab804 	addi	r2,r2,10976
1000ff3c:	18bfcb1e 	bne	r3,r2,1000fe6c <__alt_data_end+0xf800fe6c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
1000ff40:	0005883a 	mov	r2,zero
}
1000ff44:	e037883a 	mov	sp,fp
1000ff48:	dfc00117 	ldw	ra,4(sp)
1000ff4c:	df000017 	ldw	fp,0(sp)
1000ff50:	dec00204 	addi	sp,sp,8
1000ff54:	f800283a 	ret

1000ff58 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
1000ff58:	defffa04 	addi	sp,sp,-24
1000ff5c:	dfc00515 	stw	ra,20(sp)
1000ff60:	df000415 	stw	fp,16(sp)
1000ff64:	dc000315 	stw	r16,12(sp)
1000ff68:	df000404 	addi	fp,sp,16
1000ff6c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
1000ff70:	00bffa04 	movi	r2,-24
1000ff74:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
1000ff78:	e03ffc15 	stw	zero,-16(fp)
1000ff7c:	00002106 	br	10010004 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
1000ff80:	04040074 	movhi	r16,4097
1000ff84:	84063a04 	addi	r16,r16,6376
1000ff88:	e0bffc17 	ldw	r2,-16(fp)
1000ff8c:	1009883a 	mov	r4,r2
1000ff90:	01400304 	movi	r5,12
1000ff94:	00013880 	call	10001388 <__mulsi3>
1000ff98:	8085883a 	add	r2,r16,r2
1000ff9c:	10800017 	ldw	r2,0(r2)
1000ffa0:	1000151e 	bne	r2,zero,1000fff8 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
1000ffa4:	04040074 	movhi	r16,4097
1000ffa8:	84063a04 	addi	r16,r16,6376
1000ffac:	e0bffc17 	ldw	r2,-16(fp)
1000ffb0:	1009883a 	mov	r4,r2
1000ffb4:	01400304 	movi	r5,12
1000ffb8:	00013880 	call	10001388 <__mulsi3>
1000ffbc:	8085883a 	add	r2,r16,r2
1000ffc0:	e0fffe17 	ldw	r3,-8(fp)
1000ffc4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
1000ffc8:	00840074 	movhi	r2,4097
1000ffcc:	108abc04 	addi	r2,r2,10992
1000ffd0:	10c00017 	ldw	r3,0(r2)
1000ffd4:	e0bffc17 	ldw	r2,-16(fp)
1000ffd8:	1880040e 	bge	r3,r2,1000ffec <alt_get_fd+0x94>
      {
        alt_max_fd = i;
1000ffdc:	00840074 	movhi	r2,4097
1000ffe0:	108abc04 	addi	r2,r2,10992
1000ffe4:	e0fffc17 	ldw	r3,-16(fp)
1000ffe8:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
1000ffec:	e0bffc17 	ldw	r2,-16(fp)
1000fff0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
1000fff4:	00000606 	br	10010010 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
1000fff8:	e0bffc17 	ldw	r2,-16(fp)
1000fffc:	10800044 	addi	r2,r2,1
10010000:	e0bffc15 	stw	r2,-16(fp)
10010004:	e0bffc17 	ldw	r2,-16(fp)
10010008:	10800810 	cmplti	r2,r2,32
1001000c:	103fdc1e 	bne	r2,zero,1000ff80 <__alt_data_end+0xf800ff80>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10010010:	e0bffd17 	ldw	r2,-12(fp)
}
10010014:	e6ffff04 	addi	sp,fp,-4
10010018:	dfc00217 	ldw	ra,8(sp)
1001001c:	df000117 	ldw	fp,4(sp)
10010020:	dc000017 	ldw	r16,0(sp)
10010024:	dec00304 	addi	sp,sp,12
10010028:	f800283a 	ret

1001002c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
1001002c:	defffe04 	addi	sp,sp,-8
10010030:	df000115 	stw	fp,4(sp)
10010034:	df000104 	addi	fp,sp,4
10010038:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
1001003c:	e0bfff17 	ldw	r2,-4(fp)
10010040:	10bffe84 	addi	r2,r2,-6
10010044:	10c00428 	cmpgeui	r3,r2,16
10010048:	18001a1e 	bne	r3,zero,100100b4 <alt_exception_cause_generated_bad_addr+0x88>
1001004c:	100690ba 	slli	r3,r2,2
10010050:	00840074 	movhi	r2,4097
10010054:	10801904 	addi	r2,r2,100
10010058:	1885883a 	add	r2,r3,r2
1001005c:	10800017 	ldw	r2,0(r2)
10010060:	1000683a 	jmp	r2
10010064:	100100a4 	muli	zero,r2,1026
10010068:	100100a4 	muli	zero,r2,1026
1001006c:	100100b4 	orhi	zero,r2,1026
10010070:	100100b4 	orhi	zero,r2,1026
10010074:	100100b4 	orhi	zero,r2,1026
10010078:	100100a4 	muli	zero,r2,1026
1001007c:	100100ac 	andhi	zero,r2,1026
10010080:	100100b4 	orhi	zero,r2,1026
10010084:	100100a4 	muli	zero,r2,1026
10010088:	100100a4 	muli	zero,r2,1026
1001008c:	100100b4 	orhi	zero,r2,1026
10010090:	100100a4 	muli	zero,r2,1026
10010094:	100100ac 	andhi	zero,r2,1026
10010098:	100100b4 	orhi	zero,r2,1026
1001009c:	100100b4 	orhi	zero,r2,1026
100100a0:	100100a4 	muli	zero,r2,1026
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
100100a4:	00800044 	movi	r2,1
100100a8:	00000306 	br	100100b8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
100100ac:	0005883a 	mov	r2,zero
100100b0:	00000106 	br	100100b8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
100100b4:	0005883a 	mov	r2,zero
  }
}
100100b8:	e037883a 	mov	sp,fp
100100bc:	df000017 	ldw	fp,0(sp)
100100c0:	dec00104 	addi	sp,sp,4
100100c4:	f800283a 	ret

100100c8 <atexit>:
100100c8:	200b883a 	mov	r5,r4
100100cc:	000d883a 	mov	r6,zero
100100d0:	0009883a 	mov	r4,zero
100100d4:	000f883a 	mov	r7,zero
100100d8:	00101901 	jmpi	10010190 <__register_exitproc>

100100dc <exit>:
100100dc:	defffe04 	addi	sp,sp,-8
100100e0:	000b883a 	mov	r5,zero
100100e4:	dc000015 	stw	r16,0(sp)
100100e8:	dfc00115 	stw	ra,4(sp)
100100ec:	2021883a 	mov	r16,r4
100100f0:	00102a40 	call	100102a4 <__call_exitprocs>
100100f4:	00840074 	movhi	r2,4097
100100f8:	108ab404 	addi	r2,r2,10960
100100fc:	11000017 	ldw	r4,0(r2)
10010100:	20800f17 	ldw	r2,60(r4)
10010104:	10000126 	beq	r2,zero,1001010c <exit+0x30>
10010108:	103ee83a 	callr	r2
1001010c:	8009883a 	mov	r4,r16
10010110:	00104380 	call	10010438 <_exit>

10010114 <memcmp>:
10010114:	01c000c4 	movi	r7,3
10010118:	3980192e 	bgeu	r7,r6,10010180 <memcmp+0x6c>
1001011c:	2144b03a 	or	r2,r4,r5
10010120:	11c4703a 	and	r2,r2,r7
10010124:	10000f26 	beq	r2,zero,10010164 <memcmp+0x50>
10010128:	20800003 	ldbu	r2,0(r4)
1001012c:	28c00003 	ldbu	r3,0(r5)
10010130:	10c0151e 	bne	r2,r3,10010188 <memcmp+0x74>
10010134:	31bfff84 	addi	r6,r6,-2
10010138:	01ffffc4 	movi	r7,-1
1001013c:	00000406 	br	10010150 <memcmp+0x3c>
10010140:	20800003 	ldbu	r2,0(r4)
10010144:	28c00003 	ldbu	r3,0(r5)
10010148:	31bfffc4 	addi	r6,r6,-1
1001014c:	10c00e1e 	bne	r2,r3,10010188 <memcmp+0x74>
10010150:	21000044 	addi	r4,r4,1
10010154:	29400044 	addi	r5,r5,1
10010158:	31fff91e 	bne	r6,r7,10010140 <__alt_data_end+0xf8010140>
1001015c:	0005883a 	mov	r2,zero
10010160:	f800283a 	ret
10010164:	20c00017 	ldw	r3,0(r4)
10010168:	28800017 	ldw	r2,0(r5)
1001016c:	1880041e 	bne	r3,r2,10010180 <memcmp+0x6c>
10010170:	31bfff04 	addi	r6,r6,-4
10010174:	21000104 	addi	r4,r4,4
10010178:	29400104 	addi	r5,r5,4
1001017c:	39bff936 	bltu	r7,r6,10010164 <__alt_data_end+0xf8010164>
10010180:	303fe91e 	bne	r6,zero,10010128 <__alt_data_end+0xf8010128>
10010184:	003ff506 	br	1001015c <__alt_data_end+0xf801015c>
10010188:	10c5c83a 	sub	r2,r2,r3
1001018c:	f800283a 	ret

10010190 <__register_exitproc>:
10010190:	00840074 	movhi	r2,4097
10010194:	defffa04 	addi	sp,sp,-24
10010198:	108ab404 	addi	r2,r2,10960
1001019c:	dc000315 	stw	r16,12(sp)
100101a0:	14000017 	ldw	r16,0(r2)
100101a4:	dc400415 	stw	r17,16(sp)
100101a8:	dfc00515 	stw	ra,20(sp)
100101ac:	80805217 	ldw	r2,328(r16)
100101b0:	2023883a 	mov	r17,r4
100101b4:	10003626 	beq	r2,zero,10010290 <__register_exitproc+0x100>
100101b8:	10c00117 	ldw	r3,4(r2)
100101bc:	010007c4 	movi	r4,31
100101c0:	20c00e16 	blt	r4,r3,100101fc <__register_exitproc+0x6c>
100101c4:	1a400044 	addi	r9,r3,1
100101c8:	8800211e 	bne	r17,zero,10010250 <__register_exitproc+0xc0>
100101cc:	18c00084 	addi	r3,r3,2
100101d0:	18c7883a 	add	r3,r3,r3
100101d4:	18c7883a 	add	r3,r3,r3
100101d8:	12400115 	stw	r9,4(r2)
100101dc:	10c7883a 	add	r3,r2,r3
100101e0:	19400015 	stw	r5,0(r3)
100101e4:	0005883a 	mov	r2,zero
100101e8:	dfc00517 	ldw	ra,20(sp)
100101ec:	dc400417 	ldw	r17,16(sp)
100101f0:	dc000317 	ldw	r16,12(sp)
100101f4:	dec00604 	addi	sp,sp,24
100101f8:	f800283a 	ret
100101fc:	00840034 	movhi	r2,4096
10010200:	1084ec04 	addi	r2,r2,5040
10010204:	10002526 	beq	r2,zero,1001029c <__register_exitproc+0x10c>
10010208:	01006404 	movi	r4,400
1001020c:	d9400015 	stw	r5,0(sp)
10010210:	d9800115 	stw	r6,4(sp)
10010214:	d9c00215 	stw	r7,8(sp)
10010218:	00013b00 	call	100013b0 <malloc>
1001021c:	d9400017 	ldw	r5,0(sp)
10010220:	d9800117 	ldw	r6,4(sp)
10010224:	d9c00217 	ldw	r7,8(sp)
10010228:	10001c26 	beq	r2,zero,1001029c <__register_exitproc+0x10c>
1001022c:	80c05217 	ldw	r3,328(r16)
10010230:	10000115 	stw	zero,4(r2)
10010234:	02400044 	movi	r9,1
10010238:	10c00015 	stw	r3,0(r2)
1001023c:	80805215 	stw	r2,328(r16)
10010240:	10006215 	stw	zero,392(r2)
10010244:	10006315 	stw	zero,396(r2)
10010248:	0007883a 	mov	r3,zero
1001024c:	883fdf26 	beq	r17,zero,100101cc <__alt_data_end+0xf80101cc>
10010250:	18d1883a 	add	r8,r3,r3
10010254:	4211883a 	add	r8,r8,r8
10010258:	1211883a 	add	r8,r2,r8
1001025c:	41802215 	stw	r6,136(r8)
10010260:	01000044 	movi	r4,1
10010264:	11806217 	ldw	r6,392(r2)
10010268:	20c8983a 	sll	r4,r4,r3
1001026c:	310cb03a 	or	r6,r6,r4
10010270:	11806215 	stw	r6,392(r2)
10010274:	41c04215 	stw	r7,264(r8)
10010278:	01800084 	movi	r6,2
1001027c:	89bfd31e 	bne	r17,r6,100101cc <__alt_data_end+0xf80101cc>
10010280:	11806317 	ldw	r6,396(r2)
10010284:	3108b03a 	or	r4,r6,r4
10010288:	11006315 	stw	r4,396(r2)
1001028c:	003fcf06 	br	100101cc <__alt_data_end+0xf80101cc>
10010290:	80805304 	addi	r2,r16,332
10010294:	80805215 	stw	r2,328(r16)
10010298:	003fc706 	br	100101b8 <__alt_data_end+0xf80101b8>
1001029c:	00bfffc4 	movi	r2,-1
100102a0:	003fd106 	br	100101e8 <__alt_data_end+0xf80101e8>

100102a4 <__call_exitprocs>:
100102a4:	00840074 	movhi	r2,4097
100102a8:	108ab404 	addi	r2,r2,10960
100102ac:	10800017 	ldw	r2,0(r2)
100102b0:	defff404 	addi	sp,sp,-48
100102b4:	dd800815 	stw	r22,32(sp)
100102b8:	d8800015 	stw	r2,0(sp)
100102bc:	10805204 	addi	r2,r2,328
100102c0:	dd000615 	stw	r20,24(sp)
100102c4:	dc800415 	stw	r18,16(sp)
100102c8:	dfc00b15 	stw	ra,44(sp)
100102cc:	df000a15 	stw	fp,40(sp)
100102d0:	ddc00915 	stw	r23,36(sp)
100102d4:	dd400715 	stw	r21,28(sp)
100102d8:	dcc00515 	stw	r19,20(sp)
100102dc:	dc400315 	stw	r17,12(sp)
100102e0:	dc000215 	stw	r16,8(sp)
100102e4:	2025883a 	mov	r18,r4
100102e8:	2829883a 	mov	r20,r5
100102ec:	d8800115 	stw	r2,4(sp)
100102f0:	05bfffc4 	movi	r22,-1
100102f4:	d8800017 	ldw	r2,0(sp)
100102f8:	14c05217 	ldw	r19,328(r2)
100102fc:	98001d26 	beq	r19,zero,10010374 <__call_exitprocs+0xd0>
10010300:	dd400117 	ldw	r21,4(sp)
10010304:	98800117 	ldw	r2,4(r19)
10010308:	173fffc4 	addi	fp,r2,-1
1001030c:	e0000d16 	blt	fp,zero,10010344 <__call_exitprocs+0xa0>
10010310:	14000044 	addi	r16,r2,1
10010314:	8421883a 	add	r16,r16,r16
10010318:	8421883a 	add	r16,r16,r16
1001031c:	84402004 	addi	r17,r16,128
10010320:	9c63883a 	add	r17,r19,r17
10010324:	9c21883a 	add	r16,r19,r16
10010328:	a0001e26 	beq	r20,zero,100103a4 <__call_exitprocs+0x100>
1001032c:	80804017 	ldw	r2,256(r16)
10010330:	15001c26 	beq	r2,r20,100103a4 <__call_exitprocs+0x100>
10010334:	e73fffc4 	addi	fp,fp,-1
10010338:	843fff04 	addi	r16,r16,-4
1001033c:	8c7fff04 	addi	r17,r17,-4
10010340:	e5bff91e 	bne	fp,r22,10010328 <__alt_data_end+0xf8010328>
10010344:	00840034 	movhi	r2,4096
10010348:	1084f104 	addi	r2,r2,5060
1001034c:	10000926 	beq	r2,zero,10010374 <__call_exitprocs+0xd0>
10010350:	98800117 	ldw	r2,4(r19)
10010354:	1000311e 	bne	r2,zero,1001041c <__call_exitprocs+0x178>
10010358:	98800017 	ldw	r2,0(r19)
1001035c:	10003426 	beq	r2,zero,10010430 <__call_exitprocs+0x18c>
10010360:	9809883a 	mov	r4,r19
10010364:	a8800015 	stw	r2,0(r21)
10010368:	00013c40 	call	100013c4 <free>
1001036c:	acc00017 	ldw	r19,0(r21)
10010370:	983fe41e 	bne	r19,zero,10010304 <__alt_data_end+0xf8010304>
10010374:	dfc00b17 	ldw	ra,44(sp)
10010378:	df000a17 	ldw	fp,40(sp)
1001037c:	ddc00917 	ldw	r23,36(sp)
10010380:	dd800817 	ldw	r22,32(sp)
10010384:	dd400717 	ldw	r21,28(sp)
10010388:	dd000617 	ldw	r20,24(sp)
1001038c:	dcc00517 	ldw	r19,20(sp)
10010390:	dc800417 	ldw	r18,16(sp)
10010394:	dc400317 	ldw	r17,12(sp)
10010398:	dc000217 	ldw	r16,8(sp)
1001039c:	dec00c04 	addi	sp,sp,48
100103a0:	f800283a 	ret
100103a4:	98800117 	ldw	r2,4(r19)
100103a8:	80c00017 	ldw	r3,0(r16)
100103ac:	10bfffc4 	addi	r2,r2,-1
100103b0:	17001526 	beq	r2,fp,10010408 <__call_exitprocs+0x164>
100103b4:	80000015 	stw	zero,0(r16)
100103b8:	183fde26 	beq	r3,zero,10010334 <__alt_data_end+0xf8010334>
100103bc:	00800044 	movi	r2,1
100103c0:	1708983a 	sll	r4,r2,fp
100103c4:	98806217 	ldw	r2,392(r19)
100103c8:	9dc00117 	ldw	r23,4(r19)
100103cc:	2084703a 	and	r2,r4,r2
100103d0:	1000061e 	bne	r2,zero,100103ec <__call_exitprocs+0x148>
100103d4:	183ee83a 	callr	r3
100103d8:	98800117 	ldw	r2,4(r19)
100103dc:	15ffc51e 	bne	r2,r23,100102f4 <__alt_data_end+0xf80102f4>
100103e0:	a8800017 	ldw	r2,0(r21)
100103e4:	14ffd326 	beq	r2,r19,10010334 <__alt_data_end+0xf8010334>
100103e8:	003fc206 	br	100102f4 <__alt_data_end+0xf80102f4>
100103ec:	98806317 	ldw	r2,396(r19)
100103f0:	2084703a 	and	r2,r4,r2
100103f4:	1000061e 	bne	r2,zero,10010410 <__call_exitprocs+0x16c>
100103f8:	89400017 	ldw	r5,0(r17)
100103fc:	9009883a 	mov	r4,r18
10010400:	183ee83a 	callr	r3
10010404:	003ff406 	br	100103d8 <__alt_data_end+0xf80103d8>
10010408:	9f000115 	stw	fp,4(r19)
1001040c:	003fea06 	br	100103b8 <__alt_data_end+0xf80103b8>
10010410:	89000017 	ldw	r4,0(r17)
10010414:	183ee83a 	callr	r3
10010418:	003fef06 	br	100103d8 <__alt_data_end+0xf80103d8>
1001041c:	98800017 	ldw	r2,0(r19)
10010420:	982b883a 	mov	r21,r19
10010424:	1027883a 	mov	r19,r2
10010428:	983fb61e 	bne	r19,zero,10010304 <__alt_data_end+0xf8010304>
1001042c:	003fd106 	br	10010374 <__alt_data_end+0xf8010374>
10010430:	0005883a 	mov	r2,zero
10010434:	003ffa06 	br	10010420 <__alt_data_end+0xf8010420>

10010438 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
10010438:	defffd04 	addi	sp,sp,-12
1001043c:	df000215 	stw	fp,8(sp)
10010440:	df000204 	addi	fp,sp,8
10010444:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
10010448:	0001883a 	nop
1001044c:	e0bfff17 	ldw	r2,-4(fp)
10010450:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
10010454:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
10010458:	10000226 	beq	r2,zero,10010464 <_exit+0x2c>
    ALT_SIM_FAIL();
1001045c:	002af070 	cmpltui	zero,zero,43969
10010460:	00000106 	br	10010468 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10010464:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10010468:	003fff06 	br	10010468 <__alt_data_end+0xf8010468>
